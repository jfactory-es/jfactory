{"version":3,"file":"jFactory.umd.js","sources":["../../src/jFactory-env.mjs","../../src/jFactory-helpers.mjs","../../src/jFactory-config.mjs","../../src/jFactory-compat.mjs","../../src/jFactory-bootstrap.mjs","../../src/lib/JFactoryTrace.mjs","../../src/lib/JFactoryError.mjs","../../src/lib/JFactoryExpect.mjs","../../src/lib/JFactoryObject.mjs","../../src/lib/JFactoryAbout.mjs","../../src/lib/JFactoryTraits.mjs","../../src/lib/JFactoryFunction.mjs","../../src/jFactory-traits.mjs","../../src/jFactory.mjs","../../src/lib/JFactoryLogger.mjs","../../src/lib/JFactoryPromise.mjs","../../src/lib/JFactoryEvents.mjs","../../src/lib/JFactoryTime.mjs","../../src/TraitsCore.mjs","../../src/lib/JFactoryFetch.mjs","../../src/TraitsComponents.mjs","../../src/lib/JFactoryComponents.mjs","../../src/index.mjs"],"sourcesContent":["/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory Env\n * -----------------------------------------------------------------------------------------------------------------\n * Contextualize jFactory for bundle, raw source or partial export usage\n * -----------------------------------------------------------------------------------------------------------------\n * JFACTORY_ENV_* are optional globals that allow contextualization at startup.\n * Bundler can replace some 'env(\"JFACTORY_ENV_*\")' with hard-coded primitives to improve tree shaking\n * See https://github.com/jfactory-es/jfactory/blob/master/docs/ref-overriding.md\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport const JFACTORY_NAME  = env(\"JFACTORY_ENV_NAME\") ?? \"jFactory\";\nexport const JFACTORY_VER   = env(\"JFACTORY_ENV_VER\") ?? \"(custom build)\";\nexport const JFACTORY_DEV   = env(\"JFACTORY_ENV_DEV\") ?? false; // Developer Mode\nexport const JFACTORY_MOD   = env(\"JFACTORY_ENV_MOD\") ?? \"raw\";\n\nexport const JFACTORY_CLI   = /*#__PURE__*/ env(\"JFACTORY_ENV_CLI\") ?? /*#__PURE__*/ isNode();\nexport const JFACTORY_REPL  = /*#__PURE__*/ env(\"JFACTORY_ENV_REPL\") ?? /*#__PURE__*/ isPlayground();\nexport const JFACTORY_LOG   = /*#__PURE__*/ env(\"JFACTORY_ENV_LOG\") ?? JFACTORY_DEV;\nexport const JFACTORY_TRACE = /*#__PURE__*/ env(\"JFACTORY_ENV_TRACE\") ?? JFACTORY_DEV;\nexport const JFACTORY_BOOT  = /*#__PURE__*/ env(\"JFACTORY_ENV_BOOT\") ?? true; // Boot jFactory at load\n\nfunction env(key) {\n    return globalThis[key]\n}\n\nfunction isNode() {\n    return (\n        typeof process === \"object\" &&\n        typeof process.versions === \"object\" &&\n        process.versions.node\n    )\n}\n\nfunction isPlayground() {\n    const hosts = [\n        \"cdpn.io\",\n        \"fiddle.jshell.net\",\n        \"null.jsbin.com\",\n        \"jsitor.com\",\n        \"jseditor.io\",\n        \"liveweave.com\",\n        \"run.plnkr.co\",\n        \"playcode.io\"\n    ];\n    try {\n        return hosts.indexOf(new URL(document.location.href).hostname) !== -1\n    } catch {}\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory Helpers\n * -----------------------------------------------------------------------------------------------------------------\n * Centralize helpers and externals in one module\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\n\n// --------------\n// jQuery\n// --------------\n\nexport { default as jQuery } from \"jquery\";\n\n// --------------\n// Lodash\n// --------------\n\n// Individual importation improves the tree shaking\n// This is supposed to be equivalent to babel-plugin-lodash\n\n// CAUTION\n// Please ensure that the bundler configuration is updated accordingly\n// to prevent unexpected build errors, see \"external\" in /scripts/build/rollup.config.cjs\n// export { default as helper_camelCase } from \"lodash/camelCase.js\";\n// export { default as helper_get } from \"lodash/get.js\";\n// export { default as helper_lowerFirst } from \"lodash/lowerFirst.js\";\nexport { default as helper_template } from \"lodash/template.js\";\nexport { default as helper_isString } from \"lodash/isString.js\";\nexport { default as helper_isNumber } from \"lodash/isNumber.js\";\nexport { default as helper_isPlainObject } from \"lodash/isPlainObject.js\";\nexport { default as helper_defaultsDeep } from \"lodash/defaultsDeep.js\";\n\nexport const helper_lowerFirst = str => str ? str[0].toLowerCase() + str.slice(1) : \"\";\n\nexport function helper_get(object, path) {\n    return path.split(\".\").reduce((acc, key) => acc?.[key], object);\n}\n\nexport function helper_camelCase(str) {\n    return str\n        .toLowerCase()                       // Met tout en minuscules\n        .replace(/[^a-zA-Z0-9]+(.)/g,\n            (match, chr) => chr.toUpperCase());\n}\n\n// import i_helper_camelCase from \"lodash/camelCase.js\";\n// import i_helper_get from \"lodash/get.js\";\n// import i_helper_lowerFirst from \"lodash/lowerFirst.js\";\n// import i_helper_template from \"lodash/template.js\";\n// import i_helper_isString from \"lodash/isString.js\";\n// import i_helper_isNumber from \"lodash/isNumber.js\";\n// import i_helper_isPlainObject from \"lodash/isPlainObject.js\";\n// import i_helper_defaultsDeep from \"lodash/defaultsDeep.js\";\n//\n// const helper_camelCase = i_helper_camelCase\n// const helper_get = i_helper_get\n// const helper_lowerFirst = i_helper_lowerFirst\n// const helper_template = i_helper_template\n// const helper_isString = i_helper_isString\n// const helper_isNumber = i_helper_isNumber\n// const helper_isPlainObject = i_helper_isPlainObject\n// const helper_defaultsDeep = i_helper_defaultsDeep\n//\n// export {\n//     helper_camelCase,\n//     helper_get,\n//     helper_lowerFirst,\n//     helper_template,\n//     helper_isString,\n//     helper_isNumber,\n//     helper_isPlainObject,\n//     helper_defaultsDeep\n// }\n\n// --------------\n// Helpers\n// --------------\n\nexport const NOOP = () => {};\nexport const helper_setFunctionName = (name, f) => Object.defineProperty(f, \"name\", { value: name });\nconst helper_url_base = typeof window !== \"undefined\" && window.location ? window.location.href : \"http://localhost\";\nexport const helper_url_abs = url => new URL(url, helper_url_base).href\n\nexport const helper_isNative = function(f) {\n    return typeof f === \"function\" && Function.prototype.toString.call(f).indexOf(\"[native code]\") !== -1\n}\n\nexport function helper_useragent(id) {\n    return globalThis.navigator &&\n    globalThis.navigator.userAgent &&\n    globalThis.navigator.userAgent.indexOf(id + \"/\") > 0\n}\n\nexport const helper_deferred = () => new Deferred;\nclass Deferred {\n    constructor() {\n        this._done = [];\n        this._fail = [];\n    }\n    execute(list) {\n        for (let h of list){\n            h()\n        }\n        this.fulfilled = true\n    }\n    resolve() {\n        this.execute(this._done);\n    }\n    reject() {\n        this.execute(this._fail);\n    }\n    done(callback) {\n        if (this.fulfilled) {\n            callback()\n        } else {\n            this._done.push(callback);\n        }\n    }\n    fail(callback) {\n        if (this.fulfilled) {\n            callback()\n        } else {\n            this._fail.push(callback);\n        }\n    }\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory Config\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\n\nconst JFACTORY_CFG = {};\nexport function jFactoryCfg(key, config) {\n    if (config !== undefined) {\n        if (JFACTORY_DEV) {\n            if (typeof config != \"object\" || config === null) {\n                throw \"argument config given to jFactoryCfg(key, config) must be an object\"\n            }\n        }\n        JFACTORY_CFG[key] = config\n    }\n    return JFACTORY_CFG[key] ??= {}\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory Compat\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport const JFACTORY_COMPAT_fetch = {\n    name: \"fetch\",\n    test: () => fetch,\n    info: \"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch\"\n}\nexport const JFACTORY_COMPAT_Request = {\n    name: \"Request\",\n    test: () => Request,\n    info: \"https://developer.mozilla.org/docs/Web/API/Request\"\n}\nexport const JFACTORY_COMPAT_AbortController = {\n    name: \"AbortController/AbortSignal\",\n    test: () => new AbortController().signal,\n    info: \"https://developer.mozilla.org/docs/Web/API/AbortController, \" +\n        \"https://developer.mozilla.org/docs/Web/API/AbortSignal\"\n}\nexport const JFACTORY_COMPAT_MutationObserver = {\n    name: \"MutationObserver\",\n    test: () => MutationObserver,\n    info: \"https://developer.mozilla.org/docs/Web/API/MutationObserver\"\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------------------------\n\nlet deferred = {};\n\nexport function jFactoryCompat_require(...args) {\n    for (let compat of args) {\n        deferred[compat.name] = compat\n    }\n}\n\nexport function jFactoryCompat_run(entries = deferred) {\n    for (let entry of Object.values(entries)) {\n        let pass;\n        try {pass = Boolean(entry.test())} catch (ignore) {}\n        if (!pass) {\n            let msg = `jFactory may require the support of \"${entry.name}\", ${entry.info}`;\n            entry.message && (msg += \"\\n\" + entry.message);\n            if (entry.strict) {\n                throw new Error(msg)\n            } else {\n                console.warn(msg)\n            }\n        }\n    }\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory Bootstrap\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport {\n    JFACTORY_BOOT,\n    JFACTORY_DEV,\n    JFACTORY_LOG,\n    JFACTORY_NAME,\n    JFACTORY_VER,\n    JFACTORY_MOD\n} from \"./jFactory-env.mjs\";\nimport { jFactoryCompat_run } from \"./jFactory-compat.mjs\";\n\nlet isLoaded = false;\nlet seq = [];\n\nexport function jFactoryBootstrap() {\n    if (!isLoaded) {\n        if (!JFACTORY_BOOT) {\n            // auto bootstrap is disabled by env\n            return\n        }\n        if (JFACTORY_DEV && JFACTORY_LOG !== 0) { // 0 => skip boot logs\n            console.log(`${JFACTORY_NAME} ${JFACTORY_VER} running in development mode. ` +\n                \"This incurs a performance overhead.\");\n            JFACTORY_MOD !== \"es\" && console.log(\"jFactoryBootstrap Warning:\" +\n                \" Consider using the ES module (jfactory/es or jfactory/es-devel) for tree-shaking.\");\n            !JFACTORY_LOG && console.log(\"jFactoryBootstrap Warning: Logs disabled by JFACTORY_LOG.\");\n            jFactoryCompat_run()\n        }\n        init();\n        isLoaded = true\n    }\n}\n\nfunction init() {\n    if (seq) {\n        for (let handler of seq) {\n            handler()\n        }\n        seq = null;\n    }\n}\n\nexport function jFactoryBootstrap_onBoot(handler) {\n    if (isLoaded) {\n        throw new Error(\"trying to set handler for jFactoryBootstrap() but already called:\\n\"\n            + handler.toString())\n    }\n    seq.push(handler)\n}\n\nexport function jFactoryBootstrap_expected() {\n    if (!isLoaded) {\n        throw new Error(\"jFactoryBootstrap() must be called before using jFactory\")\n    }\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryTrace\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta, HasSideEffects\n * -----------------------------------------------------------------------------------------------------------------\n * - #limitation# Error.stack is not standardized\n * - #limitation# Error.stack is not source-mapped\n * - #limitation# bug https://bugzilla.mozilla.org/show_bug.cgi?id=1584244\n * - #limitation# StackTrace.js resolves sourcemaps. Unfortunately, it doesn't work with \"webpack:\" protocol\n *   see https://github.com/stacktracejs/stacktrace.js/issues/209\n * -----------------------------------------------------------------------------------------------------------------\n * https://github.com/mozilla/source-map/\n * https://www.stacktracejs.com/\n * https://github.com/novocaine/sourcemapped-stacktrace\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV } from \"../jFactory-env.mjs\";\nimport { JFACTORY_TRACE } from \"../jFactory-env.mjs\";\nimport { NOOP, helper_useragent } from \"../jFactory-helpers.mjs\";\nimport { jFactoryCfg } from \"../jFactory-config.mjs\";\nimport { jFactoryBootstrap_onBoot } from \"../jFactory-bootstrap.mjs\";\n\nexport class JFactoryTrace {\n\n    constructor(omitAboveFunctionName = \"JFactoryTrace\", omitSelf = true, stackTraceLimit = Infinity) {\n        let _stackTraceLimit;\n        if (stackTraceLimit) {\n            _stackTraceLimit = Error.stackTraceLimit;\n            Error.stackTraceLimit = stackTraceLimit\n        }\n\n        this.source = new Error();\n        this.omitAboveFunctionName = omitAboveFunctionName;\n        this.omitSelf = omitSelf;\n\n        if (stackTraceLimit) {\n            Error.stackTraceLimit = _stackTraceLimit\n        }\n\n        this.init()\n    }\n\n    init() {\n        this.printable = this.source;\n        this.asyncPrintable = Promise.resolve(this.printable)\n    }\n\n    static createErrorFromStack(stack) {\n        let e = new Error();\n        e.name = \"JFactoryTrace\";\n        e.stack = stack;\n        return e\n    }\n}\n\nexport class JFactoryTrace_LIB_STACKTRACE extends JFactoryTrace {\n\n    init() {\n        let h = traceFrames => {\n            this.printable = this.constructor.createErrorFromStack(\n                this.createStackFromTraceFrames(\n                    this.filterTraceFrames(traceFrames)\n                )\n            )\n        }\n\n        h(StackTrace.getSync(this.source, CONFIG.libOptions));\n        if (CONFIG.useSourcemap) {\n            this.asyncPrintable = StackTrace.fromError(this.source, CONFIG.libOptions).then(h)\n        } else {\n            this.asyncPrintable = Promise.resolve(this.printable)\n        }\n    }\n\n    filterTraceFrames(traceFrames) {\n        if (this.omitAboveFunctionName) {\n            let slice = traceFrames.findIndex(\n                value => value.functionName && value.functionName.endsWith(this.omitAboveFunctionName)\n            );\n            if (slice > 0) {\n                if (this.omitSelf) {\n                    slice++\n                }\n                traceFrames = traceFrames.slice(slice);\n            }\n        }\n        return traceFrames\n    }\n\n    createStackFromTraceFrames(traceFrames) {\n        for (let formatter of Object.values(jFactoryTrace.formatters)) {\n            if (formatter.test()) {\n                return formatter.format(traceFrames)\n            }\n        }\n        return this.source.stack\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// jFactoryTrace\n// -----------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// -----------------------------------------------------------------------------------------------------------------\n\nlet tracer;\nif (JFACTORY_DEV && JFACTORY_TRACE) {\n\n    tracer = {\n\n        captureTraceSource(omitAboveFunctionName, omitSelf, stackTraceLimit) {\n            return new(CONFIG.tracer || JFactoryTrace)(omitAboveFunctionName, omitSelf, stackTraceLimit)\n        },\n\n        attachTrace(\n            targetObject, traceSource /* or omitAboveFunctionName */,\n            traceLogKey = CONFIG.keys[0], traceSourceKey = CONFIG.keys[1],\n            label = CONFIG.label\n        ) {\n            if (typeof traceSource !== \"object\") {\n                traceSource = this.captureTraceSource(traceSource || \"attachTrace\", !traceSource);\n            }\n\n            let log = () => console.log(traceSource.printable) || label || \"The stack has been printed in the console\";\n\n            Object.defineProperty(targetObject, traceLogKey, {\n                // hide the function body to improve readability in devtool\n                get: () => log()\n            });\n\n            Object.defineProperty(targetObject, traceSourceKey, {\n                value: traceSource\n            });\n        },\n\n        formatters: {\n\n            webkit: {\n                test() {\n                    return helper_useragent(\"Chrome\")\n                },\n                format(traceFrames) {\n                    // Chrome syntax\n                    // String must start with \"Error\" and parenthesis are important\n                    // => The console will convert the uri using sourcemaps\n                    return \"Error (generated by JFactoryTrace)\\n\" +\n                        traceFrames.map(sf => {\n                            let s = \"\\tat \";\n                            let uri = sf.fileName + \":\" + sf.lineNumber + \":\" + sf.columnNumber;\n                            if (sf.functionName) {\n                                s += sf.functionName + \" (\" + uri + \")\"\n                            } else {\n                                s += uri // no parenthesis\n                            }\n                            return s\n                        }).join(\"\\n\");\n                }\n            },\n\n            firefox: {\n                test() {\n                    return helper_useragent(\"Gecko\")\n                },\n                format(traceFrames) {\n                    // Firefox syntax\n                    return traceFrames.map(sf =>\n                        (sf.functionName ?? \"<anonymous>\")\n                            + \"@\" + sf.fileName + \":\" + sf.lineNumber + \":\" + sf.columnNumber\n                    ).join(\"\\n\");\n                }\n            }\n        }\n    }\n\n} else {\n\n    tracer = {\n        captureTraceSource: NOOP,\n        attachTrace: NOOP\n    };\n\n}\n\nexport const jFactoryTrace = tracer;\n\n// -----------------------------------------------------------------------------------------------------------------\n// Config JFactoryTrace\n// -----------------------------------------------------------------------------------------------------------------\n\nconst CONFIG = /*#__PURE__*/jFactoryCfg(\"JFactoryTrace\");\n\nif (JFACTORY_DEV && JFACTORY_TRACE) {\n    CONFIG.keys = [\"$dev_traceLog\", \"$dev_traceSource\"];\n    if (typeof StackTrace === \"object\") {\n        CONFIG.tracer = JFactoryTrace_LIB_STACKTRACE;\n        CONFIG.useSourcemap = false;\n    }\n    jFactoryBootstrap_onBoot(function() {\n        if (CONFIG.tracer === JFactoryTrace_LIB_STACKTRACE) {\n            console.log(\"JFactoryTrace: Stacktrace.js support enabled; performances will be affected\")\n        }\n    })\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryError\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { helper_get, helper_isNative, helper_lowerFirst, helper_template } from \"../jFactory-helpers.mjs\";\nimport { jFactoryCfg } from \"../jFactory-config.mjs\";\nimport { jFactoryTrace } from \"./JFactoryTrace.mjs\";\n\nexport class JFactoryError extends Error {\n    constructor(message = \"unspecified error\", data = null) {\n        data = Object.assign(Object.create(null), data);\n        message = JFactoryError.toPrintable(message, data);\n        super(message);\n        this.$data = Object.assign(Object.create(null), data);\n    }\n\n    toString() {\n        return this.message\n    }\n\n    * [Symbol.iterator]() {\n        yield this.message;\n        yield this.$data;\n    }\n\n    static getId(object) {\n        return object[CONFIG.keys.find(key => {\n            let val = helper_get(object, key);\n            return val || val === 0\n        })]\n    }\n\n    static toPrintableData(data) {\n        const templateData = {};\n        let nv;\n        for (let [key, val] of Object.entries(data)) {\n            switch (typeof val) {\n                case \"function\":\n                    val = val.name + \"()\";\n                    break;\n                case \"object\":\n                    if (val === null) {\n                        val = \"null\";\n                        break\n                    }\n                    if (val instanceof Error) {\n                        val = val.toString();\n                        break\n                    }\n                    if ((nv = JFactoryError.getId(val)) !== undefined) {\n                        val = '\"' + nv + '\"'\n                    } else {\n                        if (!helper_isNative(val.toString)) {\n                            val = val.toString()\n                        } else {\n                            try {\n                                nv = JSON.stringify(val);\n                                val = nv.length > CONFIG.jsonMax\n                                    ? nv.substring(0, CONFIG.jsonMax) + \"[...]\" : nv;\n                            } catch (e) {\n                                val = \"[object \" + val.constructor.name + \"]\"\n                            }\n                        }\n                    }\n                    break;\n                case \"string\":\n                    val = '\"' + val + '\"';\n                    break;\n                default:\n                    val = String(val)\n            }\n            templateData[key] = val\n        }\n        return templateData\n    }\n\n    static toPrintable(template, data) {\n        const templateMessage = [];\n        for (let part of template.split(\";\")) {\n            let placeholder;\n            let re = CONFIG.regPlaceholder\n            re.lastIndex = 0;\n            if ((placeholder = re.exec(part))) {\n                do {\n                    if (placeholder[1] && placeholder[1] in data) {\n                        templateMessage.push(part.trim());\n                        break\n                    }\n                } while ((placeholder = re.exec(part)) !== null)\n            } else {\n                templateMessage.push(part.trim());\n            }\n        }\n        return helper_lowerFirst(helper_template(templateMessage.join(\"; \"))(JFactoryError.toPrintableData(data)));\n    }\n\n    static factory(type, template) {\n        let ret = {\n            [type]: class extends JFactoryError {\n                constructor(data, traceSource) {\n                    super(template, data);\n                    jFactoryTrace.attachTrace(this.$data, traceSource);\n                }\n            }\n        }[type];\n\n        // Chrome automatically resolves sourcemap when logging errors\n        // but only if the error name starts with \"Error\"\n        ret.prototype.name = \"Error JFACTORY_ERR_\" + type;\n        return ret\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFACTORY_ERR_*\n// -----------------------------------------------------------------------------------------------------------------\n\nconst E = JFactoryError.factory;\n/* eslint-disable @stylistic/js/max-len */\nexport const JFACTORY_ERR_INVALID_VALUE = /*#__PURE__*/E(\"INVALID_VALUE\", \"invalid value for ${target}; Reason: ${reason}; Given: ${given}\");\nexport const JFACTORY_ERR_INVALID_CALL = /*#__PURE__*/E(\"INVALID_CALL\", \"invalid call ${target}; Reason: ${reason}; Owner: ${owner}\");\nexport const JFACTORY_ERR_PROMISE_EXPIRED = /*#__PURE__*/E(\"PROMISE_EXPIRED\", \"expired promise ${target}; Reason: ${reason}\");\nexport const JFACTORY_ERR_REQUEST_ERROR = /*#__PURE__*/E(\"REQUEST_ERROR\", \"error requesting ${target}; Reason: ${reason}; Owner: ${owner}\");\nexport const JFACTORY_ERR_KEY_DUPLICATED = /*#__PURE__*/E(\"KEY_DUPLICATED\", \"duplicated key for ${target}; Given: ${given}\");\nexport const JFACTORY_ERR_KEY_MISSING = /*#__PURE__*/E(\"KEY_MISSING\", \"missing key for ${target}; Given: ${given}\");\n/* eslint-enable @stylistic/js/max-len */\n\n// -----------------------------------------------------------------------------------------------------------------\n// Config JFactoryError\n// -----------------------------------------------------------------------------------------------------------------\n\nconst CONFIG = /*#__PURE__*/jFactoryCfg(\"JFactoryError\", {\n    regPlaceholder: /\\${([^}]+)}/g,\n    jsonMax: 40,\n    keys: [\"$.about.name\", \"$dev_name\", \"$name\", \"name\", \"id\"]\n})","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryExpect\n * -----------------------------------------------------------------------------------------------------------------\n * A small input/output validation tool\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta, HasSideEffects\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV } from \"../jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_VALUE } from \"./JFactoryError.mjs\";\nimport { helper_isNumber, helper_isPlainObject, helper_isString } from \"../jFactory-helpers.mjs\";\nimport { jFactoryBootstrap_onBoot } from \"../jFactory-bootstrap.mjs\";\nimport { jFactoryBootstrap_expected } from \"../jFactory-bootstrap.mjs\";\n\n/**\n * @return {*|JFactoryExpect}\n */\nexport function JFactoryExpect(label, value) {\n    JFACTORY_DEV && jFactoryBootstrap_expected();\n    if (new.target) {\n        this.label = label;\n        this.value = value;\n    } else {\n        return new JFactoryExpect(label, value)\n    }\n}\n\nconst error = function jFactoryThrow(label, value, message) {\n    throw new JFACTORY_ERR_INVALID_VALUE({\n        target: label,\n        reason: message,\n        given: value\n    })\n};\n\nconst staticMethods = {\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect\n     */\n    notUndefined(label, value) {\n        if (value === undefined) {\n            error(label, value, \"cannot be undefined\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect\n     */\n    notEmptyString(label, value) {\n        if (value === \"\") {\n            error(label, value, \"cannot be empty string\")\n        }\n        return true\n    },\n\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect\n     */\n    notFalsy(label, value) {\n        if (!value) {\n            error(label, value, 'cannot be a falsy value (undefined, null, NaN, 0, \"\")')\n        }\n        return true\n    },\n\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect\n     */\n    validSpaces(label, value) {\n        if (!value.replace || value.replace(/\\s+/g, \" \").trim() !== value) {\n            error(label, value, \"invalid space delimiters\")\n        }\n        return true\n    },\n\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect#\n     * @param {RegExp} reg\n     * @return JFactoryExpect\n     */\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect\n     */\n    matchReg(label, value, reg) {\n        if (!reg.test(value)) {\n            error(label, value, 'string \"' + value + '\" must match ' + reg)\n        }\n        return true\n    },\n\n    /**\n     * @method type\n     * @memberOf JFactoryExpect#\n     * @param {...*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method type\n     * @memberOf JFactoryExpect\n     */\n    type(label, value, ...expected) {\n        let name, ok = false;\n        for (let constructor of expected) {\n            if (constructor === null) {\n                name = \"Null\"\n            } else if (\"name\" in constructor) {\n                name = constructor.name\n            }\n            let test = staticMethods[\"type\" + name];\n            if (test) {\n                try {ok = test(label, value/*, e*/)} catch (e) {}\n            } else {\n                ok = value instanceof constructor\n            }\n            if (ok) break\n        }\n        if (!ok) {\n            error(label, value, \"must be an instance of [\" + expected.map(e => e.name).join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect\n     */\n    typeNull(label, value) {\n        if (value !== null) {\n            error(label, value, \"must be null\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect\n     */\n    typeBoolean(label, value) {\n        if (value !== true && value !== false) {\n            error(label, value, \"must be a boolean\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect\n     */\n    typeString(label, value) {\n        if (!helper_isString(value)) {\n            error(label, value, \"must be a string\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect\n     */\n    typeNumber(label, value) {\n        if (!helper_isNumber(value)) {\n            error(label, value, \"must be a number\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect\n     */\n    typeFunction(label, value) {\n        if (!(typeof value === \"function\")) {\n            error(label, value, \"must be a function\")\n        }\n        return true\n    },\n\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect\n     */\n    typePlainObject(label, value) {\n        if (!helper_isPlainObject(value)) {\n            error(label, value, \"must be a plain object\")\n        }\n        return true\n    },\n\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect#\n     * @param {*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect\n     */\n    equal(label, value, ...expected) {\n        let ok = false;\n        for (let e of expected) {\n            if ((ok = value === e)) break\n        }\n        if (!ok) {\n            error(label, value, \"must be one of [\" + expected + \"]\")\n        }\n        return true;\n    },\n\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect#\n     * @param {Array|Object} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect\n     */\n    equalIn(label, value, expected) {\n        if (!Array.isArray(expected)) {\n            expected = Object.values(expected)\n        }\n        if (!expected.includes(value)) {\n            error(label, value, \"must be one from [\" + expected.join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect#\n     * @param {Array} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect\n     */\n    properties(label, value, expected) {\n        for (let name of Object.getOwnPropertyNames(value)) {\n            JFactoryExpect(label + ', property name \"' + name + '\"', name).equalIn(expected)\n        }\n        return true\n    },\n\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect\n     */\n    writable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect\n     */\n    notWritable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must not be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect\n     */\n    enumerable(label, value, key) {\n        if (!Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect\n     */\n    notEnumerable(label, value, key) {\n        if (Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must not be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect\n     */\n    configurable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect\n     */\n    notConfigurable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must not be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect\n     */\n    reservedProperty(label, value, key) {\n        if (key in value) {\n            error(label, value, \"is a reserved property\")\n        }\n        return true\n    }\n};\n\njFactoryBootstrap_onBoot(function() {\n    Object.assign(JFactoryExpect, staticMethods);\n    // Generate members from static methods\n    for (const name of Object.getOwnPropertyNames(staticMethods)) {\n        JFactoryExpect.prototype[name] =\n            function callStatic(...args) {\n                JFactoryExpect[name](this.label, this.value, ...args);\n                return this\n            }\n    }\n});","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryObject\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta, HasSideEffects\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { jFactoryBootstrap_onBoot } from \"../jFactory-bootstrap.mjs\";\n\nexport class JFactoryObject {\n\n    static createDescriptors(descriptorPrototype = JFactoryObject.DESCRIPTORS_PROTOTYPE) {\n        let create = JFactoryObject.create(descriptorPrototype, true, true);\n        let o = Object.create(null);\n\n        o.NONE = create();\n\n        o.WRITABLE     = create({ writable: true });\n        o.ENUMERABLE   = create({ enumerable: true });\n        o.CONFIGURABLE = create({ configurable: true });\n\n        o.CONFIGURABLE_WRITABLE   =\n        o.WRITABLE_CONFIGURABLE   = create({ writable: true, configurable: true });\n\n        o.CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE = create({ enumerable: true, configurable: true });\n\n        o.ENUMERABLE_WRITABLE     =\n        o.WRITABLE_ENUMERABLE     = create({ writable: true, enumerable: true });\n\n        o.WRITABLE_ENUMERABLE_CONFIGURABLE =\n        o.WRITABLE_CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE_WRITABLE =\n        o.ENUMERABLE_WRITABLE_CONFIGURABLE =\n        o.CONFIGURABLE_WRITABLE_ENUMERABLE =\n        o.CONFIGURABLE_ENUMERABLE_WRITABLE = create({ writable: true, enumerable: true, configurable: true });\n\n        // Shortcuts\n        o.READONLY = create({ writable: false, enumerable: false, configurable: false });\n\n        return o\n    }\n\n    /**\n     * @example\n     * assign(obj, 'myProperty', 123, {writable:false})\n     * assign(obj, {a:1, b:2}', {writable:false})\n     *\n     * deprecated\n     * assign(obj, 'myProperty', {value:\"ok\", writable:false}) => not strict\n     * assign(obj, 'myProperty', 123) => use native instead\n     * assign(obj, {a:1, b:2}) => use native instead\n     */\n    static assign(target, property, value, descriptor) {\n        let descriptors = {};\n\n        switch (typeof property) {\n\n            case \"string\":\n            case \"symbol\":\n\n                // ------------------------------------------------\n                // assign(obj, 'myProperty', 123, {writable:false})\n                // ------------------------------------------------\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                descriptor = Object.create(descriptor); // avoid descriptor corruption\n                descriptor.value = value;\n\n                Object.defineProperty(target, property, descriptor);\n\n                break;\n\n            case \"object\":\n\n                // ------------------------------------------------\n                // assign(obj, {a:1, b:2}', {writable:false})\n                // ------------------------------------------------\n\n                [value, descriptor] = [property, value];\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                for (let name of Object.getOwnPropertyNames(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n                for (let name of Object.getOwnPropertySymbols(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n\n                Object.defineProperties(target, descriptors);\n\n                break;\n\n            default:\n                throw new Error(\"invalid property argument\")\n        }\n\n        return target\n    }\n\n    static create(prototype, flat = false, disinherit = false) {\n        return function create(properties) {\n            if (flat) {\n                return Object.assign(disinherit ? Object.create(null) : {}, prototype, properties)\n            } else {\n                return Object.assign(Object.create(\n                    disinherit ? Object.assign(Object.create(null), prototype) : prototype\n                ), properties)\n            }\n        }\n    }\n\n    static disinherit(object) {\n        return Object.assign(Object.create(null), object);\n    }\n}\n\nJFactoryObject.DESCRIPTORS_PROTOTYPE = { writable: false, enumerable: false, configurable: false };\n\njFactoryBootstrap_onBoot(function() {\n    JFactoryObject.descriptors = JFactoryObject.createDescriptors()\n});","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryAbout\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV } from \"../jFactory-env.mjs\";\nimport { helper_camelCase } from \"../jFactory-helpers.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { JFactoryObject } from \"./JFactoryObject.mjs\";\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\nexport class JFactoryAbout {\n    constructor(owner, about = {}) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout(owner)\", owner).type(Object);\n            JFactoryExpect(\"JFactoryAbout(about)\", about)\n                .typePlainObject()\n                .reservedProperty(\"uid\")\n                .reservedProperty(\"fingerprint\");\n            if (\"name\" in about) {\n                JFactoryExpect(\"JFactoryAbout(about.name)\", about.name)\n                    .typeString()\n                    .notEmptyString()\n            }\n        }\n\n        let name;\n        let fingerprint;\n        let uid = moduleGenId();\n\n        if (about.name) {\n            name = about.name;\n            delete about.name;\n            fingerprint = \"jFactory\" + \"_\" + helper_camelCase(name.toLowerCase()) + \"_\" + uid\n        } else {\n            delete about.name;\n            name = `[${owner.constructor.name}#${uid}]`;\n            fingerprint = \"jFactory\" + \"_\" + owner.constructor.name + \"_\" + uid;\n        }\n\n        JFactoryObject.assign(this, /** @lends JFactoryAbout# */ {\n            uid,\n            name,\n            fingerprint\n        }, JFactoryObject.descriptors.ENUMERABLE);\n\n        Object.assign(this, about);\n\n        // ---\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout.name\", this.name)\n                .matchReg(/^[\\w[\\]#]+$/);\n            JFactoryExpect(\"JFactoryAbout.fingerprint\", this.fingerprint)\n                .matchReg(/^[\\w]+$/);\n        }\n    }\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryTraits\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV, JFACTORY_LOG } from \"../jFactory-env.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\n\nexport class JFactoryTraits {\n    /**\n     * @param {JFactoryCoreObject|Object} callerInstance\n     * @param {Class|Function} callerConstructor\n     * @param options\n     */\n    constructor(callerInstance, callerConstructor, options = {}) {\n        /**\n         * @type {JFactoryCoreObject}\n         */\n        this.callerInstance = callerInstance;\n\n        /**\n         * @type {Class|Function}\n         */\n        this.callerConstructor = callerConstructor;\n\n        /**\n         * @type {Object}\n         */\n        this.options = options;\n    }\n\n    use(trait, ...traitArgs) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryTraits(trait)\", trait).typeFunction();\n        }\n\n        // callerConstructor is not always the callerInstance.constructor:\n        // The Trait can be injected in an inherited constructor from super() at call time\n        let { callerInstance, callerConstructor } = this;\n\n        // Detect improper duplication (can be a trait already called by a super class)\n        let cache = JFactoryTraits.CACHE.get(callerInstance);\n\n        if (cache) {\n            if (cache.has(trait)) {\n                if (JFACTORY_LOG) {\n                    console.warn(`${trait.name} already called on`, callerInstance);\n                }\n                return this;\n            } else {\n                cache.add(trait)\n            }\n        } else {\n            JFactoryTraits.CACHE.set(callerInstance, new WeakSet([trait]))\n        }\n\n        !callerConstructor.JFactoryTrait && (callerConstructor.JFactoryTrait = new WeakSet);\n\n        if (!callerConstructor.JFactoryTrait.has(trait)) {\n            callerConstructor.JFactoryTrait.add(trait);\n            this.export(trait.prototype, callerConstructor.prototype);\n            this.export(trait, callerConstructor, true);\n        }\n\n        // In a Trait.constructor(callerInstance, ...args) : this != callerInstance\n        // In a Trait.trait_constructor(...args) : this == callerInstance (traits is injected and available)\n\n        // Traits are injections. They are not dynamic inheritance.\n        // So the Trait.constructor() doesn't share the \"this\" keyword with its caller.\n\n        // #limitation# No way to bind an ES6 class constructor to an object\n        // => Implementer can define a \"trait_constructor()\" that is automatically bound to \"callerInstance\"\n        // and called after the native trait constructor().\n\n        let traitInstance = new trait(callerInstance, ...traitArgs);\n        if (traitInstance.trait_constructor) {\n            traitInstance.trait_constructor.apply(callerInstance, traitArgs)\n        }\n        return this\n    }\n\n    export(source, target, isStatic) {\n        let sourceDescriptor = Object.getOwnPropertyDescriptors(source);\n\n        for (let propertyName of Object.keys(sourceDescriptor)) {\n            let prefix = JFactoryTraits.getPrefix(propertyName);\n\n            if (JFactoryTraits.getTarget(propertyName, target, prefix)) {\n                let propertyDescriptor = sourceDescriptor[propertyName];\n                let parsed = (this.options.parser || JFactoryTraits.defaultParser)(\n                    propertyName, propertyDescriptor, source, target, isStatic\n                );\n                if (parsed) {\n                    ({ propertyName, propertyDescriptor } = parsed);\n                    Object.defineProperty(target, propertyName, propertyDescriptor);\n                }\n            }\n        }\n    }\n\n    static defaultParser(propertyName, propertyDescriptor, source, target, isStatic) {\n        let value = propertyDescriptor.value;\n\n        if (isStatic) {return null} // don't export static members\n\n        if (propertyName in target) { // skip existing properties\n            if (JFACTORY_LOG) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of existing property \"${propertyName}\"`,\n                    value);\n            }\n            return null\n        }\n\n        if (typeof value === \"object\") { // prevent shared object exportation\n            if (JFACTORY_LOG) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of shared object \"${propertyName}\"`,\n                    value);\n            }\n            return null;\n        }\n\n        return { propertyName, propertyDescriptor }\n    }\n\n    static getPrefix(key) {\n        let split = key.split(\"_\");\n        return split.length > 1 ? split[0] : null;\n    }\n\n    static getTarget(key, target, prefix) {\n        if (\n            JFactoryTraits.EXCLUDES.includes(key) ||\n            prefix === \"trait\"\n        ) {\n            return null\n        }\n\n        return target\n    }\n}\n\nJFactoryTraits.CACHE = new WeakMap;\nJFactoryTraits.EXCLUDES = [\"constructor\", \"prototype\", \"length\", \"size\"];","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryFunction\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV, JFACTORY_LOG } from \"../jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_CALL } from \"./JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { helper_setFunctionName } from \"../jFactory-helpers.mjs\";\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionComposer\n// -----------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFunctionComposer {\n\n    constructor() {\n        this.handlers = Object.create(null);\n    }\n\n    * [Symbol.iterator](handlerGroups = []) {\n\n        if (!handlerGroups.length) {\n            handlerGroups = Object.keys(this.handlers)\n        }\n        if (!handlerGroups.length) {\n            handlerGroups = [\"default\"]\n        }\n\n        for (let handlerGroup of handlerGroups) {\n            if (handlerGroup in this.handlers) {\n                yield* this.handlers[handlerGroup]\n            }\n        }\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    first(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).unshift(handler);\n        return this\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    last(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).push(handler);\n        return this\n    }\n\n    /** @return {(function(): *) & {composer: JFactoryFunctionComposer}} */\n    compose(...handlerGroups) {\n        let composer = this;\n        let composite = function() {\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            //                                                //\n            //                wrapped function                //\n            //                                                //\n            //    You should Blackbox JFactoryFunction.mjs    //\n            //    to simplify debugging                       //\n            //                                                //\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            let context = {\n                canceled: false,\n                parameters: Array.from(arguments),\n                result: undefined\n            };\n            let iterator = composer[Symbol.iterator](handlerGroups);\n            let iteration = iterator.next();\n            return JFactoryFunctionComposer.composite_iterator(\n                this /* preserve call scope */, context, iteration, iterator)\n        };\n        composite.composer = composer;\n        return composite;\n    }\n\n    // SPEC: Composite functions returns promise *only* if at least\n    // one handler returns a promise (async function or promise return)\n    // So we cannot just iterate using an \"await for of\"\n    static composite_iterator(scope, context, iteration, handlers) {\n        let handler,\n            result;\n\n        while (!context.canceled && !iteration.done) {\n            handler = iteration.value;\n            if (scope) {\n                result = handler.call(scope, context, ...context.parameters)\n            } else {\n                result = handler(context, ...context.parameters)\n            }\n            iteration = handlers.next(); // prepares next iteration to know if \"done\"\n            if (result instanceof Promise) {\n                if (iteration.done\n                    // case of last handler returning a promise\n                    // #limitation# now way to detect if the promise is the returned value or an \"await\"\n                    // (we don't want to change the value of context.result during a pending handler)\n                    // => native Promise are always chained\n                    && result.constructor !== Promise) {\n                    context.result = result // we can safely set the new result\n                } else {\n                    return result.then(helper_setFunctionName(\n                        [handler.name, \"[compositeAsyncHandler]\"].filter(Boolean).join(\" \"),\n                        function(value) {\n                            context.result = value;\n                            return JFactoryFunctionComposer.composite_iterator(scope, context, iteration, handlers)\n                        })\n                    )\n                }\n            } else {\n                context.result = result\n            }\n        }\n        return context.result\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionExpirable - Expirable Function Pattern\n// -----------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionExpirable(originalHandler) {\n    return new JFactoryFunctionExpirable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionExpirable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.expiredCalls = 0;\n        this.composer = new JFactoryFunctionComposer;\n\n        let isExpired = this.composer.compose(\"conditions\");\n        let expirable = this;\n        let expired;\n\n        // cannot use a real accessor here (conditions can be scoped, so isExpired too)\n        this.isExpired = scope => expired || isExpired.call(scope) || false;\n        this.setExpired = value => expired = value ?\n            value instanceof Error ? value : new JFACTORY_ERR_INVALID_CALL({\n                target: this.originalHandler,\n                reason: \"manually expired\"\n            }) : Boolean(this.expiredCalls = 0);\n\n        this.addExpireCondition = function(condition) {\n            this.composer.last(\"conditions\", function(context) {\n                let done = function(result) {\n                    if (JFACTORY_DEV) {\n                        JFactoryExpect(\"JFactoryFunctionExpirable.addExpireCondition(), result\", result)\n                            .type(Boolean, Error)\n                    }\n                    return expirable.setExpired(result ?\n                        (context.canceled = true) &&\n                        (result instanceof Error ?\n                            result :\n                            new JFACTORY_ERR_INVALID_CALL({\n                                target: expirable.originalHandler,\n                                reason: \"conditionally expired\",\n                                condition\n                            })\n                        ) : false\n                    )\n                };\n                let result = condition.apply(this, context.parameters);\n                return result instanceof Promise ? result.then(done) : done(result);\n            })\n        };\n    }\n\n    compose() {\n        let expirable = this;\n        let composite = function() {\n            let isExpired = expirable.isExpired(this);\n            let call = expirable.constructor.call.bind(undefined, expirable, this, arguments);\n            return isExpired instanceof Promise ? isExpired.then(call) : call(isExpired);\n        };\n        return Object.assign(composite, {\n            expirable: this,\n            isExpired: f => this.isExpired(f),\n            setExpired: f => this.setExpired(f),\n            addExpireCondition: f => {this.addExpireCondition(f); return composite}\n        });\n    }\n\n    static call(expirable, scope, args, isExpired) {\n        return isExpired ? expirable.onExpired(isExpired) : expirable.onNotExpired(scope, args);\n    }\n\n    onExpired(expired) {\n        if (this.expiredCalls < JFactoryFunctionExpirable.MaxWarningExpiration) {\n            this.expiredCalls++;\n            if (JFACTORY_LOG) {\n                console.warn(...new JFACTORY_ERR_INVALID_CALL({\n                    ...expired.$data,\n                    reason: expired.$data.reason\n                        + \"; expiredCalls=\"\n                        + this.expiredCalls\n                        + (this.expiredCalls === JFactoryFunctionExpirable.MaxWarningExpiration\n                            ? \"; Max Warning Exceeded\" : \"\")\n                }));\n            }\n        }\n        return expired\n    }\n\n    onNotExpired(scope, args) {\n        return this.originalHandler.apply(scope, args)\n    }\n}\n\nJFactoryFunctionExpirable.MaxWarningExpiration = 10;\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionConditional - Conditional Function Pattern\n// -----------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionConditional(originalHandler) {\n    return new JFactoryFunctionConditional(originalHandler).compose()\n}\n\nexport class JFactoryFunctionConditional {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", helper_setFunctionName(\n            [originalHandler.name, \"[condition]\"].filter(Boolean).join(\" \"),\n            function(context) {\n                return originalHandler.apply(this, context.parameters);\n            })\n        );\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"conditions\", \"original\");\n        return Object.assign(composite, {\n            conditional: this,\n            addCondition: f => {this.addCondition(f); return composite}\n        });\n    }\n\n    addCondition(condition) {\n        this.composer.last(\"conditions\", function(context) {\n            let handle = function(result) {\n                if (JFACTORY_DEV) {\n                    JFactoryExpect(\"JFactoryFunctionConditional.addCondition(), result\", result)\n                        .typeBoolean();\n                }\n                !result && (context.canceled = true);\n            };\n            let result = condition.apply(this, context.parameters);\n            return result instanceof Promise ? result.then(handle) : handle(result);\n        })\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionWrappable - Wrappable Function Pattern\n// -----------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionWrappable(originalHandler) {\n    return new JFactoryFunctionWrappable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionWrappable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", helper_setFunctionName(\n            [originalHandler.name, \"[wrapped]\"].filter(Boolean).join(\" \"),\n            function(context) {\n                return originalHandler.apply(this, context.parameters);\n            })\n        );\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"before\", \"original\", \"after\");\n        return Object.assign(composite, {\n            wrappable: this,\n            beforeAll: f => {this.beforeAll(f); return composite},\n            justBefore: f => {this.justBefore(f); return composite},\n            justAfter: f => {this.justAfter(f); return composite},\n            afterAll: f => {this.afterAll(f); return composite}\n        });\n    }\n\n    beforeAll(handler) {\n        this.composer.first(\"before\", handler);\n    }\n\n    justBefore(handler) {\n        this.composer.last(\"before\", handler);\n    }\n\n    justAfter(handler) {\n        this.composer.first(\"after\", handler);\n    }\n\n    afterAll(handler) {\n        this.composer.last(\"after\", handler);\n    }\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory Traits\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_ERR_INVALID_CALL } from \"./lib/JFactoryError.mjs\";\nimport { JFactoryTraits } from \"./lib/JFactoryTraits.mjs\";\nimport { jFactoryFunctionWrappable } from \"./lib/JFactoryFunction.mjs\";\n\nexport function jFactoryTraits(callerInstance, callerConstructor) {\n    return new JFactoryTraits(callerInstance, callerConstructor, {\n\n        parser(propertyName, propertyDescriptor/*, source, target, isStatic */) {\n            let parsed = JFactoryTraits.defaultParser(...arguments);\n\n            if (parsed) {\n                ({ propertyName, propertyDescriptor } = parsed);\n\n                let value = propertyDescriptor.value;\n                if (typeof value === \"function\") {\n                    switch (value.name) {\n                        case \"$install\":\n                        case \"$uninstall\":\n                        case \"$enable\":\n                        case \"$disable\":\n                        case \"$state\":\n                            break;\n                        default:\n                            propertyDescriptor.value = jFactoryFunctionWrappable(value)\n                                .beforeAll(function() {\n                                    if (!this.$.states.enabled && this.$.service.phase === \"PHASE_NONE\") {\n                                        let e = new JFACTORY_ERR_INVALID_CALL({\n                                            owner: this,\n                                            target: value,\n                                            reason: \"component disabled\"\n                                        });\n                                        this.$logErr(...e);\n                                        throw e\n                                    }\n                                })\n                    }\n                }\n\n                return { propertyName, propertyDescriptor }\n            }\n        }\n    })\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { jFactoryCfg } from \"./jFactory-config.mjs\";\n\nexport const jFactory = function(name, properties) {\n    return Object.assign(new (jFactoryCfg('jFactory').baseComponent)(name), properties);\n};","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryLogger\n * -----------------------------------------------------------------------------------------------------------------\n * A contextual logger that prepends a label and allows runtime filtering while preserving the caller line number\n * -----------------------------------------------------------------------------------------------------------------\n * logger.createSubLogger(label) create a sub-logger of logger; \"logger\" can be a sub-logger.\n * logger.disable() disable console for itself and sub-loggers\n * logger.disallow('log') disallow logger.log() only\n * logger.disallow('log', subLogger.label) disallow sub-logger.log() only. This is callable from any logger/sub-logger\n * -----------------------------------------------------------------------------------------------------------------\n * Status : Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV, JFACTORY_CLI, JFACTORY_REPL } from \"../jFactory-env.mjs\";\nimport { jFactoryCfg } from \"../jFactory-config.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { helper_defaultsDeep, helper_isNative, NOOP } from \"../jFactory-helpers.mjs\";\n\nconst SYMBOL_ENABLED = Symbol();\n\nexport class JFactoryLogger {\n\n    constructor(options) {\n        if (JFACTORY_DEV && options) {\n            JFactoryExpect(\"JFactoryLogger(options)\", options)\n                .properties(Object.getOwnPropertyNames(JFactoryLogger.DEFAULT_CONFIG))\n        }\n        helper_defaultsDeep(this, options, CONFIG);\n        this.installAccessor(\"log\");\n        this.installAccessor(\"warn\");\n        this.installAccessor(\"error\")\n    }\n\n    get enabled() {\n        return this[SYMBOL_ENABLED] && (this.parentLogger ? this.parentLogger.enabled : true)\n    }\n\n    set enabled(v) {\n        v ? this.enable() : this.disable()\n    }\n\n    enable() {\n        if (this[SYMBOL_ENABLED] !== true) {\n            this[SYMBOL_ENABLED] = true;\n        }\n    }\n\n    disable() {\n        if (this[SYMBOL_ENABLED] !== false) {\n            this[SYMBOL_ENABLED] = false;\n        }\n    }\n\n    disallow(nativeName, label = this.label) {\n        if (!this.filters[label]) {this.filters[label] = {}}\n        this.filters[label][nativeName] = true\n    }\n\n    allow(nativeName, label = this.label) {\n        if (this.filters[label]) {\n            delete this.filters[label][nativeName]\n        }\n    }\n\n    installAccessor(nativeName, targetName = nativeName, target = this) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryLogger(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        }\n        Object.defineProperties(target, {\n            [targetName]: {\n                get: this.accessor.bind(this, nativeName/*, target*/),\n                configurable: true\n            }\n        })\n    }\n\n    accessor(nativeName/*, target*/) {\n        if (!this[SYMBOL_ENABLED]) {\n            return NOOP;\n        }\n        return this.condition(nativeName) && this.formatter[nativeName](this) || NOOP\n    }\n\n    createSubLogger(label) {\n        /** @type JFactoryLogger */\n        let sub = new JFactoryLogger({\n            enabled: this.enabled,\n            label: this.label + \".\" + label,\n            styles_css: this.styles_css,\n            styles_cli: this.styles_cli,\n            console: this.console,\n            formatter: this.formatter\n        });\n        sub.parentLogger = this;\n        sub.condition.addCondition(() => this.enabled);\n        sub.filters = this.filters; // shared to allow/disallow from anywhere\n        return sub\n    }\n}\n\n// #limitation# To preserve the line number, we can only use native functions, like bind\n// #limitation# Because we use bind(), only the style of the first element can be defined efficiently\n\nJFactoryLogger.FORMATTER_NATIVE = {\n    log: logger => logger.console.log.bind(logger.console, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_CLI = {\n    log: logger => logger.console.log.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.styles_cli.label, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_BROWSER = {\n    log: logger => logger.console.log.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    warn: logger => logger.console.warn.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    error: logger => logger.console.error.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label)\n};\n\n/** @return {boolean} */\nJFactoryLogger.DEFAULT_CONDITION = function(nativeName) {\n    if (JFACTORY_DEV) {\n        JFactoryExpect(\"JFactoryLogger.condition(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        JFactoryExpect(\"JFactoryLogger.enabled\", this.enabled).equal(true);\n    }\n    return !(this.filters[this.label] && this.filters[this.label][nativeName])\n};\n\nJFactoryLogger.DEFAULT_CONFIG = /** @lends JFactoryLogger# */ {\n    label: \"\",\n    enabled: true,\n    parentLogger: null,\n    condition: JFactoryLogger.DEFAULT_CONDITION,\n    formatter:\n        !helper_isNative(console.log) || JFACTORY_REPL ? JFactoryLogger.FORMATTER_NATIVE :\n            JFACTORY_CLI ? JFactoryLogger.FORMATTER_CLI :\n                JFactoryLogger.FORMATTER_BROWSER\n    ,\n    console,\n    filters: {\n    },\n    styles_cli: {\n        label: \"\\x1b[1;30m%s\\x1b[0m\"\n    },\n    styles_css: {\n        label: \"color: gray\"\n    }\n};\n\n// -----------------------------------------------------------------------------------------------------------------\n// Config JFactoryLogger\n// -----------------------------------------------------------------------------------------------------------------\n\nconst CONFIG = /*#__PURE__*/jFactoryCfg(\"JFactoryLogger\", JFactoryLogger.DEFAULT_CONFIG);","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryPromise\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV } from \"../jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_CALL, JFACTORY_ERR_PROMISE_EXPIRED } from \"./JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { jFactoryTrace } from \"./JFactoryTrace.mjs\";\nimport { helper_isNative } from \"../jFactory-helpers.mjs\";\nimport { helper_deferred } from \"../jFactory-helpers.mjs\";\nimport { jFactoryBootstrap_expected } from \"../jFactory-bootstrap.mjs\";\nimport { jFactoryCfg } from \"../jFactory-config.mjs\";\n\n// #limitation# async functions always use the native Promise constructor even if native Promise class is overridden\n// #limitation# async functions always returns a native Promise even if returning an extended Promise\n// #limitation# async functions always returns a pending Promise even if returning a resolved Promise\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryPromise\n// -----------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromise extends Promise {\n\n    constructor({ name, config, traceSource }, executor) {\n        JFACTORY_DEV && jFactoryBootstrap_expected();\n\n        if (arguments.length === 1) {\n            [name, config, executor] = [null, null, arguments[0]]\n        }\n\n        const chainId = moduleGenId();\n        config = { ...CONFIG, ...config };\n        name = name || \"unnamed\";\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"name\", name)\n                .type(String, Number)\n                .matchReg(/^[^. ]+$/);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"executor\", executor).typeFunction();\n        }\n\n        let resolve;\n        let reject;\n\n        super((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n\n        const chain = new JFactoryPromiseChain(this, chainId, name, config);\n\n        Object.defineProperties(this, {\n            $chain: {\n                enumerable: true,\n                writable: true,\n                value: chain\n            },\n            $type: {\n                writable: true,\n                value: \"promise\"\n            },\n            $value: {\n                writable: true,\n                value: undefined\n            },\n            $isSettled: {\n                writable: true,\n                value: false\n            },\n            $isRejected: {\n                writable: true,\n                value: null\n            },\n            $isFulfilled: {\n                writable: true,\n                value: null\n            },\n            $isExpired: {\n                writable: true,\n                value: false\n            },\n            $isAborted: {\n                writable: true,\n                value: false\n            }\n        });\n\n        if (JFACTORY_DEV) {\n            Object.defineProperties(this, {\n                $dev_name: {\n                    configurable: true,\n                    value: name + \"[\" + chainId + \":0]\"\n                },\n                $dev_path: {\n                    writable: true,\n                    value: new JFactoryPromisePath(this)\n                },\n                $dev_position: {\n                    writable: true,\n                    value: 0\n                }\n            });\n            if (!helper_isNative(executor)) {\n                Object.defineProperties(this, {\n                    $dev_source: {\n                        value: executor\n                    }\n                });\n            }\n            jFactoryTrace.attachTrace(this, traceSource);\n        }\n\n        const tryAutoComplete = () => {\n            if (!this.$chain.isPending) {\n                try {\n                    this.$chainComplete(\"auto-completed\");\n                } catch (e) {\n                    // Case of error in \"complete\" callback\n                    // We catch the exception because the promise is already fulfilled\n                    // Furthermore this issue must be handled by the chain, not the current promise\n                    console.error(e) // print the error otherwise nothing happens\n                }\n            }\n        };\n\n        const onResolve = value => {\n            // console.trace(\"onResolve\", this.$dev_name);\n            if (!this.$isSettled) {\n                // 2.3.1. If promise and x refer to the same object, reject promise with a TypeError as the reason.\n                if (value === this) {\n                    onReject(new TypeError(\"Chaining cycle detected for promise \" + this.$dev_name));\n                    return;\n                }\n\n                let then;\n                if (value !== null && (typeof value == \"object\" || typeof value == \"function\")) {\n                    // 2.3.3.2. If retrieving the property x.then results in a thrown exception e,\n                    // reject promise with e as the reason.\n                    try {\n                        then = value.then;\n                    } catch (e) {\n                        onReject(e);\n                        return;\n                    }\n                }\n\n                if (typeof then == \"function\") {\n                    let called = false;\n                    let resolvePromise = function(y) {\n                        // 2.3.3.3.1. If/when resolvePromise is called with a value y, run [[Resolve]](promise, y).\n                        if (!called) {\n                            called = true;\n                            onResolve(y);\n                        }\n                    };\n                    let rejectPromise = function(r) {\n                        // 2.3.3.3.2. If/when rejectPromise is called with a reason r, reject promise with r.\n                        if (!called) {\n                            called = true;\n                            onReject(r);\n                        }\n                    };\n\n                    try {\n                        // 2.3.3.3: If `then` is a function, call it as x.then(resolvePromise, rejectPromise)\n                        then.call(value, resolvePromise, rejectPromise);\n                    } catch (e) { // 2.3.3.3.4. If calling then throws an exception e,\n                        // 2.3.3.3.4.1. If resolvePromise or rejectPromise have been called, ignore it.\n                        if (!called) {\n                            // 2.3.3.3.4.2. Otherwise, reject promise with e as the reason.\n                            onReject(e);\n                        }\n                    }\n                }\n                else {\n                    this.$isRejected = false;\n                    this.$isFulfilled = true;\n                    if (this.$isExpired) {\n                        value = this.$chain.errorExpired;\n                    }\n                    resolve(value);\n                    onSettle(value)\n                }\n            }\n        };\n\n        const onReject = reason => {\n            // console.log(\"onReject\", this.$dev_name);\n            if (!this.$isSettled) {\n                this.$isRejected = true;\n                this.$isFulfilled = false;\n                reject(reason);\n                onSettle(reason)\n            }\n        };\n\n        const onSettle = value => {\n            this.$value = value;\n            this.$isSettled = true;\n            this.$chain.chainMap.set(this, true);\n\n            if (this.$chain.chainConfig.chainAutoComplete) {\n                if (this.$chain.chainMap.size === 1 && !this.$isExpired) {\n                    // ensures that tryAutoComplete() will be called asynchronously (then() callback is asynchronous)\n                    // case of promise.resolve(primitive), prevents following then() from being immediately locked\n                    this.then(tryAutoComplete)\n                } else {\n                    tryAutoComplete()\n                }\n            }\n        };\n\n        let _chainAutoComplete = config.chainAutoComplete;\n        Object.defineProperty(config, \"chainAutoComplete\", {\n            get: () => _chainAutoComplete,\n            set: value => {\n                if (_chainAutoComplete !== value) {\n                    _chainAutoComplete = value;\n                    if (value) {\n                        tryAutoComplete()\n                    }\n                }\n            }\n        });\n\n        chain.chainMap.set(this, false);\n\n        Object.defineProperties(this, {\n            __resolve__: {\n                value: onResolve\n            },\n            __reject__: {\n                value: onReject\n            }\n        });\n\n        try {\n            executor(onResolve, onReject);\n        } catch (e) {\n            // console.error(\"exception in executor\", this.$dev_name);\n            onReject(e)\n        }\n    }\n\n    then(onFulfilled, onRejected, forceType) {\n        let wrappedFulfilled;\n        let wrappedRejected;\n        let newPromise;\n\n        // Caution: \"await\" detection is not reliable.\n        // Passing native functions for both onFulfilled and onRejected will\n        // result to \"await\" type and may cause side effects\n        let type = forceType || (\n            helper_isNative(onFulfilled) && !onFulfilled.name.startsWith(\"bound \") &&\n            helper_isNative(onRejected) && !onRejected.name.startsWith(\"bound \")\n                ? \"await\" : onFulfilled === undefined ? \"catch\" : \"then\"\n        );\n\n        if (onFulfilled && typeof onFulfilled === \"function\") {\n            wrappedFulfilled = function(r) {\n                // \"await\" must always run the native handler\n                if (type === \"await\") {\n                    // SPEC: \"await\" throws the errorExpired if $isAborted is true.\n                    // Allows async function to try catch the awaited aborted promise\n                    // or, if not caught, breaks and ignore the rest of the async function.\n                    if (newPromise.$isAborted) {\n                        return onRejected(newPromise.$chain.errorExpired)\n                    } else {\n                        return onFulfilled(r)\n                    }\n                }\n                // otherwise don't call the handler if expired\n                if (!newPromise.$isExpired) {\n                    if (newPromise.$isSettled) {\n                        // eslint-disable-next-line no-debugger\n                        debugger\n                    }\n                    return onFulfilled(r)\n                }\n            }\n        }\n        if (onRejected && typeof onRejected === \"function\") {\n            wrappedRejected = function(r) {\n                if (newPromise.$isSettled) {\n                    // eslint-disable-next-line no-debugger\n                    debugger\n                }\n                return onRejected(r)\n            }\n        }\n\n        newPromise = Object.assign(super.then(wrappedFulfilled, wrappedRejected), this);\n        moduleGenId.uid--; // reverse because not a new chain\n        newPromise.$type = type;\n\n        Object.defineProperties(newPromise, {\n            __onFulfilled__: { value: onFulfilled },\n            __onRejected__: { value: onRejected }\n        });\n\n        if (JFACTORY_DEV) {\n            newPromise.$dev_position = this.$chain.chainMap.size;\n            let fNames = \"\";\n            if (onFulfilled && onFulfilled.name) {\n                fNames += onFulfilled.name\n            }\n            if (onRejected && onRejected.name) {\n                fNames += \",\" + onRejected.name\n            }\n            Object.defineProperties(newPromise, {\n                $dev_name: {\n                    value:\n                        this.$chain.chainName\n                        + \"[\"\n                        + this.$chain.chainId\n                        + \":\"\n                        + this.$dev_position\n                        + \"]\"\n                        + \".\"\n                        + newPromise.$type\n                        + (fNames ? \"(\" + fNames + \")\" : \"\")\n                        + \"[\"\n                        + newPromise.$chain.chainId\n                        + \":\"\n                        + newPromise.$dev_position\n                        + \"]\"\n                },\n                $dev_path: { value: new JFactoryPromisePath(this.$dev_path, newPromise) }\n            });\n        }\n\n        newPromise.$chain.chainMap.set(newPromise, false);\n\n        if (this.$isExpired) {\n            // case: p0.then(); chainAbort(); p1.then()\n            // => the new promise must be expired\n            // if parent promise is just expired, abort silently\n            // if parent promise is aborted, abort explicitly\n\n            // JFactoryPromise.setExpired(newPromise, true, !this.$isAborted, this.$chain.errorExpired);\n            JFactoryPromise.setExpired(newPromise, this.$isAborted, true);\n        }\n\n        return newPromise\n    }\n\n    static resolve(optionalArgs, value) {\n        // resolve()\n        // resolve(optionalArgs, value)\n        // resolve(value)\n\n        if (arguments.length === 1) {\n            [optionalArgs, value] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        if (value instanceof this && arguments.length === 1) {\n            // Returns the promise as is (native spec)\n            // but only if no optionalArgs\n            return value\n        } else {\n            return new this(optionalArgs, function(resolve) {\n                resolve(value)\n            });\n        }\n    }\n\n    static reject(optionalArgs, reason) {\n        // reject()\n        // reject(optionalArgs, reason)\n        // reject(reason)\n\n        if (arguments.length === 1) {\n            [optionalArgs, reason] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        return new this(optionalArgs, function(resolve, reject) {\n            reject(reason)\n        });\n    }\n\n    // $toPromise(rejectIfExpired = true) {\n    //     return new Promise((resolve, reject) => {\n    //         let promise = this.then(resolve, e => {\n    //             debugger\n    //             reject(e)\n    //         });\n    //         if (rejectIfExpired) {\n    //             promise.$thenIfExpired(reject)\n    //         }\n    //     })\n    // }\n\n    // $toNewChain(abortIfExpired = true) {\n    //     let newChain;\n    //     return newChain = new JFactoryPromise((resolve, reject) => {\n    //         let promise = this.then(resolve, e => {\n    //             debugger\n    //             reject(e)\n    //         });\n    //         if (abortIfExpired) {\n    //             promise.$thenIfExpired(function(e){\n    //                 newChain.$chainAbort(e)\n    //             })\n    //         }\n    //     });\n    // }\n\n    // A \"then\" where the handler is called only if the chain is expired\n    // it's not a catch (a catchExpired concept should cancel the expiration)\n    $thenIfExpired(onExpired) {\n        return this.then(r => this.$chain.chainRoot.$isExpired ? onExpired(r) : r,\n            undefined, \"$thenIfExpired\"\n        )\n    }\n\n    // Completes an expires the whole chain before its normal end\n    // Sets the $isAborted to true on aborted promises\n    $chainAbort(reason = \"$chainAbort()\") {\n        this.$chain.complete(reason, true);\n        return this\n    }\n\n    // Manually completes and expires the whole chain\n    // Only required if awaiting \"myPromise.$chain\"\n    // when the autocomplete watcher is not used\n    $chainComplete(reason = \"$chainComplete()\") {\n        if (this.$chain.isPending) {\n            throw new JFACTORY_ERR_INVALID_CALL({\n                target: this,\n                reason: \"Trying to complete a pending chain. Use $chainAbort() if you want to stop it.\"\n            });\n        }\n        this.$chain.complete(reason, false);\n        return this\n    }\n\n    $chainAutoComplete() {\n        this.$chain.chainConfig.chainAutoComplete = true;\n        return this\n    }\n\n    static setExpired(promise, abort, silent /*, reason*/) {\n        promise.$isExpired = true;\n        if (!promise.$isSettled) {\n            if (promise.$type === \"$thenIfExpired\") {\n                promise.__onFulfilled__(promise.$chain.chainRoot.$chain.errorExpired)\n            }\n            else if (abort) {\n                promise.$isAborted = true;\n            } else {\n                if (!silent) {\n                    throw new JFACTORY_ERR_INVALID_CALL({\n                        target: promise,\n                        reason: \"promise must be aborted or settled before setting it to expired.\"\n                    })\n                }\n            }\n            promise.__resolve__(/*reason*/);\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryPromiseChain\n// -----------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromiseChain {\n\n    constructor(chainRoot, chainId, chainName, chainConfig) {\n        Object.defineProperties(this, {\n            chainConfig: { value: chainConfig },\n            chainRoot: { value: chainRoot },\n            chainId: { value: chainId },\n            chainName: { value: chainName },\n            chainMap: { value: new Map },\n            isCompleted: { value: false, configurable: true },\n            data: { value: {} },\n            __deferred__: { value: helper_deferred() }\n        })\n    }\n\n    get isPending() {\n        return Array.from(this.chainMap.values()).includes(false)\n    }\n\n    then(onResolve) { // => \"await chain\"\n        this.__deferred__.done(onResolve);\n        return this\n    }\n\n    complete(reason = \"chain.complete()\", abort) {\n        let chainRoot = this.chainRoot;\n        if (!chainRoot.$isExpired) {\n            /*let errorExpired = */chainRoot.$chain.errorExpired = new JFACTORY_ERR_PROMISE_EXPIRED({\n                target: chainRoot,\n                reason\n            });\n\n            let map = this.chainMap;\n            for (let item of map.keys()) {\n                JFactoryPromise.setExpired(item, abort/*, false, errorExpired*/);\n            }\n\n            Object.defineProperty(this, \"isCompleted\", { value: true });\n            this.__deferred__.resolve();\n        }\n        return this\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryPromisePath\n// -----------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromisePath extends Array {\n\n    constructor() {\n        super();\n        for (let i of arguments) {\n            if (Array.isArray(i)) {\n                this.push(...i)\n            } else {\n                this.push(i)\n            }\n        }\n    }\n\n    get printable() {\n        return this.map((v, i) => i === 0 ? v.$dev_name : v.$dev_name.split(\".\")[1]).join(\".\")\n    }\n\n    toString() {return this.printable}\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryPromiseSync\n * -----------------------------------------------------------------------------------------------------------------\n * Promise that tries to resolve synchronously\n * allowing synchronous states and result\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class JFactoryPromiseSync extends Promise {\n\n    constructor(executor) {\n\n        let states = {\n            $isSettled: false, // true = not pending\n            $isRejected: null, // true = not pending + rejected\n            $value: undefined\n        };\n\n        super((resolve, reject) => {\n\n            let called = false;\n\n            let onResolve = r => {\n                if (r instanceof Promise) {\n                    JFactoryPromiseSync.resolve(r)\n                        .then(onResolve, onReject)\n                } else {\n                    if (!called) {\n                        called = true;\n                        states.$isSettled = true;\n                        states.$isRejected = false;\n                        states.$value = r;\n                        resolve(r)\n                    }\n                }\n            };\n\n            let onReject = r => {\n                // don't resolve pending promise\n                // to keep native specification\n                if (!called) {\n                    called = true;\n                    states.$isSettled = true;\n                    states.$isRejected = true;\n                    states.$value = r;\n                    reject(r)\n                }\n            };\n\n            try {\n                executor(onResolve, onReject)\n            } catch (e) {\n                onReject(e)\n            }\n        });\n\n        Object.assign(this, states);\n        states = this\n    }\n\n    then(onFulfilled, onRejected) {\n\n        if (this.$isSettled) {\n            let value = this.$value;\n\n            try {\n                if (this.$isRejected) {\n                    // cancel any uncaught rejected result from this promise\n                    // before returning the new one\n                    super.then(undefined, () => null);\n\n                    if (onRejected && typeof onRejected === \"function\") {\n                        value = onRejected(value)\n                    } else {\n                        return JFactoryPromiseSync.reject(value)\n                    }\n                } else {\n                    if (onFulfilled && typeof onFulfilled === \"function\") {\n                        value = onFulfilled(value)\n                    }\n                }\n            } catch (e) {\n                return JFactoryPromiseSync.reject(e)\n            }\n\n            return JFactoryPromiseSync.resolve(value)\n\n        } else {\n            return super.then(onFulfilled, onRejected)\n        }\n    }\n\n    static resolve(value) {\n        if (value instanceof JFactoryPromiseSync) {\n            return value\n        } else {\n            if (value instanceof Promise) {\n                return new JFactoryPromiseSync(value.then.bind(value))\n            } else {\n                return new JFactoryPromiseSync(r => r(value))\n            }\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// Config JFactoryPromise\n// -----------------------------------------------------------------------------------------------------------------\n\nconst CONFIG = /*#__PURE__*/jFactoryCfg(\"JFactoryPromise\", {\n    chainAutoComplete: false\n});","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryEvents\n * -----------------------------------------------------------------------------------------------------------------\n * https://learn.jquery.com/events/event-extensions/\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV } from \"../jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_VALUE } from \"./JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { JFactoryPromiseSync } from \"./JFactoryPromise.mjs\";\nimport { JFactoryFunctionComposer } from \"./JFactoryFunction.mjs\";\nimport { jQuery, helper_isPlainObject } from \"../jFactory-helpers.mjs\";\n\nexport class JFactoryEvents {\n    // -------------------------------------------------------------------------------------------------------------\n    // jQuery doesn't handle async trigger so jFactory provides the following :\n    //\n    // - triggerParallel(): the trigger function returns a Promise.all(pendingArray)\n    //   where pendingArray is filled by any async running handler.\n    //   Not recommended because it's the best way to produce unpredictable async side effects\n    //\n    // - triggerSeries(): handlers are run in a synchronous order, with \"await\"\n    //   This avoids unpredictable async race condition\n    //\n    //  Both returns a JFactoryPromiseSync that contains the jFactory_fulfilled flag\n    //  This flag is immediately (not async) set to true if no async handler is still pending\n    //\n    // => handlers are wrapped. OriginalHandlers and wrappedHandlers relations are stored in a WeakMap\n    // -------------------------------------------------------------------------------------------------------------\n\n    constructor() {\n        Object.defineProperties(this, /** @lends JFactoryEvents# */ {\n            registry: { value: jQuery(Object.create(null)) },\n            handlers: { value: new WeakMap },\n            onListenerUpdate: { value: null, writable: true },\n            onObserverUpdate: { value: null, writable: true }\n        });\n    }\n\n    on({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            JFactoryExpect(\"JFactoryEvents.on({handler})\", handler).typeFunction();\n            target && JFactoryExpect(\"JFactoryEvents.on({target})\", target).type(String, jQuery, HTMLElement);\n            selector && JFactoryExpect(\"JFactoryEvents.on({selector})\", target).typeString();\n        }\n\n        let wrappedHandler = this.handlers.get(handler);\n        if (target) {\n            // don't need to wrap DOM handlers\n            if (!wrappedHandler) {\n                this.handlers.set(handler, true);\n            }\n            if (selector) {\n                jQuery(target).on(events, selector, handler);\n            } else {\n                jQuery(target).on(events, handler);\n            }\n            if (this.onListenerUpdate) {\n                this.onListenerUpdate(arguments)\n            }\n        } else {\n            if (!wrappedHandler) {\n                this.handlers.set(handler, wrappedHandler = function(e, { data, stack }) {\n                    stack.push(() => handler(e, data))\n                });\n                wrappedHandler.originalHandler = handler;\n            }\n            this.registry.on(events, wrappedHandler);\n            if (this.onObserverUpdate) {\n                this.onObserverUpdate(arguments)\n            }\n        }\n    }\n\n    off({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            if (events !== undefined) { // off() is valid\n                JFactoryEvents.validateSelector(events);\n                handler && JFactoryExpect(\"JFactoryEvents.off({handler})\", handler).typeFunction();\n                target && JFactoryExpect(\"JFactoryEvents.off({target})\", target).type(String, jQuery, HTMLElement);\n                selector && JFactoryExpect(\"JFactoryEvents.off({selector})\", target).typeString();\n            }\n        }\n\n        if (target) {\n            if (selector) {\n                jQuery(target).off(events, selector, handler)\n            } else {\n                jQuery(target).off(events, handler)\n            }\n        } else {\n            jQuery(\"*\").off(events, handler);\n\n            if (handler) {\n                handler = this.handlers.get(handler);\n                if (!handler) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"handler\",\n                        reason: \"not registered\",\n                        given: handler\n                    })\n                }\n            }\n            this.registry.off(events, handler);\n        }\n        if (this.onObserverUpdate) {\n            this.onObserverUpdate(arguments)\n        }\n        if (this.onListenerUpdate) {\n            this.onListenerUpdate(arguments)\n        }\n    }\n\n    /**\n     * Run in parallel. Don't \"await\" for async handlers\n     * Obviously produces unpredictable race conditions\n     */\n    triggerParallel({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target\n                && JFactoryExpect(\"JFactoryEvents.triggerParallel({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        const stack = [];\n        const pending = [];\n        events = events.split(\" \");\n\n        if (target) {\n            for (let event of events) {\n                jQuery(target).trigger(event, { data, stack });\n            }\n        } else {\n            for (let event of events) {\n                this.registry.triggerHandler(event, { data, stack })\n            }\n        }\n\n        for (let handler of stack) {\n            let result = handler();\n            if (result instanceof Promise\n                && !result.$isSettled // don't need to await\n            ) {\n                pending.push(result)\n            }\n        }\n\n        if (pending.length) {\n            return Promise.all(pending)\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n\n    /**\n     * Run in declaration order synchronously. Will \"await\" for async handlers\n     * Prevents unpredictable race conditions\n     */\n    triggerSeries({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target && JFactoryExpect(\"JFactoryEvents.triggerSeries({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n            const stack = [];\n            events = events.split(\" \");\n\n            if (target) {\n                for (let event of events) {\n                    jQuery(target).trigger(event, { data, stack });\n                }\n            } else {\n                for (let event of events) {\n                    this.registry.triggerHandler(event, { data, stack })\n                }\n            }\n\n            for (let handler of stack) {\n                let result = handler();\n                if (result instanceof Promise\n                    && !result.$isSettled // don't need to await\n                ) {\n                    await result\n                }\n            }\n            resolve()\n        })\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryEventsManager\n// -----------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventsManager extends JFactoryEvents {\n    constructor(parent) {\n        super();\n        Object.defineProperties(this, {\n            parent: { value: parent },\n            affiliateRules: { value: new JFactoryFunctionComposer().compose() }\n        });\n        this.affiliateAddRule(JFactoryEventsManager.rule_namespace)\n    }\n\n    affiliate(events = \"\", namespaces = \"\", options) {\n        let parser = new JFactoryEventSelectorParser(events);\n        for (let parsedEvent of parser.events) {\n            this.affiliateRules(parsedEvent, namespaces, options)\n        }\n        return parser.toString();\n    }\n\n    affiliateAddRule(handler) {\n        this.affiliateRules.composer.last(handler)\n    }\n\n    static rule_namespace(context, parsedEvent, namespaces) {\n        namespaces = namespaces.split(\".\");\n        for (let namespace of namespaces) {\n            namespace && parsedEvent.addNamespace(namespace);\n        }\n    }\n\n    on(events, target, selector, handler, options) {\n        // Observers:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        switch (arguments.length) {\n            case 2:\n                // events, handler\n                [handler, target] = [target/*, undefined*/];\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        target === undefined ?\n            super.on({ events, handler }) :\n            super.on({ events, target, selector, handler/*, options*/ })\n    }\n\n    off(events, target, selector, handler, options) {\n        // Both:\n        // events (can be namespaces)\n        // events, options\n        // options (can be removal)\n\n        // Observer:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        const argL = arguments.length;\n        switch (argL) {\n            case 1:\n                if (typeof arguments[0] === \"object\") {\n                    // options\n                    [options, events] = [events/*, undefined*/];\n                }\n                // else events (can namespaces)\n                break;\n            case 2:\n                if (typeof arguments[1] === \"function\") {\n                    // events, handler\n                    [handler, target] = [target/*, undefined*/];\n                } else if (helper_isPlainObject(arguments[1])) {\n                    // events, options\n                    [options, target] = [target/*, undefined*/]\n                }\n                // else events, target\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else if (typeof arguments[1] === \"function\") {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                } else {\n                    // events, target, selector\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        if (argL < 2) {\n            super.off({ events });\n        } else {\n            target ?\n                super.off({ events, target, selector, handler/*, options*/ }) :\n                super.off({ events, handler })\n        }\n    }\n\n    trigger(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerSeries({ events, target, data }) :\n            super.triggerSeries({ events, data })\n    }\n\n    triggerParallel(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerParallel({ events, target, data }) :\n            super.triggerParallel({ events, data })\n    }\n\n    // #unoptimized draft#\n    // It's not easy to keep this list up to date because:\n    // - listeners can be removed by external dom mutations\n    // - listeners can be delegated\n    // - off() method can remove listeners globally\n    getDomListeners(namespace) {\n        let result = new Map();\n        for (let elm of jQuery(\"*\")) {\n            let data = jQuery._data(elm, \"events\");\n            if (data) {// data = {click: [{}], ... }\n                for (let entries of Object.values(data)) {// entries = [{type:...}]\n                    for (let entry of entries) {// entry = {type, namespace, handler, ...}\n                        let parser = new JFactoryEventSelector(entry.namespace);\n                        let types;\n                        if (parser.hasNamespace(namespace)) {\n                            if (!(types = result.get(elm))) {\n                                result.set(elm, types = {})\n                            }\n                            let type = types[entry.type] || (types[entry.type] = []);\n                            type.push({\n                                // ...entry,\n                                selector: entry.selector || null,\n                                handler: entry.handler,\n                                namespace: entry.namespace\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return result\n    }\n\n    // #unoptimized draft#\n    getObservers() {\n        let result = new Map();\n        let events = this.registry._events;\n\n        if (!events) {\n            let registry = Object.values(this.registry)[0];\n            let expando = Object.getOwnPropertyNames(registry).find(k => k.indexOf(\"jQuery\") === 0);\n            if (registry && expando) {\n                events = this.registry._events = registry[expando].events;\n            }\n        }\n\n        if (events) {\n            for (let [key, val] of Object.entries(events)) {\n                let event = result.get(key);\n                if (!event) {\n                    event = [];\n                    result.set(key, event);\n                }\n                for (let eventTypeEntry of val) {\n                    event.push({\n                        handler: eventTypeEntry.handler.originalHandler,\n                        namespace: eventTypeEntry.namespace\n                    })\n                }\n            }\n        }\n\n        return result\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryEventSelectorParser\n// -----------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventSelectorParser {\n    constructor(selectors) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(selectors);\n        }\n        /**\n         * @type Array<JFactoryEventSelector>\n         */\n        this.events = selectors.split(\" \").map(selector => new JFactoryEventSelector(selector))\n    }\n\n    toString() {\n        let s = [];\n        for (let event of this.events) {\n            s.push(event.toString())\n        }\n        return s.join(\" \")\n    }\n}\n\nexport class JFactoryEventSelector {\n    constructor(selector) {\n        let [event, ...namespace] = selector.split(\".\");\n        this.event = event;\n        this.namespace = new Set(namespace)\n    }\n\n    /** @return {Boolean|String} */\n    hasNamespace(namespaces) {\n        if (!Array.isArray(namespaces)) {\n            namespaces = [namespaces]\n        }\n        for (let namespace of namespaces) {\n            if (JFACTORY_DEV) {\n                if (!/^[\\w:]+$/.test(namespace)) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"namespace\",\n                        reason: \"must be alphanumeric, underscore and colon characters\",\n                        given: namespace\n                    })\n                }\n            }\n            if (namespace && this.namespace.has(namespace)) {\n                return namespace\n            }\n        }\n        return false\n    }\n\n    addNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new JFACTORY_ERR_INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.add(namespace)\n    }\n\n    deleteNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new JFACTORY_ERR_INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.delete(namespace)\n    }\n\n    toString() {\n        return this.namespace.size ? this.event + \".\" + Array.from(this.namespace.values()).join(\".\") : this.event;\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// JFactoryEvents validation\n// -----------------------------------------------------------------------------------------------------------------\n\nif (JFACTORY_DEV) {\n    JFactoryEvents.validateSelector = function(selector) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateSelector(selector)\", selector)\n                .notUndefined()\n                .validSpaces();\n        }\n\n        for (let [event, ns] of selector.split(\" \")\n            .map(v => v.split(\".\"))\n            .map(v => [v.shift(), v.join(\".\")])) {\n            event && JFactoryEvents.validateEvent(event);\n            ns && JFactoryEvents.validateNamespace(ns);\n        }\n        return true\n    };\n\n    JFactoryEvents.validateEvent = function(event) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateEvent(event)\", event)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:]+$/.test(event)) {\n            throw new JFACTORY_ERR_INVALID_VALUE({\n                target: \"JFactoryEvents.validateEvent(event)\",\n                reason: \"must be alphanumeric, underscore and colon characters\",\n                given: event\n            })\n        }\n\n        return true\n    };\n\n    JFactoryEvents.validateNamespace = function(namespace) { // ex: ns.ns2.ns3\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateNamespace(namespace)\", namespace)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:.]+$/.test(namespace)) {\n            throw new JFACTORY_ERR_INVALID_VALUE({\n                target: \"JFactoryEvents.validateNamespace(namespace)\",\n                reason: \"must be alphanumeric, underscore, dot and colon characters\",\n                given: namespace\n            })\n        }\n\n        return true\n    };\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryTime\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nexport class JFactoryTime extends Date {\n    toString() {\n        return this.toLocaleTimeString() + \", \" + this.getUTCMilliseconds() + \"ms (\" + this.valueOf() + \")\"\n    }\n    $toDurationString() {\n        let hours = this.getUTCHours();\n        let minutes = this.getUTCMinutes();\n        let seconds = this.getUTCSeconds();\n        let milliseconds = this.getUTCMilliseconds();\n\n        let a = [];\n        if (hours) {\n            a.push(hours + \"h\")\n        }\n        if (minutes) {\n            a.push(minutes + \"min\")\n        }\n        if (seconds) {\n            a.push(seconds + \"s\")\n        }\n        a.push(milliseconds + \"ms\");\n        if (a.length === 1) {\n            return a[0];\n        } else {\n            return a.join(\",\") + \" (\" + this.valueOf() + \")\";\n        }\n    }\n}\n\nexport class JFactoryTimeTrace extends Date {\n    constructor() {\n        super();\n        this.elapsed = null;\n        Object.defineProperties(this, {\n            t1: { value: null, writable: true },\n            t0: { value: new JFactoryTime() }\n        })\n    }\n    end() {\n        this.t1 = new JFactoryTime();\n        this.elapsed = new JFactoryTime(this.t1 - this.t0).$toDurationString()\n    }\n    toString() {\n        return this.elapsed\n    }\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * -----------------------------------------------------------------------------------------------------------------\n * TraitCore\n * -----------------------------------------------------------------------------------------------------------------\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_DEV, JFACTORY_LOG } from \"./jFactory-env.mjs\";\nimport {\n    JFACTORY_ERR_KEY_DUPLICATED, JFACTORY_ERR_KEY_MISSING,\n    JFACTORY_ERR_PROMISE_EXPIRED, JFactoryError\n} from \"./lib/JFactoryError.mjs\";\nimport { jFactory } from \"./jFactory.mjs\";\nimport { JFactoryExpect } from \"./lib/JFactoryExpect.mjs\";\nimport { JFactoryAbout } from \"./lib/JFactoryAbout.mjs\";\nimport { JFactoryLogger } from \"./lib/JFactoryLogger.mjs\";\nimport { JFactoryPromise, JFactoryPromiseSync } from \"./lib/JFactoryPromise.mjs\";\nimport { JFactoryEventsManager } from \"./lib/JFactoryEvents.mjs\";\nimport { JFactoryObject } from \"./lib/JFactoryObject.mjs\";\nimport { JFactoryTimeTrace } from \"./lib/JFactoryTime.mjs\";\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Core\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitCore {\n    trait_constructor() {\n        const owner = this;\n\n        class SubMap extends Map {\n            constructor(...args) {\n                super(...args);\n                Object.defineProperty(this, \"id_autoinc\", { value: 0, writable: true });\n            }\n            $registerSync(key, value) {\n                let sub = Object.defineProperties({}, {\n                    $value: { value },\n                    $phaseRemove: { value: TraitService.getContextualRemovePhase(owner) }\n                });\n                this.set(key, sub);\n                return sub\n            }\n            $registerAsync(key, taskName, promise) {\n                let task = owner.$task(taskName, promise.$chain);\n\n                // End of promise chain must complete the task\n                promise.$chain.then(() => { // synchronous then\n                    task.$chainAutoComplete()\n                });\n\n                // Aborted task must abort the promise if still running\n                task.$chain.then(() => {// synchronous then\n                    if (!promise.$chain.isCompleted) {\n                        promise.$chainAbort(\"aborted by task\")\n                    }\n                });\n\n                Object.defineProperty(promise, \"$phaseRemove\", { value: task.$phaseRemove });\n                this.set(key, promise);\n                return task\n            }\n\n            $id_resolve(str) {\n                if (str.indexOf(\"?\") >= 0) {\n                    let id = ++this.id_autoinc;\n                    str = str.replace(/\\?/g, id)\n                }\n                return str\n            }\n        }\n\n        const proto = Object.assign(Object.create(null), {\n            [TraitCore.SYMBOL_PRIVATE]: Object.create(null),\n            assign: function(property, value, descriptor) {JFactoryObject.assign(this, property, value, descriptor)},\n            createSubMap: () => new SubMap()\n        });\n\n        Object.defineProperty(this, \"$\", { value: Object.create(proto) });\n\n        // pre-define most important properties\n        // to order them first in devtool (reduced form only)\n        this.$.assign({\n            tasks: null,\n            requests: null\n        }, JFactoryObject.descriptors.ENUMERABLE_WRITABLE);\n    }\n}\n\nTraitCore.SYMBOL_PRIVATE = Symbol(\"_\");\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait About\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitAbout {\n\n    trait_constructor(about) {\n        JFactoryObject.assign(this.$, \"about\",\n            new JFactoryAbout(this, about), JFactoryObject.descriptors.READONLY)\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Log\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitLog {\n\n    trait_constructor() {\n        let config = Object.assign({\n            label: this.$.about.name\n        }, JFACTORY_LOG || {\n            enabled: false\n        });\n\n        let logger = new JFactoryLogger(config);\n\n        Object.defineProperty(this.$, \"logger\", { value: logger });\n\n        logger.installAccessor(\"log\",   \"$log\",     this);\n        logger.installAccessor(\"warn\",  \"$logWarn\", this);\n        logger.installAccessor(\"error\", \"$logErr\",  this);\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Tasks\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitTask {\n\n    trait_constructor() {\n        this.$.assign(\"tasks\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $task(id, executorOrValue) {\n        id = this.$.tasks.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$task(id)\", id).typeString();\n            JFactoryExpect(\"$task(executorOrValue)\", executorOrValue).notUndefined();\n            if (this.$.tasks.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$task(id)\", given: id })\n            }\n        }\n\n        let task;\n\n        if (typeof executorOrValue === \"function\") {\n            task  = new JFactoryPromise({ name: id, owner: this }, executorOrValue)\n        } else {\n            task = JFactoryPromise.resolve({ name: id, owner: this }, executorOrValue);\n        }\n\n        task.$phaseRemove = TraitService.getContextualRemovePhase(this);\n\n        let metrics;\n        if (JFACTORY_DEV) {\n            metrics = new JFactoryTimeTrace();\n            task.$taskMetrics = { $dev_timing: metrics };\n        }\n\n        task.$chain.then(() => {\n            if (JFACTORY_DEV) {\n                metrics.end();\n            }\n            if (this.$.tasks.get(id)) {\n                this.$taskRemove(id);\n            }\n        });\n\n        this.$.tasks.set(id, task);\n        return task\n    }\n\n    $taskRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$taskRemove(reason)\", reason).typeString();\n            if (!this.$.tasks.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$taskRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger\n            if (this.$.tasks.get(id)._called) {debugger}\n            this.$.tasks.get(id)._called = true\n        }\n\n        let entry = this.$.tasks.get(id);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.tasks.delete(id);\n        entry.$chainAbort(reason || \"$taskRemove()\");\n    }\n\n    $taskRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemoveAll(removePhase)\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let tasks = this.$.tasks;\n        if (tasks.size) {\n            for (const [key, task] of tasks) {\n                if (task.$phaseRemove === removePhase) {\n                    this.$taskRemove(key, \"$taskRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n\n    $taskPromiseAll(autoComplete = false) {\n        let pending = [];\n        if (this.$.tasks.size) {\n            for (let task of this.$.tasks.values()) {\n                if (autoComplete) {\n                    // resolves the chain as soon as no more pending promise in the chain\n                    task.$chain.chainConfig.chainAutoComplete = true;\n                }\n                // still pending ?\n                if (task.$chain.isPending) {\n                    pending.push(task.$chain)\n                }\n            }\n        }\n        if (pending.length) {\n            return JFactoryPromise.all(pending);\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Events\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitEvents {\n\n    trait_constructor() {\n        assignPrivate(this, \"events\", {\n            custom: new JFactoryEventsManager(this),\n            kernel: new JFactoryEventsManager(this)\n        }, JFactoryObject.descriptors.NONE);\n\n        let eventManager = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n\n        // if (JFACTORY_DEV) { // very slow; requires optimization\n        //     // registry are auto updated in dev mode (unoptimized implementation)\n        //\n        //     let listenerUpdate = () => {\n        //         this.$.listeners = eventManager.getDomListeners(this.$.about.fingerprint);\n        //     };\n        //     let observerUpdate = () => {\n        //         this.$.observers = eventManager.getObservers();\n        //     };\n        //\n        //     eventManager.onListenerUpdate = listenerUpdate;\n        //     eventManager.onObserverUpdate = observerUpdate;\n        //\n        //     let observer = new MutationObserver(listenerUpdate);\n        //     observer.observe(document.documentElement, {childList: true, subtree: true});\n        //\n        //     listenerUpdate();\n        //     observerUpdate();\n        // } else\n        {\n            Object.defineProperties(this.$, {\n                listeners: {\n                    get: eventManager.getDomListeners.bind(eventManager, this.$.about.fingerprint),\n                    enumerable: true\n                },\n                observers: {\n                    get: eventManager.getObservers.bind(eventManager),\n                    enumerable: true\n                }\n            })\n        }\n    }\n\n    $on(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.on(...arguments)\n    }\n\n    $off(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.off(...arguments)\n    }\n\n    $trigger(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.trigger(...arguments)\n    }\n\n    $triggerParallel(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)\n    }\n\n    $notify(events, data) {\n        return this.$trigger(events, data)\n            .then(() => this.$[TraitCore.SYMBOL_PRIVATE].events.kernel.trigger(events, data))\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait State\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitState {\n\n    trait_constructor() {\n        const states = Object.create(null);\n        const stateRoutes = Object.create(null);\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        assignPrivate(this, { states, stateRoutes }, JFactoryObject.descriptors.READONLY);\n\n        JFactoryObject.assign(this.$, \"states\", new Proxy(states, {\n            set: (target, key, val) => this.$state(key, val),\n            get: (target, key) => states[key]\n        }), JFactoryObject.descriptors.READONLY);\n\n        kernel.on(\"beforeStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].before\n                && (h = stateRoutes[data.key].before(data.val))) {\n                return this.$notify(h);\n            }\n        });\n\n        kernel.on(\"afterStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].after\n                && (h = stateRoutes[data.key].after(data.val))) {\n                return this.$notify(h);\n            }\n        });\n    }\n\n    $state(key, val, notify = true) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$state(key)\", key).typeString();\n            JFactoryExpect(\"$state(notify)\", notify).typeBoolean();\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n\n            let states = this.$[TraitCore.SYMBOL_PRIVATE].states;\n            let previousVal = states[key];\n            let pending;\n\n            if (!(key in states) || previousVal !== val) {\n\n                pending = notify && this.$notify(\"beforeStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"beforeStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n\n                if (pending && !pending.$isSettled) {\n                    states[key] = pending;\n                    await pending;\n                }\n\n                if (val === undefined) {\n                    delete states[key]\n                } else {\n                    states[key] = val;\n                }\n\n                pending = notify && this.$notify(\"afterStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"afterStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n            }\n\n            if (pending) {\n                pending.then(resolve);\n            } else {\n                resolve()\n            }\n        });\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Service\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitService {\n\n    trait_constructor() {\n        /**\n         * @name this.$.service\n         * @type {object}\n         */\n        JFactoryObject.assign(this.$, \"service\", Object.create(null), JFactoryObject.descriptors.READONLY);\n        this.$.service.phase = TraitService.PHASE.NONE;\n        this.$.service.phaseQueue = JFactoryPromise.resolve({ name: \"phaseQueue\" }, null);\n        this.$.service.phaseTask = null;\n        this.$.service.phaseMap = {\n            install: new Set(),\n            enable: new Set(),\n            disable: new Set(),\n            uninstall: new Set()\n        };\n\n        // Set initial states but don't trigger events\n        this.$state(\"installed\", false, false);\n        this.$state(\"enabled\", false, false);\n\n        // Define the events to notify before/after a state change\n        // stateName : {before : eventName, after : eventName}\n\n        // SPEC\n        // stat is changed before calling handlers even if pending\n\n        assignPrivateMember(this, \"stateRoutes\", {\n            installed: { after: val => val ? \"install\" : \"uninstall\" },\n            enabled: { after: val => val ? \"enable\"  : \"disable\" }\n        }, JFactoryObject.descriptors.NONE);\n\n        let custom = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n        let kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        // Attach a remove phase namespaces on events\n        custom.affiliateAddRule((context, parsedEvent, namespaces, options) =>\n            TraitService.setEventNamespaceRemovePhase(this, parsedEvent, options)\n        );\n\n        // Attach module event handlers\n\n        /** @name JFactoryCoreObject#onInstall */\n        /** @name JFactoryCoreObject#onEnable */\n        /** @name JFactoryCoreObject#onDisable */\n        /** @name JFactoryCoreObject#onUninstall */\n\n        let phaseResolve = handler => {\n            if (this.$.tasks.size) {\n                this.$taskRemoveAll(this.$.service.phase)\n            }\n            let promise = JFactoryPromiseSync.resolve();\n            if (handler) {\n                promise = promise\n                    .then(() => handler.call(this))\n                    .then(() => this.$taskPromiseAll(true))\n            }\n            return promise\n                .catch(e => {\n                    if (!(/*this.$.service.isPhaseKilling &&*/ e instanceof JFACTORY_ERR_PROMISE_EXPIRED)) {\n                        this.$logErr(\"unhandled promise rejection in \" + this.$.service.phase + \";\",\n                            ...e instanceof JFactoryError ? e : [e])\n                    }\n                });\n        };\n\n        kernel.on(\"install\", () => phaseResolve(this.onInstall));\n        kernel.on(\"enable\", () => phaseResolve(this.onEnable));\n        kernel.on(\"disable\", () => phaseResolve(this.onDisable));\n        kernel.on(\"uninstall\", () => phaseResolve(this.onUninstall));\n\n        kernel.on(\"disable\",   () => this.$off({ removal: TraitService.PHASE.DISABLE }));\n        kernel.on(\"uninstall\", () => this.$off({ removal: TraitService.PHASE.UNINSTALL }));\n    }\n\n    $install(enable) {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"install\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (!this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.INSTALL;\n                    return this.$state(\"installed\", true)\n                }\n            });\n\n        this.$.service.phaseMap.install.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.install.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n\n        // register the enable\n        if (enable) {return this.$enable()}\n        return p\n    }\n\n    $enable() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"enable\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.installed && !this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.ENABLE;\n                    return this.$state(\"enabled\", true)\n                }\n            });\n\n        this.$.service.phaseMap.enable.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.enable.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    $disable() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"disable\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.DISABLE;\n                    return this.$state(\"enabled\", false)\n                }\n            });\n\n        this.$.service.phaseMap.disable.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.disable.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        // expires all stacked enable\n        for (let [key, val] of this.$.service.phaseMap.enable.entries()) {\n            if (val === this.$.service.phaseTask) {\n                TraitService.phaseKill(this);\n            }\n            val.$chainAbort();\n            this.$.service.phaseMap.enable.delete(key)\n        }\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    $uninstall() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"uninstall\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.UNINSTALL;\n                    return this.$state(\"installed\", false)\n                }\n            });\n\n        this.$.service.phaseMap.uninstall.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.uninstall.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        // expires all stacked install\n        for (let [key, val] of this.$.service.phaseMap.install.entries()) {\n            if (val === this.$.service.phaseTask) {\n                TraitService.phaseKill(this);\n            }\n            val.$chainAbort();\n            this.$.service.phaseMap.install.delete(key)\n        }\n\n        // queue disable before uninstall\n        this.$disable();\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    static phaseKill(component) {\n        // component.$.service.isPhaseKilling = true;\n        if (component.$.tasks.size) {\n            component.$taskRemoveAll(TraitService.getContextualRemovePhase(component));\n        }\n        component.$.service.phase = TraitService.PHASE.NONE;\n    }\n\n    static getContextualRemovePhase(jFactoryCoreObject) {\n        return TraitService.PHASE_REVERT[jFactoryCoreObject.$.service.phase]\n    }\n\n    static setEventNamespaceRemovePhase(jFactoryCoreObject, parsedEvent, options) {\n        let curRemovePhase = parsedEvent.hasNamespace(TraitService.PHASES);\n        let newRemovePhase = options && options.removal;\n\n        if (!newRemovePhase) {\n            newRemovePhase = TraitService.getContextualRemovePhase(jFactoryCoreObject);\n        }\n\n        // special case : on(\"uninstall\") with removal = DISABLE (the default value)\n        // => disable() is always called before uninstall() causing the event to be removed too early\n        if (parsedEvent.event === \"uninstall\" && newRemovePhase === TraitService.PHASE.DISABLE) {\n            newRemovePhase = TraitService.PHASE.UNINSTALL\n        }\n\n        if (curRemovePhase !== newRemovePhase) {\n            parsedEvent.deleteNamespace(curRemovePhase);\n            parsedEvent.addNamespace(newRemovePhase);\n        }\n\n        parsedEvent.addNamespace(newRemovePhase);\n    }\n}\n\nTraitService.PHASE = {\n    NONE: \"PHASE_NONE\",\n    INSTALL: \"PHASE_INSTALL\",\n    ENABLE: \"PHASE_ENABLE\",\n    DISABLE: \"PHASE_DISABLE\",\n    UNINSTALL: \"PHASE_UNINSTALL\"\n};\n\nTraitService.PHASE_REVERT = {\n    [TraitService.PHASE.INSTALL]: TraitService.PHASE.UNINSTALL,\n    [TraitService.PHASE.UNINSTALL]: TraitService.PHASE.INSTALL,\n    [TraitService.PHASE.DISABLE]: TraitService.PHASE.ENABLE,\n    [TraitService.PHASE.ENABLE]: TraitService.PHASE.DISABLE,\n    [TraitService.PHASE.NONE]: TraitService.PHASE.DISABLE\n};\n\nTraitService.PHASES = Object.values(TraitService.PHASE);\n\n// -----------------------------------------------------------------------------------------------------------------\n\nexport function assignPrivate(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE], property, value, descriptor)\n}\n\nexport function assignPrivateMember(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE][property], value, descriptor)\n}\n\njFactory.PHASE = JFactoryObject.disinherit(TraitService.PHASE);","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryFetch\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { JFACTORY_ERR_REQUEST_ERROR } from \"./JFactoryError.mjs\";\nimport { JFactoryPromise } from \"./JFactoryPromise.mjs\";\nimport {\n    JFACTORY_COMPAT_AbortController,\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    jFactoryCompat_require\n} from \"../jFactory-compat.mjs\";\n\nexport class JFactoryFetch extends JFactoryPromise {\n\n    constructor(optionalArgs, url, fetchOptions = {}) {\n        if (typeof optionalArgs === \"function\") {\n            super(optionalArgs);\n        } else {\n            if (typeof optionalArgs === \"string\") {\n                [optionalArgs, url, fetchOptions] = [{}, arguments[0], arguments[1]]\n            }\n\n            let fetchRequest = new Request(url, fetchOptions);\n\n            super(optionalArgs, (resolve, reject) => {\n                let promise = fetch(fetchRequest)\n                    .then(response => {\n                        this.$chain.fetchResponse = response;\n                        if (!response.ok) {\n                            throw Error(response.status + \":\" + response.statusText);\n                        }\n                        return response\n                    });\n\n                if (fetchOptions.$typeText) {\n                    promise = promise\n                        .then(response => response.text())\n                        .then(r => this.$chain.responseText = r);\n                }\n                else if (fetchOptions.$typeJSON) {\n                    promise = promise\n                        .then(response => response.json())\n                        .then(r => this.$chain.responseJSON = r);\n                }\n\n                promise = promise.catch(reason => {\n                    throw new JFACTORY_ERR_REQUEST_ERROR({\n                        reason: reason.message || reason,\n                        target: this.$chain.fetchResponse && this.$chain.fetchResponse.url || url,\n                        owner: this,\n                        fetchOptions,\n                        fetchRequest,\n                        fetchResponse: this.$chain.fetchResponse || null\n                    }, optionalArgs.traceSource)\n                });\n\n                promise.then(resolve, reject)\n            });\n\n            this.$chain.fetchOptions = fetchOptions;\n            this.$chain.fetchRequest = fetchRequest;\n\n            let abortCtrl = fetchOptions.abortController || new AbortController();\n            fetchOptions.signal = abortCtrl.signal;\n            this.$chain.fetchAbortController = abortCtrl;\n        }\n    }\n\n    $chainAbort(reason = \"request aborted\") {\n        super.$chainAbort(reason);\n        this.$chain.fetchAbortController.abort();\n        return this\n    }\n}\n\njFactoryCompat_require(\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    JFACTORY_COMPAT_AbortController\n);","/**\n * -----------------------------------------------------------------------------------------------------------------\n * -----------------------------------------------------------------------------------------------------------------\n * TraitComponents\n * -----------------------------------------------------------------------------------------------------------------\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { jFactory } from \"./jFactory.mjs\";\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { JFACTORY_COMPAT_MutationObserver, jFactoryCompat_require } from \"./jFactory-compat.mjs\";\nimport { JFACTORY_ERR_INVALID_VALUE, JFACTORY_ERR_KEY_DUPLICATED, JFACTORY_ERR_KEY_MISSING } from \"./lib/JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./lib/JFactoryExpect.mjs\";\nimport { TraitCore, TraitService } from \"./TraitsCore.mjs\";\nimport { JFactoryFetch } from \"./lib/JFactoryFetch.mjs\";\nimport { JFactoryPromise } from \"./lib/JFactoryPromise.mjs\";\nimport { JFactoryObject } from \"./lib/JFactoryObject.mjs\";\nimport { jFactoryTrace } from \"./lib/JFactoryTrace.mjs\";\nimport { helper_isPlainObject, helper_url_abs, jQuery } from \"./jFactory-helpers.mjs\";\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Fetch\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitFetch {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$fetchRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$fetchRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"requests\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $fetch(id, url, fetchOptions = {}) {\n        id = this.$.requests.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetch(id)\", id).typeString();\n            JFactoryExpect(\"$fetch(url)\", url).typeString();\n            JFactoryExpect(\"$fetch(fetchOptions)\", fetchOptions).typePlainObject();\n            if (this.$.requests.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$fetch(id)\", given: id })\n            }\n        }\n\n        let promise = new JFactoryFetch({\n            name: id,\n            traceSource: jFactoryTrace.captureTraceSource(\"$fetch\"),\n            config: {\n                chainAutoComplete: true\n            }\n        }, url, fetchOptions);\n\n        this.$.requests.$registerAsync(id, '$fetch(\"' + id + '\")', promise);\n\n        promise.$chain.then(() => {\n            if (this.$.requests.has(id)) {\n                this.$fetchRemove(id)\n            }\n        });\n\n        return promise;\n    }\n\n    $fetchText(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeText: true });\n    }\n\n    $fetchJSON(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeJSON: true });\n    }\n\n    $fetchRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetchRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$fetchRemove(reason)\", reason).typeString();\n            if (!this.$.requests.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$fetchRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.requests.get(id)._debug_remove_called) {debugger}\n            this.$.requests.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.requests.get(id);\n        this.$.requests.delete(id);\n        entry.$chainAbort(reason || \"$fetchRemove()\");\n    }\n\n    $fetchRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.requests;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$fetchRemove(key, \"$fetchRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Timeout\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitTimeout {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$timeoutRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$timeoutRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeouts\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $timeout(id, delay, handler = null, ...args) {\n        // id\n        // id, delay\n        // id, delay, handler, ...args\n\n        id = this.$.timeouts.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            JFactoryExpect(\"handler\", handler).type(Function, null);\n            if (this.$.timeouts.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$timeout(id)\", given: id })\n            }\n        }\n\n        let timer;\n        let promise = new JFactoryPromise(\n            {\n                name: id,\n                traceSource: jFactoryTrace.captureTraceSource(\"$timeout\"),\n                config: {\n                    chainAutoComplete: true\n                }\n            },\n            resolve => {\n                timer = setTimeout(() => {\n                    if (!promise.$isExpired) {\n                        resolve(handler ? handler(...args) : undefined);\n                    }\n                }, delay)\n            }\n        );\n\n        promise.$chain.data.timer = timer;\n        this.$.timeouts.$registerAsync(id, '$timeout(\"' + id + '\")', promise);\n\n        promise.$chain.then(() => {\n            if (this.$.timeouts.has(id)) {\n                this.$timeoutRemove(id);\n            }\n        });\n\n        return promise;\n    }\n\n    $timeoutRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$timeoutRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$timeoutRemove(reason)\", reason).typeString();\n            if (!this.$.timeouts.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$timeoutRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeouts.get(id)._debug_remove_called) {debugger}\n            this.$.timeouts.get(id)._debug_remove_called = true;\n        }\n\n        let entry = this.$.timeouts.get(id);\n        clearTimeout(entry.$chain.data.timer);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.timeouts.delete(id);\n        entry.$chainAbort(reason || \"$timeoutRemove()\");\n    }\n\n    $timeoutRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES);\n        }\n        let subs = this.$.timeouts;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$timeoutRemove(key, \"$timeoutRemoveAll()\")\n                }\n            }\n        }\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Interval\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitInterval {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$intervalRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$intervalRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeints\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $interval(id, delay, handler, ...args) {\n        id = this.$.timeints.$id_resolve(id);\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            if (this.$.timeints.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$interval(id)\", given: id })\n            }\n        }\n        let timer = setInterval(handler, delay, ...args);\n        this.$.timeints.$registerSync(id, timer)\n    }\n\n    $intervalRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$intervalRemove(id)\", id).typeString();\n            if (!this.$.timeints.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$intervalRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeints.get(id)._debug_remove_called) {debugger}\n            this.$.timeints.get(id)._debug_remove_called = true\n        }\n        clearInterval(this.$.timeints.get(id).$value);\n        this.$.timeints.delete(id)\n    }\n\n    $intervalRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.timeints;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$intervalRemove(key)\n                }\n            }\n        }\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait Mutations\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nif (JFACTORY_DEV) {\n    jFactoryCompat_require(JFACTORY_COMPAT_MutationObserver);\n}\n\nexport class TraitMutation {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$mutationRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$mutationRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"mutations\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $mutation(id, parent, config, handler) {\n        id = this.$.mutations.$id_resolve(id);\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"parent\", parent).type(HTMLElement, Document);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            if (this.$.mutations.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$mutation(id)\", given: id })\n            }\n        }\n        let observer = new MutationObserver(handler);\n        observer.observe(parent, config);\n        this.$.mutations.$registerSync(id, observer);\n    }\n\n    $mutationRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$mutationRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$mutationRemove(reason)\", reason).typeString();\n            if (!this.$.mutations.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$mutationRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.mutations.get(id)._debug_remove_called) {debugger}\n            this.$.mutations.get(id)._debug_remove_called = true\n        }\n        this.$.mutations.get(id).$value.disconnect();\n        this.$.mutations.delete(id)\n    }\n\n    $mutationRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.mutations;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$mutationRemove(key)\n                }\n            }\n        }\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait DOM\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitDOM {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$domRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$domRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"dom\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $dom(id, jQueryArgument, appendTo) {\n        id = this.$.dom.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"jQueryArgument\", jQueryArgument).type(String, jQuery, HTMLElement);\n            appendTo && JFactoryExpect(\"appendTo\", appendTo).type(String, jQuery, HTMLElement);\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$dom(id)\", given: id })\n        }\n\n        let dom = jQuery(jQueryArgument);\n\n        if (dom[0].tagName === \"TEMPLATE\") {\n            dom = jQuery(jQuery(dom[0]).html());\n        }\n\n        if (domId) {\n            if (JFACTORY_DEV) {\n                if (dom[0].nodeType !== Node.ELEMENT_NODE) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"$dom(#id)\",\n                        given: dom,\n                        reason: \"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE\"\n                    })\n                }\n            }\n            dom[0].id = id\n        }\n\n        if (appendTo) {\n            dom.appendTo(appendTo)\n        }\n\n        return this.$.dom.$registerSync(id, dom).$value;\n    }\n\n    $domFetch(id, url, fetchOptions, appendTo) {\n        if (fetchOptions && !helper_isPlainObject(fetchOptions)) {\n            [fetchOptions, appendTo] = [{}, fetchOptions]\n        }\n\n        id = this.$.dom.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n            appendTo && JFactoryExpect(\"appendTo\", appendTo).type(String, Object);\n            fetchOptions && JFactoryExpect(\"fetchOptions\", fetchOptions).type(Object);\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$domFetch(id)\", given: id })\n        }\n\n        let promise = this.$fetchText('$domFetch(\"' + id + '\")', url, fetchOptions)\n            .then(r => {\n                let dom = jQuery(r);\n                if (domId) {\n                    dom[0].id = id\n                }\n                if (appendTo) {\n                    dom.appendTo(appendTo)\n                }\n                return dom\n            });\n\n        this.$.dom.$registerAsync(id, '$domFetch(\"' + id + '\")', promise);\n        return promise\n    }\n\n    $domRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$domRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$domRemove(reason)\", reason).typeString();\n            if (!this.$.dom.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$domRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.dom.get(id)._debug_remove_called) {debugger}\n            this.$.dom.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.dom.get(id);\n        let value = entry.$value;\n        if (value instanceof jQuery) {\n            value.remove()\n        }\n        if (entry instanceof JFactoryFetch) {\n            entry.$chainAbort(reason || \"$domRemove()\");\n        }\n        this.$.dom.delete(id)\n    }\n\n    $domRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.dom;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$domRemove(key)\n                }\n            }\n        }\n    }\n}\n\n/**\n * -----------------------------------------------------------------------------------------------------------------\n * Trait CSS\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport class TraitCSS {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$cssRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$cssRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"css\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $css(id, styleBody) {\n        id = this.$.css.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"css\", styleBody).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$css(id)\", given: id })\n        }\n\n        return this.$.css.$registerSync(id,\n            jQuery(\"<style>\")\n                .attr(cssId ? { id } : {})\n                .html(styleBody)\n                .appendTo(\"head\")\n        ).$value;\n    }\n\n    $cssFetch(id, url, appendTo = \"head\") {\n        id = this.$.css.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$cssFetch(id)\", given: id })\n        }\n\n        url = helper_url_abs(url);\n\n        let exist = jQuery(appendTo).find(`link[href=\"${url}\"]`)[0];\n        if (exist) {\n            exist.dataset.usage = parseInt(exist.dataset.usage) + 1;\n            let dom = jQuery(exist);\n\n            let promise = JFactoryPromise.resolve(\n                {\n                    name: id,\n                    config: { chainAutoComplete: true },\n                    traceSource: jFactoryTrace.captureTraceSource(\"$cssFetch\")\n                },\n                dom\n            );\n            promise.$chain.data.dom = dom;\n            this.$.css.$registerAsync(id, '$cssFetch(\"' + id + '\")', promise);\n\n            return promise\n        } else {\n            let dom;\n            let promise = new JFactoryPromise(\n                {\n                    name: id,\n                    config: { chainAutoComplete: true },\n                    traceSource: jFactoryTrace.captureTraceSource(\"$cssFetch\")\n                },\n                resolve => dom = jQuery(\"<link>\",\n                    { id: cssId ? id : \"\", rel: \"stylesheet\", type: \"text/css\", \"data-usage\": \"1\" })\n                    .appendTo(appendTo)\n                    .on(\"load\", () => resolve(dom))\n                    .attr(\"href\", url)\n            );\n\n            promise.$chain.data.dom = dom;\n            this.$.css.$registerAsync(id, '$cssFetch(\"' + id + '\")', promise);\n            return promise\n        }\n    }\n\n    $cssRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$cssRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$cssRemove(reason)\", reason).typeString();\n            if (!this.$.css.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$cssRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.css.get(id)._debug_remove_called) {debugger}\n            this.$.css.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.css.get(id);\n        let value = entry.$chain && entry.$chain.data.dom || entry.$value;\n        if (value instanceof jQuery) {\n            let usage = parseInt(value[0].dataset.usage) - 1;\n            if (usage) {\n                value[0].dataset.usage = usage\n            } else {\n                value.remove()\n            }\n        }\n        if (entry instanceof JFactoryPromise) {\n            entry.$chainAbort(reason || \"$cssRemove()\")\n        }\n        this.$.css.delete(id)\n    }\n\n    $cssRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.css;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$cssRemove(key)\n                }\n            }\n        }\n    }\n}\n\nexport class TraitLibVue {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$vueRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$vueRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"vue\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $vue(id, vue) {\n        id = this.$.vue.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"vue\", vue).type(Object);\n        }\n\n        if (JFACTORY_DEV && this.$.vue.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$vue(id)\", given: id })\n        }\n\n        return this.$.vue.$registerSync(id, vue).$value;\n    }\n\n    $vueRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$vueRemove(id)\", id).typeString();\n            if (!this.$.vue.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$vueRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.vue.get(id)._debug_remove_called) {debugger}\n            this.$.vue.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.vue.get(id);\n        jQuery(entry.$value.$el).remove();\n        entry.$value.$destroy();\n        this.$.vue.delete(id)\n    }\n\n    $vueRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.vue;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$vueRemove(key)\n                }\n            }\n        }\n    }\n}\n\nexport class TraitLibReact {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$reactRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$reactRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"react\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $react(id, container, element, ...renderOtherArguments) {\n        id = this.$.react.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            if (!jFactory.ReactDOM) {\n                throw new Error(\"jFactory.ReactDOM=ReactDOM must be set before using the React Trait\");\n            }\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"container\", container).type(HTMLElement, jQuery);\n        }\n\n        if (JFACTORY_DEV && this.$.react.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$react(id)\", given: id })\n        }\n\n        container = jQuery(container)[0];\n        let view = jFactory.ReactDOM.render(element, container, ...renderOtherArguments);\n        return this.$.react.$registerSync(id, { container, view }).$value.view;\n    }\n\n    $reactRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$reactRemove(id)\", id).typeString();\n            if (!this.$.react.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$reactRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.react.get(id)._debug_remove_called) {debugger}\n            this.$.react.get(id)._debug_remove_called = true\n        }\n\n        let value = this.$.react.get(id).$value;\n        let el = value.container;\n        if (el) {\n            if (!jFactory.ReactDOM.unmountComponentAtNode(el)) {\n                if (JFACTORY_DEV) {\n                    this.$logWarn(\"unmountComponentAtNode failed to unmount\", el);\n                }\n            }\n            jQuery(el).remove();\n        }\n        this.$.react.delete(id)\n    }\n\n    $reactRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.react;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$reactRemove(key)\n                }\n            }\n        }\n    }\n}","/**\n * -----------------------------------------------------------------------------------------------------------------\n * JFactoryComponents\n * -----------------------------------------------------------------------------------------------------------------\n * Status: Beta\n * -----------------------------------------------------------------------------------------------------------------\n */\nimport { jFactoryTraits } from \"../jFactory-traits.mjs\";\nimport { jFactoryCfg } from \"../jFactory-config.mjs\";\n\nimport {\n    TraitAbout,\n    TraitCore,\n    TraitEvents,\n    TraitLog,\n    TraitService,\n    TraitState,\n    TraitTask\n} from \"../TraitsCore.mjs\";\n\nimport {\n    TraitCSS,\n    TraitDOM,\n    TraitFetch,\n    TraitInterval,\n    TraitLibReact,\n    TraitLibVue,\n    TraitMutation,\n    TraitTimeout\n} from \"../TraitsComponents.mjs\";\n\n/**\n * @mixes TraitCore\n * @mixes TraitAbout\n * @mixes TraitLog\n * @mixes TraitEvents\n * @mixes TraitState\n * @mixes TraitService\n * @mixes TraitTask\n */\nexport class JFactoryCoreObject {\n    constructor(name) {\n        JFactoryCoreObject.inject(this, JFactoryCoreObject, name)\n    }\n\n    static inject(target, constructor, name) {\n        jFactoryTraits(target, constructor)\n            .use(TraitCore)\n            .use(TraitAbout, { name })\n            .use(TraitLog)\n            .use(TraitEvents)\n            .use(TraitState)\n            .use(TraitService)\n            .use(TraitTask);\n    }\n}\n\n/**\n * @mixes TraitFetch\n * @mixes TraitDOM\n * @mixes TraitCSS\n * @mixes TraitMutation\n * @mixes TraitTimeout\n * @mixes TraitInterval\n * @mixes TraitLibVue\n * @mixes TraitLibReact\n */\nexport class JFactoryComponent extends JFactoryCoreObject {\n    constructor(name) {\n        super(name);\n        JFactoryComponent.inject(this, JFactoryComponent)\n    }\n\n    static inject(target, constructor) {\n        jFactoryTraits(target, constructor)\n        .use(TraitFetch)\n        .use(TraitDOM)\n        .use(TraitCSS)\n        .use(TraitMutation)\n        .use(TraitTimeout)\n        .use(TraitInterval)\n        .use(TraitLibVue)\n        .use(TraitLibReact);\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// Config jFactory baseComponent\n// -----------------------------------------------------------------------------------------------------------------\n\njFactoryCfg('jFactory', { baseComponent: JFactoryComponent });","/**\n * -----------------------------------------------------------------------------------------------------------------\n * jFactory entry file (see package.json scripts to compile)\n * -----------------------------------------------------------------------------------------------------------------\n * The ES version is exported as separated modules to benefit from module Tree Shaking\n * -----------------------------------------------------------------------------------------------------------------\n */\n\nexport * from \"./lib/index.mjs\";\nexport * from \"./jFactory-env.mjs\";\nexport * from \"./jFactory-config.mjs\";\nexport * from \"./jFactory-helpers.mjs\";\nexport * from \"./jFactory.mjs\"\n\nimport { jFactoryBootstrap } from \"./jFactory-bootstrap.mjs\";\nexport { jFactoryBootstrap }\njFactoryBootstrap()"],"names":["JFACTORY_DEV","JFACTORY_CLI","env","isNode","JFACTORY_REPL","isPlayground","JFACTORY_LOG","JFACTORY_TRACE","JFACTORY_BOOT","key","globalThis","process","versions","node","hosts","indexOf","URL","document","location","href","hostname","helper_lowerFirst","str","toLowerCase","slice","helper_get","object","path","split","reduce","acc","helper_camelCase","replace","match","chr","toUpperCase","NOOP","helper_setFunctionName","name","f","Object","defineProperty","value","helper_url_base","window","helper_url_abs","url","helper_isNative","Function","prototype","toString","call","helper_deferred","Deferred","constructor","this","_done","_fail","execute","list","h","fulfilled","resolve","reject","done","callback","push","fail","JFACTORY_CFG","jFactoryCfg","config","undefined","JFACTORY_COMPAT_fetch","test","fetch","info","JFACTORY_COMPAT_Request","Request","JFACTORY_COMPAT_AbortController","AbortController","signal","deferred","tracer","isLoaded","seq","jFactoryBootstrap","handler","init","jFactoryBootstrap_onBoot","Error","JFactoryTrace","omitAboveFunctionName","omitSelf","stackTraceLimit","Infinity","_stackTraceLimit","source","printable","asyncPrintable","Promise","createErrorFromStack","stack","e","captureTraceSource","attachTrace","jFactoryTrace","CONFIG","JFactoryError","message","data","assign","create","super","toPrintable","$data","Symbol","iterator","getId","keys","find","val","toPrintableData","templateData","nv","entries","JSON","stringify","length","jsonMax","substring","String","template","templateMessage","part","placeholder","re","regPlaceholder","lastIndex","exec","trim","helper_template","join","factory","type","ret","traceSource","E","JFACTORY_ERR_INVALID_VALUE","JFACTORY_ERR_INVALID_CALL","JFACTORY_ERR_PROMISE_EXPIRED","JFACTORY_ERR_REQUEST_ERROR","JFACTORY_ERR_KEY_DUPLICATED","JFACTORY_ERR_KEY_MISSING","JFactoryExpect","label","error","target","reason","given","staticMethods","notUndefined","notEmptyString","notFalsy","validSpaces","matchReg","reg","expected","ok","map","typeNull","typeBoolean","typeString","helper_isString","typeNumber","helper_isNumber","typeFunction","typePlainObject","helper_isPlainObject","equal","equalIn","Array","isArray","values","includes","properties","getOwnPropertyNames","writable","getOwnPropertyDescriptor","notWritable","enumerable","propertyIsEnumerable","notEnumerable","configurable","notConfigurable","reservedProperty","args","JFactoryObject","createDescriptors","descriptorPrototype","DESCRIPTORS_PROTOTYPE","o","NONE","WRITABLE","ENUMERABLE","CONFIGURABLE","CONFIGURABLE_WRITABLE","WRITABLE_CONFIGURABLE","CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE","ENUMERABLE_WRITABLE","WRITABLE_ENUMERABLE","WRITABLE_ENUMERABLE_CONFIGURABLE","WRITABLE_CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE_WRITABLE","ENUMERABLE_WRITABLE_CONFIGURABLE","CONFIGURABLE_WRITABLE_ENUMERABLE","CONFIGURABLE_ENUMERABLE_WRITABLE","READONLY","property","descriptor","descriptors","getOwnPropertySymbols","defineProperties","flat","disinherit","moduleGenId","uid","JFactoryAbout","owner","about","fingerprint","JFactoryTraits","callerInstance","callerConstructor","options","use","trait","traitArgs","cache","CACHE","get","has","console","warn","add","set","WeakSet","JFactoryTrait","export","traitInstance","trait_constructor","apply","isStatic","sourceDescriptor","getOwnPropertyDescriptors","propertyName","prefix","getPrefix","getTarget","propertyDescriptor","parsed","parser","defaultParser","EXCLUDES","WeakMap","JFactoryFunctionComposer","handlers","handlerGroups","handlerGroup","first","arguments","unshift","last","compose","composer","composite","context","canceled","parameters","from","result","iteration","next","composite_iterator","scope","then","filter","Boolean","JFactoryFunctionExpirable","originalHandler","expiredCalls","expired","isExpired","expirable","setExpired","addExpireCondition","condition","bind","onExpired","onNotExpired","MaxWarningExpiration","JFactoryFunctionConditional","conditional","addCondition","handle","jFactoryFunctionWrappable","JFactoryFunctionWrappable","wrappable","beforeAll","justBefore","justAfter","afterAll","jFactoryTraits","$","states","enabled","service","phase","$logErr","jFactory","SYMBOL_ENABLED","JFactoryLogger","helper_defaultsDeep","installAccessor","parentLogger","v","enable","disable","disallow","nativeName","filters","allow","targetName","accessor","formatter","createSubLogger","sub","styles_css","styles_cli","FORMATTER_NATIVE","log","logger","FORMATTER_CLI","FORMATTER_BROWSER","DEFAULT_CONDITION","DEFAULT_CONFIG","JFactoryPromise","executor","chainId","_resolve","_reject","chain","JFactoryPromiseChain","$chain","$type","$value","$isSettled","$isRejected","$isFulfilled","$isExpired","$isAborted","tryAutoComplete","isPending","$chainComplete","onResolve","onReject","TypeError","$dev_name","called","resolvePromise","y","rejectPromise","r","errorExpired","onSettle","chainMap","chainConfig","chainAutoComplete","size","_chainAutoComplete","__resolve__","__reject__","onFulfilled","onRejected","forceType","wrappedFulfilled","wrappedRejected","newPromise","startsWith","__onFulfilled__","__onRejected__","optionalArgs","$thenIfExpired","chainRoot","$chainAbort","complete","$chainAutoComplete","promise","abort","silent","chainName","Map","isCompleted","__deferred__","item","JFactoryPromiseSync","JFactoryEvents","registry","jQuery","onListenerUpdate","onObserverUpdate","on","events","selector","wrappedHandler","off","triggerParallel","pending","event","trigger","triggerHandler","all","triggerSeries","async","JFactoryEventsManager","parent","affiliateRules","affiliateAddRule","rule_namespace","affiliate","namespaces","JFactoryEventSelectorParser","parsedEvent","namespace","addNamespace","argL","jquery","getDomListeners","elm","_data","entry","types","JFactoryEventSelector","hasNamespace","getObservers","_events","expando","k","eventTypeEntry","selectors","s","Set","deleteNamespace","delete","JFactoryTime","Date","toLocaleTimeString","getUTCMilliseconds","valueOf","$toDurationString","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","a","JFactoryTimeTrace","elapsed","t1","t0","end","TraitCore","SubMap","$registerSync","$phaseRemove","TraitService","getContextualRemovePhase","$registerAsync","taskName","task","$task","$id_resolve","id","id_autoinc","proto","SYMBOL_PRIVATE","createSubMap","tasks","requests","TraitAbout","TraitLog","TraitTask","executorOrValue","$taskRemove","$taskRemoveAll","removePhase","$taskPromiseAll","autoComplete","TraitEvents","assignPrivate","custom","kernel","eventManager","listeners","observers","$on","$off","$trigger","$triggerParallel","$notify","TraitState","stateRoutes","Proxy","$state","before","after","notify","previousVal","PHASE","phaseQueue","phaseTask","phaseMap","install","uninstall","installed","setEventNamespaceRemovePhase","phaseResolve","catch","onInstall","onEnable","onDisable","onUninstall","removal","DISABLE","UNINSTALL","$install","p","INSTALL","$enable","ENABLE","$disable","phaseKill","$uninstall","component","jFactoryCoreObject","PHASE_REVERT","curRemovePhase","PHASES","newRemovePhase","JFactoryFetch","fetchOptions","fetchRequest","response","fetchResponse","status","statusText","$typeText","text","responseText","$typeJSON","json","responseJSON","abortCtrl","abortController","fetchAbortController","compat","jFactoryCompat_require","TraitFetch","$fetchRemoveAll","$fetch","$fetchRemove","$fetchText","$fetchJSON","subs","TraitTimeout","$timeoutRemoveAll","$timeout","delay","timer","timeouts","setTimeout","$timeoutRemove","clearTimeout","TraitInterval","$intervalRemoveAll","$interval","timeints","setInterval","$intervalRemove","clearInterval","TraitMutation","$mutationRemoveAll","$mutation","mutations","observer","MutationObserver","observe","$mutationRemove","disconnect","TraitDOM","$domRemoveAll","$dom","jQueryArgument","appendTo","domId","dom","tagName","html","$domFetch","$domRemove","remove","TraitCSS","$cssRemoveAll","$css","styleBody","cssId","css","attr","$cssFetch","exist","dataset","usage","parseInt","rel","$cssRemove","TraitLibVue","$vueRemoveAll","$vue","vue","$vueRemove","$el","$destroy","TraitLibReact","$reactRemoveAll","$react","container","element","renderOtherArguments","react","view","ReactDOM","render","$reactRemove","el","unmountComponentAtNode","JFactoryCoreObject","inject","JFactoryComponent","baseComponent","i","traceFrames","createStackFromTraceFrames","filterTraceFrames","StackTrace","getSync","libOptions","useSourcemap","fromError","findIndex","functionName","endsWith","formatters","format","navigator","userAgent"],"mappings":"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"}