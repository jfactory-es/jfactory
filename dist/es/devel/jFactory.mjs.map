{"version":3,"file":"jFactory.mjs","sources":["../../../src/jFactory.mjs"],"sourcesContent":["import { jFactoryTraits } from \"./jFactory-traits\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Predefined Components\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @mixes TraitCore\n * @mixes TraitAbout\n * @mixes TraitLog\n * @mixes TraitEvents\n * @mixes TraitState\n * @mixes TraitService\n * @mixes TraitTask\n */\nexport class JFactoryCoreObject {\n    constructor(name) {\n        JFactoryCoreObject.inject(this, JFactoryCoreObject, name)\n    }\n\n    static inject(target, constructor, name) {\n        jFactoryTraits(target, constructor)\n            .use(jFactory.TraitCore)\n            .use(jFactory.TraitAbout, { name })\n            .use(jFactory.TraitLog)\n            .use(jFactory.TraitEvents)\n            .use(jFactory.TraitState)\n            .use(jFactory.TraitService)\n            .use(jFactory.TraitTask);\n    }\n}\n\n/**\n * @mixes TraitFetch\n * @mixes TraitDOM\n * @mixes TraitCSS\n * @mixes TraitMutation\n * @mixes TraitTimeout\n * @mixes TraitInterval\n * @mixes TraitLibVue\n * @mixes TraitLibReact\n */\nexport class JFactoryComponent extends JFactoryCoreObject {\n    constructor(name) {\n        super(name);\n        JFactoryComponent.inject(this, JFactoryComponent)\n    }\n\n    static inject(target, constructor) {\n        jFactoryTraits(target, constructor)\n            .use(jFactory.TraitFetch)\n            .use(jFactory.TraitDOM)\n            .use(jFactory.TraitCSS)\n            .use(jFactory.TraitMutation)\n            .use(jFactory.TraitTimeout)\n            .use(jFactory.TraitInterval)\n            .use(jFactory.TraitLibVue)\n            .use(jFactory.TraitLibReact);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory\n// ---------------------------------------------------------------------------------------------------------------------\n\n/** @return {JFactoryComponent} */\nexport const jFactory = (name, properties) => Object.assign(new JFactoryComponent(name), properties);"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,kBAAkB,CAAC;AAChC,IAAI,WAAW,CAAC,IAAI,EAAE;AACtB,QAAQ,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAC;AACjE,KAAK;AACL;AACA,IAAI,OAAO,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE;AAC7C,QAAQ,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC;AAC3C,aAAa,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC;AACpC,aAAa,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,CAAC;AAC/C,aAAa,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACnC,aAAa,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC;AACtC,aAAa,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC;AACrC,aAAa,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC;AACvC,aAAa,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACrC,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,iBAAiB,SAAS,kBAAkB,CAAC;AAC1D,IAAI,WAAW,CAAC,IAAI,EAAE;AACtB,QAAQ,KAAK,CAAC,IAAI,CAAC,CAAC;AACpB,QAAQ,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,iBAAiB,EAAC;AACzD,KAAK;AACL;AACA,IAAI,OAAO,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE;AACvC,QAAQ,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC;AAC3C,aAAa,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC;AACrC,aAAa,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACnC,aAAa,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACnC,aAAa,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC;AACxC,aAAa,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC;AACvC,aAAa,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC;AACxC,aAAa,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC;AACtC,aAAa,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;AACzC,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,QAAQ,GAAG,CAAC,IAAI,EAAE,UAAU,KAAK,MAAM,CAAC,MAAM,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE,UAAU;;;;"}