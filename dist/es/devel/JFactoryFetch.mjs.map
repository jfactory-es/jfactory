{"version":3,"file":"JFactoryFetch.mjs","sources":["../../../src/JFactoryFetch.mjs"],"sourcesContent":["import { JFACTORY_ERR_REQUEST_ERROR } from \"./JFactoryError.mjs\";\nimport { JFactoryPromise } from \"./JFactoryPromise.mjs\";\nimport {\n    JFACTORY_COMPAT_AbortController,\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    jFactoryCompat_require\n} from \"./jFactory-compat.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFetch\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFetch extends JFactoryPromise {\n\n    constructor(optionalArgs, url, fetchOptions = {}) {\n        if (typeof optionalArgs === \"function\") {\n            super(optionalArgs);\n        } else {\n            if (typeof optionalArgs === \"string\") {\n                [optionalArgs, url, fetchOptions] = [{}, arguments[0], arguments[1]]\n            }\n\n            let fetchRequest = new Request(url, fetchOptions);\n\n            super(optionalArgs, (resolve, reject) => {\n                let promise = fetch(fetchRequest)\n                    .then(response => {\n                        this.$chain.fetchResponse = response;\n                        if (!response.ok) {\n                            throw Error(response.status + \":\" + response.statusText);\n                        }\n                        return response\n                    });\n\n                if (fetchOptions.$typeText) {\n                    promise = promise\n                        .then(response => response.text())\n                        .then(r => this.$chain.responseText = r);\n                }\n                else if (fetchOptions.$typeJSON) {\n                    promise = promise\n                        .then(response => response.json())\n                        .then(r => this.$chain.responseJSON = r);\n                }\n\n                promise = promise.catch(reason => {\n                    throw new JFACTORY_ERR_REQUEST_ERROR({\n                        reason: reason.message || reason,\n                        target: this.$chain.fetchResponse && this.$chain.fetchResponse.url || url,\n                        owner: this,\n                        fetchOptions,\n                        fetchRequest,\n                        fetchResponse: this.$chain.fetchResponse || null\n                    }, optionalArgs.traceSource)\n                });\n\n                promise.then(resolve, reject)\n            });\n\n            this.$chain.fetchOptions = fetchOptions;\n            this.$chain.fetchRequest = fetchRequest;\n\n            let abortCtrl = fetchOptions.abortController || new AbortController();\n            fetchOptions.signal = abortCtrl.signal;\n            this.$chain.fetchAbortController = abortCtrl;\n        }\n    }\n\n    $chainAbort(reason = \"request aborted\") {\n        super.$chainAbort(reason);\n        this.$chain.fetchAbortController.abort();\n        return this\n    }\n}\n\njFactoryCompat_require(\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    JFACTORY_COMPAT_AbortController\n);"],"names":[],"mappings":"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"}