{"version":3,"file":"JFactoryAbout.mjs","sources":["../../../src/JFactoryAbout.mjs"],"sourcesContent":["import { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { helper_camelCase } from \"./jFactory-helpers.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { JFactoryObject } from \"./JFactoryObject.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryAbout\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\nexport class JFactoryAbout {\n    constructor(owner, about = {}) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout(owner)\", owner).type(Object);\n            JFactoryExpect(\"JFactoryAbout(about)\", about)\n                .typePlainObject()\n                .reservedProperty(\"uid\")\n                .reservedProperty(\"fingerprint\");\n            if (\"name\" in about) {\n                JFactoryExpect(\"JFactoryAbout(about.name)\", about.name)\n                    .typeString()\n                    .notEmptyString()\n            }\n        }\n\n        let name;\n        let fingerprint;\n        let uid = moduleGenId();\n\n        if (about.name) {\n            name = about.name;\n            delete about.name;\n            fingerprint = \"jFactory\" + \"_\" + helper_camelCase(name.toLowerCase()) + \"_\" + uid\n        } else {\n            delete about.name;\n            name = `[${owner.constructor.name}#${uid}]`;\n            fingerprint = \"jFactory\" + \"_\" + owner.constructor.name + \"_\" + uid;\n        }\n\n        JFactoryObject.assign(this, /** @lends JFactoryAbout# */ {\n            uid,\n            name,\n            fingerprint\n        }, JFactoryObject.descriptors.ENUMERABLE);\n\n        Object.assign(this, about);\n\n        // ---\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout.name\", this.name)\n                .matchReg(/^[\\w[\\]#]+$/);\n            JFactoryExpect(\"JFactoryAbout.fingerprint\", this.fingerprint)\n                .matchReg(/^[\\w]+$/);\n        }\n    }\n}"],"names":[],"mappings":";;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,GAAG,MAAM,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC;AACjE;AACO,MAAM,aAAa,CAAC;AAC3B,IAAI,WAAW,CAAC,KAAK,EAAE,KAAK,GAAG,EAAE,EAAE;AACnC,QAA0B;AAC1B,YAAY,cAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvE,YAAY,cAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC;AACzD,iBAAiB,eAAe,EAAE;AAClC,iBAAiB,gBAAgB,CAAC,KAAK,CAAC;AACxC,iBAAiB,gBAAgB,CAAC,aAAa,CAAC,CAAC;AACjD,YAAY,IAAI,MAAM,IAAI,KAAK,EAAE;AACjC,gBAAgB,cAAc,CAAC,2BAA2B,EAAE,KAAK,CAAC,IAAI,CAAC;AACvE,qBAAqB,UAAU,EAAE;AACjC,qBAAqB,cAAc,GAAE;AACrC,aAAa;AACb,SAAS;AACT;AACA,QAAQ,IAAI,IAAI,CAAC;AACjB,QAAQ,IAAI,WAAW,CAAC;AACxB,QAAQ,IAAI,GAAG,GAAG,WAAW,EAAE,CAAC;AAChC;AACA,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE;AACxB,YAAY,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;AAC9B,YAAY,OAAO,KAAK,CAAC,IAAI,CAAC;AAC9B,YAAY,WAAW,GAAG,UAAU,GAAG,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG,GAAG,IAAG;AAC7F,SAAS,MAAM;AACf,YAAY,OAAO,KAAK,CAAC,IAAI,CAAC;AAC9B,YAAY,IAAI,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACxD,YAAY,WAAW,GAAG,UAAU,GAAG,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAChF,SAAS;AACT;AACA,QAAQ,cAAc,CAAC,MAAM,CAAC,IAAI,+BAA+B;AACjE,YAAY,GAAG;AACf,YAAY,IAAI;AAChB,YAAY,WAAW;AACvB,SAAS,EAAE,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAClD;AACA,QAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACnC;AACA;AACA;AACA,QAA0B;AAC1B,YAAY,cAAc,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC;AAC3D,iBAAiB,QAAQ,CAAC,aAAa,CAAC,CAAC;AACzC,YAAY,cAAc,CAAC,2BAA2B,EAAE,IAAI,CAAC,WAAW,CAAC;AACzE,iBAAiB,QAAQ,CAAC,SAAS,CAAC,CAAC;AACrC,SAAS;AACT,KAAK;AACL;;;;"}