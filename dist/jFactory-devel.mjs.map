{"version":3,"file":"jFactory-devel.mjs","sources":["../src/jFactory-env.mjs","../src/jFactory-helpers.mjs","../src/jFactory-compat.mjs","../src/jFactory-bootstrap.mjs","../src/JFactoryTrace.mjs","../src/JFactoryError.mjs","../src/JFactoryExpect.mjs","../src/JFactoryObject.mjs","../src/JFactoryAbout.mjs","../src/JFactoryPromise.mjs","../src/JFactoryFunction.mjs","../src/JFactoryEvents.mjs","../src/JFactoryFetch.mjs","../src/JFactoryLogger.mjs","../src/JFactoryTime.mjs","../src/JFactoryTraits.mjs","../src/jFactory-traits.mjs","../src/jFactory.mjs","../src/TraitsCore.mjs","../src/TraitsComponents.mjs","../src/index.mjs"],"sourcesContent":["/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory Env\n// ---------------------------------------------------------------------------------------------------------------------\n// Contextualize jFactory for bundle, raw source or partial export usage\n// ---------------------------------------------------------------------------------------------------------------------\n\n// The official builder replaces this line with the version extracted from package.json\nexport const JFACTORY_VER = \"(custom build)\";\n\n// Immutable configuration\n// A builder can replace env(\"JFACTORY_ENV_*\") by hard coded true/false primitives,\n// allowing the bundler to remove unused code (Tree Shaking)\nexport const JFACTORY_CLI   = env(\"JFACTORY_ENV_CLI\") ?? isNode(); // CLI Mode\nexport const JFACTORY_DEV   = env(\"JFACTORY_ENV_DEV\") ?? true; // Developer Mode\nexport const JFACTORY_DEBUG = env(\"JFACTORY_ENV_DEBUG\") ?? false; // Debug the library\nexport const JFACTORY_LOG   = env(\"JFACTORY_ENV_LOG\") ?? (JFACTORY_DEV && !JFACTORY_CLI || JFACTORY_DEBUG)\nexport const JFACTORY_TRACE = env(\"JFACTORY_ENV_TRACE\") ?? (JFACTORY_DEV && !JFACTORY_CLI || JFACTORY_DEBUG)\nexport const JFACTORY_BOOT  = env(\"JFACTORY_ENV_BOOT\") ?? true; // Allow autoboot at load\n\nexport const jFactoryEnv = env;\nexport const jFactoryCfg = cfg;\nexport const JFACTORY_CFG = {};\n\nfunction env(key) {\n    let env = globalThis[key];\n    delete globalThis[key];\n    return env\n}\n\nfunction cfg(key, val) {\n    if (JFACTORY_CFG[key] === undefined) {\n        JFACTORY_CFG[key] = Object.assign({}, val, globalThis[key]);\n        delete globalThis[key];\n    } else if (val !== undefined) {\n        JFACTORY_CFG[key] = val === false ? false : Object.assign(JFACTORY_CFG[key], val)\n    }\n    return JFACTORY_CFG[key]\n}\n\nfunction isNode() {\n    return (\n        typeof process === \"object\" &&\n        typeof process.versions === \"object\" &&\n        process.versions.node\n    )\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport _ from \"lodash\";\nimport $ from \"jquery\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory Helpers\n// ---------------------------------------------------------------------------------------------------------------------\n// Centralize helpers and externals in one module\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const jQuery = $;\n\nexport const helper_isString = _.isString;\nexport const helper_isNumber = _.isNumber;\nexport const helper_isPlainObject = _.isPlainObject;\nexport const helper_defaultsDeep = _.defaultsDeep;\nexport const helper_lowerFirst = _.lowerFirst;\nexport const helper_get = _.get;\nexport const helper_template = _.template;\nexport const helper_camelCase = _.camelCase;\n\nexport const NOOP = () => {};\nexport const helper_setFunctionName = (name, f) => Object.defineProperty(f, \"name\", { value: name });\nconst helper_url_abs_a = /*#__PURE__*/document.createElement(\"a\");\nexport const helper_url_abs = url => { helper_url_abs_a.href = url; return helper_url_abs_a.href }\n\nexport const helper_isNative = function(f) {\n    return typeof f === \"function\" && Function.prototype.toString.call(f).indexOf(\"[native code]\") !== -1\n}\n\nexport function helper_useragent(id) {\n    return globalThis.navigator &&\n    globalThis.navigator.userAgent &&\n    globalThis.navigator.userAgent.indexOf(id + \"/\") > 0\n}\n\nexport const helper_deferred = () => new Deferred;\nclass Deferred {\n    constructor() {\n        this._done = [];\n        this._fail = [];\n    }\n    execute(list) {\n        for (let h of list){\n            h()\n        }\n        this.fulfilled = true\n    }\n    resolve() {\n        this.execute(this._done);\n    }\n    reject() {\n        this.execute(this._fail);\n    }\n    done(callback) {\n        if (this.fulfilled) {\n            callback()\n        } else {\n            this._done.push(callback);\n        }\n    }\n    fail(callback) {\n        if (this.fulfilled) {\n            callback()\n        } else {\n            this._fail.push(callback);\n        }\n    }\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryCompat\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const JFACTORY_COMPAT_fetch = {\n    name: \"fetch\",\n    test: () => fetch,\n    info: \"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch\"\n}\nexport const JFACTORY_COMPAT_Request = {\n    name: \"Request\",\n    test: () => Request,\n    info: \"https://developer.mozilla.org/docs/Web/API/Request\"\n}\nexport const JFACTORY_COMPAT_AbortController = {\n    name: \"AbortController/AbortSignal\",\n    test: () => new AbortController().signal,\n    info: \"https://developer.mozilla.org/docs/Web/API/AbortController, \" +\n        \"https://developer.mozilla.org/docs/Web/API/AbortSignal\"\n}\nexport const JFACTORY_COMPAT_MutationObserver = {\n    name: \"MutationObserver\",\n    test: () => MutationObserver,\n    info: \"https://developer.mozilla.org/docs/Web/API/MutationObserver\"\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n\nlet list = {};\n\nexport function jFactoryCompat_require(...args) {\n    for (let compat of args) {\n        list[compat.name] = compat\n    }\n}\n\nexport function jFactoryCompat_run() {\n    for (let [name, entry] of Object.entries(list)) {\n        let pass;\n        try {pass = Boolean(entry.test())} catch (ignore) {}\n        if (!pass) {\n            console.warn(`jFactory may require the support of \"${name}\", ${entry.info}`)\n        }\n    }\n    list = null;\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { JFACTORY_VER } from \"./jFactory-env.mjs\";\nimport { JFACTORY_LOG } from \"./jFactory-env.mjs\";\nimport { JFACTORY_BOOT } from \"./jFactory-env.mjs\";\nimport { jFactoryCompat_run } from \"./jFactory-compat.mjs\";\n\nexport function jFactoryBootstrap(auto) {\n    if (!_isLoaded) {\n        if (auto && !JFACTORY_BOOT) {\n            // auto bootstrap is disabled by env\n            return\n        }\n        if (JFACTORY_DEV) {\n            console.log(`jFactory ${JFACTORY_VER} running in development mode; performances will be affected`);\n            !JFACTORY_LOG && console.log(\"jFactory: logs disabled\");\n            jFactoryCompat_run()\n        }\n        init();\n        _isLoaded = true\n    }\n}\n\nlet seq = [];\nfunction init() {\n    if (seq) {\n        for (let handler of seq) {\n            handler()\n        }\n        seq = null;\n    }\n}\n\nlet _isLoaded = false;\nexport function jFactoryBootstrap_expected() {\n    if (!_isLoaded) {\n        throw new Error(\"jFactoryBootstrap() must be called before using jFactory\")\n    }\n}\n\nexport function jFactoryBootstrap_onBoot(handler) {\n    if (_isLoaded) {\n        throw new Error(\"jFactoryBootstrap() already called\")\n    }\n    seq.push(handler)\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { JFACTORY_TRACE } from \"./jFactory-env.mjs\";\nimport { NOOP, helper_useragent } from \"./jFactory-helpers.mjs\";\nimport { jFactoryCfg } from \"./jFactory-env.mjs\";\nimport { jFactoryBootstrap_onBoot } from \"./jFactory-bootstrap.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTrace 1.7\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n// - #limitation# Error.stack is not standardized\n// - #limitation# Error.stack is not source-mapped\n// - #limitation# bug https://bugzilla.mozilla.org/show_bug.cgi?id=1584244\n// - #limitation# StackTrace.js resolves sourcemaps. Unfortunately, it doesn't work with \"webpack:\" protocol\n//   see https://github.com/stacktracejs/stacktrace.js/issues/209\n// ---------------------------------------------------------------------------------------------------------------------\n// https://github.com/mozilla/source-map/\n// https://www.stacktracejs.com/\n// https://github.com/novocaine/sourcemapped-stacktrace\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTrace {\n\n    constructor(omitAboveFunctionName = \"JFactoryTrace\", omitSelf = true, stackTraceLimit = Infinity) {\n        let _stackTraceLimit;\n        if (stackTraceLimit) {\n            _stackTraceLimit = Error.stackTraceLimit;\n            Error.stackTraceLimit = stackTraceLimit\n        }\n\n        this.source = new Error();\n        this.omitAboveFunctionName = omitAboveFunctionName;\n        this.omitSelf = omitSelf;\n\n        if (stackTraceLimit) {\n            Error.stackTraceLimit = _stackTraceLimit\n        }\n\n        this.init()\n    }\n\n    init() {\n        this.printable = this.source;\n        this.asyncPrintable = Promise.resolve(this.printable)\n    }\n\n    static createErrorFromStack(stack) {\n        let e = new Error();\n        e.name = \"JFactoryTrace\";\n        e.stack = stack;\n        return e\n    }\n}\n\nexport class JFactoryTrace_LIB_STACKTRACE extends JFactoryTrace {\n\n    init() {\n        let h = traceFrames => {\n            this.printable = this.constructor.createErrorFromStack(\n                this.createStackFromTraceFrames(\n                    this.filterTraceFrames(traceFrames)\n                )\n            )\n        }\n\n        h(StackTrace.getSync(this.source, config.libOptions));\n        if (config.useSourcemap) {\n            this.asyncPrintable = StackTrace.fromError(this.source, config.libOptions).then(h)\n        } else {\n            this.asyncPrintable = Promise.resolve(this.printable)\n        }\n    }\n\n    filterTraceFrames(traceFrames) {\n        if (this.omitAboveFunctionName) {\n            let slice = traceFrames.findIndex(\n                value => value.functionName && value.functionName.endsWith(this.omitAboveFunctionName)\n            );\n            if (slice > 0) {\n                if (this.omitSelf) {\n                    slice++\n                }\n                traceFrames = traceFrames.slice(slice);\n            }\n        }\n        return traceFrames\n    }\n\n    createStackFromTraceFrames(traceFrames) {\n        for (let formatter of Object.values(jFactoryTrace.formatters)) {\n            if (formatter.test()) {\n                return formatter.format(traceFrames)\n            }\n        }\n        return this.source.stack\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryTrace\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nlet tracer;\nif (JFACTORY_DEV && JFACTORY_TRACE) {\n\n    tracer = {\n\n        captureTraceSource(omitAboveFunctionName, omitSelf, stackTraceLimit) {\n            return new(config.tracer || JFactoryTrace)(omitAboveFunctionName, omitSelf, stackTraceLimit)\n        },\n\n        attachTrace(\n            targetObject, traceSource /* or omitAboveFunctionName */,\n            traceLogKey = config.keys[0], traceSourceKey = config.keys[1],\n            label = config.label\n        ) {\n            if (typeof traceSource !== \"object\") {\n                traceSource = this.captureTraceSource(traceSource || \"attachTrace\", !traceSource);\n            }\n\n            let log = () => console.log(traceSource.printable) || label || \"The stack has been printed in the console\";\n\n            Object.defineProperty(targetObject, traceLogKey, {\n                // hide the function body to improve readability in devtool\n                get: () => log()\n            });\n\n            Object.defineProperty(targetObject, traceSourceKey, {\n                value: traceSource\n            });\n        },\n\n        formatters: {\n\n            webkit: {\n                test() {\n                    return helper_useragent(\"Chrome\")\n                },\n                format(traceFrames) {\n                    // Chrome syntax\n                    // String must start with \"Error\" and parenthesis are important\n                    // => The console will convert the uri using sourcemaps\n                    return \"Error (generated by JFactoryTrace)\\n\" +\n                        traceFrames.map(sf => {\n                            let s = \"\\tat \";\n                            let uri = sf.fileName + \":\" + sf.lineNumber + \":\" + sf.columnNumber;\n                            if (sf.functionName) {\n                                s += sf.functionName + \" (\" + uri + \")\"\n                            } else {\n                                s += uri // no parenthesis\n                            }\n                            return s\n                        }).join(\"\\n\");\n                }\n            },\n\n            firefox: {\n                test() {\n                    return helper_useragent(\"Gecko\")\n                },\n                format(traceFrames) {\n                    // Firefox syntax\n                    return traceFrames.map(sf =>\n                        (sf.functionName ?? \"<anonymous>\")\n                            + \"@\" + sf.fileName + \":\" + sf.lineNumber + \":\" + sf.columnNumber\n                    ).join(\"\\n\");\n                }\n            }\n        }\n    }\n\n} else {\n\n    tracer = {\n        captureTraceSource: NOOP,\n        attachTrace: NOOP\n    };\n\n}\n\nexport const jFactoryTrace = tracer;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Config\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst config = jFactoryCfg(\"JFACTORY_CFG_JFactoryTrace\");\n\nif (JFACTORY_DEV && JFACTORY_TRACE) {\n    config.keys = [\"$dev_traceLog\", \"$dev_traceSource\"];\n    if (typeof StackTrace === \"object\") {\n        config.tracer = JFactoryTrace_LIB_STACKTRACE;\n        config.useSourcemap = false;\n    }\n    jFactoryBootstrap_onBoot(function() {\n        if (config.tracer === JFactoryTrace_LIB_STACKTRACE) {\n            console.log(\"JFactoryTrace: Stacktrace.js support enabled; performances will be affected\")\n        }\n    })\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { helper_get, helper_isNative, helper_lowerFirst, helper_template } from \"./jFactory-helpers.mjs\";\nimport { jFactoryCfg } from \"./jFactory-env.mjs\";\nimport { jFactoryTrace } from \"./JFactoryTrace.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryError\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryError extends Error {\n    constructor(message = \"unspecified error\", data = null) {\n        data = Object.assign(Object.create(null), data);\n        message = JFactoryError.toPrintable(message, data);\n        super(message);\n        this.$data = Object.assign(Object.create(null), data);\n    }\n\n    toString() {\n        return this.message\n    }\n\n    * [Symbol.iterator]() {\n        yield this.message;\n        yield this.$data;\n    }\n\n    static getId(object) {\n        return object[config.keys.find(key => {\n            let val = helper_get(object, key);\n            return val || val === 0\n        })]\n    }\n\n    static toPrintableData(data) {\n        const templateData = {};\n        let nv;\n        for (let [key, val] of Object.entries(data)) {\n            switch (typeof val) {\n                case \"function\":\n                    val = val.name + \"()\";\n                    break;\n                case \"object\":\n                    if (val === null) {\n                        val = \"null\";\n                        break\n                    }\n                    if (val instanceof Error) {\n                        val = val.toString();\n                        break\n                    }\n                    if ((nv = JFactoryError.getId(val)) !== undefined) {\n                        val = '\"' + nv + '\"'\n                    } else {\n                        if (!helper_isNative(val.toString)) {\n                            val = val.toString()\n                        } else {\n                            try {\n                                nv = JSON.stringify(val);\n                                val = nv.length > config.jsonMax\n                                    ? nv.substring(0, config.jsonMax) + \"[...]\" : nv;\n                            } catch (e) {\n                                val = \"[object \" + val.constructor.name + \"]\"\n                            }\n                        }\n                    }\n                    break;\n                case \"string\":\n                    val = '\"' + val + '\"';\n                    break;\n                default:\n                    val = String(val)\n            }\n            templateData[key] = val\n        }\n        return templateData\n    }\n\n    static toPrintable(template, data) {\n        const templateMessage = [];\n        for (let part of template.split(\";\")) {\n            let placeholder;\n            let re = config.reg_placeholder\n            re.lastIndex = 0;\n            if ((placeholder = re.exec(part))) {\n                do {\n                    if (placeholder[1] && placeholder[1] in data) {\n                        templateMessage.push(part.trim());\n                        break\n                    }\n                } while ((placeholder = re.exec(part)) !== null)\n            } else {\n                templateMessage.push(part.trim());\n            }\n        }\n        return helper_lowerFirst(helper_template(templateMessage.join(\"; \"))(JFactoryError.toPrintableData(data)));\n    }\n\n    static factory(type, template) {\n        let ret = {\n            [type]: class extends JFactoryError {\n                constructor(data, traceSource) {\n                    super(template, data);\n                    jFactoryTrace.attachTrace(this.$data, traceSource);\n                }\n            }\n        }[type];\n\n        // Chrome automatically resolves sourcemap when logging errors\n        // but only if the error name starts with \"Error\"\n        ret.prototype.name = \"Error JFACTORY_ERR_\" + type;\n        return ret\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFACTORY_ERR_*\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst E = JFactoryError.factory;\n\n/* eslint-disable max-len */\nexport const JFACTORY_ERR_INVALID_VALUE = /*#__PURE__*/E(\"INVALID_VALUE\", \"invalid value for ${target}; Reason: ${reason}; Given: ${given}\");\nexport const JFACTORY_ERR_INVALID_CALL = /*#__PURE__*/E(\"INVALID_CALL\", \"invalid call ${target}; Reason: ${reason}; Owner: ${owner}\");\nexport const JFACTORY_ERR_PROMISE_EXPIRED = /*#__PURE__*/E(\"PROMISE_EXPIRED\", \"expired promise ${target}; Reason: ${reason}\");\nexport const JFACTORY_ERR_REQUEST_ERROR = /*#__PURE__*/E(\"REQUEST_ERROR\", \"error requesting ${target}; Reason: ${reason}; Owner: ${owner}\");\nexport const JFACTORY_ERR_KEY_DUPLICATED = /*#__PURE__*/E(\"KEY_DUPLICATED\", \"duplicated key for ${target}; Given: ${given}\");\nexport const JFACTORY_ERR_KEY_MISSING = /*#__PURE__*/E(\"KEY_MISSING\", \"missing key for ${target}; Given: ${given}\");\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Config\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst config = jFactoryCfg(\"JFACTORY_CFG_JFactoryError\", {\n    reg_placeholder: /\\${([^}]+)}/g,\n    jsonMax: 40,\n    keys: [\"$.about.name\", \"$dev_name\", \"$name\", \"name\", \"id\"]\n})","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_VALUE } from \"./JFactoryError.mjs\";\nimport { helper_isNumber, helper_isPlainObject, helper_isString } from \"./jFactory-helpers.mjs\";\nimport { jFactoryBootstrap_onBoot } from \"./jFactory-bootstrap.mjs\";\nimport { jFactoryBootstrap_expected } from \"./jFactory-bootstrap.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryExpect\n// ---------------------------------------------------------------------------------------------------------------------\n// A small input/output validation tool\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Alpha, Draft\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @return {*|JFactoryExpect}\n */\nexport function JFactoryExpect(label, value) {\n    JFACTORY_DEV && jFactoryBootstrap_expected();\n    if (new.target) {\n        this.label = label;\n        this.value = value;\n    } else {\n        return new JFactoryExpect(label, value)\n    }\n}\n\nconst error = function jFactoryThrow(label, value, message) {\n    throw new JFACTORY_ERR_INVALID_VALUE({\n        target: label,\n        reason: message,\n        given: value\n    })\n};\n\nconst staticMethods = {\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect\n     */\n    notUndefined(label, value) {\n        if (value === undefined) {\n            error(label, value, \"cannot be undefined\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect\n     */\n    notEmptyString(label, value) {\n        if (value === \"\") {\n            error(label, value, \"cannot be empty string\")\n        }\n        return true\n    },\n\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect\n     */\n    notFalsy(label, value) {\n        if (!value) {\n            error(label, value, 'cannot be a falsy value (undefined, null, NaN, 0, \"\")')\n        }\n        return true\n    },\n\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect\n     */\n    validSpaces(label, value) {\n        if (!value.replace || value.replace(/\\s+/g, \" \").trim() !== value) {\n            error(label, value, \"invalid space delimiters\")\n        }\n        return true\n    },\n\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect#\n     * @param {RegExp} reg\n     * @return JFactoryExpect\n     */\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect\n     */\n    matchReg(label, value, reg) {\n        if (!reg.test(value)) {\n            error(label, value, 'string \"' + value + '\" must match ' + reg)\n        }\n        return true\n    },\n\n    /**\n     * @method type\n     * @memberOf JFactoryExpect#\n     * @param {...*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method type\n     * @memberOf JFactoryExpect\n     */\n    type(label, value, ...expected) {\n        let name, ok = false;\n        for (let constructor of expected) {\n            if (constructor === null) {\n                name = \"Null\"\n            } else if (\"name\" in constructor) {\n                name = constructor.name\n            }\n            let test = staticMethods[\"type\" + name];\n            if (test) {\n                try {ok = test(label, value/*, e*/)} catch (e) {}\n            } else {\n                ok = value instanceof constructor\n            }\n            if (ok) break\n        }\n        if (!ok) {\n            error(label, value, \"must be an instance of [\" + expected.map(e => e.name).join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect\n     */\n    typeNull(label, value) {\n        if (value !== null) {\n            error(label, value, \"must be null\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect\n     */\n    typeBoolean(label, value) {\n        if (value !== true && value !== false) {\n            error(label, value, \"must be a boolean\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect\n     */\n    typeString(label, value) {\n        if (!helper_isString(value)) {\n            error(label, value, \"must be a string\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect\n     */\n    typeNumber(label, value) {\n        if (!helper_isNumber(value)) {\n            error(label, value, \"must be a number\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect\n     */\n    typeFunction(label, value) {\n        if (!(typeof value === \"function\")) {\n            error(label, value, \"must be a function\")\n        }\n        return true\n    },\n\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect\n     */\n    typePlainObject(label, value) {\n        if (!helper_isPlainObject(value)) {\n            error(label, value, \"must be a plain object\")\n        }\n        return true\n    },\n\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect#\n     * @param {*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect\n     */\n    equal(label, value, ...expected) {\n        let ok = false;\n        for (let e of expected) {\n            if ((ok = value === e)) break\n        }\n        if (!ok) {\n            error(label, value, \"must be one of [\" + expected + \"]\")\n        }\n        return true;\n    },\n\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect#\n     * @param {Array|Object} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect\n     */\n    equalIn(label, value, expected) {\n        if (!Array.isArray(expected)) {\n            expected = Object.values(expected)\n        }\n        if (!expected.includes(value)) {\n            error(label, value, \"must be one from [\" + expected.join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect#\n     * @param {Array} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect\n     */\n    properties(label, value, expected) {\n        for (let name of Object.getOwnPropertyNames(value)) {\n            JFactoryExpect(label + ', property name \"' + name + '\"', name).equalIn(expected)\n        }\n        return true\n    },\n\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect\n     */\n    writable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect\n     */\n    notWritable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must not be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect\n     */\n    enumerable(label, value, key) {\n        if (!Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect\n     */\n    notEnumerable(label, value, key) {\n        if (Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must not be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect\n     */\n    configurable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect\n     */\n    notConfigurable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must not be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect\n     */\n    reservedProperty(label, value, key) {\n        if (key in value) {\n            error(label, value, \"is a reserved property\")\n        }\n        return true\n    }\n};\n\njFactoryBootstrap_onBoot(function() {\n    Object.assign(JFactoryExpect, staticMethods);\n    // Generate members from static methods\n    for (const name of Object.getOwnPropertyNames(staticMethods)) {\n        JFactoryExpect.prototype[name] =\n            function callStatic(...args) {\n                JFactoryExpect[name](this.label, this.value, ...args);\n                return this\n            }\n    }\n});","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { jFactoryBootstrap_onBoot } from \"./jFactory-bootstrap.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryObject\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Alpha\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryObject {\n\n    static createDescriptors(descriptorPrototype = JFactoryObject.DESCRIPTORS_PROTOTYPE) {\n        let create = JFactoryObject.create(descriptorPrototype, true, true);\n        let o = Object.create(null);\n\n        o.NONE = create();\n\n        o.WRITABLE     = create({ writable: true });\n        o.ENUMERABLE   = create({ enumerable: true });\n        o.CONFIGURABLE = create({ configurable: true });\n\n        o.CONFIGURABLE_WRITABLE   =\n        o.WRITABLE_CONFIGURABLE   = create({ writable: true, configurable: true });\n\n        o.CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE = create({ enumerable: true, configurable: true });\n\n        o.ENUMERABLE_WRITABLE     =\n        o.WRITABLE_ENUMERABLE     = create({ writable: true, enumerable: true });\n\n        o.WRITABLE_ENUMERABLE_CONFIGURABLE =\n        o.WRITABLE_CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE_WRITABLE =\n        o.ENUMERABLE_WRITABLE_CONFIGURABLE =\n        o.CONFIGURABLE_WRITABLE_ENUMERABLE =\n        o.CONFIGURABLE_ENUMERABLE_WRITABLE = create({ writable: true, enumerable: true, configurable: true });\n\n        // Shortcuts\n        o.READONLY = create({ writable: false, enumerable: false, configurable: false });\n\n        return o\n    }\n\n    /**\n     * @example\n     * assign(obj, 'myProperty', 123, {writable:false})\n     * assign(obj, {a:1, b:2}', {writable:false})\n     *\n     * deprecated\n     * assign(obj, 'myProperty', {value:\"ok\", writable:false}) => not strict\n     * assign(obj, 'myProperty', 123) => use native instead\n     * assign(obj, {a:1, b:2}) => use native instead\n     */\n    static assign(target, property, value, descriptor) {\n        let descriptors = {};\n\n        switch (typeof property) {\n\n            case \"string\":\n            case \"symbol\":\n\n                // ------------------------------------------------\n                // assign(obj, 'myProperty', 123, {writable:false})\n                // ------------------------------------------------\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                descriptor = Object.create(descriptor); // avoid descriptor corruption\n                descriptor.value = value;\n\n                Object.defineProperty(target, property, descriptor);\n\n                break;\n\n            case \"object\":\n\n                // ------------------------------------------------\n                // assign(obj, {a:1, b:2}', {writable:false})\n                // ------------------------------------------------\n\n                [value, descriptor] = [property, value];\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                for (let name of Object.getOwnPropertyNames(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n                for (let name of Object.getOwnPropertySymbols(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n\n                Object.defineProperties(target, descriptors);\n\n                break;\n\n            default:\n                throw new Error(\"invalid property argument\")\n        }\n\n        return target\n    }\n\n    static create(prototype, flat = false, disinherit = false) {\n        return function create(properties) {\n            if (flat) {\n                return Object.assign(disinherit ? Object.create(null) : {}, prototype, properties)\n            } else {\n                return Object.assign(Object.create(\n                    disinherit ? Object.assign(Object.create(null), prototype) : prototype\n                ), properties)\n            }\n        }\n    }\n\n    static disinherit(object) {\n        return Object.assign(Object.create(null), object);\n    }\n}\n\nJFactoryObject.DESCRIPTORS_PROTOTYPE = { writable: false, enumerable: false, configurable: false };\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryObject\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactoryBootstrap_onBoot(function() {\n    JFactoryObject.descriptors = JFactoryObject.createDescriptors()\n});","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { helper_camelCase } from \"./jFactory-helpers.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { JFactoryObject } from \"./JFactoryObject.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryAbout\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\nexport class JFactoryAbout {\n    constructor(owner, about = {}) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout(owner)\", owner).type(Object);\n            JFactoryExpect(\"JFactoryAbout(about)\", about)\n                .typePlainObject()\n                .reservedProperty(\"uid\")\n                .reservedProperty(\"fingerprint\");\n            if (\"name\" in about) {\n                JFactoryExpect(\"JFactoryAbout(about.name)\", about.name)\n                    .typeString()\n                    .notEmptyString()\n            }\n        }\n\n        let name;\n        let fingerprint;\n        let uid = moduleGenId();\n\n        if (about.name) {\n            name = about.name;\n            delete about.name;\n            fingerprint = \"jFactory\" + \"_\" + helper_camelCase(name.toLowerCase()) + \"_\" + uid\n        } else {\n            delete about.name;\n            name = `[${owner.constructor.name}#${uid}]`;\n            fingerprint = \"jFactory\" + \"_\" + owner.constructor.name + \"_\" + uid;\n        }\n\n        JFactoryObject.assign(this, /** @lends JFactoryAbout# */ {\n            uid,\n            name,\n            fingerprint\n        }, JFactoryObject.descriptors.ENUMERABLE);\n\n        Object.assign(this, about);\n\n        // ---\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout.name\", this.name)\n                .matchReg(/^[\\w[\\]#]+$/);\n            JFactoryExpect(\"JFactoryAbout.fingerprint\", this.fingerprint)\n                .matchReg(/^[\\w]+$/);\n        }\n    }\n}","/* jFactory, Copyright (c) 2019-2020, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_CALL, JFACTORY_ERR_PROMISE_EXPIRED } from \"./JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { jFactoryTrace } from \"./JFactoryTrace.mjs\";\nimport { helper_isNative } from \"./jFactory-helpers.mjs\";\nimport { helper_deferred } from \"./jFactory-helpers.mjs\";\nimport { jFactoryBootstrap_expected } from \"./jFactory-bootstrap.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromise 1.7\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\n// #limitation# async functions always use the native Promise constructor even if native Promise class is overridden\n// #limitation# async functions always returns a native Promise even if returning an extended Promise\n// #limitation# async functions always returns a pending Promise even if returning a resolved Promise\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromise\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromise extends Promise {\n\n    constructor({ name, config, traceSource }, executor) {\n        JFACTORY_DEV && jFactoryBootstrap_expected();\n\n        if (arguments.length === 1) {\n            [name, config, executor] = [null, null, arguments[0]]\n        }\n\n        const chainId = moduleGenId();\n        config = { ...JFactoryPromise.DEFAULT_CONFIG, ...config };\n        name = name || \"unnamed\";\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"name\", name)\n                .type(String, Number)\n                .matchReg(/^[^. ]+$/);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"executor\", executor).typeFunction();\n        }\n\n        let resolve;\n        let reject;\n\n        super((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n\n        const chain = new JFactoryPromiseChain(this, chainId, name, config);\n\n        Object.defineProperties(this, {\n            $chain: {\n                enumerable: true,\n                writable: true,\n                value: chain\n            },\n            $type: {\n                writable: true,\n                value: \"promise\"\n            },\n            $value: {\n                writable: true,\n                value: undefined\n            },\n            $isSettled: {\n                writable: true,\n                value: false\n            },\n            $isRejected: {\n                writable: true,\n                value: null\n            },\n            $isFulfilled: {\n                writable: true,\n                value: null\n            },\n            $isExpired: {\n                writable: true,\n                value: false\n            },\n            $isAborted: {\n                writable: true,\n                value: false\n            }\n        });\n\n        if (JFACTORY_DEV) {\n            Object.defineProperties(this, {\n                $dev_name: {\n                    configurable: true,\n                    value: name + \"[\" + chainId + \":0]\"\n                },\n                $dev_path: {\n                    writable: true,\n                    value: new JFactoryPromisePath(this)\n                },\n                $dev_position: {\n                    writable: true,\n                    value: 0\n                }\n            });\n            if (!helper_isNative(executor)) {\n                Object.defineProperties(this, {\n                    $dev_source: {\n                        value: executor\n                    }\n                });\n            }\n            jFactoryTrace.attachTrace(this, traceSource);\n        }\n\n        const tryAutoComplete = () => {\n            if (!this.$chain.isPending) {\n                try {\n                    this.$chainComplete(\"auto-completed\");\n                } catch (e) {\n                    // Case of error in \"complete\" callback\n                    // We catch the exception because the promise is already fulfilled\n                    // Furthermore this issue must be handled by the chain, not the current promise\n                    console.error(e) // print the error otherwise nothing happens\n                }\n            }\n        };\n\n        const onResolve = value => {\n            // console.trace(\"onResolve\", this.$dev_name);\n            if (!this.$isSettled) {\n                // 2.3.1. If promise and x refer to the same object, reject promise with a TypeError as the reason.\n                if (value === this) {\n                    onReject(new TypeError(\"Chaining cycle detected for promise \" + this.$dev_name));\n                    return;\n                }\n\n                let then;\n                if (value !== null && (typeof value == \"object\" || typeof value == \"function\")) {\n                    // 2.3.3.2. If retrieving the property x.then results in a thrown exception e,\n                    // reject promise with e as the reason.\n                    try {\n                        then = value.then;\n                    } catch (e) {\n                        onReject(e);\n                        return;\n                    }\n                }\n\n                if (typeof then == \"function\") {\n                    let called = false;\n                    let resolvePromise = function(y) {\n                        // 2.3.3.3.1. If/when resolvePromise is called with a value y, run [[Resolve]](promise, y).\n                        if (!called) {\n                            called = true;\n                            onResolve(y);\n                        }\n                    };\n                    let rejectPromise = function(r) {\n                        // 2.3.3.3.2. If/when rejectPromise is called with a reason r, reject promise with r.\n                        if (!called) {\n                            called = true;\n                            onReject(r);\n                        }\n                    };\n\n                    try {\n                        // 2.3.3.3: If `then` is a function, call it as x.then(resolvePromise, rejectPromise)\n                        then.call(value, resolvePromise, rejectPromise);\n                    } catch (e) { // 2.3.3.3.4. If calling then throws an exception e,\n                        // 2.3.3.3.4.1. If resolvePromise or rejectPromise have been called, ignore it.\n                        if (!called) {\n                            // 2.3.3.3.4.2. Otherwise, reject promise with e as the reason.\n                            onReject(e);\n                        }\n                    }\n                }\n                else {\n                    this.$isRejected = false;\n                    this.$isFulfilled = true;\n                    if (this.$isExpired) {\n                        value = this.$chain.errorExpired;\n                    }\n                    resolve(value);\n                    onSettle(value)\n                }\n            }\n        };\n\n        const onReject = reason => {\n            // console.log(\"onReject\", this.$dev_name);\n            if (!this.$isSettled) {\n                this.$isRejected = true;\n                this.$isFulfilled = false;\n                reject(reason);\n                onSettle(reason)\n            }\n        };\n\n        const onSettle = value => {\n            this.$value = value;\n            this.$isSettled = true;\n            this.$chain.chainMap.set(this, true);\n\n            if (this.$chain.chainConfig.chainAutoComplete) {\n                if (this.$chain.chainMap.size === 1 && !this.$isExpired) {\n                    // ensures that tryAutoComplete() will be called asynchronously (then() callback is asynchronous)\n                    // case of promise.resolve(primitive), prevents following then() from being immediately locked\n                    this.then(tryAutoComplete)\n                } else {\n                    tryAutoComplete()\n                }\n            }\n        };\n\n        let _chainAutoComplete = config.chainAutoComplete;\n        Object.defineProperty(config, \"chainAutoComplete\", {\n            get: () => _chainAutoComplete,\n            set: value => {\n                if (_chainAutoComplete !== value) {\n                    _chainAutoComplete = value;\n                    if (value) {\n                        tryAutoComplete()\n                    }\n                }\n            }\n        });\n\n        chain.chainMap.set(this, false);\n\n        Object.defineProperties(this, {\n            __resolve__: {\n                value: onResolve\n            },\n            __reject__: {\n                value: onReject\n            }\n        });\n\n        try {\n            executor(onResolve, onReject);\n        } catch (e) {\n            // console.error(\"exception in executor\", this.$dev_name);\n            onReject(e)\n        }\n    }\n\n    then(onFulfilled, onRejected, forceType) {\n        let wrappedFulfilled;\n        let wrappedRejected;\n        let newPromise;\n\n        // Caution: \"await\" detection is not reliable.\n        // Passing native functions for both onFulfilled and onRejected will\n        // result to \"await\" type and may cause side effects\n        let type = forceType || (\n            helper_isNative(onFulfilled) && !onFulfilled.name.startsWith(\"bound \") &&\n            helper_isNative(onRejected) && !onRejected.name.startsWith(\"bound \")\n                ? \"await\" : onFulfilled === undefined ? \"catch\" : \"then\"\n        );\n\n        if (onFulfilled && typeof onFulfilled === \"function\") {\n            wrappedFulfilled = function(r) {\n                // \"await\" must always run the native handler\n                if (type === \"await\") {\n                    // SPEC: \"await\" throws the errorExpired if $isAborted is true.\n                    // Allows async function to try catch the awaited aborted promise\n                    // or, if not caught, breaks and ignore the rest of the async function.\n                    if (newPromise.$isAborted) {\n                        return onRejected(newPromise.$chain.errorExpired)\n                    } else {\n                        return onFulfilled(r)\n                    }\n                }\n                // otherwise don't call the handler if expired\n                if (!newPromise.$isExpired) {\n                    if (newPromise.$isSettled) {\n                        // eslint-disable-next-line no-debugger\n                        debugger\n                    }\n                    return onFulfilled(r)\n                }\n            }\n        }\n        if (onRejected && typeof onRejected === \"function\") {\n            wrappedRejected = function(r) {\n                if (newPromise.$isSettled) {\n                    // eslint-disable-next-line no-debugger\n                    debugger\n                }\n                return onRejected(r)\n            }\n        }\n\n        newPromise = Object.assign(super.then(wrappedFulfilled, wrappedRejected), this);\n        moduleGenId.uid--; // reverse because not a new chain\n        newPromise.$type = type;\n\n        Object.defineProperties(newPromise, {\n            __onFulfilled__: { value: onFulfilled },\n            __onRejected__: { value: onRejected }\n        });\n\n        if (JFACTORY_DEV) {\n            newPromise.$dev_position = this.$chain.chainMap.size;\n            let fNames = \"\";\n            if (onFulfilled && onFulfilled.name) {\n                fNames += onFulfilled.name\n            }\n            if (onRejected && onRejected.name) {\n                fNames += \",\" + onRejected.name\n            }\n            Object.defineProperties(newPromise, {\n                $dev_name: {\n                    value:\n                        this.$chain.chainName\n                        + \"[\"\n                        + this.$chain.chainId\n                        + \":\"\n                        + this.$dev_position\n                        + \"]\"\n                        + \".\"\n                        + newPromise.$type\n                        + (fNames ? \"(\" + fNames + \")\" : \"\")\n                        + \"[\"\n                        + newPromise.$chain.chainId\n                        + \":\"\n                        + newPromise.$dev_position\n                        + \"]\"\n                },\n                $dev_path: { value: new JFactoryPromisePath(this.$dev_path, newPromise) }\n            });\n        }\n\n        newPromise.$chain.chainMap.set(newPromise, false);\n\n        if (this.$isExpired) {\n            // case: p0.then(); chainAbort(); p1.then()\n            // => the new promise must be expired\n            // if parent promise is just expired, abort silently\n            // if parent promise is aborted, abort explicitly\n\n            // JFactoryPromise.setExpired(newPromise, true, !this.$isAborted, this.$chain.errorExpired);\n            JFactoryPromise.setExpired(newPromise, this.$isAborted, true);\n        }\n\n        return newPromise\n    }\n\n    static resolve(optionalArgs, value) {\n        // resolve()\n        // resolve(optionalArgs, value)\n        // resolve(value)\n\n        if (arguments.length === 1) {\n            [optionalArgs, value] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        if (value instanceof this && arguments.length === 1) {\n            // Returns the promise as is (native spec)\n            // but only if no optionalArgs\n            return value\n        } else {\n            return new this(optionalArgs, function(resolve) {\n                resolve(value)\n            });\n        }\n    }\n\n    static reject(optionalArgs, reason) {\n        // reject()\n        // reject(optionalArgs, reason)\n        // reject(reason)\n\n        if (arguments.length === 1) {\n            [optionalArgs, reason] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        return new this(optionalArgs, function(resolve, reject) {\n            reject(reason)\n        });\n    }\n\n    // $toPromise(rejectIfExpired = true) {\n    //     return new Promise((resolve, reject) => {\n    //         let promise = this.then(resolve, e => {\n    //             debugger\n    //             reject(e)\n    //         });\n    //         if (rejectIfExpired) {\n    //             promise.$thenIfExpired(reject)\n    //         }\n    //     })\n    // }\n\n    // $toNewChain(abortIfExpired = true) {\n    //     let newChain;\n    //     return newChain = new JFactoryPromise((resolve, reject) => {\n    //         let promise = this.then(resolve, e => {\n    //             debugger\n    //             reject(e)\n    //         });\n    //         if (abortIfExpired) {\n    //             promise.$thenIfExpired(function(e){\n    //                 newChain.$chainAbort(e)\n    //             })\n    //         }\n    //     });\n    // }\n\n    // A \"then\" where the handler is called only if the chain is expired\n    // it's not a catch (a catchExpired concept should cancel the expiration)\n    $thenIfExpired(onExpired) {\n        return this.then(r => this.$chain.chainRoot.$isExpired ? onExpired(r) : r,\n            undefined, \"$thenIfExpired\"\n        )\n    }\n\n    // Completes an expires the whole chain before its normal end\n    // Sets the $isAborted to true on aborted promises\n    $chainAbort(reason = \"$chainAbort()\") {\n        this.$chain.complete(reason, true);\n        return this\n    }\n\n    // Manually completes and expires the whole chain\n    // Only required if awaiting \"myPromise.$chain\"\n    // when the autocomplete watcher is not used\n    $chainComplete(reason = \"$chainComplete()\") {\n        if (this.$chain.isPending) {\n            throw new JFACTORY_ERR_INVALID_CALL({\n                target: this,\n                reason: \"Trying to complete a pending chain. Use $chainAbort() if you want to stop it.\"\n            });\n        }\n        this.$chain.complete(reason, false);\n        return this\n    }\n\n    $chainAutoComplete() {\n        this.$chain.chainConfig.chainAutoComplete = true;\n        return this\n    }\n\n    static setExpired(promise, abort, silent /*, reason*/) {\n        promise.$isExpired = true;\n        if (!promise.$isSettled) {\n            if (promise.$type === \"$thenIfExpired\") {\n                promise.__onFulfilled__(promise.$chain.chainRoot.$chain.errorExpired)\n            }\n            else if (abort) {\n                promise.$isAborted = true;/*!silent;*/\n            } else {\n                if (!silent) {\n                    throw new JFACTORY_ERR_INVALID_CALL({\n                        target: promise,\n                        reason: \"promise must be aborted or settled before setting it to expired.\"\n                    })\n                }\n            }\n            promise.__resolve__(/*reason*/);\n        }\n    }\n}\n\nJFactoryPromise.DEFAULT_CONFIG = {\n    chainAutoComplete: false\n};\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromiseChain\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromiseChain {\n\n    constructor(chainRoot, chainId, chainName, chainConfig) {\n        Object.defineProperties(this, {\n            chainConfig: { value: chainConfig },\n            chainRoot: { value: chainRoot },\n            chainId: { value: chainId },\n            chainName: { value: chainName },\n            chainMap: { value: new Map },\n            isCompleted: { value: false, configurable: true },\n            data: { value: {} },\n            __deferred__: { value: helper_deferred() }\n        })\n    }\n\n    get isPending() {\n        return Array.from(this.chainMap.values()).includes(false)\n    }\n\n    then(onResolve) { // => \"await chain\"\n        this.__deferred__.done(onResolve);\n        return this\n    }\n\n    complete(reason = \"chain.complete()\", abort) {\n        let chainRoot = this.chainRoot;\n        if (!chainRoot.$isExpired) {\n            /*let errorExpired = */chainRoot.$chain.errorExpired = new JFACTORY_ERR_PROMISE_EXPIRED({\n                target: chainRoot,\n                reason\n            });\n\n            let map = this.chainMap;\n            for (let item of map.keys()) {\n                JFactoryPromise.setExpired(item, abort/*, false, errorExpired*/);\n            }\n\n            Object.defineProperty(this, \"isCompleted\", { value: true });\n            this.__deferred__.resolve();\n        }\n        return this\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromisePath\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromisePath extends Array {\n\n    constructor() {\n        super();\n        for (let i of arguments) {\n            if (Array.isArray(i)) {\n                this.push(...i)\n            } else {\n                this.push(i)\n            }\n        }\n    }\n\n    get printable() {\n        return this.map((v, i) => i === 0 ? v.$dev_name : v.$dev_name.split(\".\")[1]).join(\".\")\n    }\n\n    toString() {return this.printable}\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromiseSync\n// ---------------------------------------------------------------------------------------------------------------------\n// Promise that tries to resolve synchronously\n// allowing synchronous states and result\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromiseSync extends Promise {\n\n    constructor(executor) {\n\n        let states = {\n            $isSettled: false, // true = not pending\n            $isRejected: null, // true = not pending + rejected\n            $value: undefined\n        };\n\n        super((resolve, reject) => {\n\n            let called = false;\n\n            let onResolve = r => {\n                if (r instanceof Promise) {\n                    JFactoryPromiseSync.resolve(r)\n                        .then(onResolve, onReject)\n                } else {\n                    if (!called) {\n                        called = true;\n                        states.$isSettled = true;\n                        states.$isRejected = false;\n                        states.$value = r;\n                        resolve(r)\n                    }\n                }\n            };\n\n            let onReject = r => {\n                // don't resolve pending promise\n                // to keep native specification\n                if (!called) {\n                    called = true;\n                    states.$isSettled = true;\n                    states.$isRejected = true;\n                    states.$value = r;\n                    reject(r)\n                }\n            };\n\n            try {\n                executor(onResolve, onReject)\n            } catch (e) {\n                onReject(e)\n            }\n        });\n\n        Object.assign(this, states);\n        states = this\n    }\n\n    then(onFulfilled, onRejected) {\n\n        if (this.$isSettled) {\n            let value = this.$value;\n\n            try {\n                if (this.$isRejected) {\n                    // cancel any uncaught rejected result from this promise\n                    // before returning the new one\n                    super.then(undefined, () => null);\n\n                    if (onRejected && typeof onRejected === \"function\") {\n                        value = onRejected(value)\n                    } else {\n                        return JFactoryPromiseSync.reject(value)\n                    }\n                } else {\n                    if (onFulfilled && typeof onFulfilled === \"function\") {\n                        value = onFulfilled(value)\n                    }\n                }\n            } catch (e) {\n                return JFactoryPromiseSync.reject(e)\n            }\n\n            return JFactoryPromiseSync.resolve(value)\n\n        } else {\n            return super.then(onFulfilled, onRejected)\n        }\n    }\n\n    static resolve(value) {\n        if (value instanceof JFactoryPromiseSync) {\n            return value\n        } else {\n            if (value instanceof Promise) {\n                return new JFactoryPromiseSync(value.then.bind(value))\n            } else {\n                return new JFactoryPromiseSync(r => r(value))\n            }\n        }\n    }\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV, JFACTORY_LOG } from \"./jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_CALL } from \"./JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { helper_setFunctionName } from \"./jFactory-helpers.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionComposer\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFunctionComposer {\n\n    constructor() {\n        this.handlers = Object.create(null);\n    }\n\n    * [Symbol.iterator](handlerGroups = []) {\n\n        if (!handlerGroups.length) {\n            handlerGroups = Object.keys(this.handlers)\n        }\n        if (!handlerGroups.length) {\n            handlerGroups = [\"default\"]\n        }\n\n        for (let handlerGroup of handlerGroups) {\n            if (handlerGroup in this.handlers) {\n                yield* this.handlers[handlerGroup]\n            }\n        }\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    first(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).unshift(handler);\n        return this\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    last(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).push(handler);\n        return this\n    }\n\n    /** @return {(function(): *) & {composer: JFactoryFunctionComposer}} */\n    compose(...handlerGroups) {\n        let composer = this;\n        let composite = function() {\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            //                                                //\n            //                wrapped function                //\n            //                                                //\n            //    You should Blackbox JFactoryFunction.mjs    //\n            //    to simplify debugging                       //\n            //                                                //\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            let context = {\n                canceled: false,\n                parameters: Array.from(arguments),\n                result: undefined\n            };\n            let iterator = composer[Symbol.iterator](handlerGroups);\n            let iteration = iterator.next();\n            return JFactoryFunctionComposer.composite_iterator(\n                this /* preserve call scope */, context, iteration, iterator)\n        };\n        composite.composer = composer;\n        return composite;\n    }\n\n    // SPEC: Composite functions returns promise *only* if at least\n    // one handler returns a promise (async function or promise return)\n    // So we cannot just iterate using an \"await for of\"\n    static composite_iterator(scope, context, iteration, handlers) {\n        let handler,\n            result;\n\n        while (!context.canceled && !iteration.done) {\n            handler = iteration.value;\n            if (scope) {\n                result = handler.call(scope, context, ...context.parameters)\n            } else {\n                result = handler(context, ...context.parameters)\n            }\n            iteration = handlers.next(); // prepares next iteration to know if \"done\"\n            if (result instanceof Promise) {\n                if (iteration.done\n                    // case of last handler returning a promise\n                    // #limitation# now way to detect if the promise is the returned value or an \"await\"\n                    // (we don't want to change the value of context.result during a pending handler)\n                    // => native Promise are always chained\n                    && result.constructor !== Promise) {\n                    context.result = result // we can safely set the new result\n                } else {\n                    return result.then(helper_setFunctionName(\n                        [handler.name, \"[compositeAsyncHandler]\"].filter(Boolean).join(\" \"),\n                        function(value) {\n                            context.result = value;\n                            return JFactoryFunctionComposer.composite_iterator(scope, context, iteration, handlers)\n                        })\n                    )\n                }\n            } else {\n                context.result = result\n            }\n        }\n        return context.result\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionExpirable - Expirable Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionExpirable(originalHandler) {\n    return new JFactoryFunctionExpirable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionExpirable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.expiredCalls = 0;\n        this.composer = new JFactoryFunctionComposer;\n\n        let isExpired = this.composer.compose(\"conditions\");\n        let expirable = this;\n        let expired;\n\n        // cannot use a real accessor here (conditions can be scoped, so isExpired too)\n        this.isExpired = scope => expired || isExpired.call(scope) || false;\n        this.setExpired = value => expired = value ?\n            value instanceof Error ? value : new JFACTORY_ERR_INVALID_CALL({\n                target: this.originalHandler,\n                reason: \"manually expired\"\n            }) : Boolean(this.expiredCalls = 0);\n\n        this.addExpireCondition = function(condition) {\n            this.composer.last(\"conditions\", function(context) {\n                let done = function(result) {\n                    if (JFACTORY_DEV) {\n                        JFactoryExpect(\"JFactoryFunctionExpirable.addExpireCondition(), result\", result)\n                            .type(Boolean, Error)\n                    }\n                    return expirable.setExpired(result ?\n                        (context.canceled = true) &&\n                        (result instanceof Error ?\n                            result :\n                            new JFACTORY_ERR_INVALID_CALL({\n                                target: expirable.originalHandler,\n                                reason: \"conditionally expired\",\n                                condition\n                            })\n                        ) : false\n                    )\n                };\n                let result = condition.apply(this, context.parameters);\n                return result instanceof Promise ? result.then(done) : done(result);\n            })\n        };\n    }\n\n    compose() {\n        let expirable = this;\n        let composite = function() {\n            let isExpired = expirable.isExpired(this);\n            let call = expirable.constructor.call.bind(undefined, expirable, this, arguments);\n            return isExpired instanceof Promise ? isExpired.then(call) : call(isExpired);\n        };\n        return Object.assign(composite, {\n            expirable: this,\n            isExpired: f => this.isExpired(f),\n            setExpired: f => this.setExpired(f),\n            addExpireCondition: f => {this.addExpireCondition(f); return composite}\n        });\n    }\n\n    static call(expirable, scope, args, isExpired) {\n        return isExpired ? expirable.onExpired(isExpired) : expirable.onNotExpired(scope, args);\n    }\n\n    onExpired(expired) {\n        if (this.expiredCalls < JFactoryFunctionExpirable.MaxWarningExpiration) {\n            this.expiredCalls++;\n            if (JFACTORY_LOG) {\n                console.warn(...new JFACTORY_ERR_INVALID_CALL({\n                    ...expired.$data,\n                    reason: expired.$data.reason\n                        + \"; expiredCalls=\"\n                        + this.expiredCalls\n                        + (this.expiredCalls === JFactoryFunctionExpirable.MaxWarningExpiration\n                            ? \"; Max Warning Exceeded\" : \"\")\n                }));\n            }\n        }\n        return expired\n    }\n\n    onNotExpired(scope, args) {\n        return this.originalHandler.apply(scope, args)\n    }\n}\n\nJFactoryFunctionExpirable.MaxWarningExpiration = 10;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionConditional - Conditional Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionConditional(originalHandler) {\n    return new JFactoryFunctionConditional(originalHandler).compose()\n}\n\nexport class JFactoryFunctionConditional {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", helper_setFunctionName(\n            [originalHandler.name, \"[condition]\"].filter(Boolean).join(\" \"),\n            function(context) {\n                return originalHandler.apply(this, context.parameters);\n            })\n        );\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"conditions\", \"original\");\n        return Object.assign(composite, {\n            conditional: this,\n            addCondition: f => {this.addCondition(f); return composite}\n        });\n    }\n\n    addCondition(condition) {\n        this.composer.last(\"conditions\", function(context) {\n            let handle = function(result) {\n                if (JFACTORY_DEV) {\n                    JFactoryExpect(\"JFactoryFunctionConditional.addCondition(), result\", result)\n                        .typeBoolean();\n                }\n                !result && (context.canceled = true);\n            };\n            let result = condition.apply(this, context.parameters);\n            return result instanceof Promise ? result.then(handle) : handle(result);\n        })\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionWrappable - Wrappable Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionWrappable(originalHandler) {\n    return new JFactoryFunctionWrappable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionWrappable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", helper_setFunctionName(\n            [originalHandler.name, \"[wrapped]\"].filter(Boolean).join(\" \"),\n            function(context) {\n                return originalHandler.apply(this, context.parameters);\n            })\n        );\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"before\", \"original\", \"after\");\n        return Object.assign(composite, {\n            wrappable: this,\n            beforeAll: f => {this.beforeAll(f); return composite},\n            justBefore: f => {this.justBefore(f); return composite},\n            justAfter: f => {this.justAfter(f); return composite},\n            afterAll: f => {this.afterAll(f); return composite}\n        });\n    }\n\n    beforeAll(handler) {\n        this.composer.first(\"before\", handler);\n    }\n\n    justBefore(handler) {\n        this.composer.last(\"before\", handler);\n    }\n\n    justAfter(handler) {\n        this.composer.first(\"after\", handler);\n    }\n\n    afterAll(handler) {\n        this.composer.last(\"after\", handler);\n    }\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { JFACTORY_ERR_INVALID_VALUE } from \"./JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { JFactoryPromiseSync } from \"./JFactoryPromise.mjs\";\nimport { JFactoryFunctionComposer } from \"./JFactoryFunction.mjs\";\nimport { jQuery, helper_isPlainObject } from \"./jFactory-helpers.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryEvents\n// ---------------------------------------------------------------------------------------------------------------------\n// https://learn.jquery.com/events/event-extensions/\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEvents {\n    // -----------------------------------------------------------------------------------------------------------------\n    // jQuery doesn't handle async trigger so jFactory provides the following :\n    //\n    // - triggerParallel(): the trigger function returns a Promise.all(pendingArray)\n    //   where pendingArray is filled by any async running handler.\n    //   Not recommended because it's the best way to produce unpredictable async side effects\n    //\n    // - triggerSeries(): handlers are run in a synchronous order, with \"await\"\n    //   This avoids unpredictable async race condition\n    //\n    //  Both returns a JFactoryPromiseSync that contains the jFactory_fulfilled flag\n    //  This flag is immediately (not async) set to true if no async handler is still pending\n    //\n    // => handlers are wrapped. OriginalHandlers and wrappedHandlers relations are stored in a WeakMap\n    // -----------------------------------------------------------------------------------------------------------------\n\n    constructor() {\n        Object.defineProperties(this, /** @lends JFactoryEvents# */ {\n            registry: { value: jQuery(Object.create(null)) },\n            handlers: { value: new WeakMap },\n            onListenerUpdate: { value: null, writable: true },\n            onObserverUpdate: { value: null, writable: true }\n        });\n    }\n\n    on({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            JFactoryExpect(\"JFactoryEvents.on({handler})\", handler).typeFunction();\n            target && JFactoryExpect(\"JFactoryEvents.on({target})\", target).type(String, jQuery, HTMLElement);\n            selector && JFactoryExpect(\"JFactoryEvents.on({selector})\", target).typeString();\n        }\n\n        let wrappedHandler = this.handlers.get(handler);\n        if (target) {\n            // don't need to wrap DOM handlers\n            if (!wrappedHandler) {\n                this.handlers.set(handler, true);\n            }\n            if (selector) {\n                jQuery(target).on(events, selector, handler);\n            } else {\n                jQuery(target).on(events, handler);\n            }\n            if (this.onListenerUpdate) {\n                this.onListenerUpdate(arguments)\n            }\n        } else {\n            if (!wrappedHandler) {\n                this.handlers.set(handler, wrappedHandler = function(e, { data, stack }) {\n                    stack.push(() => handler(e, data))\n                });\n                wrappedHandler.originalHandler = handler;\n            }\n            this.registry.on(events, wrappedHandler);\n            if (this.onObserverUpdate) {\n                this.onObserverUpdate(arguments)\n            }\n        }\n    }\n\n    off({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            if (events !== undefined) { // off() is valid\n                JFactoryEvents.validateSelector(events);\n                handler && JFactoryExpect(\"JFactoryEvents.off({handler})\", handler).typeFunction();\n                target && JFactoryExpect(\"JFactoryEvents.off({target})\", target).type(String, jQuery, HTMLElement);\n                selector && JFactoryExpect(\"JFactoryEvents.off({selector})\", target).typeString();\n            }\n        }\n\n        if (target) {\n            if (selector) {\n                jQuery(target).off(events, selector, handler)\n            } else {\n                jQuery(target).off(events, handler)\n            }\n        } else {\n            jQuery(\"*\").off(events, handler);\n\n            if (handler) {\n                handler = this.handlers.get(handler);\n                if (!handler) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"handler\",\n                        reason: \"not registered\",\n                        given: handler\n                    })\n                }\n            }\n            this.registry.off(events, handler);\n        }\n        if (this.onObserverUpdate) {\n            this.onObserverUpdate(arguments)\n        }\n        if (this.onListenerUpdate) {\n            this.onListenerUpdate(arguments)\n        }\n    }\n\n    /**\n     * Run in parallel. Don't \"await\" for async handlers\n     * Obviously produces unpredictable race conditions\n     */\n    triggerParallel({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target\n                && JFactoryExpect(\"JFactoryEvents.triggerParallel({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        const stack = [];\n        const pending = [];\n        events = events.split(\" \");\n\n        if (target) {\n            for (let event of events) {\n                jQuery(target).trigger(event, { data, stack });\n            }\n        } else {\n            for (let event of events) {\n                this.registry.triggerHandler(event, { data, stack })\n            }\n        }\n\n        for (let handler of stack) {\n            let result = handler();\n            if (result instanceof Promise\n                && !result.$isSettled // don't need to await\n            ) {\n                pending.push(result)\n            }\n        }\n\n        if (pending.length) {\n            return Promise.all(pending)\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n\n    /**\n     * Run in declaration order synchronously. Will \"await\" for async handlers\n     * Prevents unpredictable race conditions\n     */\n    triggerSeries({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target && JFactoryExpect(\"JFactoryEvents.triggerSeries({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n            const stack = [];\n            events = events.split(\" \");\n\n            if (target) {\n                for (let event of events) {\n                    jQuery(target).trigger(event, { data, stack });\n                }\n            } else {\n                for (let event of events) {\n                    this.registry.triggerHandler(event, { data, stack })\n                }\n            }\n\n            for (let handler of stack) {\n                let result = handler();\n                if (result instanceof Promise\n                    && !result.$isSettled // don't need to await\n                ) {\n                    await result\n                }\n            }\n            resolve()\n        })\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventsManager extends JFactoryEvents {\n    constructor(parent) {\n        super();\n        Object.defineProperties(this, {\n            parent: { value: parent },\n            affiliateRules: { value: new JFactoryFunctionComposer().compose() }\n        });\n        this.affiliateAddRule(JFactoryEventsManager.rule_namespace)\n    }\n\n    affiliate(events = \"\", namespaces = \"\", options) {\n        let parser = new JFactoryEventSelectorParser(events);\n        for (let parsedEvent of parser.events) {\n            this.affiliateRules(parsedEvent, namespaces, options)\n        }\n        return parser.toString();\n    }\n\n    affiliateAddRule(handler) {\n        this.affiliateRules.composer.last(handler)\n    }\n\n    static rule_namespace(context, parsedEvent, namespaces) {\n        namespaces = namespaces.split(\".\");\n        for (let namespace of namespaces) {\n            namespace && parsedEvent.addNamespace(namespace);\n        }\n    }\n\n    on(events, target, selector, handler, options) {\n        // Observers:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        switch (arguments.length) {\n            case 2:\n                // events, handler\n                [handler, target] = [target/*, undefined*/];\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        target === undefined ?\n            super.on({ events, handler }) :\n            super.on({ events, target, selector, handler/*, options*/ })\n    }\n\n    off(events, target, selector, handler, options) {\n        // Both:\n        // events (can be namespaces)\n        // events, options\n        // options (can be removal)\n\n        // Observer:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        const argL = arguments.length;\n        switch (argL) {\n            case 1:\n                if (typeof arguments[0] === \"object\") {\n                    // options\n                    [options, events] = [events/*, undefined*/];\n                }\n                // else events (can namespaces)\n                break;\n            case 2:\n                if (typeof arguments[1] === \"function\") {\n                    // events, handler\n                    [handler, target] = [target/*, undefined*/];\n                } else if (helper_isPlainObject(arguments[1])) {\n                    // events, options\n                    [options, target] = [target/*, undefined*/]\n                }\n                // else events, target\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else if (typeof arguments[1] === \"function\") {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                } else {\n                    // events, target, selector\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        if (argL < 2) {\n            super.off({ events });\n        } else {\n            target ?\n                super.off({ events, target, selector, handler/*, options*/ }) :\n                super.off({ events, handler })\n        }\n    }\n\n    trigger(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerSeries({ events, target, data }) :\n            super.triggerSeries({ events, data })\n    }\n\n    triggerParallel(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerParallel({ events, target, data }) :\n            super.triggerParallel({ events, data })\n    }\n\n    // #unoptimized draft#\n    // It's not easy to keep this list up to date because:\n    // - listeners can be removed by external dom mutations\n    // - listeners can be delegated\n    // - off() method can remove listeners globally\n    getDomListeners(namespace) {\n        let result = new Map();\n        for (let elm of jQuery(\"*\")) {\n            let data = jQuery._data(elm, \"events\");\n            if (data) {// data = {click: [{}], ... }\n                for (let entries of Object.values(data)) {// entries = [{type:...}]\n                    for (let entry of entries) {// entry = {type, namespace, handler, ...}\n                        let parser = new JFactoryEventSelector(entry.namespace);\n                        let types;\n                        if (parser.hasNamespace(namespace)) {\n                            if (!(types = result.get(elm))) {\n                                result.set(elm, types = {})\n                            }\n                            let type = types[entry.type] || (types[entry.type] = []);\n                            type.push({\n                                // ...entry,\n                                selector: entry.selector || null,\n                                handler: entry.handler,\n                                namespace: entry.namespace\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return result\n    }\n\n    // #unoptimized draft#\n    getObservers() {\n        let result = new Map();\n        let events = this.registry._events;\n\n        if (!events) {\n            let registry = Object.values(this.registry)[0];\n            let expando = Object.getOwnPropertyNames(registry).find(k => k.indexOf(\"jQuery\") === 0);\n            if (registry && expando) {\n                events = this.registry._events = registry[expando].events;\n            }\n        }\n\n        if (events) {\n            for (let [key, val] of Object.entries(events)) {\n                let event = result.get(key);\n                if (!event) {\n                    event = [];\n                    result.set(key, event);\n                }\n                for (let eventTypeEntry of val) {\n                    event.push({\n                        handler: eventTypeEntry.handler.originalHandler,\n                        namespace: eventTypeEntry.namespace\n                    })\n                }\n            }\n        }\n\n        return result\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventSelectorParser {\n    constructor(selectors) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(selectors);\n        }\n        /**\n         * @type Array<JFactoryEventSelector>\n         */\n        this.events = selectors.split(\" \").map(selector => new JFactoryEventSelector(selector))\n    }\n\n    toString() {\n        let s = [];\n        for (let event of this.events) {\n            s.push(event.toString())\n        }\n        return s.join(\" \")\n    }\n}\n\nexport class JFactoryEventSelector {\n    constructor(selector) {\n        let [event, ...namespace] = selector.split(\".\");\n        this.event = event;\n        this.namespace = new Set(namespace)\n    }\n\n    /** @return {Boolean|String} */\n    hasNamespace(namespaces) {\n        if (!Array.isArray(namespaces)) {\n            namespaces = [namespaces]\n        }\n        for (let namespace of namespaces) {\n            if (JFACTORY_DEV) {\n                if (!/^[\\w:]+$/.test(namespace)) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"namespace\",\n                        reason: \"must be alphanumeric, underscore and colon characters\",\n                        given: namespace\n                    })\n                }\n            }\n            if (namespace && this.namespace.has(namespace)) {\n                return namespace\n            }\n        }\n        return false\n    }\n\n    addNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new JFACTORY_ERR_INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.add(namespace)\n    }\n\n    deleteNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new JFACTORY_ERR_INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.delete(namespace)\n    }\n\n    toString() {\n        return this.namespace.size ? this.event + \".\" + Array.from(this.namespace.values()).join(\".\") : this.event;\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------------------------\n\nif (JFACTORY_DEV) {\n    JFactoryEvents.validateSelector = function(selector) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateSelector(selector)\", selector)\n                .notUndefined()\n                .validSpaces();\n        }\n\n        for (let [event, ns] of selector.split(\" \")\n            .map(v => v.split(\".\"))\n            .map(v => [v.shift(), v.join(\".\")])) {\n            event && JFactoryEvents.validateEvent(event);\n            ns && JFactoryEvents.validateNamespace(ns);\n        }\n        return true\n    };\n\n    JFactoryEvents.validateEvent = function(event) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateEvent(event)\", event)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:]+$/.test(event)) {\n            throw new JFACTORY_ERR_INVALID_VALUE({\n                target: \"JFactoryEvents.validateEvent(event)\",\n                reason: \"must be alphanumeric, underscore and colon characters\",\n                given: event\n            })\n        }\n\n        return true\n    };\n\n    JFactoryEvents.validateNamespace = function(namespace) { // ex: ns.ns2.ns3\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateNamespace(namespace)\", namespace)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:.]+$/.test(namespace)) {\n            throw new JFACTORY_ERR_INVALID_VALUE({\n                target: \"JFactoryEvents.validateNamespace(namespace)\",\n                reason: \"must be alphanumeric, underscore, dot and colon characters\",\n                given: namespace\n            })\n        }\n\n        return true\n    };\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_ERR_REQUEST_ERROR } from \"./JFactoryError.mjs\";\nimport { JFactoryPromise } from \"./JFactoryPromise.mjs\";\nimport {\n    JFACTORY_COMPAT_AbortController,\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    jFactoryCompat_require\n} from \"./jFactory-compat.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFetch\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFetch extends JFactoryPromise {\n\n    constructor(optionalArgs, url, fetchOptions = {}) {\n        if (typeof optionalArgs === \"function\") {\n            super(optionalArgs);\n        } else {\n            if (typeof optionalArgs === \"string\") {\n                [optionalArgs, url, fetchOptions] = [{}, arguments[0], arguments[1]]\n            }\n\n            let fetchRequest = new Request(url, fetchOptions);\n\n            super(optionalArgs, (resolve, reject) => {\n                let promise = fetch(fetchRequest)\n                    .then(response => {\n                        this.$chain.fetchResponse = response;\n                        if (!response.ok) {\n                            throw Error(response.status + \":\" + response.statusText);\n                        }\n                        return response\n                    });\n\n                if (fetchOptions.$typeText) {\n                    promise = promise\n                        .then(response => response.text())\n                        .then(r => this.$chain.responseText = r);\n                }\n                else if (fetchOptions.$typeJSON) {\n                    promise = promise\n                        .then(response => response.json())\n                        .then(r => this.$chain.responseJSON = r);\n                }\n\n                promise = promise.catch(reason => {\n                    throw new JFACTORY_ERR_REQUEST_ERROR({\n                        reason: reason.message || reason,\n                        target: this.$chain.fetchResponse && this.$chain.fetchResponse.url || url,\n                        owner: this,\n                        fetchOptions,\n                        fetchRequest,\n                        fetchResponse: this.$chain.fetchResponse || null\n                    }, optionalArgs.traceSource)\n                });\n\n                promise.then(resolve, reject)\n            });\n\n            this.$chain.fetchOptions = fetchOptions;\n            this.$chain.fetchRequest = fetchRequest;\n\n            let abortCtrl = fetchOptions.abortController || new AbortController();\n            fetchOptions.signal = abortCtrl.signal;\n            this.$chain.fetchAbortController = abortCtrl;\n        }\n    }\n\n    $chainAbort(reason = \"request aborted\") {\n        super.$chainAbort(reason);\n        this.$chain.fetchAbortController.abort();\n        return this\n    }\n}\n\njFactoryCompat_require(\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    JFACTORY_COMPAT_AbortController\n);","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV, JFACTORY_CLI } from \"./jFactory-env.mjs\";\nimport { jFactoryCfg } from \"./jFactory-env.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { helper_defaultsDeep, NOOP } from \"./jFactory-helpers.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryLogger 1.7\n// ---------------------------------------------------------------------------------------------------------------------\n// A contextual logger that prepends a label and allows runtime filtering while preserving the caller line number\n// ---------------------------------------------------------------------------------------------------------------------\n// logger.createSubLogger(label) create a sub-logger of logger; \"logger\" can be a sub-logger.\n// logger.disable() disable console for itself and sub-loggers\n// logger.disallow('log') disallow logger.log() only\n// logger.disallow('log', subLogger.label) disallow sub-logger.log() only. This is callable from any logger/sub-logger\n// ---------------------------------------------------------------------------------------------------------------------\n// Status : Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst SYMBOL_ENABLED = Symbol();\n\nexport class JFactoryLogger {\n\n    constructor(options) {\n        if (JFACTORY_DEV && options) {\n            JFactoryExpect(\"JFactoryLogger(options)\", options)\n                .properties(Object.getOwnPropertyNames(JFactoryLogger.DEFAULT_CONFIG))\n        }\n        helper_defaultsDeep(this, options, config);\n        this.installAccessor(\"log\");\n        this.installAccessor(\"warn\");\n        this.installAccessor(\"error\")\n    }\n\n    get enabled() {\n        return this[SYMBOL_ENABLED] && (this.parentLogger ? this.parentLogger.enabled : true)\n    }\n\n    set enabled(v) {\n        v ? this.enable() : this.disable()\n    }\n\n    enable() {\n        if (this[SYMBOL_ENABLED] !== true) {\n            this[SYMBOL_ENABLED] = true;\n        }\n    }\n\n    disable() {\n        if (this[SYMBOL_ENABLED] !== false) {\n            this[SYMBOL_ENABLED] = false;\n        }\n    }\n\n    disallow(nativeName, label = this.label) {\n        if (!this.filters[label]) {this.filters[label] = {}}\n        this.filters[label][nativeName] = true\n    }\n\n    allow(nativeName, label = this.label) {\n        if (this.filters[label]) {\n            delete this.filters[label][nativeName]\n        }\n    }\n\n    installAccessor(nativeName, targetName = nativeName, target = this) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryLogger(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        }\n        Object.defineProperties(target, {\n            [targetName]: {\n                get: this.accessor.bind(this, nativeName/*, target*/),\n                configurable: true\n            }\n        })\n    }\n\n    accessor(nativeName/*, target*/) {\n        if (!this[SYMBOL_ENABLED]) {\n            return NOOP;\n        }\n        return this.condition(nativeName) && this.formatter[nativeName](this) || NOOP\n    }\n\n    createSubLogger(label) {\n        /** @type JFactoryLogger */\n        let sub = new JFactoryLogger({\n            enabled: this.enabled,\n            label: this.label + \".\" + label,\n            styles_css: this.styles_css,\n            styles_cli: this.styles_cli,\n            console: this.console,\n            formatter: this.formatter\n        });\n        sub.parentLogger = this;\n        sub.condition.addCondition(() => this.enabled);\n        sub.filters = this.filters; // shared to allow/disallow from anywhere\n        return sub\n    }\n}\n\n// #limitation# To preserve the line number, we can only use native functions, like bind\n// #limitation# Because we use bind(), only the style of the first element can be efficiently defined\n\nJFactoryLogger.FORMATTER_NATIVE = {\n    log: logger => logger.console.log.bind(logger.console, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_CLI = {\n    log: logger => logger.console.log.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.styles_cli.label, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_BROWSER = {\n    log: logger => logger.console.log.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    warn: logger => logger.console.warn.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    error: logger => logger.console.error.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label)\n};\n\n/** @return {boolean} */\nJFactoryLogger.DEFAULT_CONDITION = function(nativeName) {\n    if (JFACTORY_DEV) {\n        JFactoryExpect(\"JFactoryLogger.condition(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        JFactoryExpect(\"JFactoryLogger.enabled\", this.enabled).equal(true);\n    }\n    return !(this.filters[this.label] && this.filters[this.label][nativeName])\n};\n\nJFactoryLogger.DEFAULT_CONFIG = /** @lends JFactoryLogger# */ {\n    label: \"\",\n    enabled: true,\n    parentLogger: null,\n    condition: JFactoryLogger.DEFAULT_CONDITION,\n    formatter: JFACTORY_CLI ?\n        JFactoryLogger.FORMATTER_CLI :\n        JFactoryLogger.FORMATTER_BROWSER,\n    console,\n    filters: {\n    },\n    styles_cli: {\n        label: \"\\x1b[1;30m%s\\x1b[0m\"\n    },\n    styles_css: {\n        label: \"color: gray\"\n    }\n};\n\nconst config = jFactoryCfg(\"JFACTORY_CFG_JFactoryLogger\", JFactoryLogger.DEFAULT_CONFIG);","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTime\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTime extends Date {\n    toString() {\n        return this.toLocaleTimeString() + \", \" + this.getUTCMilliseconds() + \"ms (\" + this.valueOf() + \")\"\n    }\n    $toDurationString() {\n        let hours = this.getUTCHours();\n        let minutes = this.getUTCMinutes();\n        let seconds = this.getUTCSeconds();\n        let milliseconds = this.getUTCMilliseconds();\n\n        let a = [];\n        if (hours) {\n            a.push(hours + \"h\")\n        }\n        if (minutes) {\n            a.push(minutes + \"min\")\n        }\n        if (seconds) {\n            a.push(seconds + \"s\")\n        }\n        a.push(milliseconds + \"ms\");\n        if (a.length === 1) {\n            return a[0];\n        } else {\n            return a.join(\",\") + \" (\" + this.valueOf() + \")\";\n        }\n    }\n}\n\nexport class JFactoryTimeTrace extends Date {\n    constructor() {\n        super();\n        this.elapsed = null;\n        Object.defineProperties(this, {\n            t1: { value: null, writable: true },\n            t0: { value: new JFactoryTime() }\n        })\n    }\n    end() {\n        this.t1 = new JFactoryTime();\n        this.elapsed = new JFactoryTime(this.t1 - this.t0).$toDurationString()\n    }\n    toString() {\n        return this.elapsed\n    }\n}","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_DEV, JFACTORY_LOG } from \"./jFactory-env.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTraits\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTraits {\n    /**\n     * @param {JFactoryCoreObject|Object} callerInstance\n     * @param {Class|Function} callerConstructor\n     * @param options\n     */\n    constructor(callerInstance, callerConstructor, options = {}) {\n        /**\n         * @type {JFactoryCoreObject}\n         */\n        this.callerInstance = callerInstance;\n\n        /**\n         * @type {Class|Function}\n         */\n        this.callerConstructor = callerConstructor;\n\n        /**\n         * @type {Object}\n         */\n        this.options = options;\n    }\n\n    use(trait, ...traitArgs) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryTraits(trait)\", trait).typeFunction();\n        }\n\n        // callerConstructor is not always the callerInstance.constructor:\n        // The Trait can be injected in an inherited constructor from super() at call time\n        let { callerInstance, callerConstructor } = this;\n\n        // Detect improper duplication (can be a trait already called by a super class)\n        let cache = JFactoryTraits.CACHE.get(callerInstance);\n\n        if (cache) {\n            if (cache.has(trait)) {\n                if (JFACTORY_LOG) {\n                    console.warn(`${trait.name} already called on`, callerInstance);\n                }\n                return this;\n            } else {\n                cache.add(trait)\n            }\n        } else {\n            JFactoryTraits.CACHE.set(callerInstance, new WeakSet([trait]))\n        }\n\n        !callerConstructor.JFactoryTrait && (callerConstructor.JFactoryTrait = new WeakSet);\n\n        if (!callerConstructor.JFactoryTrait.has(trait)) {\n            callerConstructor.JFactoryTrait.add(trait);\n            this.export(trait.prototype, callerConstructor.prototype);\n            this.export(trait, callerConstructor, true);\n        }\n\n        // In a Trait.constructor(callerInstance, ...args) : this != callerInstance\n        // In a Trait.trait_constructor(...args) : this == callerInstance (traits is injected and available)\n\n        // Traits are injections. They are not dynamic inheritance.\n        // So the Trait.constructor() doesn't share the \"this\" keyword with its caller.\n\n        // #limitation# No way to bind an ES6 class constructor to an object\n        // => Implementer can define a \"trait_constructor()\" that is automatically bound to \"callerInstance\"\n        // and called after the native trait constructor().\n\n        // eslint-disable-next-line new-cap\n        let traitInstance = new trait(callerInstance, ...traitArgs);\n        if (traitInstance.trait_constructor) {\n            traitInstance.trait_constructor.apply(callerInstance, traitArgs)\n        }\n        return this\n    }\n\n    export(source, target, isStatic) {\n        let sourceDescriptor = Object.getOwnPropertyDescriptors(source);\n\n        for (let propertyName of Object.keys(sourceDescriptor)) {\n            let prefix = JFactoryTraits.getPrefix(propertyName);\n\n            if (JFactoryTraits.getTarget(propertyName, target, prefix)) {\n                let propertyDescriptor = sourceDescriptor[propertyName];\n                let parsed = (this.options.parser || JFactoryTraits.defaultParser)(\n                    propertyName, propertyDescriptor, source, target, isStatic\n                );\n                if (parsed) {\n                    ({ propertyName, propertyDescriptor } = parsed);\n                    Object.defineProperty(target, propertyName, propertyDescriptor);\n                }\n            }\n        }\n    }\n\n    static defaultParser(propertyName, propertyDescriptor, source, target, isStatic) {\n        let value = propertyDescriptor.value;\n\n        if (isStatic) {return null} // don't export static members\n\n        if (propertyName in target) { // skip existing properties\n            if (JFACTORY_LOG) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of existing property \"${propertyName}\"`,\n                    value);\n            }\n            return null\n        }\n\n        if (typeof value === \"object\") { // prevent shared object exportation\n            if (JFACTORY_LOG) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of shared object \"${propertyName}\"`,\n                    value);\n            }\n            return null;\n        }\n\n        return { propertyName, propertyDescriptor }\n    }\n\n    static getPrefix(key) {\n        let split = key.split(\"_\");\n        return split.length > 1 ? split[0] : null;\n    }\n\n    static getTarget(key, target, prefix) {\n        if (\n            JFactoryTraits.EXCLUDES.includes(key) ||\n            prefix === \"trait\"\n        ) {\n            return null\n        }\n\n        return target\n    }\n}\n\nJFactoryTraits.CACHE = new WeakMap;\nJFactoryTraits.EXCLUDES = [\"constructor\", \"prototype\", \"length\", \"size\"];","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\nimport { JFACTORY_ERR_INVALID_CALL } from \"./JFactoryError.mjs\";\nimport { JFactoryTraits } from \"./JFactoryTraits.mjs\";\nimport { jFactoryFunctionWrappable } from \"./JFactoryFunction.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryTraits\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryTraits(callerInstance, callerConstructor) {\n    return new JFactoryTraits(callerInstance, callerConstructor, {\n\n        parser(propertyName, propertyDescriptor/*, source, target, isStatic */) {\n            let parsed = JFactoryTraits.defaultParser(...arguments);\n\n            if (parsed) {\n                ({ propertyName, propertyDescriptor } = parsed);\n\n                let value = propertyDescriptor.value;\n                if (typeof value === \"function\") {\n                    switch (value.name) {\n                        case \"$install\":\n                        case \"$uninstall\":\n                        case \"$enable\":\n                        case \"$disable\":\n                        case \"$state\":\n                            break;\n                        default:\n                            propertyDescriptor.value = jFactoryFunctionWrappable(value)\n                                .beforeAll(function() {\n                                    if (!this.$.states.enabled && this.$.service.phase === \"PHASE_NONE\") {\n                                        let e = new JFACTORY_ERR_INVALID_CALL({\n                                            owner: this,\n                                            target: value,\n                                            reason: \"component disabled\"\n                                        });\n                                        this.$logErr(...e);\n                                        throw e\n                                    }\n                                })\n                    }\n                }\n\n                return { propertyName, propertyDescriptor }\n            }\n        }\n    })\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { jFactoryTraits } from \"./jFactory-traits\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Predefined Components\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @mixes TraitCore\n * @mixes TraitAbout\n * @mixes TraitLog\n * @mixes TraitEvents\n * @mixes TraitState\n * @mixes TraitService\n * @mixes TraitTask\n */\nexport class JFactoryCoreObject {\n    constructor(name) {\n        JFactoryCoreObject.inject(this, JFactoryCoreObject, name)\n    }\n\n    static inject(target, constructor, name) {\n        jFactoryTraits(target, constructor)\n            .use(jFactory.TraitCore)\n            .use(jFactory.TraitAbout, { name })\n            .use(jFactory.TraitLog)\n            .use(jFactory.TraitEvents)\n            .use(jFactory.TraitState)\n            .use(jFactory.TraitService)\n            .use(jFactory.TraitTask);\n    }\n}\n\n/**\n * @mixes TraitFetch\n * @mixes TraitDOM\n * @mixes TraitCSS\n * @mixes TraitMutation\n * @mixes TraitTimeout\n * @mixes TraitInterval\n * @mixes TraitLibVue\n * @mixes TraitLibReact\n */\nexport class JFactoryComponent extends JFactoryCoreObject {\n    constructor(name) {\n        super(name);\n        JFactoryComponent.inject(this, JFactoryComponent)\n    }\n\n    static inject(target, constructor) {\n        jFactoryTraits(target, constructor)\n            .use(jFactory.TraitFetch)\n            .use(jFactory.TraitDOM)\n            .use(jFactory.TraitCSS)\n            .use(jFactory.TraitMutation)\n            .use(jFactory.TraitTimeout)\n            .use(jFactory.TraitInterval)\n            .use(jFactory.TraitLibVue)\n            .use(jFactory.TraitLibReact);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory\n// ---------------------------------------------------------------------------------------------------------------------\n\n/** @return {JFactoryComponent} */\nexport const jFactory = (name, properties) => Object.assign(new JFactoryComponent(name), properties);","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// TraitCore\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { JFACTORY_DEV, JFACTORY_LOG } from \"./jFactory-env.mjs\";\nimport {\n    JFACTORY_ERR_KEY_DUPLICATED, JFACTORY_ERR_KEY_MISSING,\n    JFACTORY_ERR_PROMISE_EXPIRED, JFactoryError\n} from \"./JFactoryError.mjs\";\nimport { jFactory } from \"./jFactory.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { JFactoryAbout } from \"./JFactoryAbout.mjs\";\nimport { JFactoryLogger } from \"./JFactoryLogger.mjs\";\nimport { JFactoryPromise, JFactoryPromiseSync } from \"./JFactoryPromise.mjs\";\nimport { JFactoryEventsManager } from \"./JFactoryEvents.mjs\";\nimport { JFactoryObject } from \"./JFactoryObject.mjs\";\nimport { JFactoryTimeTrace } from \"./JFactoryTime.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Object\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitCore {\n    trait_constructor() {\n        const owner = this;\n\n        class SubMap extends Map {\n            constructor(...args) {\n                super(...args);\n                Object.defineProperty(this, \"id_autoinc\", { value: 0, writable: true });\n            }\n            $registerSync(key, value) {\n                let sub = Object.defineProperties({}, {\n                    $value: { value },\n                    $phaseRemove: { value: TraitService.getContextualRemovePhase(owner) }\n                });\n                this.set(key, sub);\n                return sub\n            }\n            $registerAsync(key, taskName, promise) {\n                let task = owner.$task(taskName, promise.$chain);\n\n                // End of promise chain must complete the task\n                promise.$chain.then(() => { // synchronous then\n                    task.$chainAutoComplete()\n                });\n\n                // Aborted task must abort the promise if still running\n                task.$chain.then(() => {// synchronous then\n                    if (!promise.$chain.isCompleted) {\n                        promise.$chainAbort(\"aborted by task\")\n                    }\n                });\n\n                Object.defineProperty(promise, \"$phaseRemove\", { value: task.$phaseRemove });\n                this.set(key, promise);\n                return task\n            }\n\n            $id_resolve(str) {\n                if (str.indexOf(\"?\") >= 0) {\n                    let id = ++this.id_autoinc;\n                    str = str.replace(/\\?/g, id)\n                }\n                return str\n            }\n        }\n\n        const proto = Object.assign(Object.create(null), {\n            [TraitCore.SYMBOL_PRIVATE]: Object.create(null),\n            assign: function(property, value, descriptor) {JFactoryObject.assign(this, property, value, descriptor)},\n            createSubMap: () => new SubMap()\n        });\n\n        Object.defineProperty(this, \"$\", { value: Object.create(proto) });\n\n        // pre-define most important properties\n        // to order them first in devtool (reduced form only)\n        this.$.assign({\n            tasks: null,\n            requests: null\n        }, JFactoryObject.descriptors.ENUMERABLE_WRITABLE);\n    }\n}\n\nTraitCore.SYMBOL_PRIVATE = Symbol(\"_\");\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait About\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitAbout {\n\n    trait_constructor(about) {\n        JFactoryObject.assign(this.$, \"about\",\n            new JFactoryAbout(this, about), JFactoryObject.descriptors.READONLY)\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Log\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitLog {\n\n    trait_constructor() {\n        let config = Object.assign({\n            label: this.$.about.name\n        }, JFACTORY_LOG || {\n            enabled: false\n        });\n\n        let logger = new JFactoryLogger(config);\n\n        Object.defineProperty(this.$, \"logger\", { value: logger });\n\n        logger.installAccessor(\"log\",   \"$log\",     this);\n        logger.installAccessor(\"warn\",  \"$logWarn\", this);\n        logger.installAccessor(\"error\", \"$logErr\",  this);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Tasks\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitTask {\n\n    trait_constructor() {\n        this.$.assign(\"tasks\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $task(id, executorOrValue) {\n        id = this.$.tasks.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$task(id)\", id).typeString();\n            JFactoryExpect(\"$task(executorOrValue)\", executorOrValue).notUndefined();\n            if (this.$.tasks.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$task(id)\", given: id })\n            }\n        }\n\n        let task;\n\n        if (typeof executorOrValue === \"function\") {\n            task  = new JFactoryPromise({ name: id, owner: this }, executorOrValue)\n        } else {\n            task = JFactoryPromise.resolve({ name: id, owner: this }, executorOrValue);\n        }\n\n        task.$phaseRemove = TraitService.getContextualRemovePhase(this);\n\n        let metrics;\n        if (JFACTORY_DEV) {\n            metrics = new JFactoryTimeTrace();\n            task.$taskMetrics = { $dev_timing: metrics };\n        }\n\n        task.$chain.then(() => {\n            if (JFACTORY_DEV) {\n                metrics.end();\n            }\n            if (this.$.tasks.get(id)) {\n                this.$taskRemove(id);\n            }\n        });\n\n        this.$.tasks.set(id, task);\n        return task\n    }\n\n    $taskRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$taskRemove(reason)\", reason).typeString();\n            if (!this.$.tasks.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$taskRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger\n            if (this.$.tasks.get(id)._called) {debugger}\n            this.$.tasks.get(id)._called = true\n        }\n\n        let entry = this.$.tasks.get(id);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.tasks.delete(id);\n        entry.$chainAbort(reason || \"$taskRemove()\");\n    }\n\n    $taskRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemoveAll(removePhase)\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let tasks = this.$.tasks;\n        if (tasks.size) {\n            for (const [key, task] of tasks) {\n                if (task.$phaseRemove === removePhase) {\n                    this.$taskRemove(key, \"$taskRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n\n    $taskPromiseAll(autoComplete = false) {\n        let pending = [];\n        if (this.$.tasks.size) {\n            for (let task of this.$.tasks.values()) {\n                if (autoComplete) {\n                    // resolves the chain as soon as no more pending promise in the chain\n                    task.$chain.chainConfig.chainAutoComplete = true;\n                }\n                // still pending ?\n                if (task.$chain.isPending) {\n                    pending.push(task.$chain)\n                }\n            }\n        }\n        if (pending.length) {\n            return Promise.all(pending);\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Events\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitEvents {\n\n    trait_constructor() {\n        assignPrivate(this, \"events\", {\n            custom: new JFactoryEventsManager(this),\n            kernel: new JFactoryEventsManager(this)\n        }, JFactoryObject.descriptors.NONE);\n\n        let eventManager = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n\n        // if (JFACTORY_DEV) { // very slow; requires optimization\n        //     // registry are auto updated in dev mode (unoptimized implementation)\n        //\n        //     let listenerUpdate = () => {\n        //         this.$.listeners = eventManager.getDomListeners(this.$.about.fingerprint);\n        //     };\n        //     let observerUpdate = () => {\n        //         this.$.observers = eventManager.getObservers();\n        //     };\n        //\n        //     eventManager.onListenerUpdate = listenerUpdate;\n        //     eventManager.onObserverUpdate = observerUpdate;\n        //\n        //     let observer = new MutationObserver(listenerUpdate);\n        //     observer.observe(document.documentElement, {childList: true, subtree: true});\n        //\n        //     listenerUpdate();\n        //     observerUpdate();\n        // } else\n        {\n            Object.defineProperties(this.$, {\n                listeners: {\n                    get: eventManager.getDomListeners.bind(eventManager, this.$.about.fingerprint),\n                    enumerable: true\n                },\n                observers: {\n                    get: eventManager.getObservers.bind(eventManager),\n                    enumerable: true\n                }\n            })\n        }\n    }\n\n    $on(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.on(...arguments)\n    }\n\n    $off(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.off(...arguments)\n    }\n\n    $trigger(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.trigger(...arguments)\n    }\n\n    $triggerParallel(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)\n    }\n\n    $notify(events, data) {\n        return this.$trigger(events, data)\n            .then(() => this.$[TraitCore.SYMBOL_PRIVATE].events.kernel.trigger(events, data))\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait States\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitState {\n\n    trait_constructor() {\n        const states = Object.create(null);\n        const stateRoutes = Object.create(null);\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        assignPrivate(this, { states, stateRoutes }, JFactoryObject.descriptors.READONLY);\n\n        JFactoryObject.assign(this.$, \"states\", new Proxy(states, {\n            set: (target, key, val) => this.$state(key, val),\n            get: (target, key) => states[key]\n        }), JFactoryObject.descriptors.READONLY);\n\n        kernel.on(\"beforeStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].before\n                && (h = stateRoutes[data.key].before(data.val))) {\n                return this.$notify(h);\n            }\n        });\n\n        kernel.on(\"afterStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].after\n                && (h = stateRoutes[data.key].after(data.val))) {\n                return this.$notify(h);\n            }\n        });\n    }\n\n    $state(key, val, notify = true) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$state(key)\", key).typeString();\n            JFactoryExpect(\"$state(notify)\", notify).typeBoolean();\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n\n            let states = this.$[TraitCore.SYMBOL_PRIVATE].states;\n            let previousVal = states[key];\n            let pending;\n\n            if (!(key in states) || previousVal !== val) {\n\n                pending = notify && this.$notify(\"beforeStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"beforeStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n\n                if (pending && !pending.$isSettled) {\n                    states[key] = pending;\n                    await pending;\n                }\n\n                if (val === undefined) {\n                    delete states[key]\n                } else {\n                    states[key] = val;\n                }\n\n                pending = notify && this.$notify(\"afterStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"afterStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n            }\n\n            if (pending) {\n                pending.then(resolve);\n            } else {\n                resolve()\n            }\n        });\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Service\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitService {\n\n    trait_constructor() {\n        /**\n         * @name this.$.service\n         * @type {object}\n         */\n        JFactoryObject.assign(this.$, \"service\", Object.create(null), JFactoryObject.descriptors.READONLY);\n        this.$.service.phase = TraitService.PHASE.NONE;\n        this.$.service.phaseQueue = JFactoryPromise.resolve({ name: \"phaseQueue\" }, null);\n        this.$.service.phaseTask = null;\n        this.$.service.phaseMap = {\n            install: new Set(),\n            enable: new Set(),\n            disable: new Set(),\n            uninstall: new Set()\n        };\n\n        // Set initial states but don't trigger events\n        this.$state(\"installed\", false, false);\n        this.$state(\"enabled\", false, false);\n\n        // Define the events to notify before/after a state change\n        // stateName : {before : eventName, after : eventName}\n\n        // SPEC\n        // stat is changed before calling handlers even if pending\n\n        assignPrivateMember(this, \"stateRoutes\", {\n            installed: { after: val => val ? \"install\" : \"uninstall\" },\n            enabled: { after: val => val ? \"enable\"  : \"disable\" }\n        }, JFactoryObject.descriptors.NONE);\n\n        let custom = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n        let kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        // Attach a remove phase namespaces on events\n        custom.affiliateAddRule((context, parsedEvent, namespaces, options) =>\n            TraitService.setEventNamespaceRemovePhase(this, parsedEvent, options)\n        );\n\n        // Attach module event handlers\n\n        /** @name JFactoryCoreObject#onInstall */\n        /** @name JFactoryCoreObject#onEnable */\n        /** @name JFactoryCoreObject#onDisable */\n        /** @name JFactoryCoreObject#onUninstall */\n\n        let phaseResolve = handler => {\n            if (this.$.tasks.size) {\n                this.$taskRemoveAll(this.$.service.phase)\n            }\n            let promise = JFactoryPromiseSync.resolve();\n            if (handler) {\n                promise = promise\n                    .then(() => handler.call(this))\n                    .then(() => this.$taskPromiseAll(true))\n            }\n            return promise\n                .catch(e => {\n                    if (!(/*this.$.service.isPhaseKilling &&*/ e instanceof JFACTORY_ERR_PROMISE_EXPIRED)) {\n                        this.$logErr(\"unhandled promise rejection in \" + this.$.service.phase + \";\",\n                            ...e instanceof JFactoryError ? e : [e])\n                    }\n                });\n        };\n\n        kernel.on(\"install\", () => phaseResolve(this.onInstall));\n        kernel.on(\"enable\", () => phaseResolve(this.onEnable));\n        kernel.on(\"disable\", () => phaseResolve(this.onDisable));\n        kernel.on(\"uninstall\", () => phaseResolve(this.onUninstall));\n\n        kernel.on(\"disable\",   () => this.$off({ removal: TraitService.PHASE.DISABLE }));\n        kernel.on(\"uninstall\", () => this.$off({ removal: TraitService.PHASE.UNINSTALL }));\n    }\n\n    $install(enable) {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"install\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (!this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.INSTALL;\n                    return this.$state(\"installed\", true)\n                }\n            });\n\n        this.$.service.phaseMap.install.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.install.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n\n        // register the enable\n        if (enable) {return this.$enable()}\n        return p\n    }\n\n    $enable() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"enable\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.installed && !this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.ENABLE;\n                    return this.$state(\"enabled\", true)\n                }\n            });\n\n        this.$.service.phaseMap.enable.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.enable.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    $disable() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"disable\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.DISABLE;\n                    return this.$state(\"enabled\", false)\n                }\n            });\n\n        this.$.service.phaseMap.disable.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.disable.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        // expires all stacked enable\n        for (let [key, val] of this.$.service.phaseMap.enable.entries()) {\n            if (val === this.$.service.phaseTask) {\n                TraitService.phaseKill(this);\n            }\n            val.$chainAbort();\n            this.$.service.phaseMap.enable.delete(key)\n        }\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    $uninstall() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"uninstall\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.UNINSTALL;\n                    return this.$state(\"installed\", false)\n                }\n            });\n\n        this.$.service.phaseMap.uninstall.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.uninstall.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        // expires all stacked install\n        for (let [key, val] of this.$.service.phaseMap.install.entries()) {\n            if (val === this.$.service.phaseTask) {\n                TraitService.phaseKill(this);\n            }\n            val.$chainAbort();\n            this.$.service.phaseMap.install.delete(key)\n        }\n\n        // queue disable before uninstall\n        this.$disable();\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    static phaseKill(component) {\n        // component.$.service.isPhaseKilling = true;\n        if (component.$.tasks.size) {\n            component.$taskRemoveAll(TraitService.getContextualRemovePhase(component));\n        }\n        component.$.service.phase = TraitService.PHASE.NONE;\n    }\n\n    static getContextualRemovePhase(jFactoryCoreObject) {\n        return TraitService.PHASE_REVERT[jFactoryCoreObject.$.service.phase]\n    }\n\n    static setEventNamespaceRemovePhase(jFactoryCoreObject, parsedEvent, options) {\n        let curRemovePhase = parsedEvent.hasNamespace(TraitService.PHASES);\n        let newRemovePhase = options && options.removal;\n\n        if (!newRemovePhase) {\n            newRemovePhase = TraitService.getContextualRemovePhase(jFactoryCoreObject);\n        }\n\n        // special case : on(\"uninstall\") with removal = DISABLE (the default value)\n        // => disable() is always called before uninstall() causing the event to be removed too early\n        if (parsedEvent.event === \"uninstall\" && newRemovePhase === TraitService.PHASE.DISABLE) {\n            newRemovePhase = TraitService.PHASE.UNINSTALL\n        }\n\n        if (curRemovePhase !== newRemovePhase) {\n            parsedEvent.deleteNamespace(curRemovePhase);\n            parsedEvent.addNamespace(newRemovePhase);\n        }\n\n        parsedEvent.addNamespace(newRemovePhase);\n    }\n}\n\nTraitService.PHASE = {\n    NONE: \"PHASE_NONE\",\n    INSTALL: \"PHASE_INSTALL\",\n    ENABLE: \"PHASE_ENABLE\",\n    DISABLE: \"PHASE_DISABLE\",\n    UNINSTALL: \"PHASE_UNINSTALL\"\n};\n\nTraitService.PHASE_REVERT = {\n    [TraitService.PHASE.INSTALL]: TraitService.PHASE.UNINSTALL,\n    [TraitService.PHASE.UNINSTALL]: TraitService.PHASE.INSTALL,\n    [TraitService.PHASE.DISABLE]: TraitService.PHASE.ENABLE,\n    [TraitService.PHASE.ENABLE]: TraitService.PHASE.DISABLE,\n    [TraitService.PHASE.NONE]: TraitService.PHASE.DISABLE\n};\n\nTraitService.PHASES = Object.values(TraitService.PHASE);\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function assignPrivate(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE], property, value, descriptor)\n}\n\nexport function assignPrivateMember(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE][property], value, descriptor)\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactory.PHASE = JFactoryObject.disinherit(TraitService.PHASE);\n\njFactory.TraitCore = TraitCore;\njFactory.TraitAbout = TraitAbout;\njFactory.TraitLog = TraitLog;\njFactory.TraitEvents = TraitEvents;\njFactory.TraitState = TraitState;\njFactory.TraitService = TraitService;\njFactory.TraitTask = TraitTask;","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// TraitComponents\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { jFactory } from \"./jFactory.mjs\";\nimport { JFACTORY_DEV } from \"./jFactory-env.mjs\";\nimport { JFACTORY_COMPAT_MutationObserver, jFactoryCompat_require } from \"./jFactory-compat.mjs\";\nimport { JFACTORY_ERR_INVALID_VALUE, JFACTORY_ERR_KEY_DUPLICATED, JFACTORY_ERR_KEY_MISSING } from \"./JFactoryError.mjs\";\nimport { JFactoryExpect } from \"./JFactoryExpect.mjs\";\nimport { TraitCore, TraitService } from \"./TraitsCore.mjs\";\nimport { JFactoryFetch } from \"./JFactoryFetch.mjs\";\nimport { JFactoryPromise } from \"./JFactoryPromise.mjs\";\nimport { JFactoryObject } from \"./JFactoryObject.mjs\";\nimport { jFactoryTrace } from \"./JFactoryTrace.mjs\";\nimport { helper_isPlainObject, helper_url_abs, jQuery } from \"./jFactory-helpers.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Fetch\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitFetch {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$fetchRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$fetchRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"requests\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $fetch(id, url, fetchOptions = {}) {\n        id = this.$.requests.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetch(id)\", id).typeString();\n            JFactoryExpect(\"$fetch(url)\", url).typeString();\n            JFactoryExpect(\"$fetch(fetchOptions)\", fetchOptions).typePlainObject();\n            if (this.$.requests.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$fetch(id)\", given: id })\n            }\n        }\n\n        let promise = new JFactoryFetch({\n            name: id,\n            traceSource: jFactoryTrace.captureTraceSource(\"$fetch\"),\n            config: {\n                chainAutoComplete: true\n            }\n        }, url, fetchOptions);\n\n        this.$.requests.$registerAsync(id, '$fetch(\"' + id + '\")', promise);\n\n        promise.$chain.then(() => {\n            if (this.$.requests.has(id)) {\n                this.$fetchRemove(id)\n            }\n        });\n\n        return promise;\n    }\n\n    $fetchText(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeText: true });\n    }\n\n    $fetchJSON(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeJSON: true });\n    }\n\n    $fetchRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetchRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$fetchRemove(reason)\", reason).typeString();\n            if (!this.$.requests.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$fetchRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.requests.get(id)._debug_remove_called) {debugger}\n            this.$.requests.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.requests.get(id);\n        this.$.requests.delete(id);\n        entry.$chainAbort(reason || \"$fetchRemove()\");\n    }\n\n    $fetchRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.requests;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$fetchRemove(key, \"$fetchRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Timeout\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitTimeout {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$timeoutRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$timeoutRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeouts\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $timeout(id, delay, handler = null, ...args) {\n        // id\n        // id, delay\n        // id, delay, handler, ...args\n\n        id = this.$.timeouts.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            JFactoryExpect(\"handler\", handler).type(Function, null);\n            if (this.$.timeouts.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$timeout(id)\", given: id })\n            }\n        }\n\n        let timer;\n        let promise = new JFactoryPromise(\n            {\n                name: id,\n                traceSource: jFactoryTrace.captureTraceSource(\"$timeout\"),\n                config: {\n                    chainAutoComplete: true\n                }\n            },\n            resolve => {\n                timer = setTimeout(() => {\n                    if (!promise.$isExpired) {\n                        resolve(handler ? handler(...args) : undefined);\n                    }\n                }, delay)\n            }\n        );\n\n        promise.$chain.data.timer = timer;\n        this.$.timeouts.$registerAsync(id, '$timeout(\"' + id + '\")', promise);\n\n        promise.$chain.then(() => {\n            if (this.$.timeouts.has(id)) {\n                this.$timeoutRemove(id);\n            }\n        });\n\n        return promise;\n    }\n\n    $timeoutRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$timeoutRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$timeoutRemove(reason)\", reason).typeString();\n            if (!this.$.timeouts.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$timeoutRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeouts.get(id)._debug_remove_called) {debugger}\n            this.$.timeouts.get(id)._debug_remove_called = true;\n        }\n\n        let entry = this.$.timeouts.get(id);\n        clearTimeout(entry.$chain.data.timer);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.timeouts.delete(id);\n        entry.$chainAbort(reason || \"$timeoutRemove()\");\n    }\n\n    $timeoutRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES);\n        }\n        let subs = this.$.timeouts;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$timeoutRemove(key, \"$timeoutRemoveAll()\")\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Interval\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitInterval {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$intervalRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$intervalRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeints\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $interval(id, delay, handler, ...args) {\n        id = this.$.timeints.$id_resolve(id);\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            if (this.$.timeints.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$interval(id)\", given: id })\n            }\n        }\n        let timer = setInterval(handler, delay, ...args);\n        this.$.timeints.$registerSync(id, timer)\n    }\n\n    $intervalRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$intervalRemove(id)\", id).typeString();\n            if (!this.$.timeints.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$intervalRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeints.get(id)._debug_remove_called) {debugger}\n            this.$.timeints.get(id)._debug_remove_called = true\n        }\n        clearInterval(this.$.timeints.get(id).$value);\n        this.$.timeints.delete(id)\n    }\n\n    $intervalRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.timeints;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$intervalRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Mutations\n// ---------------------------------------------------------------------------------------------------------------------\n\nif (JFACTORY_DEV) {\n    jFactoryCompat_require(JFACTORY_COMPAT_MutationObserver);\n}\n\nexport class TraitMutation {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$mutationRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$mutationRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"mutations\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $mutation(id, parent, config, handler) {\n        id = this.$.mutations.$id_resolve(id);\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"parent\", parent).type(HTMLElement, Document);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            if (this.$.mutations.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$mutation(id)\", given: id })\n            }\n        }\n        let observer = new MutationObserver(handler);\n        observer.observe(parent, config);\n        this.$.mutations.$registerSync(id, observer);\n    }\n\n    $mutationRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$mutationRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$mutationRemove(reason)\", reason).typeString();\n            if (!this.$.mutations.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$mutationRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.mutations.get(id)._debug_remove_called) {debugger}\n            this.$.mutations.get(id)._debug_remove_called = true\n        }\n        this.$.mutations.get(id).$value.disconnect();\n        this.$.mutations.delete(id)\n    }\n\n    $mutationRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.mutations;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$mutationRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait DOM\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitDOM {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$domRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$domRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"dom\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $dom(id, jQueryArgument, appendTo) {\n        id = this.$.dom.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"jQueryArgument\", jQueryArgument).type(String, Object);\n            appendTo && JFactoryExpect(\"appendTo\", appendTo).type(String, Object);\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$dom(id)\", given: id })\n        }\n\n        let dom = jQuery(jQueryArgument);\n\n        if (dom[0].tagName === \"TEMPLATE\") {\n            dom = jQuery(jQuery(dom[0]).html());\n        }\n\n        if (domId) {\n            if (JFACTORY_DEV) {\n                if (dom[0].nodeType !== Node.ELEMENT_NODE) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"$dom(#id)\",\n                        given: dom,\n                        reason: \"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE\"\n                    })\n                }\n            }\n            dom[0].id = id\n        }\n\n        if (appendTo) {\n            dom.appendTo(appendTo)\n        }\n\n        return this.$.dom.$registerSync(id, dom).$value;\n    }\n\n    $domFetch(id, url, fetchOptions, appendTo) {\n        if (fetchOptions && !helper_isPlainObject(fetchOptions)) {\n            [fetchOptions, appendTo] = [{}, fetchOptions]\n        }\n\n        id = this.$.dom.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n            appendTo && JFactoryExpect(\"appendTo\", appendTo).type(String, Object);\n            fetchOptions && JFactoryExpect(\"fetchOptions\", fetchOptions).type(Object);\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$domFetch(id)\", given: id })\n        }\n\n        let promise = this.$fetchText('$domFetch(\"' + id + '\")', url, fetchOptions)\n            .then(r => {\n                let dom = jQuery(r);\n                if (domId) {\n                    dom[0].id = id\n                }\n                if (appendTo) {\n                    dom.appendTo(appendTo)\n                }\n                return dom\n            });\n\n        this.$.dom.$registerAsync(id, '$domFetch(\"' + id + '\")', promise);\n        return promise\n    }\n\n    $domRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$domRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$domRemove(reason)\", reason).typeString();\n            if (!this.$.dom.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$domRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.dom.get(id)._debug_remove_called) {debugger}\n            this.$.dom.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.dom.get(id);\n        let value = entry.$value;\n        if (value instanceof jQuery) {\n            value.remove()\n        }\n        if (entry instanceof JFactoryFetch) {\n            entry.$chainAbort(reason || \"$domRemove()\");\n        }\n        this.$.dom.delete(id)\n    }\n\n    $domRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.dom;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$domRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n//  Trait CSS\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitCSS {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$cssRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$cssRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"css\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $css(id, styleBody) {\n        id = this.$.css.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"css\", styleBody).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$css(id)\", given: id })\n        }\n\n        return this.$.css.$registerSync(id,\n            jQuery(\"<style>\")\n                .attr(cssId ? { id } : {})\n                .html(styleBody)\n                .appendTo(\"head\")\n        ).$value;\n    }\n\n    $cssFetch(id, url, appendTo = \"head\") {\n        id = this.$.css.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$cssFetch(id)\", given: id })\n        }\n\n        url = helper_url_abs(url);\n\n        let exist = jQuery(appendTo).find(`link[href=\"${url}\"]`)[0];\n        if (exist) {\n            exist.dataset.usage = parseInt(exist.dataset.usage) + 1;\n            let dom = jQuery(exist);\n\n            let promise = JFactoryPromise.resolve(\n                {\n                    name: id,\n                    config: { chainAutoComplete: true },\n                    traceSource: jFactoryTrace.captureTraceSource(\"$cssFetch\")\n                },\n                dom\n            );\n            promise.$chain.data.dom = dom;\n            this.$.css.$registerAsync(id, '$cssFetch(\"' + id + '\")', promise);\n\n            return promise\n        } else {\n            let dom;\n            let promise = new JFactoryPromise(\n                {\n                    name: id,\n                    config: { chainAutoComplete: true },\n                    traceSource: jFactoryTrace.captureTraceSource(\"$cssFetch\")\n                },\n                resolve => dom = jQuery(\"<link>\",\n                    { id: cssId ? id : \"\", rel: \"stylesheet\", type: \"text/css\", \"data-usage\": \"1\" })\n                    .appendTo(appendTo)\n                    .on(\"load\", () => resolve(dom))\n                    .attr(\"href\", url)\n            );\n\n            promise.$chain.data.dom = dom;\n            this.$.css.$registerAsync(id, '$cssFetch(\"' + id + '\")', promise);\n            return promise\n        }\n    }\n\n    $cssRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$cssRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$cssRemove(reason)\", reason).typeString();\n            if (!this.$.css.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$cssRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.css.get(id)._debug_remove_called) {debugger}\n            this.$.css.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.css.get(id);\n        let value = entry.$chain && entry.$chain.data.dom || entry.$value;\n        if (value instanceof jQuery) {\n            let usage = parseInt(value[0].dataset.usage) - 1;\n            if (usage) {\n                value[0].dataset.usage = usage\n            } else {\n                value.remove()\n            }\n        }\n        if (entry instanceof JFactoryPromise) {\n            entry.$chainAbort(reason || \"$cssRemove()\")\n        }\n        this.$.css.delete(id)\n    }\n\n    $cssRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.css;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$cssRemove(key)\n                }\n            }\n        }\n    }\n}\n\nexport class TraitLibVue {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$vueRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$vueRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"vue\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $vue(id, vue) {\n        id = this.$.vue.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"vue\", vue).type(Object);\n        }\n\n        if (JFACTORY_DEV && this.$.vue.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$vue(id)\", given: id })\n        }\n\n        return this.$.vue.$registerSync(id, vue).$value;\n    }\n\n    $vueRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$vueRemove(id)\", id).typeString();\n            if (!this.$.vue.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$vueRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.vue.get(id)._debug_remove_called) {debugger}\n            this.$.vue.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.vue.get(id);\n        jQuery(entry.$value.$el).remove();\n        entry.$value.$destroy();\n        this.$.vue.delete(id)\n    }\n\n    $vueRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.vue;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$vueRemove(key)\n                }\n            }\n        }\n    }\n}\n\nexport class TraitLibReact {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$reactRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$reactRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"react\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $react(id, container, element, ...renderOtherArguments) {\n        id = this.$.react.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            if (!jFactory.ReactDOM) {\n                throw new Error(\"jFactory.ReactDOM=ReactDOM must be set before using the React Trait\");\n            }\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"container\", container).type(HTMLElement, jQuery);\n        }\n\n        if (JFACTORY_DEV && this.$.react.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$react(id)\", given: id })\n        }\n\n        container = jQuery(container)[0];\n        let view = jFactory.ReactDOM.render(element, container, ...renderOtherArguments);\n        return this.$.react.$registerSync(id, { container, view }).$value.view;\n    }\n\n    $reactRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$reactRemove(id)\", id).typeString();\n            if (!this.$.react.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$reactRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.react.get(id)._debug_remove_called) {debugger}\n            this.$.react.get(id)._debug_remove_called = true\n        }\n\n        let value = this.$.react.get(id).$value;\n        let el = value.container;\n        if (el) {\n            if (!jFactory.ReactDOM.unmountComponentAtNode(el)) {\n                if (JFACTORY_DEV) {\n                    this.$logWarn(\"unmountComponentAtNode failed to unmount\", el);\n                }\n            }\n            jQuery(el).remove();\n        }\n        this.$.react.delete(id)\n    }\n\n    $reactRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.react;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$reactRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactory.TraitFetch = TraitFetch;\njFactory.TraitTimeout = TraitTimeout;\njFactory.TraitInterval = TraitInterval;\njFactory.TraitMutation = TraitMutation;\njFactory.TraitDOM = TraitDOM;\njFactory.TraitCSS = TraitCSS;\njFactory.TraitLibVue = TraitLibVue;\njFactory.TraitLibReact = TraitLibReact;","/* jFactory, Copyright (c) 2019-2021, Stéphane Plazis, https://github.com/jfactory-es/jfactory */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory bundle entry file (see package.json scripts to compile the /dist)\n// ---------------------------------------------------------------------------------------------------------------------\n// Almost everything is exported; The resulting modules should be imported by a bundler that supports Tree Shacking.\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport * from \"./indexLibs.mjs\";\n\nexport * from \"./jFactory-traits.mjs\";\nexport * from \"./TraitsCore.mjs\";\nexport * from \"./TraitsComponents.mjs\";\n\nexport * from \"./jFactory.mjs\";\n\nimport { jFactoryBootstrap } from \"./jFactory-bootstrap.mjs\";\njFactoryBootstrap(true)"],"names":["JFACTORY_VER","JFACTORY_CLI","env","isNode","process","versions","node","JFACTORY_DEV","JFACTORY_DEBUG","JFACTORY_LOG","JFACTORY_TRACE","JFACTORY_BOOT","jFactoryEnv","jFactoryCfg","cfg","key","val","undefined","JFACTORY_CFG","Object","assign","globalThis","jQuery","$","helper_isString","_","isString","helper_isNumber","isNumber","helper_isPlainObject","isPlainObject","helper_defaultsDeep","defaultsDeep","helper_lowerFirst","lowerFirst","helper_get","get","helper_template","template","helper_camelCase","camelCase","NOOP","helper_setFunctionName","name","f","defineProperty","value","helper_url_abs_a","document","createElement","helper_url_abs","url","href","helper_isNative","Function","prototype","toString","call","indexOf","helper_useragent","id","navigator","userAgent","helper_deferred","Deferred","[object Object]","this","_done","_fail","list","h","fulfilled","execute","callback","push","JFACTORY_COMPAT_fetch","test","fetch","info","JFACTORY_COMPAT_Request","Request","JFACTORY_COMPAT_AbortController","AbortController","signal","JFACTORY_COMPAT_MutationObserver","MutationObserver","jFactoryCompat_require","args","compat","jFactoryCompat_run","entry","entries","pass","Boolean","ignore","console","warn","jFactoryBootstrap","auto","_isLoaded","log","init","seq","handler","tracer","jFactoryBootstrap_expected","Error","jFactoryBootstrap_onBoot","JFactoryTrace","omitAboveFunctionName","omitSelf","stackTraceLimit","Infinity","_stackTraceLimit","source","printable","asyncPrintable","Promise","resolve","stack","e","JFactoryTrace_LIB_STACKTRACE","traceFrames","constructor","createErrorFromStack","createStackFromTraceFrames","filterTraceFrames","StackTrace","getSync","config","libOptions","useSourcemap","fromError","then","slice","findIndex","functionName","endsWith","formatter","values","jFactoryTrace","formatters","format","captureTraceSource","targetObject","traceSource","traceLogKey","keys","traceSourceKey","label","webkit","map","sf","s","uri","fileName","lineNumber","columnNumber","join","firefox","attachTrace","JFactoryError","message","data","create","super","toPrintable","$data","Symbol","iterator","object","find","templateData","nv","getId","JSON","stringify","length","jsonMax","substring","String","templateMessage","part","split","placeholder","re","reg_placeholder","lastIndex","exec","trim","toPrintableData","type","ret","E","factory","JFACTORY_ERR_INVALID_VALUE","JFACTORY_ERR_INVALID_CALL","JFACTORY_ERR_PROMISE_EXPIRED","JFACTORY_ERR_REQUEST_ERROR","JFACTORY_ERR_KEY_DUPLICATED","JFACTORY_ERR_KEY_MISSING","JFactoryExpect","error","jFactoryThrow","target","reason","given","staticMethods","notUndefined","notEmptyString","notFalsy","validSpaces","replace","matchReg","reg","expected","ok","typeNull","typeBoolean","typeString","typeNumber","typeFunction","typePlainObject","equalIn","Array","isArray","includes","getOwnPropertyNames","writable","getOwnPropertyDescriptor","notWritable","enumerable","propertyIsEnumerable","notEnumerable","configurable","notConfigurable","reservedProperty","callStatic","JFactoryObject","descriptorPrototype","DESCRIPTORS_PROTOTYPE","o","NONE","WRITABLE","ENUMERABLE","CONFIGURABLE","CONFIGURABLE_WRITABLE","WRITABLE_CONFIGURABLE","CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE","ENUMERABLE_WRITABLE","WRITABLE_ENUMERABLE","WRITABLE_ENUMERABLE_CONFIGURABLE","WRITABLE_CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE_WRITABLE","ENUMERABLE_WRITABLE_CONFIGURABLE","CONFIGURABLE_WRITABLE_ENUMERABLE","CONFIGURABLE_ENUMERABLE_WRITABLE","READONLY","property","descriptor","descriptors","getOwnPropertySymbols","defineProperties","flat","disinherit","properties","createDescriptors","moduleGenId","uid","JFactoryAbout","owner","about","fingerprint","toLowerCase","JFactoryPromise","executor","arguments","chainId","reject","DEFAULT_CONFIG","Number","_resolve","_reject","chain","JFactoryPromiseChain","$chain","$type","$value","$isSettled","$isRejected","$isFulfilled","$isExpired","$isAborted","$dev_name","$dev_path","JFactoryPromisePath","$dev_position","$dev_source","tryAutoComplete","isPending","$chainComplete","onResolve","onReject","TypeError","called","resolvePromise","y","rejectPromise","r","errorExpired","onSettle","chainMap","set","chainConfig","chainAutoComplete","size","_chainAutoComplete","__resolve__","__reject__","onFulfilled","onRejected","forceType","wrappedFulfilled","wrappedRejected","newPromise","startsWith","__onFulfilled__","__onRejected__","fNames","chainName","setExpired","optionalArgs","onExpired","chainRoot","complete","promise","abort","silent","Map","isCompleted","__deferred__","from","done","item","i","v","JFactoryPromiseSync","states","bind","JFactoryFunctionComposer","handlers","handlerGroups","handlerGroup","unshift","composer","composite","context","canceled","parameters","result","iteration","next","composite_iterator","scope","filter","jFactoryFunctionExpirable","originalHandler","JFactoryFunctionExpirable","compose","expiredCalls","expired","isExpired","expirable","addExpireCondition","condition","last","apply","onNotExpired","MaxWarningExpiration","jFactoryFunctionConditional","JFactoryFunctionConditional","first","conditional","addCondition","handle","jFactoryFunctionWrappable","JFactoryFunctionWrappable","wrappable","beforeAll","justBefore","justAfter","afterAll","JFactoryEvents","registry","WeakMap","onListenerUpdate","onObserverUpdate","events","selector","validateSelector","HTMLElement","wrappedHandler","on","off","pending","event","trigger","triggerHandler","all","async","JFactoryEventsManager","parent","affiliateRules","affiliateAddRule","rule_namespace","namespaces","options","parser","JFactoryEventSelectorParser","parsedEvent","namespace","addNamespace","affiliate","argL","jquery","triggerSeries","triggerParallel","elm","_data","types","JFactoryEventSelector","hasNamespace","_events","expando","k","eventTypeEntry","selectors","Set","has","add","delete","ns","shift","validateEvent","validateNamespace","JFactoryFetch","fetchOptions","fetchRequest","response","fetchResponse","status","statusText","$typeText","text","responseText","$typeJSON","json","responseJSON","catch","abortCtrl","abortController","fetchAbortController","$chainAbort","SYMBOL_ENABLED","JFactoryLogger","installAccessor","enabled","parentLogger","enable","disable","nativeName","filters","targetName","accessor","sub","styles_css","styles_cli","FORMATTER_NATIVE","logger","FORMATTER_CLI","FORMATTER_BROWSER","DEFAULT_CONDITION","equal","JFactoryTime","Date","toLocaleTimeString","getUTCMilliseconds","valueOf","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","a","JFactoryTimeTrace","elapsed","t1","t0","$toDurationString","JFactoryTraits","callerInstance","callerConstructor","trait","traitArgs","cache","CACHE","WeakSet","JFactoryTrait","export","traitInstance","trait_constructor","isStatic","sourceDescriptor","getOwnPropertyDescriptors","propertyName","prefix","getPrefix","getTarget","propertyDescriptor","parsed","defaultParser","EXCLUDES","jFactoryTraits","service","phase","$logErr","JFactoryCoreObject","inject","use","jFactory","TraitCore","TraitAbout","TraitLog","TraitEvents","TraitState","TraitService","TraitTask","JFactoryComponent","TraitFetch","TraitDOM","TraitCSS","TraitMutation","TraitTimeout","TraitInterval","TraitLibVue","TraitLibReact","SubMap","$phaseRemove","getContextualRemovePhase","taskName","task","$task","$chainAutoComplete","str","id_autoinc","proto","SYMBOL_PRIVATE","createSubMap","tasks","requests","executorOrValue","$id_resolve","metrics","$taskMetrics","$dev_timing","end","$taskRemove","_called","removePhase","PHASES","autoComplete","assignPrivate","custom","kernel","eventManager","listeners","getDomListeners","observers","getObservers","$trigger","stateRoutes","Proxy","$state","before","$notify","after","notify","previousVal","PHASE","phaseQueue","phaseTask","phaseMap","install","uninstall","assignPrivateMember","installed","setEventNamespaceRemovePhase","phaseResolve","$taskRemoveAll","$taskPromiseAll","onInstall","onEnable","onDisable","onUninstall","$off","removal","DISABLE","UNINSTALL","p","INSTALL","$enable","ENABLE","phaseKill","$disable","component","jFactoryCoreObject","PHASE_REVERT","curRemovePhase","newRemovePhase","deleteNamespace","$fetchRemoveAll","$registerAsync","$fetchRemove","$fetch","_debug_remove_called","subs","$timeoutRemoveAll","delay","timeouts","timer","setTimeout","$timeoutRemove","clearTimeout","$intervalRemoveAll","timeints","setInterval","$registerSync","clearInterval","$intervalRemove","$mutationRemoveAll","mutations","Document","observer","observe","disconnect","$mutationRemove","$domRemoveAll","jQueryArgument","appendTo","domId","dom","tagName","html","nodeType","Node","ELEMENT_NODE","$fetchText","remove","$domRemove","$cssRemoveAll","styleBody","cssId","css","attr","exist","dataset","usage","parseInt","rel","data-usage","$cssRemove","$vueRemoveAll","vue","$el","$destroy","$vueRemove","$reactRemoveAll","container","element","renderOtherArguments","react","ReactDOM","view","render","el","unmountComponentAtNode","$logWarn","$reactRemove"],"mappings":"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"}