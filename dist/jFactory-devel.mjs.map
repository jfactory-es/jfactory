{"version":3,"file":"jFactory-devel.mjs","sources":["../src/jFactory-env.mjs","../src/jFactory-loader.mjs","../src/jFactory-helpers.mjs","../src/JFactoryTrace.mjs","../src/JFactoryError.mjs","../src/JFactoryExpect.mjs","../src/JFactoryTraits.mjs","../src/JFactoryFunction.mjs","../src/jFactory-traits.mjs","../src/jFactory.mjs","../src/JFactoryObject.mjs","../src/JFactoryAbout.mjs","../src/JFactoryPromise.mjs","../src/JFactoryEvents.mjs","../src/JFactoryFetch.mjs","../src/JFactoryLogger.mjs","../src/JFactoryTime.mjs","../src/TraitsCore.mjs","../src/TraitsComponents.mjs","../src/index.mjs"],"sourcesContent":["/*!\n * jFactory, Copyright (c) 2019, Stéphane Plazis\n * https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt\n */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory Env\n// ---------------------------------------------------------------------------------------------------------------------\n\n// Compile-time immutable Env; used by Tree Shaking to remove unused code\nexport const JFACTORY_DEV = typeof COMPILER_DEV === \"undefined\" ? false : COMPILER_DEV; // Developer Mode\nexport const JFACTORY_DEBUG = typeof COMPILER_DEBUG === \"undefined\" ? false : COMPILER_DEBUG; // Debug the library\nexport const JFACTORY_CLI = typeof COMPILER_CLI === \"undefined\" ?\n    typeof process !== \"undefined\" && process.versions && process.versions.node : COMPILER_CLI;\n\n// Mutable configuration\nexport const jFactoryConfig = {\n    TraitLog: JFACTORY_DEV && !JFACTORY_CLI || JFACTORY_DEBUG,\n    JFactoryError: {\n        keys: [\"$.about.name\", \"$dev_name\", \"$name\", \"name\", \"id\"]\n    },\n    JFactoryTrace: JFACTORY_DEV && !JFACTORY_CLI\n        && {\n            keys: [\"$dev_traceLog\", \"$dev_traceSource\"],\n            libOptions: {\n                offline: Boolean(globalThis.chrome), // loading sourcemaps is not required in chrome\n                filter: function(value) {\n                    return value.lineNumber\n                    // && (value.fileName + value.functionName).toLocaleLowerCase().indexOf('jfactory') < 0\n                }\n            }\n        },\n    jFactoryDev: JFACTORY_DEV\n        && {\n            requireCompatibility: {\n                globalThis: {\n                    test: () => globalThis,\n                    info: \"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\n                },\n                fetch: {\n                    test: () => fetch,\n                    info: \"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch\"\n                },\n                Request: {\n                    test: () => Request,\n                    info: \"https://developer.mozilla.org/docs/Web/API/Request\"\n                },\n                \"AbortController, AbortSignal\": {\n                    test: () => new AbortController().signal,\n                    info: \"https://developer.mozilla.org/docs/Web/API/AbortController, \" +\n                        \"https://developer.mozilla.org/docs/Web/API/AbortSignal\"\n                },\n                MutationObserver: {\n                    test: () => MutationObserver,\n                    info: \"https://developer.mozilla.org/docs/Web/API/MutationObserver\"\n                }\n            }\n        }\n};","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_CLI, JFACTORY_DEV, jFactoryConfig } from \"./jFactory-env\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory Loader\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const jFactoryLoader = {\n    seq: [],\n    init() {\n        if (this.seq) {\n            let seq = this.seq;\n            delete this.seq;\n            for (let module of seq) {\n                module()\n            }\n            delete globalThis.jFactoryOverride\n        }\n    },\n    onInit(handler) {\n        this.seq.push(handler)\n    }\n};\n\nexport function jFactoryDev() {\n    console.warn(\"jFactory: RUNNING IN DEVELOPER MODE, PERFORMANCES WILL BE AFFECTED\");\n    for (let [name, entry] of Object.entries(jFactoryConfig.jFactoryDev.requireCompatibility)) {\n        let pass;\n        try {pass = Boolean(entry.test())} catch (ignore) {}\n        if (!pass) {\n            console.warn(`jFactory may require the support of \"${name}\", ${entry.info}`)\n        }\n    }\n}\n\nexport function jFactoryInit() {\n    !jFactoryConfig.TraitLog && (JFACTORY_DEV || JFACTORY_CLI) && console.warn(\"jFactory: LOGS REMOVED\");\n}\n\nJFACTORY_DEV && jFactoryLoader.onInit(jFactoryDev);\njFactoryLoader.onInit(jFactoryInit);","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport _ from \"lodash\";\nimport $ from \"jquery\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory Helpers\n// ---------------------------------------------------------------------------------------------------------------------\n// Centralize helpers and externals in one module\n// ---------------------------------------------------------------------------------------------------------------------\n// The jFactory bundler should exclude external imports to let the project deals with external libraries,\n// allowing customized imports (CDN scripts, optimized compiled imports, overrides...)\n// See: rollup: \"output.globals\" and \"external\"; webpack: \"externals\"\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const jQuery = $;\n\nexport const helper_isNative = _.isNative;\nexport const helper_isString = _.isString;\nexport const helper_isNumber = _.isNumber;\nexport const helper_isPlainObject = _.isPlainObject;\nexport const helper_defaultsDeep = _.defaultsDeep;\nexport const helper_lowerFirst = _.lowerFirst;\nexport const helper_get = _.get;\nexport const helper_template = _.template;\nexport const helper_camelCase = _.camelCase;\n\nexport const NOOP = () => {};\nexport const setFunctionName = (name, f) => Object.defineProperty(f, \"name\", { value: name });","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, jFactoryConfig } from \"./jFactory-env\";\nimport { jFactoryLoader } from \"./jFactory-loader\";\nimport { NOOP } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTrace\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n// - #limitation# Error.stack is not standardized\n// - #limitation# Error.stack is not source-mapped\n// - #limitation# bug https://bugzilla.mozilla.org/show_bug.cgi?id=1584244\n// - #limitation# StackTrace.js resolves sourcemaps. Unfortunately, it doesn't work with \"webpack:\" protocol\n//   see https://github.com/stacktracejs/stacktrace.js/issues/209\n// ---------------------------------------------------------------------------------------------------------------------\n// https://github.com/mozilla/source-map/\n// https://www.stacktracejs.com/\n// https://github.com/novocaine/sourcemapped-stacktrace\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTrace_NOFILTER {\n\n    constructor({ label, stackTraceLimit, keys, libOptions } = {}) {\n        this.label = label || \"The stack has been printed in the console\";\n        this.stackTraceLimit = stackTraceLimit || Infinity;\n        this.keys = keys || [\"stackLog\", \"stackSource\"];\n        this.libOptions = libOptions || {}\n    }\n\n    captureTraceSource(omitAboveFunctionName, omitSelf) {\n        let _stackTraceLimit;\n        if (this.stackTraceLimit) {\n            _stackTraceLimit = Error.stackTraceLimit;\n            Error.stackTraceLimit = this.stackTraceLimit\n        }\n        if (!omitAboveFunctionName) {\n            omitAboveFunctionName = \"captureTraceSource\";\n            omitSelf = true\n        }\n        let traceSource = {\n            source: new Error(),\n            omitAboveFunctionName,\n            omitSelf\n        };\n        if (this.stackTraceLimit) {\n            Error.stackTraceLimit = _stackTraceLimit\n        }\n        return traceSource\n    }\n\n    attachTrace(targetObject, traceSource) {\n        if (typeof traceSource !== \"object\") {\n            traceSource = this.captureTraceSource(traceSource || \"attachTrace\", !traceSource);\n        }\n\n        let trace = traceSource.source;\n        this.toPrintableTrace(traceSource)\n            .then(r => trace = r);\n\n        let log = () => console.log(trace) || this.label;\n\n        Object.defineProperty(targetObject, this.keys[0] /* traceLog */, {\n            enumerable: false,\n            configurable: true,\n            // hide the function body to improve readability in devtool\n            get: () => log()\n        });\n        Object.defineProperty(targetObject, this.keys[1] /* traceSource */, {\n            enumerable: false,\n            configurable: true,\n            // hide the traceSource Error to improve readability in devtool, specially in Firefox\n            get: () => traceSource\n        });\n    }\n\n    toPrintableTrace(traceSource) {\n        // SPEC: this overridable method returns a promise\n        // because stacktrace parsers may be asynchronous\n        return Promise.resolve(traceSource.source)\n    }\n}\n\nexport class JFactoryTrace_LIB_STACKTRACE extends JFactoryTrace_NOFILTER {\n\n    constructor(config) {\n        super(config);\n    }\n\n    toPrintableTrace(traceSource) {\n        return StackTrace.fromError(traceSource.source, this.libOptions)\n            .then(traceFrames => {\n\n                if (traceSource.omitAboveFunctionName) {\n                    let slice = traceFrames.findIndex(\n                        value => {\n                            return value.functionName && value.functionName.endsWith(traceSource.omitAboveFunctionName)\n                        }\n                    );\n                    if (slice > 0) {\n                        if (traceSource.omitSelf) {\n                            slice++\n                        }\n                        traceFrames = traceFrames.slice(slice);\n                    }\n                }\n                traceFrames = traceFrames\n                    .filter(this.libOptions.filter);\n                return this.formatTraceFrames(traceFrames)\n            });\n    }\n\n    formatTraceFrames(traceFrames) {\n        let header;\n        let linePrefix;\n        if (this.libOptions.offline && window.chrome) {\n            // if the fallowing syntax is detected on Chrome,\n            // the console.log() will convert the fileNames using sourcemaps\n            header = \"Error\\n\"; // notes that anything after \"Error\" is valid\n            linePrefix = \"\\tat \";\n        } else {\n            header = \"\";\n            linePrefix = \"\";\n        }\n        return header +\n            traceFrames\n                .map(sf => linePrefix + sf.toString())\n                .join(\"\\n\");\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryTrace\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const jFactoryTrace = {};\n\njFactoryLoader.onInit(function() {\n    let config = jFactoryConfig.JFactoryTrace;\n    if (config && config.use !== false) {\n        let constructor;\n        constructor = typeof config.use === \"function\" ?\n            config.use : typeof StackTrace === \"object\" ?\n                JFactoryTrace_LIB_STACKTRACE :\n                (JFACTORY_DEV && console.warn(\"jFactory: StackTrace lib not found, using fallback\"),\n                JFactoryTrace_NOFILTER);\n        if (constructor === JFactoryTrace_LIB_STACKTRACE) {\n            console.warn(\"jFactory: Stack trace enabled; Performance will be affected\")\n        }\n        jFactoryTrace.tracer = new constructor(config);\n    } else {\n        jFactoryTrace.tracer = {\n            captureTraceSource: NOOP,\n            attachTrace: NOOP\n        };\n    }\n});","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, jFactoryConfig } from \"./jFactory-env\";\nimport { helper_get, helper_isNative, helper_lowerFirst, helper_template } from \"./jFactory-helpers\";\nimport { jFactoryTrace } from \"./JFactoryTrace\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryError\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryError extends Error {\n    constructor(message = \"unspecified error\", data = null) {\n        data = Object.assign(Object.create(null), data);\n        message = JFactoryError.toPrintable(message, data);\n        super(message);\n        this.$data = Object.assign(Object.create(null), data);\n    }\n\n    toString() {\n        return this.message\n    }\n\n    * [Symbol.iterator]() {\n        yield this.message;\n        yield this.$data;\n    }\n\n    static getId(object) {\n        return object[(jFactoryConfig.JFactoryError.keys || JFactoryError.DEFAULT_KEYS).find(key => {\n            let val = helper_get(object, key);\n            return val || val === 0\n        })]\n    }\n\n    static toPrintableData(data) {\n        const templateData = {};\n        let nv;\n        for (let [key, val] of Object.entries(data)) {\n            switch (typeof val) {\n                case \"function\":\n                    val = val.name + \"()\";\n                    break;\n                case \"object\":\n                    if (val === null) {\n                        val = \"null\";\n                        break\n                    }\n                    if (val instanceof Error) {\n                        val = val.toString();\n                        break\n                    }\n                    if ((nv = JFactoryError.getId(val)) !== undefined) {\n                        val = '\"' + nv + '\"'\n                    } else {\n                        if (!helper_isNative(val.toString)) {\n                            val = val.toString()\n                        } else {\n                            try {\n                                nv = JSON.stringify(val);\n                                val = nv.length > JFactoryError.JSON_MAX\n                                    ? nv.substring(0, JFactoryError.JSON_MAX) + \"[...]\" : nv;\n                            } catch (e) {\n                                val = \"[object \" + val.constructor.name + \"]\"\n                            }\n                        }\n                    }\n                    break;\n                case \"string\":\n                    val = '\"' + val + '\"';\n                    break;\n                default:\n                    val = String(val)\n            }\n            templateData[key] = val\n        }\n        return templateData\n    }\n\n    static toPrintable(template, data) {\n        const templateMessage = [];\n        for (let part of template.split(\";\")) {\n            let placeholder;\n            let RE_PLACEHOLDER = JFactoryError.RE_PLACEHOLDER;\n            RE_PLACEHOLDER.lastIndex = 0;\n            if ((placeholder = RE_PLACEHOLDER.exec(part))) {\n                do {\n                    if (placeholder[1] && placeholder[1] in data) {\n                        templateMessage.push(part.trim());\n                        break\n                    }\n                } while ((placeholder = RE_PLACEHOLDER.exec(part)) !== null)\n            } else {\n                templateMessage.push(part.trim());\n            }\n        }\n        return helper_lowerFirst(helper_template(templateMessage.join(\"; \"))(JFactoryError.toPrintableData(data)));\n    }\n}\n\nJFactoryError.JSON_MAX = 40;\nJFactoryError.DEFAULT_KEYS = [\"name\", \"id\"];\nJFactoryError.RE_PLACEHOLDER = /\\${([^}]+)}/g;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryError\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport let jFactoryError = new Proxy(JFactoryError, {\n    set: function(target, property, value) {\n        let { template } = value;\n\n        if (JFACTORY_DEV && target[property]) {\n            throw new Error(\"already declared\");\n        }\n\n        target[property] = class extends JFactoryError {\n            constructor(data, traceSource) {\n                super(template, data);\n                jFactoryTrace.tracer.attachTrace(this.$data, traceSource);\n            }\n        };\n        // Caution: Chrome automatically resolves sourcemap when logging errors\n        // but only if the error name starts with \"Error\"\n        target[property].prototype.name = \"Error jFactoryError.\" + property;\n\n        return true\n    }\n});\n\njFactoryError.INVALID_VALUE = { template: \"invalid value for ${target}; Reason: ${reason}; Given: ${given}\" };\njFactoryError.INVALID_CALL = { template: \"invalid call ${target}; Reason: ${reason}; Owner: ${owner}\" };\njFactoryError.PROMISE_EXPIRED = { template: \"expired promise ${target}; Reason: ${reason}\" };\njFactoryError.REQUEST_ERROR = { template: \"error requesting ${target}; Reason: ${reason}; Owner: ${owner}\" };\njFactoryError.KEY_DUPLICATED = { template: \"duplicated key for ${target}; Given: ${given}\" };\njFactoryError.KEY_MISSING = { template: \"missing key for ${target}; Given: ${given}\" };","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { jFactoryError } from \"./JFactoryError\";\nimport { helper_isNumber, helper_isPlainObject, helper_isString } from \"./jFactory-helpers\";\nimport { jFactoryLoader } from \"./jFactory-loader\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryExpect\n// ---------------------------------------------------------------------------------------------------------------------\n// A small input/output validation tool\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Alpha, Draft\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @return {*|JFactoryExpect}\n */\nexport function JFactoryExpect(label, value) {\n    if (new.target) {\n        this.label = label;\n        this.value = value;\n    } else {\n        return new JFactoryExpect(label, value)\n    }\n}\n\nconst error = function jFactoryThrow(label, value, message) {\n    throw new jFactoryError.INVALID_VALUE({\n        target: label,\n        reason: message,\n        given: value\n    })\n};\n\nconst staticMethods = {\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect\n     */\n    notUndefined(label, value) {\n        if (value === undefined) {\n            error(label, value, \"cannot be undefined\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect\n     */\n    notEmptyString(label, value) {\n        if (value === \"\") {\n            error(label, value, \"cannot be empty string\")\n        }\n        return true\n    },\n\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect\n     */\n    notFalsy(label, value) {\n        if (!value) {\n            error(label, value, 'cannot be a falsy value (undefined, null, NaN, 0, \"\")')\n        }\n        return true\n    },\n\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect\n     */\n    validSpaces(label, value) {\n        if (!value.replace || value.replace(/\\s+/g, \" \").trim() !== value) {\n            error(label, value, \"invalid space delimiters\")\n        }\n        return true\n    },\n\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect#\n     * @param {RegExp} reg\n     * @return JFactoryExpect\n     */\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect\n     */\n    matchReg(label, value, reg) {\n        if (!reg.test(value)) {\n            error(label, value, 'string \"' + value + '\" must match ' + reg)\n        }\n        return true\n    },\n\n    /**\n     * @method type\n     * @memberOf JFactoryExpect#\n     * @param {...*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method type\n     * @memberOf JFactoryExpect\n     */\n    type(label, value, ...expected) {\n        let name, ok = false;\n        for (let constructor of expected) {\n            if (constructor === null) {\n                name = \"Null\"\n            } else if (\"name\" in constructor) {\n                name = constructor.name\n            }\n            let test = staticMethods[\"type\" + name];\n            if (test) {\n                try {ok = test(label, value/*, e*/)} catch (e) {}\n            } else {\n                ok = value instanceof constructor\n            }\n            if (ok) break\n        }\n        if (!ok) {\n            error(label, value, \"must be an instance of [\" + expected.map(e => e.name).join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect\n     */\n    typeNull(label, value) {\n        if (value !== null) {\n            error(label, value, \"must be null\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect\n     */\n    typeBoolean(label, value) {\n        if (value !== true && value !== false) {\n            error(label, value, \"must be a boolean\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect\n     */\n    typeString(label, value) {\n        if (!helper_isString(value)) {\n            error(label, value, \"must be a string\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect\n     */\n    typeNumber(label, value) {\n        if (!helper_isNumber(value)) {\n            error(label, value, \"must be a number\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect\n     */\n    typeFunction(label, value) {\n        if (!(typeof value === \"function\")) {\n            error(label, value, \"must be a function\")\n        }\n        return true\n    },\n\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect\n     */\n    typePlainObject(label, value) {\n        if (!helper_isPlainObject(value)) {\n            error(label, value, \"must be a plain object\")\n        }\n        return true\n    },\n\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect#\n     * @param {*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect\n     */\n    equal(label, value, ...expected) {\n        let ok = false;\n        for (let e of expected) {\n            if ((ok = value === e)) break\n        }\n        if (!ok) {\n            error(label, value, \"must be one of [\" + expected + \"]\")\n        }\n        return true;\n    },\n\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect#\n     * @param {Array|Object} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect\n     */\n    equalIn(label, value, expected) {\n        if (!Array.isArray(expected)) {\n            expected = Object.values(expected)\n        }\n        if (!expected.includes(value)) {\n            error(label, value, \"must be one from [\" + expected.join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect#\n     * @param {Array} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect\n     */\n    properties(label, value, expected) {\n        for (let name of Object.getOwnPropertyNames(value)) {\n            JFactoryExpect(label + ', property name \"' + name + '\"', name).equalIn(expected)\n        }\n        return true\n    },\n\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect\n     */\n    writable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect\n     */\n    notWritable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must not be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect\n     */\n    enumerable(label, value, key) {\n        if (!Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect\n     */\n    notEnumerable(label, value, key) {\n        if (Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must not be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect\n     */\n    configurable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect\n     */\n    notConfigurable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must not be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect\n     */\n    reservedProperty(label, value, key) {\n        if (key in value) {\n            error(label, value, \"is a reserved property\")\n        }\n        return true\n    }\n};\n\njFactoryLoader.onInit(function() {\n    Object.assign(JFactoryExpect, staticMethods);\n    // Generate members from static methods\n    for (const name of Object.getOwnPropertyNames(staticMethods)) {\n        JFactoryExpect.prototype[name] =\n            function callStatic(...args) {\n                JFactoryExpect[name](this.label, this.value, ...args);\n                return this\n            }\n    }\n});","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, jFactoryConfig } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTraits\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTraits {\n    /**\n     * @param {JFactoryCoreObject|Object} callerInstance\n     * @param {Class|Function} callerConstructor\n     * @param options\n     */\n    constructor(callerInstance, callerConstructor, options = {}) {\n        /**\n         * @type {JFactoryCoreObject}\n         */\n        this.callerInstance = callerInstance;\n\n        /**\n         * @type {Class|Function}\n         */\n        this.callerConstructor = callerConstructor;\n\n        /**\n         * @type {Object}\n         */\n        this.options = options;\n    }\n\n    use(trait, ...traitArgs) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryTraits(trait)\", trait).typeFunction();\n        }\n\n        // callerConstructor is not always the callerInstance.constructor:\n        // The Trait can be injected in an inherited constructor from super() at call time\n        let { callerInstance, callerConstructor } = this;\n\n        // Detect improper duplication (can be a trait already called by a super class)\n        let cache = JFactoryTraits.CACHE.get(callerInstance);\n\n        if (cache) {\n            if (cache.has(trait)) {\n                if (jFactoryConfig.TraitLog) {\n                    console.warn(`${trait.name} already called on`, callerInstance);\n                }\n                return this;\n            } else {\n                cache.add(trait)\n            }\n        } else {\n            JFactoryTraits.CACHE.set(callerInstance, new WeakSet([trait]))\n        }\n\n        !callerConstructor.JFactoryTrait && (callerConstructor.JFactoryTrait = new WeakSet);\n\n        if (!callerConstructor.JFactoryTrait.has(trait)) {\n            callerConstructor.JFactoryTrait.add(trait);\n            this.export(trait.prototype, callerConstructor.prototype);\n            this.export(trait, callerConstructor, true);\n        }\n\n        // In a Trait.constructor(callerInstance, ...args) : this != callerInstance\n        // In a Trait.trait_constructor(...args) : this == callerInstance (traits is injected and available)\n\n        // Traits are injections. They are not dynamic inheritance.\n        // So the Trait.constructor() doesn't share the \"this\" keyword with its caller.\n\n        // #limitation# No way to bind an ES6 class constructor to an object\n        // => Implementer can define a \"trait_constructor()\" that is automatically bound to \"callerInstance\"\n        // and called after the native trait constructor().\n\n        // eslint-disable-next-line new-cap\n        let traitInstance = new trait(callerInstance, ...traitArgs);\n        if (traitInstance.trait_constructor) {\n            traitInstance.trait_constructor.apply(callerInstance, traitArgs)\n        }\n        return this\n    }\n\n    export(source, target, isStatic) {\n        let sourceDescriptor = Object.getOwnPropertyDescriptors(source);\n\n        for (let propertyName of Object.keys(sourceDescriptor)) {\n            let prefix = JFactoryTraits.getPrefix(propertyName);\n\n            if (JFactoryTraits.getTarget(propertyName, target, prefix)) {\n                let propertyDescriptor = sourceDescriptor[propertyName];\n                let parsed = (this.options.parser || JFactoryTraits.defaultParser)(\n                    propertyName, propertyDescriptor, source, target, isStatic\n                );\n                if (parsed) {\n                    ({ propertyName, propertyDescriptor } = parsed);\n                    Object.defineProperty(target, propertyName, propertyDescriptor);\n                }\n            }\n        }\n    }\n\n    static defaultParser(propertyName, propertyDescriptor, source, target, isStatic) {\n        let value = propertyDescriptor.value;\n\n        if (isStatic) {return null} // don't export static members\n\n        if (propertyName in target) { // skip existing properties\n            if (jFactoryConfig.TraitLog) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of existing property \"${propertyName}\"`,\n                    value);\n            }\n            return null\n        }\n\n        if (typeof value === \"object\") { // prevent shared object exportation\n            if (jFactoryConfig.TraitLog) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of shared object \"${propertyName}\"`,\n                    value);\n            }\n            return null;\n        }\n\n        return { propertyName, propertyDescriptor }\n    }\n\n    static getPrefix(key) {\n        let split = key.split(\"_\");\n        return split.length > 1 ? split[0] : null;\n    }\n\n    static getTarget(key, target, prefix) {\n        if (\n            JFactoryTraits.EXCLUDES.includes(key) ||\n            prefix === \"trait\"\n        ) {\n            return null\n        }\n\n        return target\n    }\n}\n\nJFactoryTraits.CACHE = new WeakMap;\nJFactoryTraits.EXCLUDES = [\"constructor\", \"prototype\", \"length\", \"size\"];","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, jFactoryConfig } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { jFactoryError } from \"./JFactoryError\";\nimport { setFunctionName } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionComposer\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFunctionComposer {\n\n    constructor() {\n        this.handlers = Object.create(null);\n    }\n\n    * [Symbol.iterator](handlerGroups = []) {\n\n        if (!handlerGroups.length) {\n            handlerGroups = Object.keys(this.handlers)\n        }\n        if (!handlerGroups.length) {\n            handlerGroups = [\"default\"]\n        }\n\n        for (let handlerGroup of handlerGroups) {\n            if (handlerGroup in this.handlers) {\n                yield* this.handlers[handlerGroup]\n            }\n        }\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    first(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).unshift(handler);\n        return this\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    last(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).push(handler);\n        return this\n    }\n\n    /** @return {(function(): *) & {composer: JFactoryFunctionComposer}} */\n    compose(...handlerGroups) {\n        let composer = this;\n        let composite = function() {\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            //                                                //\n            //                wrapped function                //\n            //                                                //\n            //    You should Blackbox JFactoryFunction.mjs    //\n            //    to simplify debugging                       //\n            //                                                //\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            let context = {\n                canceled: false,\n                parameters: Array.from(arguments),\n                result: undefined\n            };\n            let iterator = composer[Symbol.iterator](handlerGroups);\n            let iteration = iterator.next();\n            return JFactoryFunctionComposer.composite_iterator(\n                this /* preserve call scope */, context, iteration, iterator)\n        };\n        composite.composer = composer;\n        return composite;\n    }\n\n    // SPEC: Composite functions returns promise *only* if at least\n    // one handler returns a promise (async function or promise return)\n    // So we cannot just iterate using an \"await for of\"\n    static composite_iterator(scope, context, iteration, handlers) {\n        let handler,\n            result;\n\n        while (!context.canceled && !iteration.done) {\n            handler = iteration.value;\n            if (scope) {\n                result = handler.call(scope, context, ...context.parameters)\n            } else {\n                result = handler(context, ...context.parameters)\n            }\n            iteration = handlers.next(); // prepares next iteration to know if \"done\"\n            if (result instanceof Promise) {\n                if (iteration.done\n                    // case of last handler returning a promise\n                    // #limitation# now way to detect if the promise is the returned value or an \"await\"\n                    // (we don't want to change the value of context.result during a pending handler)\n                    // => native Promise are always chained\n                    && result.constructor !== Promise) {\n                    context.result = result // we can safely set the new result\n                } else {\n                    return result.then(\n                        setFunctionName([handler.name, \"compositeAsyncHandler\"].filter(Boolean).join(\" \"),\n                            function(value) {\n                                context.result = value;\n                                return JFactoryFunctionComposer.composite_iterator(scope, context, iteration, handlers)\n                            })\n                    )\n                }\n            } else {\n                context.result = result\n            }\n        }\n        return context.result\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionExpirable - Expirable Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionExpirable(originalHandler) {\n    return new JFactoryFunctionExpirable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionExpirable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.expiredCalls = 0;\n        this.composer = new JFactoryFunctionComposer;\n\n        let isExpired = this.composer.compose(\"conditions\");\n        let expirable = this;\n        let expired;\n\n        // cannot use a real accessor here (conditions can be scoped, so isExpired too)\n        this.isExpired = scope => expired || isExpired.call(scope) || false;\n        this.setExpired = value => expired = value ?\n            value instanceof Error ? value : new jFactoryError.INVALID_CALL({\n                target: this.originalHandler,\n                reason: \"manually expired\"\n            }) : Boolean(this.expiredCalls = 0);\n\n        this.addExpireCondition = function(condition) {\n            this.composer.last(\"conditions\", function(context) {\n                let done = function(result) {\n                    if (JFACTORY_DEV) {\n                        JFactoryExpect(\"JFactoryFunctionExpirable.addExpireCondition(), result\", result)\n                            .type(Boolean, Error)\n                    }\n                    return expirable.setExpired(result ?\n                        (context.canceled = true) &&\n                        (result instanceof Error ?\n                            result :\n                            new jFactoryError.INVALID_CALL({\n                                target: expirable.originalHandler,\n                                reason: \"conditionally expired\",\n                                condition\n                            })\n                        ) : false\n                    )\n                };\n                let result = condition.apply(this, context.parameters);\n                return result instanceof Promise ? result.then(done) : done(result);\n            })\n        };\n    }\n\n    compose() {\n        let expirable = this;\n        let composite = function() {\n            let isExpired = expirable.isExpired(this);\n            let call = expirable.constructor.call.bind(undefined, expirable, this, arguments);\n            return isExpired instanceof Promise ? isExpired.then(call) : call(isExpired);\n        };\n        return Object.assign(composite, {\n            expirable: this,\n            isExpired: f => this.isExpired(f),\n            setExpired: f => this.setExpired(f),\n            addExpireCondition: f => {this.addExpireCondition(f); return composite}\n        });\n    }\n\n    static call(expirable, scope, args, isExpired) {\n        return isExpired ? expirable.onExpired(isExpired) : expirable.onNotExpired(scope, args);\n    }\n\n    onExpired(expired) {\n        if (this.expiredCalls < JFactoryFunctionExpirable.MaxWarningExpiration) {\n            this.expiredCalls++;\n            if (jFactoryConfig.TraitLog) {\n                console.warn(...new jFactoryError.INVALID_CALL({\n                    ...expired.$data,\n                    reason: expired.$data.reason\n                        + \"; expiredCalls=\"\n                        + this.expiredCalls\n                        + (this.expiredCalls === JFactoryFunctionExpirable.MaxWarningExpiration\n                            ? \"; Max Warning Exceeded\" : \"\")\n                }));\n            }\n        }\n        return expired\n    }\n\n    onNotExpired(scope, args) {\n        return this.originalHandler.apply(scope, args)\n    }\n}\n\nJFactoryFunctionExpirable.MaxWarningExpiration = 10;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionConditional - Conditional Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionConditional(originalHandler) {\n    return new JFactoryFunctionConditional(originalHandler).compose()\n}\n\nexport class JFactoryFunctionConditional {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", setFunctionName([originalHandler.name, \"condition\"]\n            .filter(Boolean).join(\" \"), function(context) {\n            return originalHandler.apply(this, context.parameters);\n        }));\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"conditions\", \"original\");\n        return Object.assign(composite, {\n            conditional: this,\n            addCondition: f => {this.addCondition(f); return composite}\n        });\n    }\n\n    addCondition(condition) {\n        this.composer.last(\"conditions\", function(context) {\n            let handle = function(result) {\n                if (JFACTORY_DEV) {\n                    JFactoryExpect(\"JFactoryFunctionConditional.addCondition(), result\", result)\n                        .typeBoolean();\n                }\n                !result && (context.canceled = true);\n            };\n            let result = condition.apply(this, context.parameters);\n            return result instanceof Promise ? result.then(handle) : handle(result);\n        })\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionWrappable - Wrappable Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionWrappable(originalHandler) {\n    return new JFactoryFunctionWrappable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionWrappable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", setFunctionName([originalHandler.name, \"wrapped\"]\n            .filter(Boolean).join(\" \"), function(context) {\n            return originalHandler.apply(this, context.parameters);\n        }));\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"before\", \"original\", \"after\");\n        return Object.assign(composite, {\n            wrappable: this,\n            beforeAll: f => {this.beforeAll(f); return composite},\n            justBefore: f => {this.justBefore(f); return composite},\n            justAfter: f => {this.justAfter(f); return composite},\n            afterAll: f => {this.afterAll(f); return composite}\n        });\n    }\n\n    beforeAll(handler) {\n        this.composer.first(\"before\", handler);\n    }\n\n    justBefore(handler) {\n        this.composer.last(\"before\", handler);\n    }\n\n    justAfter(handler) {\n        this.composer.first(\"after\", handler);\n    }\n\n    afterAll(handler) {\n        this.composer.last(\"after\", handler);\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { jFactoryError } from \"./JFactoryError\";\nimport { JFactoryTraits } from \"./JFactoryTraits\";\nimport { jFactoryFunctionWrappable } from \"./JFactoryFunction\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryTraits\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryTraits(callerInstance, callerConstructor) {\n    return new JFactoryTraits(callerInstance, callerConstructor, {\n\n        parser(propertyName, propertyDescriptor/*, source, target, isStatic */) {\n            let parsed = JFactoryTraits.defaultParser(...arguments);\n\n            if (parsed) {\n                ({ propertyName, propertyDescriptor } = parsed);\n\n                let value = propertyDescriptor.value;\n                if (typeof value === \"function\") {\n                    switch (value.name) {\n                        case \"$install\":\n                        case \"$uninstall\":\n                        case \"$enable\":\n                        case \"$disable\":\n                        case \"$state\":\n                            break;\n                        default:\n                            propertyDescriptor.value = jFactoryFunctionWrappable(value)\n                                .beforeAll(function() {\n                                    if (!this.$.states.enabled && this.$.service.phase === \"PHASE_NONE\") {\n                                        let e = new jFactoryError.INVALID_CALL({\n                                            owner: this,\n                                            target: value,\n                                            reason: \"component disabled\"\n                                        });\n                                        this.$logErr(...e);\n                                        throw e\n                                    }\n                                })\n                    }\n                }\n\n                return { propertyName, propertyDescriptor }\n            }\n        }\n    })\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { jFactoryTraits } from \"./jFactory-traits\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Predefined Components\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @mixes TraitCore\n * @mixes TraitAbout\n * @mixes TraitLog\n * @mixes TraitEvents\n * @mixes TraitState\n * @mixes TraitService\n * @mixes TraitTask\n */\nexport class JFactoryCoreObject {\n    constructor(name) {\n        jFactoryTraits(this, JFactoryCoreObject)\n            .use(jFactory.TraitCore)\n            .use(jFactory.TraitAbout, { name })\n            .use(jFactory.TraitLog)\n            .use(jFactory.TraitEvents)\n            .use(jFactory.TraitState)\n            .use(jFactory.TraitService)\n            .use(jFactory.TraitTask);\n    }\n}\n\n/**\n * @mixes TraitFetch\n * @mixes TraitDOM\n * @mixes TraitCSS\n * @mixes TraitMutation\n * @mixes TraitTimeout\n * @mixes TraitInterval\n */\nexport class JFactoryComponent extends JFactoryCoreObject {\n    constructor(name) {\n        super(name);\n\n        jFactoryTraits(this, JFactoryComponent)\n            .use(jFactory.TraitFetch)\n            .use(jFactory.TraitDOM)\n            .use(jFactory.TraitCSS)\n            .use(jFactory.TraitMutation)\n            .use(jFactory.TraitTimeout)\n            .use(jFactory.TraitInterval);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory\n// ---------------------------------------------------------------------------------------------------------------------\n\n/** @return {JFactoryComponent} */\nexport const jFactory = (name, properties) => Object.assign(new JFactoryComponent(name), properties);","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { jFactoryLoader } from \"./jFactory-loader\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryObject\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Alpha\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryObject {\n\n    static createDescriptors(descriptorPrototype = JFactoryObject.DESCRIPTORS_PROTOTYPE) {\n        let create = JFactoryObject.create(descriptorPrototype, true, true);\n        let o = Object.create(null);\n\n        o.NONE = create();\n\n        o.WRITABLE     = create({ writable: true });\n        o.ENUMERABLE   = create({ enumerable: true });\n        o.CONFIGURABLE = create({ configurable: true });\n\n        o.CONFIGURABLE_WRITABLE   =\n        o.WRITABLE_CONFIGURABLE   = create({ writable: true, configurable: true });\n\n        o.CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE = create({ enumerable: true, configurable: true });\n\n        o.ENUMERABLE_WRITABLE     =\n        o.WRITABLE_ENUMERABLE     = create({ writable: true, enumerable: true });\n\n        o.WRITABLE_ENUMERABLE_CONFIGURABLE =\n        o.WRITABLE_CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE_WRITABLE =\n        o.ENUMERABLE_WRITABLE_CONFIGURABLE =\n        o.CONFIGURABLE_WRITABLE_ENUMERABLE =\n        o.CONFIGURABLE_ENUMERABLE_WRITABLE = create({ writable: true, enumerable: true, configurable: true });\n\n        // Shortcuts\n        o.READONLY = create({ writable: false, enumerable: false, configurable: false });\n\n        return o\n    }\n\n    /**\n     * @example\n     * assign(obj, 'myProperty', 123, {writable:false})\n     * assign(obj, {a:1, b:2}', {writable:false})\n     *\n     * deprecated\n     * assign(obj, 'myProperty', {value:\"ok\", writable:false}) => not strict\n     * assign(obj, 'myProperty', 123) => use native instead\n     * assign(obj, {a:1, b:2}) => use native instead\n     */\n    static assign(target, property, value, descriptor) {\n        let descriptors = {};\n\n        switch (typeof property) {\n\n            case \"string\":\n            case \"symbol\":\n\n                // ------------------------------------------------\n                // assign(obj, 'myProperty', 123, {writable:false})\n                // ------------------------------------------------\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                descriptor = Object.create(descriptor); // avoid descriptor corruption\n                descriptor.value = value;\n\n                Object.defineProperty(target, property, descriptor);\n\n                break;\n\n            case \"object\":\n\n                // ------------------------------------------------\n                // assign(obj, {a:1, b:2}', {writable:false})\n                // ------------------------------------------------\n\n                [value, descriptor] = [property, value];\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                for (let name of Object.getOwnPropertyNames(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n                for (let name of Object.getOwnPropertySymbols(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n\n                Object.defineProperties(target, descriptors);\n\n                break;\n\n            default:\n                throw new Error(\"invalid property argument\")\n        }\n\n        return target\n    }\n\n    static create(prototype, flat = false, disinherit = false) {\n        return function create(properties) {\n            if (flat) {\n                return Object.assign(disinherit ? Object.create(null) : {}, prototype, properties)\n            } else {\n                return Object.assign(Object.create(\n                    disinherit ? Object.assign(Object.create(null), prototype) : prototype\n                ), properties)\n            }\n        }\n    }\n\n    static disinherit(object) {\n        return Object.assign(Object.create(null), object);\n    }\n}\n\nJFactoryObject.DESCRIPTORS_PROTOTYPE = { writable: false, enumerable: false, configurable: false };\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryObject\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactoryLoader.onInit(function() {\n    JFactoryObject.descriptors = JFactoryObject.createDescriptors()\n});","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { helper_camelCase } from \"./jFactory-helpers\";\nimport { JFactoryObject } from \"./JFactoryObject\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryAbout\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\nexport class JFactoryAbout {\n    constructor(owner, about = {}) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout(owner)\", owner).type(Object);\n            JFactoryExpect(\"JFactoryAbout(about)\", about)\n                .typePlainObject()\n                .reservedProperty(\"uid\")\n                .reservedProperty(\"fingerprint\");\n            if (\"name\" in about) {\n                JFactoryExpect(\"JFactoryAbout(about.name)\", about.name)\n                    .typeString()\n                    .notEmptyString()\n            }\n        }\n\n        let name;\n        let fingerprint;\n        let uid = moduleGenId();\n\n        if (about.name) {\n            name = about.name;\n            delete about.name;\n            fingerprint = \"jFactory\" + \"_\" + helper_camelCase(name.toLowerCase()) + \"_\" + uid\n        } else {\n            delete about.name;\n            name = `[${owner.constructor.name}#${uid}]`;\n            fingerprint = \"jFactory\" + \"_\" + owner.constructor.name + \"_\" + uid;\n        }\n\n        JFactoryObject.assign(this, /** @lends JFactoryAbout# */ {\n            uid,\n            name,\n            fingerprint\n        }, JFactoryObject.descriptors.ENUMERABLE);\n\n        Object.assign(this, about);\n\n        // ---\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout.name\", this.name)\n                .matchReg(/^[\\w[\\]#]+$/);\n            JFactoryExpect(\"JFactoryAbout.fingerprint\", this.fingerprint)\n                .matchReg(/^[\\w]+$/);\n        }\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { jFactoryError } from \"./JFactoryError\";\nimport { jFactoryTrace } from \"./JFactoryTrace\";\nimport { jQuery, helper_isNative } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromise\n// ---------------------------------------------------------------------------------------------------------------------\n// Provides awaitable, expirable, debuggable promise chains\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Experimental Draft\n// ---------------------------------------------------------------------------------------------------------------------\n\n// #limitation# async functions always use the native Promise constructor even if native Promise class is overridden\n// #limitation# async functions always returns a native Promise even if returning an extended Promise\n// #limitation# async functions always returns a pending Promise even if returning a resolved Promise\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromise\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromise extends Promise {\n\n    constructor({ name, config, traceSource }, executor) {\n\n        if (arguments.length === 1) {\n            [name, config, executor] = [null, null, arguments[0]]\n        }\n\n        const chainId = moduleGenId();\n        config = { ...JFactoryPromise.DEFAULT_CONFIG, ...config };\n        name = name || \"unnamed\";\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"name\", name)\n                .type(String, Number)\n                .matchReg(/^[^. ]+$/);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"executor\", executor).typeFunction();\n        }\n\n        let resolve;\n        let reject;\n\n        super((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n\n        const chain = new JFactoryPromiseChain(this, chainId, name, config);\n\n        Object.defineProperties(this, {\n            $chain: {\n                enumerable: true,\n                writable: true,\n                value: chain\n            },\n            $type: {\n                writable: true,\n                value: \"promise\"\n            },\n            $value: {\n                writable: true,\n                value: undefined\n            },\n            $isSettled: {\n                writable: true,\n                value: false\n            },\n            $isRejected: {\n                writable: true,\n                value: null\n            },\n            $isFulfilled: {\n                writable: true,\n                value: null\n            },\n            $isExpired: {\n                writable: true,\n                value: false\n            }\n        });\n\n        if (JFACTORY_DEV) {\n            Object.defineProperties(this, {\n                $dev_name: {\n                    configurable: true,\n                    value: name + \"[\" + chainId + \":0]\"\n                },\n                $dev_path: {\n                    writable: true,\n                    value: new JFactoryPromisePath(this)\n                },\n                $dev_position: {\n                    writable: true,\n                    value: 0\n                }\n            });\n            if (!helper_isNative(executor)) {\n                Object.defineProperties(this, {\n                    $dev_source: {\n                        value: executor\n                    }\n                });\n            }\n            jFactoryTrace.tracer.attachTrace(this, traceSource);\n        }\n\n        const tryAutoComplete = () => {\n            if (!this.$chain.isPending) {\n                try {\n                    this.$chainComplete(\"config.chainAutoComplete = true\");\n                } catch (e) {\n                    // Case of error in \"complete\" callback\n                    // We catch the exception because the promise is already fulfilled\n                    // Furthermore this issue must be handled by the chain, not the current promise\n                    console.error(e) // print the error otherwise nothing happens\n                }\n            }\n        };\n\n        const onResolve = value => {\n            // console.log('onResolve',this.$dev_name);\n            if (!this.$isSettled) {\n                // 2.3.1. If promise and x refer to the same object, reject promise with a TypeError as the reason.\n                if (value === this) {\n                    onReject(new TypeError(\"Chaining cycle detected for promise \" + this.$dev_name));\n                    return;\n                }\n\n                let then;\n                if (value !== null && (typeof value == \"object\" || typeof x == \"function\")) {\n                    // 2.3.3.2. If retrieving the property x.then results in a thrown exception e,\n                    // reject promise with e as the reason.\n                    try {\n                        then = value.then;\n                    } catch (e) {\n                        onReject(e);\n                        return;\n                    }\n                }\n\n                if (typeof then == \"function\") {\n                    let called = false;\n                    let resolvePromise = function(y) {\n                        // 2.3.3.3.1. If/when resolvePromise is called with a value y, run [[Resolve]](promise, y).\n                        if (!called) {\n                            called = true;\n                            onResolve(y);\n                        }\n                    };\n                    let rejectPromise = function(r) {\n                        // 2.3.3.3.2. If/when rejectPromise is called with a reason r, reject promise with r.\n                        if (!called) {\n                            called = true;\n                            onReject(r);\n                        }\n                    };\n\n                    try {\n                        then.call(value, resolvePromise, rejectPromise);\n                    } catch (e) { // 2.3.3.3.4. If calling then throws an exception e,\n                        // 2.3.3.3.4.1. If resolvePromise or rejectPromise have been called, ignore it.\n                        if (!called) {\n                            // 2.3.3.3.4.2. Otherwise, reject promise with e as the reason.\n                            onReject(e);\n                        }\n                    }\n                }\n                else {\n                    this.$isRejected = false;\n                    this.$isFulfilled = true;\n                    if (this.$isExpired) {\n                        value = this.$chain.errorExpired;\n                    }\n                    resolve(value);\n                    onSettle(value)\n                }\n            }\n        };\n\n        const onReject = reason => {\n            // console.log('onReject',this.$dev_name);\n            if (!this.$isSettled) {\n                this.$isRejected = true;\n                this.$isFulfilled = false;\n                reject(reason);\n                onSettle(reason)\n            }\n        };\n\n        const onSettle = value => {\n            this.$value = value;\n            this.$isSettled = true;\n            this.$chain.chainMap.set(this, true);\n\n            if (this.$chain.chainConfig.chainAutoComplete) {\n                if (this.$chain.chainMap.size === 1 && !this.$isExpired) {\n                    // ensures that tryAutoComplete() will be called asynchronously (then() callback is asynchronous)\n                    // case of promise.resolve(primitive), prevents following then() from being immediately locked\n                    this.then(tryAutoComplete)\n                } else {\n                    tryAutoComplete()\n                }\n            }\n        };\n\n        let _chainAutoComplete = config.chainAutoComplete;\n        Object.defineProperty(config, \"chainAutoComplete\", {\n            get: () => _chainAutoComplete,\n            set: value => {\n                if (_chainAutoComplete !== value) {\n                    _chainAutoComplete = value;\n                    if (value) {\n                        tryAutoComplete()\n                    }\n                }\n            }\n        });\n\n        chain.chainMap.set(this, false);\n\n        Object.defineProperties(this, {\n            __resolve__: {\n                value: onResolve\n            },\n            __reject__: {\n                value: onReject\n            }\n        });\n\n        try {\n            executor(onResolve, onReject);\n        } catch (e) {\n            onReject(e)\n        }\n    }\n\n    then(onFulfilled, onRejected, forceType) {\n        let wrappedFulfilled;\n        let wrappedRejected;\n        let newPromise;\n        let isNative = helper_isNative(onFulfilled) && !onFulfilled.name.startsWith(\"bound \");\n\n        if (onFulfilled && typeof onFulfilled === \"function\") {\n            wrappedFulfilled = function(r) {\n                // SPEC: \"await\" throws the errorExpired if expired\n                // Allows async function to try catch the awaited promise\n                // and allows stack call exit if not caught\n                if (type === \"await\" && newPromise.$isExpired === true && newPromise.$chain.errorExpired === r) {\n                    return onRejected(r)\n                }\n                if (!newPromise.$isSettled) {\n                    return onFulfilled(r)\n                }\n            }\n        }\n        if (onRejected && typeof onRejected === \"function\") {\n            wrappedRejected = function(r) {\n                if (!newPromise.$isSettled) {\n                    return onRejected(r)\n                }\n            }\n        }\n\n        let type = forceType || (isNative ? \"await\" : onFulfilled === undefined ? \"catch\" : \"then\");\n        newPromise = Object.assign(super.then(wrappedFulfilled, wrappedRejected), this);\n        moduleGenId.uid--; // reverse because not a new chain\n        newPromise.$type = type;\n\n        if (JFACTORY_DEV) {\n            newPromise.$dev_position = this.$chain.chainMap.size;\n            let fNames = \"\";\n            if (onFulfilled && onFulfilled.name) {\n                fNames += onFulfilled.name\n            }\n            if (onRejected && onRejected.name) {\n                fNames += \",\" + onRejected.name\n            }\n            Object.defineProperties(newPromise, {\n                $dev_name: {\n                    value:\n                        this.$chain.chainName\n                        + \"[\"\n                        + this.$chain.chainId\n                        + \":\"\n                        + this.$dev_position\n                        + \"]\"\n                        + \".\"\n                        + newPromise.$type\n                        + (fNames ? \"(\" + fNames + \")\" : \"\")\n                        + \"[\"\n                        + newPromise.$chain.chainId\n                        + \":\"\n                        + newPromise.$dev_position\n                        + \"]\"\n                },\n                $dev_path: { value: new JFactoryPromisePath(this.$dev_path, newPromise) },\n                $dev_onFulfilled: { value: onFulfilled },\n                $dev_onRejected: { value: onRejected }\n            });\n        }\n\n        newPromise.$chain.chainMap.set(newPromise, false);\n\n        if (this.$isExpired) {\n            // case: p0.then(); chainAbort(); p1.then()\n            // => the new promise must be expired\n            JFactoryPromise.forceExpire(newPromise, this.$chain.errorExpired)\n        }\n\n        return newPromise\n    }\n\n    $catchExpired(onExpired) {\n        return this.then(r => {\n            if (this.$chain.chainRoot.$isExpired) {\n                return onExpired(r)\n            } else {\n                return r\n            }\n        }, undefined, \"$catchExpired\")\n    }\n\n    static resolve(optionalArgs, value) {\n        // resolve()\n        // resolve(optionalArgs, value)\n        // resolve(value)\n\n        if (arguments.length === 1) {\n            [optionalArgs, value] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        if (value instanceof this && arguments.length === 1) {\n            // Returns the promise as is (native spec)\n            // but only if no optionalArgs\n            return value\n        } else {\n            return new this(optionalArgs, function(resolve) {\n                resolve(value)\n            });\n        }\n    }\n\n    static reject(optionalArgs, reason) {\n        // reject()\n        // reject(optionalArgs, reason)\n        // reject(reason)\n\n        if (arguments.length === 1) {\n            [optionalArgs, reason] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        return new this(optionalArgs, function(resolve, reject) {\n            reject(reason)\n        });\n    }\n\n    $toPromise() {\n        return Promise.resolve(this)\n    }\n\n    // Completes an expires the whole chain before its normal end\n    $chainAbort(reason = \"$chainAbort()\") {\n        this.$chain.complete(reason);\n        return this\n    }\n\n    // Manually completes an expires the whole chain\n    // Only required if awaiting \"myPromise.$chain\"\n    // when the autocomplete watcher is not used\n    $chainComplete(reason = \"$chainComplete()\") {\n        this.$chain.complete(reason);\n        return this\n    }\n\n    $chainAutoComplete() {\n        this.$chain.chainConfig.chainAutoComplete = true;\n        return this\n    }\n\n    static forceExpire(promise, reason) {\n        promise.$isExpired = true;\n        if (!promise.$isSettled) {\n            if (promise.$type !== \"await\" && promise.$type !== \"$catchExpired\") {\n                promise.__resolve__(reason)\n            }\n        }\n    }\n}\n\nJFactoryPromise.DEFAULT_CONFIG = {\n    chainAutoComplete: false\n};\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromiseChain\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromiseChain {\n\n    constructor(chainRoot, chainId, chainName, chainConfig) {\n        Object.defineProperties(this, {\n            chainConfig: { value: chainConfig },\n            chainRoot: { value: chainRoot },\n            chainId: { value: chainId },\n            chainName: { value: chainName },\n            chainMap: { value: new Map },\n            isCompleted: { value: false, configurable: true },\n            data: { value: {} },\n            // eslint-disable-next-line new-cap\n            __deferred__: { value: jQuery.Deferred() }\n        })\n    }\n\n    get isPending() {\n        return Array.from(this.chainMap.values()).includes(false)\n    }\n\n    then(onResolve) { // => \"await chain\"\n        this.__deferred__.done(onResolve);\n        return this\n    }\n\n    complete(reason = \"chain.complete()\") {\n        let chainRoot = this.chainRoot;\n        if (!chainRoot.$isExpired) {\n            let errorExpired = chainRoot.$chain.errorExpired = new jFactoryError.PROMISE_EXPIRED({\n                target: chainRoot,\n                reason\n            });\n\n            let map = this.chainMap;\n            for (let item of map.keys()) {\n                JFactoryPromise.forceExpire(item, errorExpired);\n            }\n\n            Object.defineProperty(this, \"isCompleted\", { value: true });\n            this.__deferred__.resolve();\n        }\n        return this\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromisePath\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromisePath extends Array {\n\n    constructor() {\n        super();\n        for (let i of arguments) {\n            if (Array.isArray(i)) {\n                this.push(...i)\n            } else {\n                this.push(i)\n            }\n        }\n    }\n\n    get printable() {\n        return this.map((v, i) => i === 0 ? v.$dev_name : v.$dev_name.split(\".\")[1]).join(\".\")\n    }\n\n    toString() {return this.printable}\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromiseSync\n// ---------------------------------------------------------------------------------------------------------------------\n// Promise that tries to resolve synchronously\n// allowing synchronous states and result\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromiseSync extends Promise {\n\n    constructor(executor) {\n\n        let states = {\n            $isSettled: false, // true = not pending\n            $isRejected: null, // true = not pending + rejected\n            $value: undefined\n        };\n\n        super((resolve, reject) => {\n\n            let called = false;\n\n            let onResolve = r => {\n                if (r instanceof Promise) {\n                    JFactoryPromiseSync.resolve(r)\n                        .then(onResolve, onReject)\n                } else {\n                    if (!called) {\n                        called = true;\n                        states.$isSettled = true;\n                        states.$isRejected = false;\n                        states.$value = r;\n                        resolve(r)\n                    }\n                }\n            };\n\n            let onReject = r => {\n                // don't resolve pending promise\n                // to keep native specification\n                if (!called) {\n                    called = true;\n                    states.$isSettled = true;\n                    states.$isRejected = true;\n                    states.$value = r;\n                    reject(r)\n                }\n            };\n\n            try {\n                executor(onResolve, onReject)\n            } catch (e) {\n                onReject(e)\n            }\n        });\n\n        Object.assign(this, states);\n        states = this\n    }\n\n    then(onFulfilled, onRejected) {\n\n        if (this.$isSettled) {\n            let value = this.$value;\n\n            try {\n                if (this.$isRejected) {\n                    // cancel any uncaught rejected result from this promise\n                    // before returning the new one\n                    super.then(undefined, () => null);\n\n                    if (onRejected && typeof onRejected === \"function\") {\n                        value = onRejected(value)\n                    } else {\n                        return JFactoryPromiseSync.reject(value)\n                    }\n                } else {\n                    if (onFulfilled && typeof onFulfilled === \"function\") {\n                        value = onFulfilled(value)\n                    }\n                }\n            } catch (e) {\n                return JFactoryPromiseSync.reject(e)\n            }\n\n            return JFactoryPromiseSync.resolve(value)\n\n        } else {\n            return super.then(onFulfilled, onRejected)\n        }\n    }\n\n    static resolve(value) {\n        if (value instanceof JFactoryPromiseSync) {\n            return value\n        } else {\n            if (value instanceof Promise) {\n                return new JFactoryPromiseSync(value.then.bind(value))\n            } else {\n                return new JFactoryPromiseSync(r => r(value))\n            }\n        }\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { JFactoryPromiseSync } from \"./JFactoryPromise\";\nimport { JFactoryFunctionComposer } from \"./JFactoryFunction\";\nimport { jFactoryError } from \"./JFactoryError\";\nimport { jQuery, helper_isPlainObject } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryEvents\n// ---------------------------------------------------------------------------------------------------------------------\n// https://learn.jquery.com/events/event-extensions/\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEvents {\n    // -----------------------------------------------------------------------------------------------------------------\n    // jQuery doesn't handle async trigger so jFactory provides the following :\n    //\n    // - triggerParallel(): the trigger function returns a Promise.all(pendingArray)\n    //   where pendingArray is filled by any async running handler.\n    //   Not recommended because it's the best way to produce unpredictable async side effects\n    //\n    // - triggerSeries(): handlers are run in a synchronous order, with \"await\"\n    //   This avoids unpredictable async race condition\n    //\n    //  Both returns a JFactoryPromiseSync that contains the jFactory_fulfilled flag\n    //  This flag is immediately (not async) set to true if no async handler is still pending\n    //\n    // => handlers are wrapped. OriginalHandlers and wrappedHandlers relations are stored in a WeakMap\n    // -----------------------------------------------------------------------------------------------------------------\n\n    constructor() {\n        Object.defineProperties(this, /** @lends JFactoryEvents# */ {\n            registry: { value: jQuery(Object.create(null)) },\n            handlers: { value: new WeakMap },\n            onListenerUpdate: { value: null, writable: true },\n            onObserverUpdate: { value: null, writable: true }\n        });\n    }\n\n    on({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            JFactoryExpect(\"JFactoryEvents.on({handler})\", handler).typeFunction();\n            target && JFactoryExpect(\"JFactoryEvents.on({target})\", target).type(String, jQuery, HTMLElement);\n            selector && JFactoryExpect(\"JFactoryEvents.on({selector})\", target).typeString();\n        }\n\n        let wrappedHandler = this.handlers.get(handler);\n        if (target) {\n            // don't need to wrap DOM handlers\n            if (!wrappedHandler) {\n                this.handlers.set(handler, true);\n            }\n            if (selector) {\n                jQuery(target).on(events, selector, handler);\n            } else {\n                jQuery(target).on(events, handler);\n            }\n            if (this.onListenerUpdate) {\n                this.onListenerUpdate(arguments)\n            }\n        } else {\n            if (!wrappedHandler) {\n                this.handlers.set(handler, wrappedHandler = function(e, { data, stack }) {\n                    stack.push(() => handler(e, data))\n                });\n                wrappedHandler.originalHandler = handler;\n            }\n            this.registry.on(events, wrappedHandler);\n            if (this.onObserverUpdate) {\n                this.onObserverUpdate(arguments)\n            }\n        }\n    }\n\n    off({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            if (events !== undefined) { // off() is valid\n                JFactoryEvents.validateSelector(events);\n                handler && JFactoryExpect(\"JFactoryEvents.off({handler})\", handler).typeFunction();\n                target && JFactoryExpect(\"JFactoryEvents.off({target})\", target).type(String, jQuery, HTMLElement);\n                selector && JFactoryExpect(\"JFactoryEvents.off({selector})\", target).typeString();\n            }\n        }\n\n        if (target) {\n            if (selector) {\n                jQuery(target).off(events, selector, handler)\n            } else {\n                jQuery(target).off(events, handler)\n            }\n        } else {\n            jQuery(\"*\").off(events, handler);\n\n            if (handler) {\n                handler = this.handlers.get(handler);\n                if (!handler) {\n                    throw new jFactoryError.INVALID_VALUE({\n                        target: \"handler\",\n                        reason: \"not registered\",\n                        given: handler\n                    })\n                }\n            }\n            this.registry.off(events, handler);\n        }\n        if (this.onObserverUpdate) {\n            this.onObserverUpdate(arguments)\n        }\n        if (this.onListenerUpdate) {\n            this.onListenerUpdate(arguments)\n        }\n    }\n\n    /**\n     * Run in parallel. Don't \"await\" for async handlers\n     * Obviously produces unpredictable race conditions\n     */\n    triggerParallel({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target\n                && JFactoryExpect(\"JFactoryEvents.triggerParallel({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        const stack = [];\n        const pending = [];\n        events = events.split(\" \");\n\n        if (target) {\n            for (let event of events) {\n                jQuery(target).trigger(event, { data, stack });\n            }\n        } else {\n            for (let event of events) {\n                this.registry.triggerHandler(event, { data, stack })\n            }\n        }\n\n        for (let handler of stack) {\n            let result = handler();\n            if (result instanceof Promise\n                && !result.$isSettled // don't need to await\n            ) {\n                pending.push(result)\n            }\n        }\n\n        if (pending.length) {\n            return Promise.all(pending)\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n\n    /**\n     * Run in declaration order synchronously. Will \"await\" for async handlers\n     * Prevents unpredictable race conditions\n     */\n    triggerSeries({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target && JFactoryExpect(\"JFactoryEvents.triggerSeries({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n            const stack = [];\n            events = events.split(\" \");\n\n            if (target) {\n                for (let event of events) {\n                    jQuery(target).trigger(event, { data, stack });\n                }\n            } else {\n                for (let event of events) {\n                    this.registry.triggerHandler(event, { data, stack })\n                }\n            }\n\n            for (let handler of stack) {\n                let result = handler();\n                if (result instanceof Promise\n                    && !result.$isSettled // don't need to await\n                ) {\n                    await result\n                }\n            }\n            resolve()\n        })\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventsManager extends JFactoryEvents {\n    constructor(parent) {\n        super();\n        Object.defineProperties(this, {\n            parent: { value: parent },\n            affiliateRules: { value: new JFactoryFunctionComposer().compose() }\n        });\n        this.affiliateAddRule(JFactoryEventsManager.rule_namespace)\n    }\n\n    affiliate(events = \"\", namespaces = \"\", options) {\n        let parser = new JFactoryEventSelectorParser(events);\n        for (let parsedEvent of parser.events) {\n            this.affiliateRules(parsedEvent, namespaces, options)\n        }\n        return parser.toString();\n    }\n\n    affiliateAddRule(handler) {\n        this.affiliateRules.composer.last(handler)\n    }\n\n    static rule_namespace(context, parsedEvent, namespaces) {\n        namespaces = namespaces.split(\".\");\n        for (let namespace of namespaces) {\n            namespace && parsedEvent.addNamespace(namespace);\n        }\n    }\n\n    on(events, target, selector, handler, options) {\n        // Observers:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        switch (arguments.length) {\n            case 2:\n                // events, handler\n                [handler, target] = [target/*, undefined*/];\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        target === undefined ?\n            super.on({ events, handler }) :\n            super.on({ events, target, selector, handler/*, options*/ })\n    }\n\n    off(events, target, selector, handler, options) {\n        // Both:\n        // events (can be namespaces)\n        // events, options\n        // options (can be removal)\n\n        // Observer:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        const argL = arguments.length;\n        switch (argL) {\n            case 1:\n                if (typeof arguments[0] === \"object\") {\n                    // options\n                    [options, events] = [events/*, undefined*/];\n                }\n                // else events (can namespaces)\n                break;\n            case 2:\n                if (typeof arguments[1] === \"function\") {\n                    // events, handler\n                    [handler, target] = [target/*, undefined*/];\n                } else if (helper_isPlainObject(arguments[1])) {\n                    // events, options\n                    [options, target] = [target/*, undefined*/]\n                }\n                // else events, target\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else if (typeof arguments[1] === \"function\") {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                } else {\n                    // events, target, selector\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        if (argL < 2) {\n            super.off({ events });\n        } else {\n            target ?\n                super.off({ events, target, selector, handler/*, options*/ }) :\n                super.off({ events, handler })\n        }\n    }\n\n    trigger(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerSeries({ events, target, data }) :\n            super.triggerSeries({ events, data })\n    }\n\n    triggerParallel(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerParallel({ events, target, data }) :\n            super.triggerParallel({ events, data })\n    }\n\n    // #unoptimized draft#\n    // It's not easy to keep this list up to date because:\n    // - listeners can be removed by external dom mutations\n    // - listeners can be delegated\n    // - off() method can remove listeners globally\n    getDomListeners(namespace) {\n        let result = new Map();\n        for (let elm of jQuery(\"*\")) {\n            let data = jQuery._data(elm, \"events\");\n            if (data) {// data = {click: [{}], ... }\n                for (let entries of Object.values(data)) {// entries = [{type:...}]\n                    for (let entry of entries) {// entry = {type, namespace, handler, ...}\n                        let parser = new JFactoryEventSelector(entry.namespace);\n                        let types;\n                        if (parser.hasNamespace(namespace)) {\n                            if (!(types = result.get(elm))) {\n                                result.set(elm, types = {})\n                            }\n                            let type = types[entry.type] || (types[entry.type] = []);\n                            type.push({\n                                // ...entry,\n                                selector: entry.selector || null,\n                                handler: entry.handler,\n                                namespace: entry.namespace\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return result\n    }\n\n    // #unoptimized draft#\n    getObservers() {\n        let result = new Map();\n        let events = this.registry._events;\n\n        if (!events) {\n            let registry = Object.values(this.registry)[0];\n            let expando = Object.getOwnPropertyNames(registry).find(k => k.indexOf(\"jQuery\") === 0);\n            if (registry && expando) {\n                events = this.registry._events = registry[expando].events;\n            }\n        }\n\n        if (events) {\n            for (let [key, val] of Object.entries(events)) {\n                let event = result.get(key);\n                if (!event) {\n                    event = [];\n                    result.set(key, event);\n                }\n                for (let eventTypeEntry of val) {\n                    event.push({\n                        handler: eventTypeEntry.handler.originalHandler,\n                        namespace: eventTypeEntry.namespace\n                    })\n                }\n            }\n        }\n\n        return result\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventSelectorParser {\n    constructor(selectors) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(selectors);\n        }\n        /**\n         * @type Array<JFactoryEventSelector>\n         */\n        this.events = selectors.split(\" \").map(selector => new JFactoryEventSelector(selector))\n    }\n\n    toString() {\n        let s = [];\n        for (let event of this.events) {\n            s.push(event.toString())\n        }\n        return s.join(\" \")\n    }\n}\n\nexport class JFactoryEventSelector {\n    constructor(selector) {\n        let [event, ...namespace] = selector.split(\".\");\n        this.event = event;\n        this.namespace = new Set(namespace)\n    }\n\n    /** @return {Boolean|String} */\n    hasNamespace(namespaces) {\n        if (!Array.isArray(namespaces)) {\n            namespaces = [namespaces]\n        }\n        for (let namespace of namespaces) {\n            if (JFACTORY_DEV) {\n                if (!/^[\\w:]+$/.test(namespace)) {\n                    throw new jFactoryError.INVALID_VALUE({\n                        target: \"namespace\",\n                        reason: \"must be alphanumeric, underscore and colon characters\",\n                        given: namespace\n                    })\n                }\n            }\n            if (namespace && this.namespace.has(namespace)) {\n                return namespace\n            }\n        }\n        return false\n    }\n\n    addNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new jFactoryError.INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.add(namespace)\n    }\n\n    deleteNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new jFactoryError.INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.delete(namespace)\n    }\n\n    toString() {\n        return this.namespace.size ? this.event + \".\" + Array.from(this.namespace.values()).join(\".\") : this.event;\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------------------------\n\nif (JFACTORY_DEV) {\n    JFactoryEvents.validateSelector = function(selector) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateSelector(selector)\", selector)\n                .notUndefined()\n                .validSpaces();\n        }\n\n        for (let [event, ns] of selector.split(\" \")\n            .map(v => v.split(\".\"))\n            .map(v => [v.shift(), v.join(\".\")])) {\n            event && JFactoryEvents.validateEvent(event);\n            ns && JFactoryEvents.validateNamespace(ns);\n        }\n        return true\n    };\n\n    JFactoryEvents.validateEvent = function(event) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateEvent(event)\", event)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:]+$/.test(event)) {\n            throw new jFactoryError.INVALID_VALUE({\n                target: \"JFactoryEvents.validateEvent(event)\",\n                reason: \"must be alphanumeric, underscore and colon characters\",\n                given: event\n            })\n        }\n\n        return true\n    };\n\n    JFactoryEvents.validateNamespace = function(namespace) { // ex: ns.ns2.ns3\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateNamespace(namespace)\", namespace)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:.]+$/.test(namespace)) {\n            throw new jFactoryError.INVALID_VALUE({\n                target: \"JFactoryEvents.validateNamespace(namespace)\",\n                reason: \"must be alphanumeric, underscore, dot and colon characters\",\n                given: namespace\n            })\n        }\n\n        return true\n    };\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFactoryPromise } from \"./JFactoryPromise\";\nimport { jFactoryError } from \"./JFactoryError\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFetch\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFetch extends JFactoryPromise {\n\n    constructor(optionalArgs, url, fetchOptions = {}) {\n        if (typeof optionalArgs === \"function\") {\n            super(optionalArgs);\n        } else {\n            if (typeof optionalArgs === \"string\") {\n                [optionalArgs, url, fetchOptions] = [{}, arguments[0], arguments[1]]\n            }\n\n            let fetchRequest = new Request(url, fetchOptions);\n\n            super(optionalArgs, (resolve, reject) => {\n                let promise = fetch(fetchRequest)\n                    .then(response => {\n                        this.$chain.fetchResponse = response;\n                        if (!response.ok) {\n                            throw Error(response.status + \":\" + response.statusText);\n                        }\n                        return response\n                    });\n\n                if (fetchOptions.$typeText) {\n                    promise = promise\n                        .then(response => response.text())\n                        .then(r => this.$chain.responseText = r);\n                }\n                else if (fetchOptions.$typeJSON) {\n                    promise = promise\n                        .then(response => response.json())\n                        .then(r => this.$chain.responseJSON = r);\n                }\n\n                promise = promise.catch(reason => {\n                    throw new jFactoryError.REQUEST_ERROR({\n                        reason: reason.message || reason,\n                        target: this.$chain.fetchResponse && this.$chain.fetchResponse.url || url,\n                        owner: this,\n                        fetchOptions,\n                        fetchRequest,\n                        fetchResponse: this.$chain.fetchResponse || null\n                    }, optionalArgs.traceSource)\n                });\n\n                promise.then(resolve, reject)\n            });\n\n            this.$chain.fetchOptions = fetchOptions;\n            this.$chain.fetchRequest = fetchRequest;\n\n            let abortCtrl = fetchOptions.abortController || new AbortController();\n            fetchOptions.signal = abortCtrl.signal;\n            this.$chain.fetchAbortController = abortCtrl;\n        }\n    }\n\n    $chainAbort(reason = \"request aborted\") {\n        super.$chainAbort(reason);\n        this.$chain.fetchAbortController.abort();\n        return this\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, JFACTORY_CLI } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { jFactoryFunctionConditional } from \"./JFactoryFunction\";\nimport { helper_defaultsDeep, NOOP } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryLogger\n// ---------------------------------------------------------------------------------------------------------------------\n// A contextual logger that prepends a label and allows runtime filtering while preserving the caller line number\n// ---------------------------------------------------------------------------------------------------------------------\n// logger.createSubLogger(label) create a sub-logger of logger; \"logger\" can be a sub-logger.\n// logger.disable() disable console for itself and sub-loggers\n// logger.disallow('log') disallow logger.log() only\n// logger.disallow('log', subLogger.label) disallow sub-logger.log() only. This is callable from any logger/sub-logger\n// ---------------------------------------------------------------------------------------------------------------------\n// Status : Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst SYMBOL_ENABLED = Symbol();\n\nexport class JFactoryLogger {\n\n    constructor(options) {\n        if (JFACTORY_DEV && options) {\n            JFactoryExpect(\"JFactoryLogger(options)\", options)\n                .properties(Object.getOwnPropertyNames(JFactoryLogger.DEFAULT_CONFIG))\n        }\n        helper_defaultsDeep(this, options, JFactoryLogger.DEFAULT_CONFIG);\n        this.condition = jFactoryFunctionConditional(JFactoryLogger.DEFAULT_CONDITION);\n        this.installAccessor(\"log\");\n        this.installAccessor(\"warn\");\n        this.installAccessor(\"error\")\n    }\n\n    get enabled() {\n        return this[SYMBOL_ENABLED] && (this.parentLogger ? this.parentLogger.enabled : true)\n    }\n\n    set enabled(v) {\n        v ? this.enable() : this.disable()\n    }\n\n    enable() {\n        if (this[SYMBOL_ENABLED] !== true) {\n            this[SYMBOL_ENABLED] = true;\n        }\n    }\n\n    disable() {\n        if (this[SYMBOL_ENABLED] !== false) {\n            this[SYMBOL_ENABLED] = false;\n        }\n    }\n\n    disallow(nativeName, label = this.label) {\n        if (!this.filters[label]) {this.filters[label] = {}}\n        this.filters[label][nativeName] = true\n    }\n\n    allow(nativeName, label = this.label) {\n        if (this.filters[label]) {\n            delete this.filters[label][nativeName]\n        }\n    }\n\n    installAccessor(nativeName, targetName = nativeName, target = this) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryLogger(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        }\n        Object.defineProperties(target, {\n            [targetName]: {\n                get: this.accessor.bind(this, nativeName/*, target*/),\n                configurable: true\n            }\n        })\n    }\n\n    accessor(nativeName/*, target*/) {\n        if (!this[SYMBOL_ENABLED]) {\n            return NOOP;\n        }\n        return this.condition(nativeName) && this.formatter[nativeName](this) || NOOP\n    }\n\n    createSubLogger(label) {\n        /** @type JFactoryLogger */\n        let sub = new JFactoryLogger({\n            enabled: this.enabled,\n            label: this.label + \".\" + label,\n            styles_css: this.styles_css,\n            styles_cli: this.styles_cli,\n            console: this.console,\n            formatter: this.formatter\n        });\n        sub.parentLogger = this;\n        sub.condition.addCondition(() => this.enabled);\n        sub.filters = this.filters; // shared to allow/disallow from anywhere\n        return sub\n    }\n}\n\n// #limitation# To preserve the line number, we can only use native functions, like bind\n// #limitation# Because we use bind(), only the style of the first element can be efficiently defined\n\nJFactoryLogger.FORMATTER_NATIVE = {\n    log: logger => logger.console.log.bind(logger.console, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_CLI = {\n    log: logger => logger.console.log.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.styles_cli.label, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_BROWSER = {\n    log: logger => logger.console.log.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    warn: logger => logger.console.warn.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    error: logger => logger.console.error.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label)\n};\n\n/** @return {boolean} */\nJFactoryLogger.DEFAULT_CONDITION = function(nativeName) {\n    if (JFACTORY_DEV) {\n        JFactoryExpect(\"JFactoryLogger.condition(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        JFactoryExpect(\"JFactoryLogger.enabled\", this.enabled).equal(true);\n    }\n    return !(this.filters[this.label] && this.filters[this.label][nativeName])\n};\n\nJFactoryLogger.DEFAULT_CONFIG = /** @lends JFactoryLogger# */ {\n    label: \"\",\n    enabled: true,\n    parentLogger: null,\n    formatter: JFACTORY_CLI ?\n        JFactoryLogger.FORMATTER_CLI :\n        JFactoryLogger.FORMATTER_BROWSER,\n    console,\n    filters: {\n    },\n    styles_cli: {\n        label: \"\\x1b[1;30m%s\\x1b[0m\"\n    },\n    styles_css: {\n        label: \"color: gray\"\n    }\n};","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTime\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTime extends Date {\n    toString() {\n        return this.toLocaleTimeString() + \", \" + this.getUTCMilliseconds() + \"ms (\" + this.valueOf() + \")\"\n    }\n    $toDurationString() {\n        let hours = this.getUTCHours();\n        let minutes = this.getUTCMinutes();\n        let seconds = this.getUTCSeconds();\n        let milliseconds = this.getUTCMilliseconds();\n\n        let a = [];\n        if (hours) {\n            a.push(hours + \"h\")\n        }\n        if (minutes) {\n            a.push(minutes + \"min\")\n        }\n        if (seconds) {\n            a.push(seconds + \"s\")\n        }\n        a.push(milliseconds + \"ms\");\n        if (a.length === 1) {\n            return a[0];\n        } else {\n            return a.join(\",\") + \" (\" + this.valueOf() + \")\";\n        }\n    }\n}\n\nexport class JFactoryTimeTrace extends Date {\n    constructor() {\n        super();\n        this.elapsed = null;\n        Object.defineProperties(this, {\n            t1: { value: null, writable: true },\n            t0: { value: new JFactoryTime() }\n        })\n    }\n    end() {\n        this.t1 = new JFactoryTime();\n        this.elapsed = new JFactoryTime(this.t1 - this.t0).$toDurationString()\n    }\n    toString() {\n        return this.elapsed\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// TraitCore\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { JFACTORY_DEV, jFactoryConfig } from \"./jFactory-env\";\nimport { jFactoryError, JFactoryError } from \"./JFactoryError\";\nimport { jFactory } from \"./jFactory\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { JFactoryAbout } from \"./JFactoryAbout\";\nimport { JFactoryLogger } from \"./JFactoryLogger\";\nimport { JFactoryPromise, JFactoryPromiseSync } from \"./JFactoryPromise\";\nimport { JFactoryEventsManager } from \"./JFactoryEvents\";\nimport { JFactoryObject } from \"./JFactoryObject\";\nimport { JFactoryTimeTrace } from \"./JFactoryTime\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Object\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitCore {\n    trait_constructor() {\n        const owner = this;\n\n        class SubMap extends Map {\n            $registerSync(key, value) {\n                let sub = Object.defineProperties({}, {\n                    $value: { value },\n                    $phaseRemove: { value: TraitService.getContextualRemovePhase(owner) }\n                });\n                this.set(key, sub);\n                return sub\n            }\n            $registerAsync(key, taskName, promise) {\n                let task = owner.$task(taskName, promise.$chain);\n\n                // End of promise chain must complete the task\n                // task.$chainAutoComplete()\n                promise.$chain.then(() => { // synchronous then\n                    task.$chainComplete(\"task completed\")\n                });\n\n                // Aborted task must abort the promise if still running\n                task.$chain.then(() => {// synchronous then\n                    if (!promise.$chain.isCompleted) {\n                        promise.$chainAbort(\"aborted by task\")\n                    }\n                });\n\n                Object.defineProperty(promise, \"$phaseRemove\", { value: task.$phaseRemove });\n                this.set(key, promise);\n                return task\n            }\n        }\n\n        const proto = Object.assign(Object.create(null), {\n            [TraitCore.SYMBOL_PRIVATE]: Object.create(null),\n            assign: function(property, value, descriptor) {JFactoryObject.assign(this, property, value, descriptor)},\n            createSubMap: () => new SubMap()\n        });\n\n        Object.defineProperty(this, \"$\", { value: Object.create(proto) });\n\n        // pre-define most important properties\n        // to order them first in devtool (reduced form only)\n        this.$.assign({\n            tasks: null,\n            requests: null\n        }, JFactoryObject.descriptors.ENUMERABLE_WRITABLE);\n    }\n}\n\nTraitCore.SYMBOL_PRIVATE = Symbol(\"_\");\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait About\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitAbout {\n\n    trait_constructor(about) {\n        JFactoryObject.assign(this.$, \"about\",\n            new JFactoryAbout(this, about), JFactoryObject.descriptors.READONLY)\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Log\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitLog {\n\n    trait_constructor() {\n        let config = Object.assign({\n            label: this.$.about.name\n        }, jFactoryConfig.TraitLog || {\n            enabled: false\n        });\n\n        let logger = new JFactoryLogger(config);\n\n        Object.defineProperty(this.$, \"logger\", { value: logger });\n\n        logger.installAccessor(\"log\",   \"$log\",     this);\n        logger.installAccessor(\"warn\",  \"$logWarn\", this);\n        logger.installAccessor(\"error\", \"$logErr\",  this);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Tasks\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitTask {\n\n    trait_constructor() {\n        // const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        // kernel.on(\"disable\", () => {\n        //     if (this.$.tasks.size) {debugger}\n        //     // this.$taskRemoveAll(TraitService.PHASE.DISABLE)\n        // });\n        // kernel.on(\"uninstall\", () => {\n        //     if (this.$.tasks.size) {debugger}\n        //     // this.$taskRemoveAll(TraitService.PHASE.UNINSTALL)\n        // });\n        this.$.assign(\"tasks\", new Map, JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $task(id, executorOrValue) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$task(id)\", id).typeString();\n            JFactoryExpect(\"$task(executorOrValue)\", executorOrValue).notUndefined();\n            if (this.$.tasks.has(id)) {\n                throw new jFactoryError.KEY_DUPLICATED({ target: \"$task(id)\", given: id })\n            }\n        }\n\n        let task;\n\n        if (typeof executorOrValue === \"function\") {\n            task  = new JFactoryPromise({ name: id, owner: this }, executorOrValue)\n        } else {\n            task = JFactoryPromise.resolve({ name: id, owner: this }, executorOrValue);\n        }\n\n        task.$phaseRemove = TraitService.getContextualRemovePhase(this);\n\n        let metrics;\n        if (JFACTORY_DEV) {\n            metrics = new JFactoryTimeTrace();\n            task.$taskMetrics = { $dev_timing: metrics };\n        }\n\n        task.$chain.then(() => {\n            if (JFACTORY_DEV) {\n                metrics.end();\n            }\n            if (this.$.tasks.get(id)) {\n                this.$taskRemove(id);\n            }\n        });\n\n        this.$.tasks.set(id, task);\n        return task\n    }\n\n    $taskRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$taskRemove(reason)\", reason).typeString();\n            if (!this.$.tasks.has(id)) {\n                throw new jFactoryError.KEY_MISSING({\n                    target: \"$taskRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger\n            if (this.$.tasks.get(id)._called) {debugger}\n            this.$.tasks.get(id)._called = true\n        }\n\n        let entry = this.$.tasks.get(id);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.tasks.delete(id);\n        entry.$chainAbort(reason || \"$taskRemove()\");\n    }\n\n    $taskRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemoveAll(removePhase)\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let tasks = this.$.tasks;\n        if (tasks.size) {\n            for (const [key, task] of tasks) {\n                if (task.$phaseRemove === removePhase) {\n                    this.$taskRemove(key, \"$taskRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n\n    $taskPromiseAll(autoComplete = false) {\n        let pending = [];\n        if (this.$.tasks.size) {\n            for (let task of this.$.tasks.values()) {\n                if (autoComplete) {\n                    // resolves the chain as soon as no more pending promise in the chain\n                    task.$chain.chainConfig.chainAutoComplete = true;\n                }\n                // still pending ?\n                if (task.$chain.isPending) {\n                    pending.push(task.$chain)\n                }\n            }\n        }\n        if (pending.length) {\n            return Promise.all(pending);\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Events\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitEvents {\n\n    trait_constructor() {\n        assignPrivate(this, \"events\", {\n            custom: new JFactoryEventsManager(this),\n            kernel: new JFactoryEventsManager(this)\n        }, JFactoryObject.descriptors.NONE);\n\n        let eventManager = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n\n        // if (JFACTORY_DEV) { // very slow; requires optimization\n        //     // registry are auto updated in dev mode (unoptimized implementation)\n        //\n        //     let listenerUpdate = () => {\n        //         this.$.listeners = eventManager.getDomListeners(this.$.about.fingerprint);\n        //     };\n        //     let observerUpdate = () => {\n        //         this.$.observers = eventManager.getObservers();\n        //     };\n        //\n        //     eventManager.onListenerUpdate = listenerUpdate;\n        //     eventManager.onObserverUpdate = observerUpdate;\n        //\n        //     let observer = new MutationObserver(listenerUpdate);\n        //     observer.observe(document.documentElement, {childList: true, subtree: true});\n        //\n        //     listenerUpdate();\n        //     observerUpdate();\n        // } else\n        {\n            Object.defineProperties(this.$, {\n                listeners: {\n                    get: eventManager.getDomListeners.bind(eventManager, this.$.about.fingerprint),\n                    enumerable: true\n                },\n                observers: {\n                    get: eventManager.getObservers.bind(eventManager),\n                    enumerable: true\n                }\n            })\n        }\n    }\n\n    $on(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.on(...arguments)\n    }\n\n    $off(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.off(...arguments)\n    }\n\n    $trigger(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.trigger(...arguments)\n    }\n\n    $triggerParallel(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)\n    }\n\n    $notify(events, data) {\n        return this.$trigger(events, data)\n            .then(() => this.$[TraitCore.SYMBOL_PRIVATE].events.kernel.trigger(events, data))\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait States\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitState {\n\n    trait_constructor() {\n        const states = Object.create(null);\n        const stateRoutes = Object.create(null);\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        assignPrivate(this, { states, stateRoutes }, JFactoryObject.descriptors.READONLY);\n\n        JFactoryObject.assign(this.$, \"states\", new Proxy(states, {\n            set: (target, key, val) => this.$state(key, val),\n            get: (target, key) => states[key]\n        }), JFactoryObject.descriptors.READONLY);\n\n        kernel.on(\"beforeStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].before\n                && (h = stateRoutes[data.key].before(data.val))) {\n                return this.$notify(h);\n            }\n        });\n\n        kernel.on(\"afterStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].after\n                && (h = stateRoutes[data.key].after(data.val))) {\n                return this.$notify(h);\n            }\n        });\n    }\n\n    $state(key, val, notify = true) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$state(key)\", key).typeString();\n            JFactoryExpect(\"$state(notify)\", notify).typeBoolean();\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n\n            let states = this.$[TraitCore.SYMBOL_PRIVATE].states;\n            let previousVal = states[key];\n            let pending;\n\n            if (!(key in states) || previousVal !== val) {\n\n                pending = notify && this.$notify(\"beforeStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"beforeStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n\n                if (pending && !pending.$isSettled) {\n                    states[key] = pending;\n                    await pending;\n                }\n\n                if (val === undefined) {\n                    delete states[key]\n                } else {\n                    states[key] = val;\n                }\n\n                pending = notify && this.$notify(\"afterStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"afterStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n            }\n\n            if (pending) {\n                pending.then(resolve);\n            } else {\n                resolve()\n            }\n        });\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Service\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitService {\n\n    trait_constructor() {\n        /**\n         * @name this.$.service\n         * @type {object}\n         */\n        JFactoryObject.assign(this.$, \"service\", Object.create(null), JFactoryObject.descriptors.READONLY);\n        this.$.service.phase = TraitService.PHASE.NONE;\n        this.$.service.phaseQueue = JFactoryPromiseSync.resolve();\n\n        // Set initial states but don't trigger events\n        this.$state(\"installed\", false, false);\n        this.$state(\"enabled\", false, false);\n\n        // Define the events to notify before/after a state change\n        // stateName : {before : eventName, after : eventName}\n\n        // SPEC\n        // stat is changed before calling handlers even if pending\n\n        assignPrivateMember(this, \"stateRoutes\", {\n            installed: { after: val => val ? \"install\" : \"uninstall\" },\n            enabled: { after: val => val ? \"enable\"  : \"disable\" }\n        }, JFactoryObject.descriptors.NONE);\n\n        let custom = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n        let kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        // Attach a remove phase namespaces on events\n        custom.affiliateAddRule((context, parsedEvent, namespaces, options) =>\n            TraitService.setEventNamespaceRemovePhase(this, parsedEvent, options)\n        );\n\n        // Attach module event handlers\n\n        /** @name JFactoryCoreObject#onInstall */\n        /** @name JFactoryCoreObject#onEnable */\n        /** @name JFactoryCoreObject#onDisable */\n        /** @name JFactoryCoreObject#onUninstall */\n\n        let resolvePromises = handler => {\n            if (this.$.tasks.size) {\n                this.$taskRemoveAll(this.$.service.phase)\n            }\n            let promise = JFactoryPromiseSync.resolve(); // this.$taskPromiseAll(true);\n            if (handler) {\n                promise = promise\n                    .then(() => handler.call(this))\n                    .then(() => this.$taskPromiseAll(true))\n            }\n            return promise\n                .catch(e => {\n                    if (!(this.$.service.isPhaseKilling && e instanceof jFactoryError.PROMISE_EXPIRED)) {\n                        this.$logErr(\"unhandled promise rejection in \" + this.$.service.phase + \";\",\n                            ...e instanceof JFactoryError ? e : [e])\n                    }\n                });\n        };\n\n        kernel.on(\"install\", () => resolvePromises(this.onInstall));\n        kernel.on(\"enable\", () => resolvePromises(this.onEnable));\n        kernel.on(\"disable\", () => resolvePromises(this.onDisable));\n        kernel.on(\"uninstall\", () => resolvePromises(this.onUninstall));\n\n        kernel.on(\"disable\",   () => this.$off({ removal: TraitService.PHASE.DISABLE }));\n        kernel.on(\"uninstall\", () => this.$off({ removal: TraitService.PHASE.UNINSTALL }));\n    }\n\n    $install(enable) {\n        if (!this.$.service.phaseQueue.$isSettled) {\n            return this.$.service.phaseQueue\n                .then(() => this.$install())\n        }\n\n        // eslint-disable-next-line no-debugger\n        if (JFACTORY_DEV) {if (this.$.service.isPhaseKilling) {debugger}}\n\n        return this.$.service.phaseQueue = JFactoryPromiseSync.resolve()\n            .then(() => {\n                if (!this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.INSTALL;\n                    return this.$state(\"installed\", true)\n                }\n            })\n            .then(() => {\n                if (enable && this.$.states.installed && !this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.ENABLE;\n                    return this.$state(\"enabled\", true)\n                }\n            })\n            .then(() => {\n                this.$.service.phase = TraitService.PHASE.NONE;\n            })\n    }\n\n    $enable() {\n        if (!this.$.service.phaseQueue.$isSettled) {\n            return this.$.service.phaseQueue\n                .then(() => this.$enable())\n        }\n\n        // eslint-disable-next-line no-debugger\n        if (JFACTORY_DEV) {if (this.$.service.isPhaseKilling) {debugger}}\n\n        return this.$.service.phaseQueue = JFactoryPromiseSync.resolve()\n            .then(() => {\n                if (this.$.states.installed && !this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.ENABLE;\n                    return this.$state(\"enabled\", true)\n                }\n            })\n            .then(() => {\n                this.$.service.phase = TraitService.PHASE.NONE;\n            })\n    }\n\n    $disable() {\n        if (!this.$.service.phaseQueue.$isSettled) {\n            return TraitService.phaseKill(this)\n                .then(() => this.$disable())\n        }\n\n        // eslint-disable-next-line no-debugger\n        if (JFACTORY_DEV) {if (this.$.service.isPhaseKilling) {debugger}}\n\n        return this.$.service.phaseQueue = JFactoryPromiseSync.resolve()\n            .then(() => {\n                if (this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.DISABLE;\n                    return this.$state(\"enabled\", false)\n                }\n            })\n            .then(() => {\n                this.$.service.phase = TraitService.PHASE.NONE;\n            })\n    }\n\n    $uninstall() {\n        if (!this.$.service.phaseQueue.$isSettled) {\n            return TraitService.phaseKill(this)\n                .then(() => this.$uninstall())\n        }\n\n        // eslint-disable-next-line no-debugger\n        if (JFACTORY_DEV) {if (this.$.service.isPhaseKilling) {debugger}}\n\n        return this.$.service.phaseQueue = JFactoryPromiseSync.resolve()\n            .then(() => {\n                if (this.$.states.enabled) {\n                    return this.$disable()\n                }\n            })\n            .then(() => {\n                if (this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.UNINSTALL;\n                    return this.$state(\"installed\", false)\n                }\n            })\n            .then(() => {\n                this.$.service.phase = TraitService.PHASE.NONE;\n            });\n    }\n\n    static phaseKill(component) {\n        return new Promise(resolve => {\n            if (!component.$.service.phaseQueue.$isSettled) {\n                component.$.service.isPhaseKilling = true;\n                // component.$logWarn(\"phase kill [\" + component.$.service.phase + \"]...\");\n                if (component.$.tasks.size) {\n                    component.$taskRemoveAll(TraitService.getContextualRemovePhase(component), true);\n                }\n                setTimeout(() => resolve(TraitService.phaseKill(component)), 50)\n            } else {\n                component.$.service.isPhaseKilling = false;\n                resolve()\n            }\n        })\n    }\n\n    static getContextualRemovePhase(jFactoryCoreObject) {\n        return TraitService.PHASE_REVERT[jFactoryCoreObject.$.service.phase]\n    }\n\n    static setEventNamespaceRemovePhase(jFactoryCoreObject, parsedEvent, options) {\n        let curRemovePhase = parsedEvent.hasNamespace(TraitService.PHASES);\n        let newRemovePhase = options && options.removal;\n\n        if (!newRemovePhase) {\n            newRemovePhase = TraitService.getContextualRemovePhase(jFactoryCoreObject);\n        }\n\n        // special case : on(\"uninstall\") with removal = DISABLE (the default value)\n        // => disable() is always called before uninstall() causing the event to be removed too early\n        if (parsedEvent.event === \"uninstall\" && newRemovePhase === TraitService.PHASE.DISABLE) {\n            newRemovePhase = TraitService.PHASE.UNINSTALL\n        }\n\n        if (curRemovePhase !== newRemovePhase) {\n            parsedEvent.deleteNamespace(curRemovePhase);\n            parsedEvent.addNamespace(newRemovePhase);\n        }\n\n        parsedEvent.addNamespace(newRemovePhase);\n    }\n}\n\nTraitService.PHASE = {\n    NONE: \"PHASE_NONE\",\n    INSTALL: \"PHASE_INSTALL\",\n    ENABLE: \"PHASE_ENABLE\",\n    DISABLE: \"PHASE_DISABLE\",\n    UNINSTALL: \"PHASE_UNINSTALL\"\n};\n\nTraitService.PHASE_REVERT = {\n    [TraitService.PHASE.INSTALL]: TraitService.PHASE.UNINSTALL,\n    [TraitService.PHASE.UNINSTALL]: TraitService.PHASE.INSTALL,\n    [TraitService.PHASE.DISABLE]: TraitService.PHASE.ENABLE,\n    [TraitService.PHASE.ENABLE]: TraitService.PHASE.DISABLE,\n    [TraitService.PHASE.NONE]: TraitService.PHASE.DISABLE\n};\n\nTraitService.PHASES = Object.values(TraitService.PHASE);\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function assignPrivate(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE], property, value, descriptor)\n}\n\nexport function assignPrivateMember(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE][property], value, descriptor)\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactory.PHASE = JFactoryObject.disinherit(TraitService.PHASE);\n\njFactory.TraitCore = TraitCore;\njFactory.TraitAbout = TraitAbout;\njFactory.TraitLog = TraitLog;\njFactory.TraitEvents = TraitEvents;\njFactory.TraitState = TraitState;\njFactory.TraitService = TraitService;\njFactory.TraitTask = TraitTask;","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// TraitComponents\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { jFactory } from \"./jFactory\";\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { jFactoryError } from \"./JFactoryError\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { TraitCore, TraitService } from \"./TraitsCore\";\nimport { JFactoryFetch } from \"./JFactoryFetch\";\nimport { JFactoryPromise } from \"./JFactoryPromise\";\nimport { JFactoryObject } from \"./JFactoryObject\";\nimport { jFactoryTrace } from \"./JFactoryTrace\";\nimport { jQuery } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Fetch\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitFetch {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$fetchRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$fetchRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"requests\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $fetch(id, url, fetchOptions = {}) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetch(id)\", id).typeString();\n            JFactoryExpect(\"$fetch(url)\", url).typeString();\n            JFactoryExpect(\"$fetch(fetchOptions)\", fetchOptions).typePlainObject();\n            if (this.$.requests.has(id)) {\n                throw new jFactoryError.KEY_DUPLICATED({ target: \"$fetch(id)\", given: id })\n            }\n        }\n\n        let promise = new JFactoryFetch({\n            name: id,\n            traceSource: jFactoryTrace.tracer.captureTraceSource(\"$fetch\"),\n            config: {\n                chainAutoComplete: true\n            }\n        }, url, fetchOptions);\n\n        this.$.requests.$registerAsync(id, '$fetch(\"' + id + '\")', promise);\n\n        promise.$chain.then(() => {\n            if (this.$.requests.has(id)) {\n                this.$fetchRemove(id)\n            }\n        });\n\n        return promise;\n    }\n\n    $fetchText(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeText: true });\n    }\n\n    $fetchJSON(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeJSON: true });\n    }\n\n    $fetchRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetchRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$fetchRemove(reason)\", reason).typeString();\n            if (!this.$.requests.has(id)) {\n                throw new jFactoryError.KEY_MISSING({\n                    target: \"$fetchRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.requests.get(id)._debug_remove_called) {debugger}\n            this.$.requests.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.requests.get(id);\n        this.$.requests.delete(id);\n        entry.$chainAbort(reason || \"$fetchRemove()\");\n    }\n\n    $fetchRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.requests;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$fetchRemove(key, \"$fetchRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Timeout\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitTimeout {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$timeoutRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$timeoutRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeouts\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $timeout(id, delay, handler = null, ...args) {\n        // id\n        // id, delay\n        // id, delay, handler, ...args\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            JFactoryExpect(\"handler\", handler).type(Function, null);\n            if (this.$.timeouts.has(id)) {\n                throw new jFactoryError.KEY_DUPLICATED({ target: \"$timeout(id)\", given: id })\n            }\n        }\n\n        let timer;\n        let promise = new JFactoryPromise(\n            {\n                name: id,\n                traceSource: jFactoryTrace.tracer.captureTraceSource(\"$timeout\"),\n                config: {\n                    chainAutoComplete: true\n                }\n            },\n            resolve => {\n                timer = setTimeout(() => {\n                    if (!promise.$isExpired) {\n                        resolve(handler ? handler(...args) : undefined);\n                    }\n                }, delay)\n            }\n        );\n\n        this.$.timeouts.$registerAsync(id, '$timeout(\"' + id + '\")', promise);\n        promise.$chain.data.timer = timer;\n\n        promise.$chain.then(() => {\n            if (this.$.timeouts.has(id)) {\n                this.$timeoutRemove(id);\n            }\n        });\n\n        return promise;\n    }\n\n    $timeoutRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$timeoutRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$timeoutRemove(reason)\", reason).typeString();\n            if (!this.$.timeouts.has(id)) {\n                throw new jFactoryError.KEY_MISSING({\n                    target: \"$timeoutRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeouts.get(id)._debug_remove_called) {debugger}\n            this.$.timeouts.get(id)._debug_remove_called = true;\n        }\n\n        let entry = this.$.timeouts.get(id);\n        clearTimeout(entry.$chain.data.timer);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.timeouts.delete(id);\n        entry.$chainAbort(reason || \"$timeoutRemove()\");\n    }\n\n    $timeoutRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES);\n        }\n        let subs = this.$.timeouts;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$timeoutRemove(key, \"$timeoutRemoveAll()\")\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Interval\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitInterval {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$intervalRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$intervalRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeints\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $interval(id, delay, handler, ...args) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            if (this.$.timeints.has(id)) {\n                throw new jFactoryError.KEY_DUPLICATED({ target: \"$interval(id)\", given: id })\n            }\n        }\n        let timer = setInterval(handler, delay, ...args);\n        this.$.timeints.$registerSync(id, timer)\n    }\n\n    $intervalRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$intervalRemove(id)\", id).typeString();\n            if (!this.$.timeints.has(id)) {\n                throw new jFactoryError.KEY_MISSING({\n                    target: \"$intervalRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeints.get(id)._debug_remove_called) {debugger}\n            this.$.timeints.get(id)._debug_remove_called = true\n        }\n        clearInterval(this.$.timeints.get(id).$value);\n        this.$.timeints.delete(id)\n    }\n\n    $intervalRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.timeints;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$intervalRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Mutations\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitMutation {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$mutationRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$mutationRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"mutations\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $mutation(id, parent, config, handler) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"parent\", parent).type(HTMLElement, Document);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            if (this.$.mutations.has(id)) {\n                throw new jFactoryError.KEY_DUPLICATED({ target: \"$mutation(id)\", given: id })\n            }\n        }\n        let observer = new MutationObserver(handler);\n        observer.observe(parent, config);\n        this.$.mutations.$registerSync(id, observer);\n    }\n\n    $mutationRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$mutationRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$mutationRemove(reason)\", reason).typeString();\n            if (!this.$.mutations.has(id)) {\n                throw new jFactoryError.KEY_MISSING({\n                    target: \"$mutationRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.mutations.get(id)._debug_remove_called) {debugger}\n            this.$.mutations.get(id)._debug_remove_called = true\n        }\n        this.$.mutations.get(id).$value.disconnect();\n        this.$.mutations.delete(id)\n    }\n\n    $mutationRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.mutations;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$mutationRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait DOM\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitDOM {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$domRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$domRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"dom\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $dom(id, jQueryArgument) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"jQueryArgument\", jQueryArgument).type(String, Object);\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new jFactoryError.KEY_DUPLICATED({ target: \"$dom(id)\", given: id })\n        }\n\n        let dom = jQuery(jQueryArgument);\n        if (domId) {\n            dom[0].id = id\n        }\n        return this.$.dom.$registerSync(id, dom).$value;\n    }\n\n    $domFetch(id, url, fetchOptions) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new jFactoryError.KEY_DUPLICATED({ target: \"$domFetch(id)\", given: id })\n        }\n\n        let promise = this.$fetchText('$domFetch(\"' + id + '\")', url, fetchOptions)\n            .then(r => {\n                let dom = jQuery(r);\n                if (domId) {\n                    dom[0].id = id\n                }\n                return dom\n            });\n\n        this.$.dom.$registerAsync(id, '$domFetch(\"' + id + '\")', promise);\n        return promise\n    }\n\n    $domRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$domRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$domRemove(reason)\", reason).typeString();\n            if (!this.$.dom.has(id)) {\n                throw new jFactoryError.KEY_MISSING({\n                    target: \"$domRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.dom.get(id)._debug_remove_called) {debugger}\n            this.$.dom.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.dom.get(id);\n        let value = entry.$value;\n        if (value instanceof jQuery) {\n            value.remove()\n        }\n        if (entry instanceof JFactoryFetch) {\n            entry.$chainAbort(reason || \"$domRemove()\");\n        }\n        this.$.dom.delete(id)\n    }\n\n    $domRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.dom;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$domRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n//  Trait CSS\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitCSS {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$cssRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$cssRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"css\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $css(id, styleBody) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"css\", styleBody).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new jFactoryError.KEY_DUPLICATED({ target: \"$css(id)\", given: id })\n        }\n\n        return this.$.css.$registerSync(id,\n            jQuery(\"<style>\")\n                .attr(cssId ? { id } : {})\n                .addClass(\"jFactory-css\")\n                .html(styleBody)\n                .appendTo(\"head\")\n        ).$value;\n    }\n\n    $cssFetch(id, url) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new jFactoryError.KEY_DUPLICATED({ target: \"$cssFetch(id)\", given: id })\n        }\n\n        let dom;\n        let promise = new JFactoryPromise(\n            {\n                name: id,\n                config: {\n                    // promiseRejectIfExpired: true,\n                    chainAutoComplete: true\n                },\n                traceSource: jFactoryTrace.tracer.captureTraceSource(\"$cssFetch\")\n            },\n            resolve => dom = jQuery(\"<link>\", { id: cssId ? id : \"\", rel: \"stylesheet\", type: \"text/css\" })\n                .addClass(\"jFactory-css\")\n                .appendTo(\"head\")\n                .on(\"load\", () => {\n                    resolve(dom)\n                }).attr(\"href\", url)\n        );\n        promise.$chain.data.dom = dom;\n        this.$.css.$registerAsync(id, '$cssFetch(\"' + id + '\")', promise);\n        return promise\n    }\n\n    $cssRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$cssRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$cssRemove(reason)\", reason).typeString();\n            if (!this.$.css.has(id)) {\n                throw new jFactoryError.KEY_MISSING({\n                    target: \"$cssRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.css.get(id)._debug_remove_called) {debugger}\n            this.$.css.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.css.get(id);\n        let value = entry.$value || entry.$chain && entry.$chain.data.dom;\n        if (value instanceof jQuery) {\n            value.remove()\n        }\n        if (entry instanceof JFactoryPromise) {\n            entry.$chainAbort(reason || \"$cssRemove()\")\n        }\n        this.$.css.delete(id)\n    }\n\n    $cssRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.css;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$cssRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactory.TraitFetch = TraitFetch;\njFactory.TraitTimeout = TraitTimeout;\njFactory.TraitInterval = TraitInterval;\njFactory.TraitMutation = TraitMutation;\njFactory.TraitDOM = TraitDOM;\njFactory.TraitCSS = TraitCSS;","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory bundle index (see package.json scripts to compile the /dist)\n// ---------------------------------------------------------------------------------------------------------------------\n// Used by the build scripts to compile modules targeting the configuration (production, development, debug...)\n// Almost everything is exported; The resulting modules should be imported by a bundler that supports Tree Shacking.\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { jFactoryLoader } from \"./jFactory-loader\";\n\nexport * from \"./jFactory\";\nexport * from \"./jFactory-env\";\n\nexport * from \"./jFactory-traits\";\nexport * from \"./jFactory-loader\";\n\nexport * from \"./JFactoryAbout\";\nexport * from \"./JFactoryError\";\nexport * from \"./JFactoryEvents\";\nexport * from \"./JFactoryExpect\";\nexport * from \"./JFactoryFetch\";\nexport * from \"./JFactoryFunction\";\nexport * from \"./JFactoryLogger\";\nexport * from \"./JFactoryObject\";\nexport * from \"./JFactoryPromise\";\nexport * from \"./JFactoryTime\";\nexport * from \"./JFactoryTrace\";\nexport * from \"./JFactoryTraits\";\n\nexport * from \"./TraitsCore\";\nexport * from \"./TraitsComponents\";\n\n// noinspection JSUnresolvedVariable\nif (typeof jFactoryOverride === \"undefined\" || !jFactoryOverride) {\n    jFactoryLoader.init();\n}"],"names":["JFACTORY_DEV","JFACTORY_DEBUG","JFACTORY_CLI","process","versions","node","jFactoryConfig","TraitLog","JFactoryError","keys","JFactoryTrace","libOptions","offline","Boolean","globalThis","chrome","filter","value","lineNumber","jFactoryDev","requireCompatibility","test","info","fetch","Request","AbortController, AbortSignal","AbortController","signal","MutationObserver","jFactoryLoader","seq","[object Object]","this","module","jFactoryOverride","handler","push","console","warn","name","entry","Object","entries","pass","ignore","jFactoryInit","onInit","jQuery","$","helper_isNative","_","isNative","helper_isString","isString","helper_isNumber","isNumber","helper_isPlainObject","isPlainObject","helper_defaultsDeep","defaultsDeep","helper_lowerFirst","lowerFirst","helper_get","get","helper_template","template","helper_camelCase","camelCase","NOOP","setFunctionName","f","defineProperty","JFactoryTrace_NOFILTER","label","stackTraceLimit","Infinity","omitAboveFunctionName","omitSelf","_stackTraceLimit","Error","traceSource","source","targetObject","captureTraceSource","trace","toPrintableTrace","then","r","log","enumerable","configurable","Promise","resolve","JFactoryTrace_LIB_STACKTRACE","config","super","StackTrace","fromError","traceFrames","slice","findIndex","functionName","endsWith","formatTraceFrames","header","linePrefix","window","map","sf","toString","join","jFactoryTrace","use","constructor","tracer","attachTrace","message","data","assign","create","toPrintable","$data","Symbol","iterator","object","DEFAULT_KEYS","find","key","val","templateData","nv","undefined","getId","JSON","stringify","length","JSON_MAX","substring","e","String","templateMessage","part","split","placeholder","RE_PLACEHOLDER","lastIndex","exec","trim","toPrintableData","jFactoryError","Proxy","set","target","property","prototype","JFactoryExpect","INVALID_VALUE","INVALID_CALL","PROMISE_EXPIRED","REQUEST_ERROR","KEY_DUPLICATED","KEY_MISSING","error","reason","given","staticMethods","notUndefined","notEmptyString","notFalsy","validSpaces","replace","matchReg","reg","expected","ok","typeNull","typeBoolean","typeString","typeNumber","typeFunction","typePlainObject","equalIn","Array","isArray","values","includes","getOwnPropertyNames","writable","getOwnPropertyDescriptor","notWritable","propertyIsEnumerable","call","notEnumerable","notConfigurable","reservedProperty","args","JFactoryTraits","callerInstance","callerConstructor","options","trait","traitArgs","cache","CACHE","has","add","WeakSet","JFactoryTrait","export","traitInstance","trait_constructor","apply","isStatic","sourceDescriptor","getOwnPropertyDescriptors","propertyName","prefix","getPrefix","getTarget","propertyDescriptor","parsed","parser","defaultParser","EXCLUDES","WeakMap","JFactoryFunctionComposer","handlers","handlerGroups","handlerGroup","arguments","unshift","composer","composite","context","canceled","parameters","from","result","iteration","next","composite_iterator","scope","done","jFactoryFunctionExpirable","originalHandler","JFactoryFunctionExpirable","compose","expiredCalls","expired","isExpired","expirable","setExpired","addExpireCondition","condition","last","type","bind","onExpired","onNotExpired","MaxWarningExpiration","jFactoryFunctionConditional","JFactoryFunctionConditional","first","conditional","addCondition","handle","jFactoryFunctionWrappable","JFactoryFunctionWrappable","wrappable","beforeAll","justBefore","justAfter","afterAll","jFactoryTraits","states","enabled","service","phase","owner","$logErr","JFactoryCoreObject","jFactory","TraitCore","TraitAbout","TraitEvents","TraitState","TraitService","TraitTask","JFactoryComponent","TraitFetch","TraitDOM","TraitCSS","TraitMutation","TraitTimeout","TraitInterval","properties","JFactoryObject","descriptorPrototype","DESCRIPTORS_PROTOTYPE","o","NONE","WRITABLE","ENUMERABLE","CONFIGURABLE","CONFIGURABLE_WRITABLE","WRITABLE_CONFIGURABLE","CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE","ENUMERABLE_WRITABLE","WRITABLE_ENUMERABLE","WRITABLE_ENUMERABLE_CONFIGURABLE","WRITABLE_CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE_WRITABLE","ENUMERABLE_WRITABLE_CONFIGURABLE","CONFIGURABLE_WRITABLE_ENUMERABLE","CONFIGURABLE_ENUMERABLE_WRITABLE","READONLY","descriptor","descriptors","getOwnPropertySymbols","defineProperties","flat","disinherit","createDescriptors","moduleGenId","uid","JFactoryAbout","about","fingerprint","toLowerCase","JFactoryPromise","executor","chainId","reject","DEFAULT_CONFIG","Number","_resolve","_reject","chain","JFactoryPromiseChain","$chain","$type","$value","$isSettled","$isRejected","$isFulfilled","$isExpired","$dev_name","$dev_path","JFactoryPromisePath","$dev_position","$dev_source","tryAutoComplete","isPending","$chainComplete","onResolve","onReject","TypeError","x","called","resolvePromise","y","rejectPromise","errorExpired","onSettle","chainMap","chainConfig","chainAutoComplete","size","_chainAutoComplete","__resolve__","__reject__","onFulfilled","onRejected","forceType","wrappedFulfilled","wrappedRejected","newPromise","startsWith","fNames","chainName","$dev_onFulfilled","$dev_onRejected","forceExpire","chainRoot","optionalArgs","complete","promise","Map","isCompleted","__deferred__","Deferred","item","i","printable","v","JFactoryPromiseSync","JFactoryEvents","registry","onListenerUpdate","onObserverUpdate","events","selector","validateSelector","HTMLElement","wrappedHandler","on","stack","off","pending","event","trigger","triggerHandler","all","async","JFactoryEventsManager","parent","affiliateRules","affiliateAddRule","rule_namespace","namespaces","JFactoryEventSelectorParser","parsedEvent","namespace","addNamespace","affiliate","argL","jquery","triggerSeries","triggerParallel","elm","_data","types","JFactoryEventSelector","hasNamespace","_events","expando","k","indexOf","eventTypeEntry","selectors","s","Set","delete","ns","shift","validateEvent","validateNamespace","JFactoryFetch","url","fetchOptions","fetchRequest","response","fetchResponse","status","statusText","$typeText","text","responseText","$typeJSON","json","responseJSON","catch","abortCtrl","abortController","fetchAbortController","$chainAbort","abort","SYMBOL_ENABLED","JFactoryLogger","DEFAULT_CONDITION","installAccessor","parentLogger","enable","disable","nativeName","filters","targetName","accessor","formatter","sub","styles_css","styles_cli","FORMATTER_NATIVE","logger","FORMATTER_CLI","FORMATTER_BROWSER","equal","JFactoryTime","Date","toLocaleTimeString","getUTCMilliseconds","valueOf","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","a","JFactoryTimeTrace","elapsed","t1","t0","$toDurationString","SubMap","$phaseRemove","getContextualRemovePhase","taskName","task","$task","proto","SYMBOL_PRIVATE","createSubMap","tasks","requests","id","executorOrValue","metrics","$taskMetrics","$dev_timing","end","$taskRemove","_called","removePhase","PHASES","autoComplete","assignPrivate","custom","kernel","eventManager","listeners","getDomListeners","observers","getObservers","$trigger","stateRoutes","$state","h","before","$notify","after","notify","previousVal","PHASE","phaseQueue","assignPrivateMember","installed","setEventNamespaceRemovePhase","resolvePromises","$taskRemoveAll","$taskPromiseAll","isPhaseKilling","onInstall","onEnable","onDisable","onUninstall","$off","removal","DISABLE","UNINSTALL","INSTALL","ENABLE","$install","$enable","phaseKill","$disable","$uninstall","component","setTimeout","jFactoryCoreObject","PHASE_REVERT","curRemovePhase","newRemovePhase","deleteNamespace","$fetchRemoveAll","$registerAsync","$fetchRemove","$fetch","_debug_remove_called","subs","$timeoutRemoveAll","delay","Function","timeouts","timer","$timeoutRemove","clearTimeout","$intervalRemoveAll","timeints","setInterval","$registerSync","clearInterval","$intervalRemove","$mutationRemoveAll","Document","mutations","observer","observe","disconnect","$mutationRemove","$domRemoveAll","jQueryArgument","domId","dom","$fetchText","remove","$domRemove","$cssRemoveAll","styleBody","cssId","css","attr","addClass","html","appendTo","rel","$cssRemove","init"],"mappings":"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"}