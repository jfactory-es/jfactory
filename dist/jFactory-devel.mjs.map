{"version":3,"file":"jFactory-devel.mjs","sources":["../src/jFactory-env.mjs","../src/jFactory-helpers.mjs","../src/jFactoryLoader.mjs","../src/JFactoryTrace.mjs","../src/JFactoryError.mjs","../src/JFactoryExpect.mjs","../src/JFactoryTraits.mjs","../src/JFactoryFunction.mjs","../src/jFactory-traits.mjs","../src/jFactory.mjs","../src/jFactoryCompat.mjs","../src/jFactory-bootstrap.mjs","../src/JFactoryObject.mjs","../src/JFactoryAbout.mjs","../src/JFactoryPromise.mjs","../src/JFactoryEvents.mjs","../src/JFactoryFetch.mjs","../src/JFactoryLogger.mjs","../src/JFactoryTime.mjs","../src/TraitsCore.mjs","../src/TraitsComponents.mjs","../src/index.mjs"],"sourcesContent":["/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory Env\n// ---------------------------------------------------------------------------------------------------------------------\n\n// Compile-time immutable Env; used by tree shaking to remove unused code\nexport const JFACTORY_DEV = typeof COMPILER_DEV === \"undefined\" ? false : COMPILER_DEV; // Developer Mode\nexport const JFACTORY_DEBUG = typeof COMPILER_DEBUG === \"undefined\" ? false : COMPILER_DEBUG; // Debug the library\nexport const JFACTORY_CLI = typeof COMPILER_CLI === \"undefined\" ?\n    typeof process !== \"undefined\" && process.versions && process.versions.node : COMPILER_CLI;\n\n// Mutable configuration; exported as properties for tree shaking\nexport const JFACTORY_CFG_LOG = {\n    enabled: JFACTORY_DEV && !JFACTORY_CLI || JFACTORY_DEBUG\n}\nexport const JFACTORY_CFG_JFactoryError = {\n    keys: [\"$.about.name\", \"$dev_name\", \"$name\", \"name\", \"id\"]\n}\nexport const JFACTORY_CFG_JFactoryTrace = JFACTORY_DEV && !JFACTORY_CLI\n    && {\n        keys: [\"$dev_traceLog\", \"$dev_traceSource\"],\n        libOptions: {\n            offline: Boolean(globalThis.chrome), // loading sourcemaps is not required in chrome\n            filter: function(value) {\n                return value.lineNumber\n                // && (value.fileName + value.functionName).toLocaleLowerCase().indexOf('jfactory') < 0\n            }\n        }\n    }","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport _ from \"lodash\";\nimport $ from \"jquery\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory Helpers\n// ---------------------------------------------------------------------------------------------------------------------\n// Centralize helpers and externals in one module\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const jQuery = $;\n\nexport const helper_isString = _.isString;\nexport const helper_isNumber = _.isNumber;\nexport const helper_isPlainObject = _.isPlainObject;\nexport const helper_defaultsDeep = _.defaultsDeep;\nexport const helper_lowerFirst = _.lowerFirst;\nexport const helper_get = _.get;\nexport const helper_template = _.template;\nexport const helper_camelCase = _.camelCase;\n\nexport const NOOP = () => {};\nexport const helper_setFunctionName = (name, f) => Object.defineProperty(f, \"name\", { value: name });\nconst helper_url_abs_a = /*#__PURE__*/document.createElement(\"a\");\nexport const helper_url_abs = url => { helper_url_abs_a.href = url; return helper_url_abs_a.href }\n\nexport const helper_isNative = function(f) {\n    return typeof f === \"function\" && Function.prototype.toString.call(f).indexOf(\"[native code]\") !== -1\n}\n\nexport const helper_Deferred = () => new Deferred;\n\nfunction Deferred(){\n    this._done = [];\n    this._fail = [];\n}\nDeferred.prototype = {\n    execute: function(list, args){\n        for (let h of list){\n            h(...args)\n        }\n        this.fulfilled = true\n    },\n    resolve: function(){\n        this.execute(this._done, arguments);\n    },\n    reject: function(){\n        this.execute(this._fail, arguments);\n    },\n\n    done: function(callback){\n        if (this.fulfilled) {\n            callback()\n        } else {\n            this._done.push(callback);\n        }\n    },\n    fail: function(callback){\n        this._fail.push(callback);\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryLoader\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nlet seq = [];\nexport function jFactoryLoader_init() {\n    if (seq) {\n        for (let handler of seq) {\n            handler()\n        }\n        seq = null;\n        delete globalThis.jFactoryOverride\n    }\n}\n\nexport function jFactoryLoader_onInit(handler) {\n    seq.push(handler)\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_CFG_JFactoryTrace } from \"./jFactory-env\";\nimport { jFactoryLoader_onInit } from \"./jFactoryLoader\";\nimport { NOOP } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTrace\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n// - #limitation# Error.stack is not standardized\n// - #limitation# Error.stack is not source-mapped\n// - #limitation# bug https://bugzilla.mozilla.org/show_bug.cgi?id=1584244\n// - #limitation# StackTrace.js resolves sourcemaps. Unfortunately, it doesn't work with \"webpack:\" protocol\n//   see https://github.com/stacktracejs/stacktrace.js/issues/209\n// ---------------------------------------------------------------------------------------------------------------------\n// https://github.com/mozilla/source-map/\n// https://www.stacktracejs.com/\n// https://github.com/novocaine/sourcemapped-stacktrace\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTrace_NOFILTER {\n\n    constructor({ label, stackTraceLimit, keys, libOptions } = {}) {\n        this.label = label || \"The stack has been printed in the console\";\n        this.stackTraceLimit = stackTraceLimit || Infinity;\n        this.keys = keys || [\"stackLog\", \"stackSource\"];\n        this.libOptions = libOptions || {}\n    }\n\n    captureTraceSource(omitAboveFunctionName, omitSelf) {\n        let _stackTraceLimit;\n        if (this.stackTraceLimit) {\n            _stackTraceLimit = Error.stackTraceLimit;\n            Error.stackTraceLimit = this.stackTraceLimit\n        }\n        if (!omitAboveFunctionName) {\n            omitAboveFunctionName = \"captureTraceSource\";\n            omitSelf = true\n        }\n        let traceSource = {\n            source: new Error(),\n            omitAboveFunctionName,\n            omitSelf\n        };\n        if (this.stackTraceLimit) {\n            Error.stackTraceLimit = _stackTraceLimit\n        }\n        return traceSource\n    }\n\n    attachTrace(targetObject, traceSource) {\n        if (typeof traceSource !== \"object\") {\n            traceSource = this.captureTraceSource(traceSource || \"attachTrace\", !traceSource);\n        }\n\n        let trace = traceSource.source;\n        this.toPrintableTrace(traceSource)\n            .then(r => trace = r);\n\n        let log = () => console.log(trace) || this.label;\n\n        Object.defineProperty(targetObject, this.keys[0] /* traceLog */, {\n            enumerable: false,\n            configurable: true,\n            // hide the function body to improve readability in devtool\n            get: () => log()\n        });\n        Object.defineProperty(targetObject, this.keys[1] /* traceSource */, {\n            enumerable: false,\n            configurable: true,\n            // hide the traceSource Error to improve readability in devtool, specially in Firefox\n            get: () => traceSource\n        });\n    }\n\n    toPrintableTrace(traceSource) {\n        // SPEC: this overridable method returns a promise\n        // because stacktrace parsers may be asynchronous\n        return Promise.resolve(traceSource.source)\n    }\n}\n\nexport class JFactoryTrace_LIB_STACKTRACE extends JFactoryTrace_NOFILTER {\n\n    constructor(config) {\n        super(config);\n    }\n\n    toPrintableTrace(traceSource) {\n        return StackTrace.fromError(traceSource.source, this.libOptions)\n            .then(traceFrames => {\n\n                if (traceSource.omitAboveFunctionName) {\n                    let slice = traceFrames.findIndex(\n                        value => {\n                            return value.functionName && value.functionName.endsWith(traceSource.omitAboveFunctionName)\n                        }\n                    );\n                    if (slice > 0) {\n                        if (traceSource.omitSelf) {\n                            slice++\n                        }\n                        traceFrames = traceFrames.slice(slice);\n                    }\n                }\n                traceFrames = traceFrames\n                    .filter(this.libOptions.filter);\n                return this.formatTraceFrames(traceFrames)\n            });\n    }\n\n    formatTraceFrames(traceFrames) {\n        let header;\n        let linePrefix;\n        if (this.libOptions.offline && window.chrome) {\n            // if the fallowing syntax is detected on Chrome,\n            // the console.log() will convert the fileNames using sourcemaps\n            header = \"Error\\n\"; // notes that anything after \"Error\" is valid\n            linePrefix = \"\\tat \";\n        } else {\n            header = \"\";\n            linePrefix = \"\";\n        }\n        return header +\n            traceFrames\n                .map(sf => linePrefix + sf.toString())\n                .join(\"\\n\");\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryTrace\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const jFactoryTrace = {};\n\njFactoryLoader_onInit(function() {\n    let config = JFACTORY_CFG_JFactoryTrace;\n    if (config && config.use !== false) {\n        let constructor;\n        constructor = typeof config.use === \"function\" ?\n            config.use :\n            typeof StackTrace === \"object\" ? JFactoryTrace_LIB_STACKTRACE : JFactoryTrace_NOFILTER;\n        if (constructor === JFactoryTrace_LIB_STACKTRACE) {\n            console.warn(\"jFactory: Stack trace enabled; Performance will be affected\")\n        }\n        jFactoryTrace.tracer = new constructor(config);\n    } else {\n        jFactoryTrace.tracer = {\n            captureTraceSource: NOOP,\n            attachTrace: NOOP\n        };\n    }\n});","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_CFG_JFactoryError } from \"./jFactory-env\";\nimport { helper_get, helper_isNative, helper_lowerFirst, helper_template } from \"./jFactory-helpers\";\nimport { jFactoryTrace } from \"./JFactoryTrace\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryError\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryError extends Error {\n    constructor(message = \"unspecified error\", data = null) {\n        data = Object.assign(Object.create(null), data);\n        message = JFactoryError.toPrintable(message, data);\n        super(message);\n        this.$data = Object.assign(Object.create(null), data);\n    }\n\n    toString() {\n        return this.message\n    }\n\n    * [Symbol.iterator]() {\n        yield this.message;\n        yield this.$data;\n    }\n\n    static getId(object) {\n        return object[(JFACTORY_CFG_JFactoryError.keys || JFactoryError.DEFAULT_KEYS).find(key => {\n            let val = helper_get(object, key);\n            return val || val === 0\n        })]\n    }\n\n    static toPrintableData(data) {\n        const templateData = {};\n        let nv;\n        for (let [key, val] of Object.entries(data)) {\n            switch (typeof val) {\n                case \"function\":\n                    val = val.name + \"()\";\n                    break;\n                case \"object\":\n                    if (val === null) {\n                        val = \"null\";\n                        break\n                    }\n                    if (val instanceof Error) {\n                        val = val.toString();\n                        break\n                    }\n                    if ((nv = JFactoryError.getId(val)) !== undefined) {\n                        val = '\"' + nv + '\"'\n                    } else {\n                        if (!helper_isNative(val.toString)) {\n                            val = val.toString()\n                        } else {\n                            try {\n                                nv = JSON.stringify(val);\n                                val = nv.length > JFactoryError.JSON_MAX\n                                    ? nv.substring(0, JFactoryError.JSON_MAX) + \"[...]\" : nv;\n                            } catch (e) {\n                                val = \"[object \" + val.constructor.name + \"]\"\n                            }\n                        }\n                    }\n                    break;\n                case \"string\":\n                    val = '\"' + val + '\"';\n                    break;\n                default:\n                    val = String(val)\n            }\n            templateData[key] = val\n        }\n        return templateData\n    }\n\n    static toPrintable(template, data) {\n        const templateMessage = [];\n        for (let part of template.split(\";\")) {\n            let placeholder;\n            let RE_PLACEHOLDER = JFactoryError.RE_PLACEHOLDER;\n            RE_PLACEHOLDER.lastIndex = 0;\n            if ((placeholder = RE_PLACEHOLDER.exec(part))) {\n                do {\n                    if (placeholder[1] && placeholder[1] in data) {\n                        templateMessage.push(part.trim());\n                        break\n                    }\n                } while ((placeholder = RE_PLACEHOLDER.exec(part)) !== null)\n            } else {\n                templateMessage.push(part.trim());\n            }\n        }\n        return helper_lowerFirst(helper_template(templateMessage.join(\"; \"))(JFactoryError.toPrintableData(data)));\n    }\n\n    static factory(type, template) {\n        let ret = {\n            [type]: class extends JFactoryError {\n                constructor(data, traceSource) {\n                    super(template, data);\n                    jFactoryTrace.tracer.attachTrace(this.$data, traceSource);\n                }\n            }\n        }[type];\n\n        // Chrome automatically resolves sourcemap when logging errors\n        // but only if the error name starts with \"Error\"\n        ret.prototype.name = \"Error JFACTORY_ERR_\" + type;\n        return ret\n    }\n}\n\nJFactoryError.JSON_MAX = 40;\nJFactoryError.DEFAULT_KEYS = [\"name\", \"id\"];\nJFactoryError.RE_PLACEHOLDER = /\\${([^}]+)}/g;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFACTORY_ERR_*\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst E = JFactoryError.factory;\n\n/* eslint-disable max-len */\nexport const JFACTORY_ERR_INVALID_VALUE = /*#__PURE__*/E(\"INVALID_VALUE\", \"invalid value for ${target}; Reason: ${reason}; Given: ${given}\");\nexport const JFACTORY_ERR_INVALID_CALL = /*#__PURE__*/E(\"INVALID_CALL\", \"invalid call ${target}; Reason: ${reason}; Owner: ${owner}\");\nexport const JFACTORY_ERR_PROMISE_EXPIRED = /*#__PURE__*/E(\"PROMISE_EXPIRED\", \"expired promise ${target}; Reason: ${reason}\");\nexport const JFACTORY_ERR_REQUEST_ERROR = /*#__PURE__*/E(\"REQUEST_ERROR\", \"error requesting ${target}; Reason: ${reason}; Owner: ${owner}\");\nexport const JFACTORY_ERR_KEY_DUPLICATED = /*#__PURE__*/E(\"KEY_DUPLICATED\", \"duplicated key for ${target}; Given: ${given}\");\nexport const JFACTORY_ERR_KEY_MISSING = /*#__PURE__*/E(\"KEY_MISSING\", \"missing key for ${target}; Given: ${given}\");\n/* eslint-enable max-len */","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_ERR_INVALID_VALUE } from \"./JFactoryError\";\nimport { helper_isNumber, helper_isPlainObject, helper_isString } from \"./jFactory-helpers\";\nimport { jFactoryLoader_onInit } from \"./jFactoryLoader\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryExpect\n// ---------------------------------------------------------------------------------------------------------------------\n// A small input/output validation tool\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Alpha, Draft\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @return {*|JFactoryExpect}\n */\nexport function JFactoryExpect(label, value) {\n    if (new.target) {\n        this.label = label;\n        this.value = value;\n    } else {\n        return new JFactoryExpect(label, value)\n    }\n}\n\nconst error = function jFactoryThrow(label, value, message) {\n    throw new JFACTORY_ERR_INVALID_VALUE({\n        target: label,\n        reason: message,\n        given: value\n    })\n};\n\nconst staticMethods = {\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notUndefined\n     * @memberOf JFactoryExpect\n     */\n    notUndefined(label, value) {\n        if (value === undefined) {\n            error(label, value, \"cannot be undefined\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEmptyString\n     * @memberOf JFactoryExpect\n     */\n    notEmptyString(label, value) {\n        if (value === \"\") {\n            error(label, value, \"cannot be empty string\")\n        }\n        return true\n    },\n\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notFalsy\n     * @memberOf JFactoryExpect\n     */\n    notFalsy(label, value) {\n        if (!value) {\n            error(label, value, 'cannot be a falsy value (undefined, null, NaN, 0, \"\")')\n        }\n        return true\n    },\n\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method validSpaces\n     * @memberOf JFactoryExpect\n     */\n    validSpaces(label, value) {\n        if (!value.replace || value.replace(/\\s+/g, \" \").trim() !== value) {\n            error(label, value, \"invalid space delimiters\")\n        }\n        return true\n    },\n\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect#\n     * @param {RegExp} reg\n     * @return JFactoryExpect\n     */\n    /**\n     * @method matchReg\n     * @memberOf JFactoryExpect\n     */\n    matchReg(label, value, reg) {\n        if (!reg.test(value)) {\n            error(label, value, 'string \"' + value + '\" must match ' + reg)\n        }\n        return true\n    },\n\n    /**\n     * @method type\n     * @memberOf JFactoryExpect#\n     * @param {...*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method type\n     * @memberOf JFactoryExpect\n     */\n    type(label, value, ...expected) {\n        let name, ok = false;\n        for (let constructor of expected) {\n            if (constructor === null) {\n                name = \"Null\"\n            } else if (\"name\" in constructor) {\n                name = constructor.name\n            }\n            let test = staticMethods[\"type\" + name];\n            if (test) {\n                try {ok = test(label, value/*, e*/)} catch (e) {}\n            } else {\n                ok = value instanceof constructor\n            }\n            if (ok) break\n        }\n        if (!ok) {\n            error(label, value, \"must be an instance of [\" + expected.map(e => e.name).join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNull\n     * @memberOf JFactoryExpect\n     */\n    typeNull(label, value) {\n        if (value !== null) {\n            error(label, value, \"must be null\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeBoolean\n     * @memberOf JFactoryExpect\n     */\n    typeBoolean(label, value) {\n        if (value !== true && value !== false) {\n            error(label, value, \"must be a boolean\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeString\n     * @memberOf JFactoryExpect\n     */\n    typeString(label, value) {\n        if (!helper_isString(value)) {\n            error(label, value, \"must be a string\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeNumber\n     * @memberOf JFactoryExpect\n     */\n    typeNumber(label, value) {\n        if (!helper_isNumber(value)) {\n            error(label, value, \"must be a number\")\n        }\n        return true\n    },\n\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typeFunction\n     * @memberOf JFactoryExpect\n     */\n    typeFunction(label, value) {\n        if (!(typeof value === \"function\")) {\n            error(label, value, \"must be a function\")\n        }\n        return true\n    },\n\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect#\n     * @return JFactoryExpect\n     */\n    /**\n     * @method typePlainObject\n     * @memberOf JFactoryExpect\n     */\n    typePlainObject(label, value) {\n        if (!helper_isPlainObject(value)) {\n            error(label, value, \"must be a plain object\")\n        }\n        return true\n    },\n\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect#\n     * @param {*} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equal\n     * @memberOf JFactoryExpect\n     */\n    equal(label, value, ...expected) {\n        let ok = false;\n        for (let e of expected) {\n            if ((ok = value === e)) break\n        }\n        if (!ok) {\n            error(label, value, \"must be one of [\" + expected + \"]\")\n        }\n        return true;\n    },\n\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect#\n     * @param {Array|Object} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method equalIn\n     * @memberOf JFactoryExpect\n     */\n    equalIn(label, value, expected) {\n        if (!Array.isArray(expected)) {\n            expected = Object.values(expected)\n        }\n        if (!expected.includes(value)) {\n            error(label, value, \"must be one from [\" + expected.join(\", \") + \"]\")\n        }\n        return true\n    },\n\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect#\n     * @param {Array} expected\n     * @return JFactoryExpect\n     */\n    /**\n     * @method properties\n     * @memberOf JFactoryExpect\n     */\n    properties(label, value, expected) {\n        for (let name of Object.getOwnPropertyNames(value)) {\n            JFactoryExpect(label + ', property name \"' + name + '\"', name).equalIn(expected)\n        }\n        return true\n    },\n\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method writable\n     * @memberOf JFactoryExpect\n     */\n    writable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notWritable\n     * @memberOf JFactoryExpect\n     */\n    notWritable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).writable) {\n            error(label, value, \"must not be writable\")\n        }\n        return true\n    },\n\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method enumerable\n     * @memberOf JFactoryExpect\n     */\n    enumerable(label, value, key) {\n        if (!Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notEnumerable\n     * @memberOf JFactoryExpect\n     */\n    notEnumerable(label, value, key) {\n        if (Object.prototype.propertyIsEnumerable.call(value, key)) {\n            error(label, value, \"must not be enumerable\")\n        }\n        return true\n    },\n\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method configurable\n     * @memberOf JFactoryExpect\n     */\n    configurable(label, value, key) {\n        if (!Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method notConfigurable\n     * @memberOf JFactoryExpect\n     */\n    notConfigurable(label, value, key) {\n        if (Object.getOwnPropertyDescriptor(value, key).configurable) {\n            error(label, value, \"must not be configurable\")\n        }\n        return true\n    },\n\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect#\n     * @param {String} key\n     * @return JFactoryExpect\n     */\n    /**\n     * @method reservedProperty\n     * @memberOf JFactoryExpect\n     */\n    reservedProperty(label, value, key) {\n        if (key in value) {\n            error(label, value, \"is a reserved property\")\n        }\n        return true\n    }\n};\n\njFactoryLoader_onInit(function() {\n    Object.assign(JFactoryExpect, staticMethods);\n    // Generate members from static methods\n    for (const name of Object.getOwnPropertyNames(staticMethods)) {\n        JFactoryExpect.prototype[name] =\n            function callStatic(...args) {\n                JFactoryExpect[name](this.label, this.value, ...args);\n                return this\n            }\n    }\n});","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, JFACTORY_CFG_LOG } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTraits\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTraits {\n    /**\n     * @param {JFactoryCoreObject|Object} callerInstance\n     * @param {Class|Function} callerConstructor\n     * @param options\n     */\n    constructor(callerInstance, callerConstructor, options = {}) {\n        /**\n         * @type {JFactoryCoreObject}\n         */\n        this.callerInstance = callerInstance;\n\n        /**\n         * @type {Class|Function}\n         */\n        this.callerConstructor = callerConstructor;\n\n        /**\n         * @type {Object}\n         */\n        this.options = options;\n    }\n\n    use(trait, ...traitArgs) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryTraits(trait)\", trait).typeFunction();\n        }\n\n        // callerConstructor is not always the callerInstance.constructor:\n        // The Trait can be injected in an inherited constructor from super() at call time\n        let { callerInstance, callerConstructor } = this;\n\n        // Detect improper duplication (can be a trait already called by a super class)\n        let cache = JFactoryTraits.CACHE.get(callerInstance);\n\n        if (cache) {\n            if (cache.has(trait)) {\n                if (JFACTORY_CFG_LOG.enabled) {\n                    console.warn(`${trait.name} already called on`, callerInstance);\n                }\n                return this;\n            } else {\n                cache.add(trait)\n            }\n        } else {\n            JFactoryTraits.CACHE.set(callerInstance, new WeakSet([trait]))\n        }\n\n        !callerConstructor.JFactoryTrait && (callerConstructor.JFactoryTrait = new WeakSet);\n\n        if (!callerConstructor.JFactoryTrait.has(trait)) {\n            callerConstructor.JFactoryTrait.add(trait);\n            this.export(trait.prototype, callerConstructor.prototype);\n            this.export(trait, callerConstructor, true);\n        }\n\n        // In a Trait.constructor(callerInstance, ...args) : this != callerInstance\n        // In a Trait.trait_constructor(...args) : this == callerInstance (traits is injected and available)\n\n        // Traits are injections. They are not dynamic inheritance.\n        // So the Trait.constructor() doesn't share the \"this\" keyword with its caller.\n\n        // #limitation# No way to bind an ES6 class constructor to an object\n        // => Implementer can define a \"trait_constructor()\" that is automatically bound to \"callerInstance\"\n        // and called after the native trait constructor().\n\n        // eslint-disable-next-line new-cap\n        let traitInstance = new trait(callerInstance, ...traitArgs);\n        if (traitInstance.trait_constructor) {\n            traitInstance.trait_constructor.apply(callerInstance, traitArgs)\n        }\n        return this\n    }\n\n    export(source, target, isStatic) {\n        let sourceDescriptor = Object.getOwnPropertyDescriptors(source);\n\n        for (let propertyName of Object.keys(sourceDescriptor)) {\n            let prefix = JFactoryTraits.getPrefix(propertyName);\n\n            if (JFactoryTraits.getTarget(propertyName, target, prefix)) {\n                let propertyDescriptor = sourceDescriptor[propertyName];\n                let parsed = (this.options.parser || JFactoryTraits.defaultParser)(\n                    propertyName, propertyDescriptor, source, target, isStatic\n                );\n                if (parsed) {\n                    ({ propertyName, propertyDescriptor } = parsed);\n                    Object.defineProperty(target, propertyName, propertyDescriptor);\n                }\n            }\n        }\n    }\n\n    static defaultParser(propertyName, propertyDescriptor, source, target, isStatic) {\n        let value = propertyDescriptor.value;\n\n        if (isStatic) {return null} // don't export static members\n\n        if (propertyName in target) { // skip existing properties\n            if (JFACTORY_CFG_LOG.enabled) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of existing property \"${propertyName}\"`,\n                    value);\n            }\n            return null\n        }\n\n        if (typeof value === \"object\") { // prevent shared object exportation\n            if (JFACTORY_CFG_LOG.enabled) {\n                console.warn(\n                    `${target.constructor.name}> skipping export of shared object \"${propertyName}\"`,\n                    value);\n            }\n            return null;\n        }\n\n        return { propertyName, propertyDescriptor }\n    }\n\n    static getPrefix(key) {\n        let split = key.split(\"_\");\n        return split.length > 1 ? split[0] : null;\n    }\n\n    static getTarget(key, target, prefix) {\n        if (\n            JFactoryTraits.EXCLUDES.includes(key) ||\n            prefix === \"trait\"\n        ) {\n            return null\n        }\n\n        return target\n    }\n}\n\nJFactoryTraits.CACHE = new WeakMap;\nJFactoryTraits.EXCLUDES = [\"constructor\", \"prototype\", \"length\", \"size\"];","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, JFACTORY_CFG_LOG } from \"./jFactory-env\";\nimport { JFACTORY_ERR_INVALID_CALL } from \"./JFactoryError\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { helper_setFunctionName } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionComposer\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFunctionComposer {\n\n    constructor() {\n        this.handlers = Object.create(null);\n    }\n\n    * [Symbol.iterator](handlerGroups = []) {\n\n        if (!handlerGroups.length) {\n            handlerGroups = Object.keys(this.handlers)\n        }\n        if (!handlerGroups.length) {\n            handlerGroups = [\"default\"]\n        }\n\n        for (let handlerGroup of handlerGroups) {\n            if (handlerGroup in this.handlers) {\n                yield* this.handlers[handlerGroup]\n            }\n        }\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    first(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).unshift(handler);\n        return this\n    }\n\n    /** @return {JFactoryFunctionComposer} */\n    last(handlerGroup, handler) {\n        if (arguments.length === 1) {\n            [handlerGroup, handler] = [\"default\", handlerGroup]\n        }\n        (this.handlers[handlerGroup] || (this.handlers[handlerGroup] = [])).push(handler);\n        return this\n    }\n\n    /** @return {(function(): *) & {composer: JFactoryFunctionComposer}} */\n    compose(...handlerGroups) {\n        let composer = this;\n        let composite = function() {\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            //                                                //\n            //                wrapped function                //\n            //                                                //\n            //    You should Blackbox JFactoryFunction.mjs    //\n            //    to simplify debugging                       //\n            //                                                //\n            // !!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!!--!!!! //\n            let context = {\n                canceled: false,\n                parameters: Array.from(arguments),\n                result: undefined\n            };\n            let iterator = composer[Symbol.iterator](handlerGroups);\n            let iteration = iterator.next();\n            return JFactoryFunctionComposer.composite_iterator(\n                this /* preserve call scope */, context, iteration, iterator)\n        };\n        composite.composer = composer;\n        return composite;\n    }\n\n    // SPEC: Composite functions returns promise *only* if at least\n    // one handler returns a promise (async function or promise return)\n    // So we cannot just iterate using an \"await for of\"\n    static composite_iterator(scope, context, iteration, handlers) {\n        let handler,\n            result;\n\n        while (!context.canceled && !iteration.done) {\n            handler = iteration.value;\n            if (scope) {\n                result = handler.call(scope, context, ...context.parameters)\n            } else {\n                result = handler(context, ...context.parameters)\n            }\n            iteration = handlers.next(); // prepares next iteration to know if \"done\"\n            if (result instanceof Promise) {\n                if (iteration.done\n                    // case of last handler returning a promise\n                    // #limitation# now way to detect if the promise is the returned value or an \"await\"\n                    // (we don't want to change the value of context.result during a pending handler)\n                    // => native Promise are always chained\n                    && result.constructor !== Promise) {\n                    context.result = result // we can safely set the new result\n                } else {\n                    return result.then(helper_setFunctionName(\n                        [handler.name, \"[compositeAsyncHandler]\"].filter(Boolean).join(\" \"),\n                        function(value) {\n                            context.result = value;\n                            return JFactoryFunctionComposer.composite_iterator(scope, context, iteration, handlers)\n                        })\n                    )\n                }\n            } else {\n                context.result = result\n            }\n        }\n        return context.result\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionExpirable - Expirable Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionExpirable(originalHandler) {\n    return new JFactoryFunctionExpirable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionExpirable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.expiredCalls = 0;\n        this.composer = new JFactoryFunctionComposer;\n\n        let isExpired = this.composer.compose(\"conditions\");\n        let expirable = this;\n        let expired;\n\n        // cannot use a real accessor here (conditions can be scoped, so isExpired too)\n        this.isExpired = scope => expired || isExpired.call(scope) || false;\n        this.setExpired = value => expired = value ?\n            value instanceof Error ? value : new JFACTORY_ERR_INVALID_CALL({\n                target: this.originalHandler,\n                reason: \"manually expired\"\n            }) : Boolean(this.expiredCalls = 0);\n\n        this.addExpireCondition = function(condition) {\n            this.composer.last(\"conditions\", function(context) {\n                let done = function(result) {\n                    if (JFACTORY_DEV) {\n                        JFactoryExpect(\"JFactoryFunctionExpirable.addExpireCondition(), result\", result)\n                            .type(Boolean, Error)\n                    }\n                    return expirable.setExpired(result ?\n                        (context.canceled = true) &&\n                        (result instanceof Error ?\n                            result :\n                            new JFACTORY_ERR_INVALID_CALL({\n                                target: expirable.originalHandler,\n                                reason: \"conditionally expired\",\n                                condition\n                            })\n                        ) : false\n                    )\n                };\n                let result = condition.apply(this, context.parameters);\n                return result instanceof Promise ? result.then(done) : done(result);\n            })\n        };\n    }\n\n    compose() {\n        let expirable = this;\n        let composite = function() {\n            let isExpired = expirable.isExpired(this);\n            let call = expirable.constructor.call.bind(undefined, expirable, this, arguments);\n            return isExpired instanceof Promise ? isExpired.then(call) : call(isExpired);\n        };\n        return Object.assign(composite, {\n            expirable: this,\n            isExpired: f => this.isExpired(f),\n            setExpired: f => this.setExpired(f),\n            addExpireCondition: f => {this.addExpireCondition(f); return composite}\n        });\n    }\n\n    static call(expirable, scope, args, isExpired) {\n        return isExpired ? expirable.onExpired(isExpired) : expirable.onNotExpired(scope, args);\n    }\n\n    onExpired(expired) {\n        if (this.expiredCalls < JFactoryFunctionExpirable.MaxWarningExpiration) {\n            this.expiredCalls++;\n            if (JFACTORY_CFG_LOG.enabled) {\n                console.warn(...new JFACTORY_ERR_INVALID_CALL({\n                    ...expired.$data,\n                    reason: expired.$data.reason\n                        + \"; expiredCalls=\"\n                        + this.expiredCalls\n                        + (this.expiredCalls === JFactoryFunctionExpirable.MaxWarningExpiration\n                            ? \"; Max Warning Exceeded\" : \"\")\n                }));\n            }\n        }\n        return expired\n    }\n\n    onNotExpired(scope, args) {\n        return this.originalHandler.apply(scope, args)\n    }\n}\n\nJFactoryFunctionExpirable.MaxWarningExpiration = 10;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionConditional - Conditional Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionConditional(originalHandler) {\n    return new JFactoryFunctionConditional(originalHandler).compose()\n}\n\nexport class JFactoryFunctionConditional {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", helper_setFunctionName(\n            [originalHandler.name, \"[condition]\"].filter(Boolean).join(\" \"),\n            function(context) {\n                return originalHandler.apply(this, context.parameters);\n            })\n        );\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"conditions\", \"original\");\n        return Object.assign(composite, {\n            conditional: this,\n            addCondition: f => {this.addCondition(f); return composite}\n        });\n    }\n\n    addCondition(condition) {\n        this.composer.last(\"conditions\", function(context) {\n            let handle = function(result) {\n                if (JFACTORY_DEV) {\n                    JFactoryExpect(\"JFactoryFunctionConditional.addCondition(), result\", result)\n                        .typeBoolean();\n                }\n                !result && (context.canceled = true);\n            };\n            let result = condition.apply(this, context.parameters);\n            return result instanceof Promise ? result.then(handle) : handle(result);\n        })\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFunctionWrappable - Wrappable Function Pattern\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryFunctionWrappable(originalHandler) {\n    return new JFactoryFunctionWrappable(originalHandler).compose()\n}\n\nexport class JFactoryFunctionWrappable {\n\n    constructor(originalHandler) {\n        this.originalHandler = originalHandler;\n        this.composer = new JFactoryFunctionComposer;\n        this.composer.first(\"original\", helper_setFunctionName(\n            [originalHandler.name, \"[wrapped]\"].filter(Boolean).join(\" \"),\n            function(context) {\n                return originalHandler.apply(this, context.parameters);\n            })\n        );\n    }\n\n    compose() {\n        let composite = this.composer.compose(\"before\", \"original\", \"after\");\n        return Object.assign(composite, {\n            wrappable: this,\n            beforeAll: f => {this.beforeAll(f); return composite},\n            justBefore: f => {this.justBefore(f); return composite},\n            justAfter: f => {this.justAfter(f); return composite},\n            afterAll: f => {this.afterAll(f); return composite}\n        });\n    }\n\n    beforeAll(handler) {\n        this.composer.first(\"before\", handler);\n    }\n\n    justBefore(handler) {\n        this.composer.last(\"before\", handler);\n    }\n\n    justAfter(handler) {\n        this.composer.first(\"after\", handler);\n    }\n\n    afterAll(handler) {\n        this.composer.last(\"after\", handler);\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_ERR_INVALID_CALL } from \"./JFactoryError\";\nimport { JFactoryTraits } from \"./JFactoryTraits\";\nimport { jFactoryFunctionWrappable } from \"./JFactoryFunction\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryTraits\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function jFactoryTraits(callerInstance, callerConstructor) {\n    return new JFactoryTraits(callerInstance, callerConstructor, {\n\n        parser(propertyName, propertyDescriptor/*, source, target, isStatic */) {\n            let parsed = JFactoryTraits.defaultParser(...arguments);\n\n            if (parsed) {\n                ({ propertyName, propertyDescriptor } = parsed);\n\n                let value = propertyDescriptor.value;\n                if (typeof value === \"function\") {\n                    switch (value.name) {\n                        case \"$install\":\n                        case \"$uninstall\":\n                        case \"$enable\":\n                        case \"$disable\":\n                        case \"$state\":\n                            break;\n                        default:\n                            propertyDescriptor.value = jFactoryFunctionWrappable(value)\n                                .beforeAll(function() {\n                                    if (!this.$.states.enabled && this.$.service.phase === \"PHASE_NONE\") {\n                                        let e = new JFACTORY_ERR_INVALID_CALL({\n                                            owner: this,\n                                            target: value,\n                                            reason: \"component disabled\"\n                                        });\n                                        this.$logErr(...e);\n                                        throw e\n                                    }\n                                })\n                    }\n                }\n\n                return { propertyName, propertyDescriptor }\n            }\n        }\n    })\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { jFactoryTraits } from \"./jFactory-traits\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Predefined Components\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\n/**\n * @mixes TraitCore\n * @mixes TraitAbout\n * @mixes TraitLog\n * @mixes TraitEvents\n * @mixes TraitState\n * @mixes TraitService\n * @mixes TraitTask\n */\nexport class JFactoryCoreObject {\n    constructor(name) {\n        JFactoryCoreObject.inject(this, JFactoryCoreObject, name)\n    }\n\n    static inject(target, constructor, name) {\n        jFactoryTraits(target, constructor)\n            .use(jFactory.TraitCore)\n            .use(jFactory.TraitAbout, { name })\n            .use(jFactory.TraitLog)\n            .use(jFactory.TraitEvents)\n            .use(jFactory.TraitState)\n            .use(jFactory.TraitService)\n            .use(jFactory.TraitTask);\n    }\n}\n\n/**\n * @mixes TraitFetch\n * @mixes TraitDOM\n * @mixes TraitCSS\n * @mixes TraitMutation\n * @mixes TraitTimeout\n * @mixes TraitInterval\n * @mixes TraitLibVue\n * @mixes TraitLibReact\n */\nexport class JFactoryComponent extends JFactoryCoreObject {\n    constructor(name) {\n        super(name);\n        JFactoryComponent.inject(this, JFactoryComponent)\n    }\n\n    static inject(target, constructor) {\n        jFactoryTraits(target, constructor)\n            .use(jFactory.TraitFetch)\n            .use(jFactory.TraitDOM)\n            .use(jFactory.TraitCSS)\n            .use(jFactory.TraitMutation)\n            .use(jFactory.TraitTimeout)\n            .use(jFactory.TraitInterval)\n            .use(jFactory.TraitLibVue)\n            .use(jFactory.TraitLibReact);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory\n// ---------------------------------------------------------------------------------------------------------------------\n\n/** @return {JFactoryComponent} */\nexport const jFactory = (name, properties) => Object.assign(new JFactoryComponent(name), properties);","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryCompat\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport const JFACTORY_COMPAT_globalThis = {\n    name: \"globalThis\",\n    test: () => globalThis,\n    info: \"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\n}\nexport const JFACTORY_COMPAT_fetch = {\n    name: \"fetch\",\n    test: () => fetch,\n    info: \"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch\"\n}\nexport const JFACTORY_COMPAT_Request = {\n    name: \"Request\",\n    test: () => Request,\n    info: \"https://developer.mozilla.org/docs/Web/API/Request\"\n}\nexport const JFACTORY_COMPAT_AbortController = {\n    name: \"AbortController/AbortSignal\",\n    test: () => new AbortController().signal,\n    info: \"https://developer.mozilla.org/docs/Web/API/AbortController, \" +\n        \"https://developer.mozilla.org/docs/Web/API/AbortSignal\"\n}\nexport const JFACTORY_COMPAT_MutationObserver = {\n    name: \"MutationObserver\",\n    test: () => MutationObserver,\n    info: \"https://developer.mozilla.org/docs/Web/API/MutationObserver\"\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n\nlet list = {};\n\nexport function jFactoryCompat_require(...args) {\n    for (let compat of args) {\n        list[compat.name] = compat\n    }\n}\n\nexport function jFactoryCompat_run(){\n    for (let [name, entry] of Object.entries(list)) {\n        let pass;\n        try {pass = Boolean(entry.test())} catch (ignore) {}\n        if (!pass) {\n            console.warn(`jFactory may require the support of \"${name}\", ${entry.info}`)\n        }\n    }\n    list = null;\n}\n\nif (JFACTORY_DEV) {\n    jFactoryCompat_require(JFACTORY_COMPAT_globalThis);\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { JFACTORY_CFG_LOG } from \"./jFactory-env\";\nimport { jFactoryCompat_run } from \"./jFactoryCompat\";\nimport { jFactoryLoader_init } from \"./jFactoryLoader\";\n\nexport function jFactoryBootstrap() {\n    if (JFACTORY_DEV) {\n        console.log(\"jFactory is running in development mode; performances will be affected\");\n        !JFACTORY_CFG_LOG.enabled && console.warn(\"jFactory logs disabled\");\n    }\n    jFactoryLoader_init();\n    if (JFACTORY_DEV) {\n        jFactoryCompat_run()\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { jFactoryLoader_onInit } from \"./jFactoryLoader\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryObject\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Alpha\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryObject {\n\n    static createDescriptors(descriptorPrototype = JFactoryObject.DESCRIPTORS_PROTOTYPE) {\n        let create = JFactoryObject.create(descriptorPrototype, true, true);\n        let o = Object.create(null);\n\n        o.NONE = create();\n\n        o.WRITABLE     = create({ writable: true });\n        o.ENUMERABLE   = create({ enumerable: true });\n        o.CONFIGURABLE = create({ configurable: true });\n\n        o.CONFIGURABLE_WRITABLE   =\n        o.WRITABLE_CONFIGURABLE   = create({ writable: true, configurable: true });\n\n        o.CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE = create({ enumerable: true, configurable: true });\n\n        o.ENUMERABLE_WRITABLE     =\n        o.WRITABLE_ENUMERABLE     = create({ writable: true, enumerable: true });\n\n        o.WRITABLE_ENUMERABLE_CONFIGURABLE =\n        o.WRITABLE_CONFIGURABLE_ENUMERABLE =\n        o.ENUMERABLE_CONFIGURABLE_WRITABLE =\n        o.ENUMERABLE_WRITABLE_CONFIGURABLE =\n        o.CONFIGURABLE_WRITABLE_ENUMERABLE =\n        o.CONFIGURABLE_ENUMERABLE_WRITABLE = create({ writable: true, enumerable: true, configurable: true });\n\n        // Shortcuts\n        o.READONLY = create({ writable: false, enumerable: false, configurable: false });\n\n        return o\n    }\n\n    /**\n     * @example\n     * assign(obj, 'myProperty', 123, {writable:false})\n     * assign(obj, {a:1, b:2}', {writable:false})\n     *\n     * deprecated\n     * assign(obj, 'myProperty', {value:\"ok\", writable:false}) => not strict\n     * assign(obj, 'myProperty', 123) => use native instead\n     * assign(obj, {a:1, b:2}) => use native instead\n     */\n    static assign(target, property, value, descriptor) {\n        let descriptors = {};\n\n        switch (typeof property) {\n\n            case \"string\":\n            case \"symbol\":\n\n                // ------------------------------------------------\n                // assign(obj, 'myProperty', 123, {writable:false})\n                // ------------------------------------------------\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                descriptor = Object.create(descriptor); // avoid descriptor corruption\n                descriptor.value = value;\n\n                Object.defineProperty(target, property, descriptor);\n\n                break;\n\n            case \"object\":\n\n                // ------------------------------------------------\n                // assign(obj, {a:1, b:2}', {writable:false})\n                // ------------------------------------------------\n\n                [value, descriptor] = [property, value];\n\n                if (!descriptor) {\n                    throw new Error(\"missing descriptor argument; use Object.assign instead\")\n                }\n\n                for (let name of Object.getOwnPropertyNames(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n                for (let name of Object.getOwnPropertySymbols(value)) {\n                    descriptors[name] = Object.create(descriptor); // avoid descriptor corruption\n                    descriptors[name].value = value[name]\n                }\n\n                Object.defineProperties(target, descriptors);\n\n                break;\n\n            default:\n                throw new Error(\"invalid property argument\")\n        }\n\n        return target\n    }\n\n    static create(prototype, flat = false, disinherit = false) {\n        return function create(properties) {\n            if (flat) {\n                return Object.assign(disinherit ? Object.create(null) : {}, prototype, properties)\n            } else {\n                return Object.assign(Object.create(\n                    disinherit ? Object.assign(Object.create(null), prototype) : prototype\n                ), properties)\n            }\n        }\n    }\n\n    static disinherit(object) {\n        return Object.assign(Object.create(null), object);\n    }\n}\n\nJFactoryObject.DESCRIPTORS_PROTOTYPE = { writable: false, enumerable: false, configurable: false };\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactoryObject\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactoryLoader_onInit(function() {\n    JFactoryObject.descriptors = JFactoryObject.createDescriptors()\n});","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { helper_camelCase } from \"./jFactory-helpers\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { JFactoryObject } from \"./JFactoryObject\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryAbout\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\nexport class JFactoryAbout {\n    constructor(owner, about = {}) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout(owner)\", owner).type(Object);\n            JFactoryExpect(\"JFactoryAbout(about)\", about)\n                .typePlainObject()\n                .reservedProperty(\"uid\")\n                .reservedProperty(\"fingerprint\");\n            if (\"name\" in about) {\n                JFactoryExpect(\"JFactoryAbout(about.name)\", about.name)\n                    .typeString()\n                    .notEmptyString()\n            }\n        }\n\n        let name;\n        let fingerprint;\n        let uid = moduleGenId();\n\n        if (about.name) {\n            name = about.name;\n            delete about.name;\n            fingerprint = \"jFactory\" + \"_\" + helper_camelCase(name.toLowerCase()) + \"_\" + uid\n        } else {\n            delete about.name;\n            name = `[${owner.constructor.name}#${uid}]`;\n            fingerprint = \"jFactory\" + \"_\" + owner.constructor.name + \"_\" + uid;\n        }\n\n        JFactoryObject.assign(this, /** @lends JFactoryAbout# */ {\n            uid,\n            name,\n            fingerprint\n        }, JFactoryObject.descriptors.ENUMERABLE);\n\n        Object.assign(this, about);\n\n        // ---\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryAbout.name\", this.name)\n                .matchReg(/^[\\w[\\]#]+$/);\n            JFactoryExpect(\"JFactoryAbout.fingerprint\", this.fingerprint)\n                .matchReg(/^[\\w]+$/);\n        }\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { JFACTORY_ERR_INVALID_CALL, JFACTORY_ERR_PROMISE_EXPIRED } from \"./JFactoryError\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { jFactoryTrace } from \"./JFactoryTrace\";\nimport { helper_isNative, helper_Deferred } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromise 1.7\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\n// #limitation# async functions always use the native Promise constructor even if native Promise class is overridden\n// #limitation# async functions always returns a native Promise even if returning an extended Promise\n// #limitation# async functions always returns a pending Promise even if returning a resolved Promise\n\nconst moduleGenId = () => ++moduleGenId.uid; moduleGenId.uid = 0;\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromise\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromise extends Promise {\n\n    constructor({ name, config, traceSource }, executor) {\n\n        if (arguments.length === 1) {\n            [name, config, executor] = [null, null, arguments[0]]\n        }\n\n        const chainId = moduleGenId();\n        config = { ...JFactoryPromise.DEFAULT_CONFIG, ...config };\n        name = name || \"unnamed\";\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"name\", name)\n                .type(String, Number)\n                .matchReg(/^[^. ]+$/);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"executor\", executor).typeFunction();\n        }\n\n        let resolve;\n        let reject;\n\n        super((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n\n        const chain = new JFactoryPromiseChain(this, chainId, name, config);\n\n        Object.defineProperties(this, {\n            $chain: {\n                enumerable: true,\n                writable: true,\n                value: chain\n            },\n            $type: {\n                writable: true,\n                value: \"promise\"\n            },\n            $value: {\n                writable: true,\n                value: undefined\n            },\n            $isSettled: {\n                writable: true,\n                value: false\n            },\n            $isRejected: {\n                writable: true,\n                value: null\n            },\n            $isFulfilled: {\n                writable: true,\n                value: null\n            },\n            $isExpired: {\n                writable: true,\n                value: false\n            },\n            $isAborted: {\n                writable: true,\n                value: false\n            }\n        });\n\n        if (JFACTORY_DEV) {\n            Object.defineProperties(this, {\n                $dev_name: {\n                    configurable: true,\n                    value: name + \"[\" + chainId + \":0]\"\n                },\n                $dev_path: {\n                    writable: true,\n                    value: new JFactoryPromisePath(this)\n                },\n                $dev_position: {\n                    writable: true,\n                    value: 0\n                }\n            });\n            if (!helper_isNative(executor)) {\n                Object.defineProperties(this, {\n                    $dev_source: {\n                        value: executor\n                    }\n                });\n            }\n            jFactoryTrace.tracer.attachTrace(this, traceSource);\n        }\n\n        const tryAutoComplete = () => {\n            if (!this.$chain.isPending) {\n                try {\n                    this.$chainComplete(\"auto-completed\");\n                } catch (e) {\n                    // Case of error in \"complete\" callback\n                    // We catch the exception because the promise is already fulfilled\n                    // Furthermore this issue must be handled by the chain, not the current promise\n                    console.error(e) // print the error otherwise nothing happens\n                }\n            }\n        };\n\n        const onResolve = value => {\n            // console.trace(\"onResolve\", this.$dev_name);\n            if (!this.$isSettled) {\n                // 2.3.1. If promise and x refer to the same object, reject promise with a TypeError as the reason.\n                if (value === this) {\n                    onReject(new TypeError(\"Chaining cycle detected for promise \" + this.$dev_name));\n                    return;\n                }\n\n                let then;\n                if (value !== null && (typeof value == \"object\" || typeof value == \"function\")) {\n                    // 2.3.3.2. If retrieving the property x.then results in a thrown exception e,\n                    // reject promise with e as the reason.\n                    try {\n                        then = value.then;\n                    } catch (e) {\n                        onReject(e);\n                        return;\n                    }\n                }\n\n                if (typeof then == \"function\") {\n                    let called = false;\n                    let resolvePromise = function(y) {\n                        // 2.3.3.3.1. If/when resolvePromise is called with a value y, run [[Resolve]](promise, y).\n                        if (!called) {\n                            called = true;\n                            onResolve(y);\n                        }\n                    };\n                    let rejectPromise = function(r) {\n                        // 2.3.3.3.2. If/when rejectPromise is called with a reason r, reject promise with r.\n                        if (!called) {\n                            called = true;\n                            onReject(r);\n                        }\n                    };\n\n                    try {\n                        // 2.3.3.3: If `then` is a function, call it as x.then(resolvePromise, rejectPromise)\n                        then.call(value, resolvePromise, rejectPromise);\n                    } catch (e) { // 2.3.3.3.4. If calling then throws an exception e,\n                        // 2.3.3.3.4.1. If resolvePromise or rejectPromise have been called, ignore it.\n                        if (!called) {\n                            // 2.3.3.3.4.2. Otherwise, reject promise with e as the reason.\n                            onReject(e);\n                        }\n                    }\n                }\n                else {\n                    this.$isRejected = false;\n                    this.$isFulfilled = true;\n                    if (this.$isExpired) {\n                        value = this.$chain.errorExpired;\n                    }\n                    resolve(value);\n                    onSettle(value)\n                }\n            }\n        };\n\n        const onReject = reason => {\n            // console.log(\"onReject\", this.$dev_name);\n            if (!this.$isSettled) {\n                this.$isRejected = true;\n                this.$isFulfilled = false;\n                reject(reason);\n                onSettle(reason)\n            }\n        };\n\n        const onSettle = value => {\n            this.$value = value;\n            this.$isSettled = true;\n            this.$chain.chainMap.set(this, true);\n\n            if (this.$chain.chainConfig.chainAutoComplete) {\n                if (this.$chain.chainMap.size === 1 && !this.$isExpired) {\n                    // ensures that tryAutoComplete() will be called asynchronously (then() callback is asynchronous)\n                    // case of promise.resolve(primitive), prevents following then() from being immediately locked\n                    this.then(tryAutoComplete)\n                } else {\n                    tryAutoComplete()\n                }\n            }\n        };\n\n        let _chainAutoComplete = config.chainAutoComplete;\n        Object.defineProperty(config, \"chainAutoComplete\", {\n            get: () => _chainAutoComplete,\n            set: value => {\n                if (_chainAutoComplete !== value) {\n                    _chainAutoComplete = value;\n                    if (value) {\n                        tryAutoComplete()\n                    }\n                }\n            }\n        });\n\n        chain.chainMap.set(this, false);\n\n        Object.defineProperties(this, {\n            __resolve__: {\n                value: onResolve\n            },\n            __reject__: {\n                value: onReject\n            }\n        });\n\n        try {\n            executor(onResolve, onReject);\n        } catch (e) {\n            // console.error(\"exception in executor\", this.$dev_name);\n            onReject(e)\n        }\n    }\n\n    then(onFulfilled, onRejected, forceType) {\n        let wrappedFulfilled;\n        let wrappedRejected;\n        let newPromise;\n\n        // Caution: \"await\" detection is not reliable.\n        // Passing native functions for both onFulfilled and onRejected will\n        // result to \"await\" type and may cause side effects\n        let type = forceType || (\n            helper_isNative(onFulfilled) && !onFulfilled.name.startsWith(\"bound \") &&\n            helper_isNative(onRejected) && !onRejected.name.startsWith(\"bound \")\n                ? \"await\" : onFulfilled === undefined ? \"catch\" : \"then\"\n        );\n\n        if (onFulfilled && typeof onFulfilled === \"function\") {\n            wrappedFulfilled = function(r) {\n                // \"await\" must always run the native handler\n                if (type === \"await\") {\n                    // SPEC: \"await\" throws the errorExpired if $isAborted is true.\n                    // Allows async function to try catch the awaited aborted promise\n                    // or, if not caught, breaks and ignore the rest of the async function.\n                    if (newPromise.$isAborted) {\n                        return onRejected(newPromise.$chain.errorExpired)\n                    } else {\n                        return onFulfilled(r)\n                    }\n                }\n                // otherwise don't call the handler if expired\n                if (!newPromise.$isExpired) {\n                    if (newPromise.$isSettled) {\n                        // eslint-disable-next-line no-debugger\n                        debugger\n                    }\n                    return onFulfilled(r)\n                }\n            }\n        }\n        if (onRejected && typeof onRejected === \"function\") {\n            wrappedRejected = function(r) {\n                if (newPromise.$isSettled) {\n                    // eslint-disable-next-line no-debugger\n                    debugger\n                }\n                return onRejected(r)\n            }\n        }\n\n        newPromise = Object.assign(super.then(wrappedFulfilled, wrappedRejected), this);\n        moduleGenId.uid--; // reverse because not a new chain\n        newPromise.$type = type;\n\n        Object.defineProperties(newPromise, {\n            __onFulfilled__: { value: onFulfilled },\n            __onRejected__: { value: onRejected }\n        });\n\n        if (JFACTORY_DEV) {\n            newPromise.$dev_position = this.$chain.chainMap.size;\n            let fNames = \"\";\n            if (onFulfilled && onFulfilled.name) {\n                fNames += onFulfilled.name\n            }\n            if (onRejected && onRejected.name) {\n                fNames += \",\" + onRejected.name\n            }\n            Object.defineProperties(newPromise, {\n                $dev_name: {\n                    value:\n                        this.$chain.chainName\n                        + \"[\"\n                        + this.$chain.chainId\n                        + \":\"\n                        + this.$dev_position\n                        + \"]\"\n                        + \".\"\n                        + newPromise.$type\n                        + (fNames ? \"(\" + fNames + \")\" : \"\")\n                        + \"[\"\n                        + newPromise.$chain.chainId\n                        + \":\"\n                        + newPromise.$dev_position\n                        + \"]\"\n                },\n                $dev_path: { value: new JFactoryPromisePath(this.$dev_path, newPromise) }\n            });\n        }\n\n        newPromise.$chain.chainMap.set(newPromise, false);\n\n        if (this.$isExpired) {\n            // case: p0.then(); chainAbort(); p1.then()\n            // => the new promise must be expired\n            // if parent promise is just expired, abort silently\n            // if parent promise is aborted, abort explicitly\n\n            // JFactoryPromise.setExpired(newPromise, true, !this.$isAborted, this.$chain.errorExpired);\n            JFactoryPromise.setExpired(newPromise, this.$isAborted, true);\n        }\n\n        return newPromise\n    }\n\n    static resolve(optionalArgs, value) {\n        // resolve()\n        // resolve(optionalArgs, value)\n        // resolve(value)\n\n        if (arguments.length === 1) {\n            [optionalArgs, value] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        if (value instanceof this && arguments.length === 1) {\n            // Returns the promise as is (native spec)\n            // but only if no optionalArgs\n            return value\n        } else {\n            return new this(optionalArgs, function(resolve) {\n                resolve(value)\n            });\n        }\n    }\n\n    static reject(optionalArgs, reason) {\n        // reject()\n        // reject(optionalArgs, reason)\n        // reject(reason)\n\n        if (arguments.length === 1) {\n            [optionalArgs, reason] = [{}, optionalArgs]\n        }\n        if (!optionalArgs) {\n            optionalArgs = {}\n        }\n        return new this(optionalArgs, function(resolve, reject) {\n            reject(reason)\n        });\n    }\n\n    // $toPromise(rejectIfExpired = true) {\n    //     return new Promise((resolve, reject) => {\n    //         let promise = this.then(resolve, e => {\n    //             debugger\n    //             reject(e)\n    //         });\n    //         if (rejectIfExpired) {\n    //             promise.$thenIfExpired(reject)\n    //         }\n    //     })\n    // }\n\n    // $toNewChain(abortIfExpired = true) {\n    //     let newChain;\n    //     return newChain = new JFactoryPromise((resolve, reject) => {\n    //         let promise = this.then(resolve, e => {\n    //             debugger\n    //             reject(e)\n    //         });\n    //         if (abortIfExpired) {\n    //             promise.$thenIfExpired(function(e){\n    //                 newChain.$chainAbort(e)\n    //             })\n    //         }\n    //     });\n    // }\n\n    // A \"then\" where the handler is called only if the chain is expired\n    // it's not a catch (a catchExpired concept should cancel the expiration)\n    $thenIfExpired(onExpired) {\n        return this.then(r => this.$chain.chainRoot.$isExpired ? onExpired(r) : r,\n            undefined, \"$thenIfExpired\"\n        )\n    }\n\n    // Completes an expires the whole chain before its normal end\n    // Sets the $isAborted to true on aborted promises\n    $chainAbort(reason = \"$chainAbort()\") {\n        this.$chain.complete(reason, true);\n        return this\n    }\n\n    // Manually completes and expires the whole chain\n    // Only required if awaiting \"myPromise.$chain\"\n    // when the autocomplete watcher is not used\n    $chainComplete(reason = \"$chainComplete()\") {\n        if (this.$chain.isPending) {\n            throw new JFACTORY_ERR_INVALID_CALL({\n                target: this,\n                reason: \"Trying to complete a pending chain. Use $chainAbort() if you want to stop it.\"\n            });\n        }\n        this.$chain.complete(reason, false);\n        return this\n    }\n\n    $chainAutoComplete() {\n        this.$chain.chainConfig.chainAutoComplete = true;\n        return this\n    }\n\n    static setExpired(promise, abort, silent /*, reason*/) {\n        promise.$isExpired = true;\n        if (!promise.$isSettled) {\n            if (promise.$type === \"$thenIfExpired\") {\n                promise.__onFulfilled__(promise.$chain.chainRoot.$chain.errorExpired)\n            }\n            else if (abort) {\n                promise.$isAborted = true;/*!silent;*/\n            } else {\n                if (!silent) {\n                    throw new JFACTORY_ERR_INVALID_CALL({\n                        target: promise,\n                        reason: \"promise must be aborted or settled before setting it to expired.\"\n                    })\n                }\n            }\n            promise.__resolve__(/*reason*/);\n        }\n    }\n}\n\nJFactoryPromise.DEFAULT_CONFIG = {\n    chainAutoComplete: false\n};\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromiseChain\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromiseChain {\n\n    constructor(chainRoot, chainId, chainName, chainConfig) {\n        Object.defineProperties(this, {\n            chainConfig: { value: chainConfig },\n            chainRoot: { value: chainRoot },\n            chainId: { value: chainId },\n            chainName: { value: chainName },\n            chainMap: { value: new Map },\n            isCompleted: { value: false, configurable: true },\n            data: { value: {} },\n            __deferred__: { value: helper_Deferred() }\n        })\n    }\n\n    get isPending() {\n        return Array.from(this.chainMap.values()).includes(false)\n    }\n\n    then(onResolve) { // => \"await chain\"\n        this.__deferred__.done(onResolve);\n        return this\n    }\n\n    complete(reason = \"chain.complete()\", abort) {\n        let chainRoot = this.chainRoot;\n        if (!chainRoot.$isExpired) {\n            /*let errorExpired = */chainRoot.$chain.errorExpired = new JFACTORY_ERR_PROMISE_EXPIRED({\n                target: chainRoot,\n                reason\n            });\n\n            let map = this.chainMap;\n            for (let item of map.keys()) {\n                JFactoryPromise.setExpired(item, abort/*, false, errorExpired*/);\n            }\n\n            Object.defineProperty(this, \"isCompleted\", { value: true });\n            this.__deferred__.resolve();\n        }\n        return this\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromisePath\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromisePath extends Array {\n\n    constructor() {\n        super();\n        for (let i of arguments) {\n            if (Array.isArray(i)) {\n                this.push(...i)\n            } else {\n                this.push(i)\n            }\n        }\n    }\n\n    get printable() {\n        return this.map((v, i) => i === 0 ? v.$dev_name : v.$dev_name.split(\".\")[1]).join(\".\")\n    }\n\n    toString() {return this.printable}\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryPromiseSync\n// ---------------------------------------------------------------------------------------------------------------------\n// Promise that tries to resolve synchronously\n// allowing synchronous states and result\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryPromiseSync extends Promise {\n\n    constructor(executor) {\n\n        let states = {\n            $isSettled: false, // true = not pending\n            $isRejected: null, // true = not pending + rejected\n            $value: undefined\n        };\n\n        super((resolve, reject) => {\n\n            let called = false;\n\n            let onResolve = r => {\n                if (r instanceof Promise) {\n                    JFactoryPromiseSync.resolve(r)\n                        .then(onResolve, onReject)\n                } else {\n                    if (!called) {\n                        called = true;\n                        states.$isSettled = true;\n                        states.$isRejected = false;\n                        states.$value = r;\n                        resolve(r)\n                    }\n                }\n            };\n\n            let onReject = r => {\n                // don't resolve pending promise\n                // to keep native specification\n                if (!called) {\n                    called = true;\n                    states.$isSettled = true;\n                    states.$isRejected = true;\n                    states.$value = r;\n                    reject(r)\n                }\n            };\n\n            try {\n                executor(onResolve, onReject)\n            } catch (e) {\n                onReject(e)\n            }\n        });\n\n        Object.assign(this, states);\n        states = this\n    }\n\n    then(onFulfilled, onRejected) {\n\n        if (this.$isSettled) {\n            let value = this.$value;\n\n            try {\n                if (this.$isRejected) {\n                    // cancel any uncaught rejected result from this promise\n                    // before returning the new one\n                    super.then(undefined, () => null);\n\n                    if (onRejected && typeof onRejected === \"function\") {\n                        value = onRejected(value)\n                    } else {\n                        return JFactoryPromiseSync.reject(value)\n                    }\n                } else {\n                    if (onFulfilled && typeof onFulfilled === \"function\") {\n                        value = onFulfilled(value)\n                    }\n                }\n            } catch (e) {\n                return JFactoryPromiseSync.reject(e)\n            }\n\n            return JFactoryPromiseSync.resolve(value)\n\n        } else {\n            return super.then(onFulfilled, onRejected)\n        }\n    }\n\n    static resolve(value) {\n        if (value instanceof JFactoryPromiseSync) {\n            return value\n        } else {\n            if (value instanceof Promise) {\n                return new JFactoryPromiseSync(value.then.bind(value))\n            } else {\n                return new JFactoryPromiseSync(r => r(value))\n            }\n        }\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { JFACTORY_ERR_INVALID_VALUE } from \"./JFactoryError\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { JFactoryPromiseSync } from \"./JFactoryPromise\";\nimport { JFactoryFunctionComposer } from \"./JFactoryFunction\";\nimport { jQuery, helper_isPlainObject } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryEvents\n// ---------------------------------------------------------------------------------------------------------------------\n// https://learn.jquery.com/events/event-extensions/\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEvents {\n    // -----------------------------------------------------------------------------------------------------------------\n    // jQuery doesn't handle async trigger so jFactory provides the following :\n    //\n    // - triggerParallel(): the trigger function returns a Promise.all(pendingArray)\n    //   where pendingArray is filled by any async running handler.\n    //   Not recommended because it's the best way to produce unpredictable async side effects\n    //\n    // - triggerSeries(): handlers are run in a synchronous order, with \"await\"\n    //   This avoids unpredictable async race condition\n    //\n    //  Both returns a JFactoryPromiseSync that contains the jFactory_fulfilled flag\n    //  This flag is immediately (not async) set to true if no async handler is still pending\n    //\n    // => handlers are wrapped. OriginalHandlers and wrappedHandlers relations are stored in a WeakMap\n    // -----------------------------------------------------------------------------------------------------------------\n\n    constructor() {\n        Object.defineProperties(this, /** @lends JFactoryEvents# */ {\n            registry: { value: jQuery(Object.create(null)) },\n            handlers: { value: new WeakMap },\n            onListenerUpdate: { value: null, writable: true },\n            onObserverUpdate: { value: null, writable: true }\n        });\n    }\n\n    on({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            JFactoryExpect(\"JFactoryEvents.on({handler})\", handler).typeFunction();\n            target && JFactoryExpect(\"JFactoryEvents.on({target})\", target).type(String, jQuery, HTMLElement);\n            selector && JFactoryExpect(\"JFactoryEvents.on({selector})\", target).typeString();\n        }\n\n        let wrappedHandler = this.handlers.get(handler);\n        if (target) {\n            // don't need to wrap DOM handlers\n            if (!wrappedHandler) {\n                this.handlers.set(handler, true);\n            }\n            if (selector) {\n                jQuery(target).on(events, selector, handler);\n            } else {\n                jQuery(target).on(events, handler);\n            }\n            if (this.onListenerUpdate) {\n                this.onListenerUpdate(arguments)\n            }\n        } else {\n            if (!wrappedHandler) {\n                this.handlers.set(handler, wrappedHandler = function(e, { data, stack }) {\n                    stack.push(() => handler(e, data))\n                });\n                wrappedHandler.originalHandler = handler;\n            }\n            this.registry.on(events, wrappedHandler);\n            if (this.onObserverUpdate) {\n                this.onObserverUpdate(arguments)\n            }\n        }\n    }\n\n    off({ events, handler, target, selector }) {\n        if (JFACTORY_DEV) {\n            if (events !== undefined) { // off() is valid\n                JFactoryEvents.validateSelector(events);\n                handler && JFactoryExpect(\"JFactoryEvents.off({handler})\", handler).typeFunction();\n                target && JFactoryExpect(\"JFactoryEvents.off({target})\", target).type(String, jQuery, HTMLElement);\n                selector && JFactoryExpect(\"JFactoryEvents.off({selector})\", target).typeString();\n            }\n        }\n\n        if (target) {\n            if (selector) {\n                jQuery(target).off(events, selector, handler)\n            } else {\n                jQuery(target).off(events, handler)\n            }\n        } else {\n            jQuery(\"*\").off(events, handler);\n\n            if (handler) {\n                handler = this.handlers.get(handler);\n                if (!handler) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"handler\",\n                        reason: \"not registered\",\n                        given: handler\n                    })\n                }\n            }\n            this.registry.off(events, handler);\n        }\n        if (this.onObserverUpdate) {\n            this.onObserverUpdate(arguments)\n        }\n        if (this.onListenerUpdate) {\n            this.onListenerUpdate(arguments)\n        }\n    }\n\n    /**\n     * Run in parallel. Don't \"await\" for async handlers\n     * Obviously produces unpredictable race conditions\n     */\n    triggerParallel({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target\n                && JFactoryExpect(\"JFactoryEvents.triggerParallel({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        const stack = [];\n        const pending = [];\n        events = events.split(\" \");\n\n        if (target) {\n            for (let event of events) {\n                jQuery(target).trigger(event, { data, stack });\n            }\n        } else {\n            for (let event of events) {\n                this.registry.triggerHandler(event, { data, stack })\n            }\n        }\n\n        for (let handler of stack) {\n            let result = handler();\n            if (result instanceof Promise\n                && !result.$isSettled // don't need to await\n            ) {\n                pending.push(result)\n            }\n        }\n\n        if (pending.length) {\n            return Promise.all(pending)\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n\n    /**\n     * Run in declaration order synchronously. Will \"await\" for async handlers\n     * Prevents unpredictable race conditions\n     */\n    triggerSeries({ events, data, target }) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(events);\n            target && JFactoryExpect(\"JFactoryEvents.triggerSeries({target})\", target).type(String, jQuery, HTMLElement)\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n            const stack = [];\n            events = events.split(\" \");\n\n            if (target) {\n                for (let event of events) {\n                    jQuery(target).trigger(event, { data, stack });\n                }\n            } else {\n                for (let event of events) {\n                    this.registry.triggerHandler(event, { data, stack })\n                }\n            }\n\n            for (let handler of stack) {\n                let result = handler();\n                if (result instanceof Promise\n                    && !result.$isSettled // don't need to await\n                ) {\n                    await result\n                }\n            }\n            resolve()\n        })\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventsManager extends JFactoryEvents {\n    constructor(parent) {\n        super();\n        Object.defineProperties(this, {\n            parent: { value: parent },\n            affiliateRules: { value: new JFactoryFunctionComposer().compose() }\n        });\n        this.affiliateAddRule(JFactoryEventsManager.rule_namespace)\n    }\n\n    affiliate(events = \"\", namespaces = \"\", options) {\n        let parser = new JFactoryEventSelectorParser(events);\n        for (let parsedEvent of parser.events) {\n            this.affiliateRules(parsedEvent, namespaces, options)\n        }\n        return parser.toString();\n    }\n\n    affiliateAddRule(handler) {\n        this.affiliateRules.composer.last(handler)\n    }\n\n    static rule_namespace(context, parsedEvent, namespaces) {\n        namespaces = namespaces.split(\".\");\n        for (let namespace of namespaces) {\n            namespace && parsedEvent.addNamespace(namespace);\n        }\n    }\n\n    on(events, target, selector, handler, options) {\n        // Observers:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        switch (arguments.length) {\n            case 2:\n                // events, handler\n                [handler, target] = [target/*, undefined*/];\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        target === undefined ?\n            super.on({ events, handler }) :\n            super.on({ events, target, selector, handler/*, options*/ })\n    }\n\n    off(events, target, selector, handler, options) {\n        // Both:\n        // events (can be namespaces)\n        // events, options\n        // options (can be removal)\n\n        // Observer:\n        // events, handler\n        // events, handler, options\n\n        // DOM Events:\n        // events, target, handler\n        // events, target, handler, options\n        // events, target, selector\n        // events, target, selector, handler,\n        // events, target, selector, handler, options\n\n        const argL = arguments.length;\n        switch (argL) {\n            case 1:\n                if (typeof arguments[0] === \"object\") {\n                    // options\n                    [options, events] = [events/*, undefined*/];\n                }\n                // else events (can namespaces)\n                break;\n            case 2:\n                if (typeof arguments[1] === \"function\") {\n                    // events, handler\n                    [handler, target] = [target/*, undefined*/];\n                } else if (helper_isPlainObject(arguments[1])) {\n                    // events, options\n                    [options, target] = [target/*, undefined*/]\n                }\n                // else events, target\n                break;\n            case 3:\n                if (typeof arguments[2] === \"function\") {\n                    // events, target, handler\n                    [handler, selector] = [selector/*, undefined*/];\n                } else if (typeof arguments[1] === \"function\") {\n                    // events, handler, options\n                    [handler, options, target, selector] = [target, selector/*, undefined, undefined*/];\n                } else {\n                    // events, target, selector\n                }\n                break;\n            case 4:\n                if (typeof arguments[3] === \"object\") {\n                    // events, target, handler, options\n                    [options, handler, selector] = [handler, selector/*, undefined*/];\n                }\n                break;\n        }\n\n        events = this.affiliate(events, this.parent.$.about.fingerprint, options);\n\n        if (argL < 2) {\n            super.off({ events });\n        } else {\n            target ?\n                super.off({ events, target, selector, handler/*, options*/ }) :\n                super.off({ events, handler })\n        }\n    }\n\n    trigger(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerSeries({ events, target, data }) :\n            super.triggerSeries({ events, data })\n    }\n\n    triggerParallel(events, target, data) {\n        // events\n        // events, target\n        // events, data\n        // events, target, data\n\n        switch (arguments.length) {\n            case 2:\n                if (typeof target === \"object\" && !target.jquery) {\n                    // events, data\n                    [data, target] = [target]\n                }\n                // events, target\n                break\n        }\n\n        return target ?\n            super.triggerParallel({ events, target, data }) :\n            super.triggerParallel({ events, data })\n    }\n\n    // #unoptimized draft#\n    // It's not easy to keep this list up to date because:\n    // - listeners can be removed by external dom mutations\n    // - listeners can be delegated\n    // - off() method can remove listeners globally\n    getDomListeners(namespace) {\n        let result = new Map();\n        for (let elm of jQuery(\"*\")) {\n            let data = jQuery._data(elm, \"events\");\n            if (data) {// data = {click: [{}], ... }\n                for (let entries of Object.values(data)) {// entries = [{type:...}]\n                    for (let entry of entries) {// entry = {type, namespace, handler, ...}\n                        let parser = new JFactoryEventSelector(entry.namespace);\n                        let types;\n                        if (parser.hasNamespace(namespace)) {\n                            if (!(types = result.get(elm))) {\n                                result.set(elm, types = {})\n                            }\n                            let type = types[entry.type] || (types[entry.type] = []);\n                            type.push({\n                                // ...entry,\n                                selector: entry.selector || null,\n                                handler: entry.handler,\n                                namespace: entry.namespace\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return result\n    }\n\n    // #unoptimized draft#\n    getObservers() {\n        let result = new Map();\n        let events = this.registry._events;\n\n        if (!events) {\n            let registry = Object.values(this.registry)[0];\n            let expando = Object.getOwnPropertyNames(registry).find(k => k.indexOf(\"jQuery\") === 0);\n            if (registry && expando) {\n                events = this.registry._events = registry[expando].events;\n            }\n        }\n\n        if (events) {\n            for (let [key, val] of Object.entries(events)) {\n                let event = result.get(key);\n                if (!event) {\n                    event = [];\n                    result.set(key, event);\n                }\n                for (let eventTypeEntry of val) {\n                    event.push({\n                        handler: eventTypeEntry.handler.originalHandler,\n                        namespace: eventTypeEntry.namespace\n                    })\n                }\n            }\n        }\n\n        return result\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryEventSelectorParser {\n    constructor(selectors) {\n        if (JFACTORY_DEV) {\n            JFactoryEvents.validateSelector(selectors);\n        }\n        /**\n         * @type Array<JFactoryEventSelector>\n         */\n        this.events = selectors.split(\" \").map(selector => new JFactoryEventSelector(selector))\n    }\n\n    toString() {\n        let s = [];\n        for (let event of this.events) {\n            s.push(event.toString())\n        }\n        return s.join(\" \")\n    }\n}\n\nexport class JFactoryEventSelector {\n    constructor(selector) {\n        let [event, ...namespace] = selector.split(\".\");\n        this.event = event;\n        this.namespace = new Set(namespace)\n    }\n\n    /** @return {Boolean|String} */\n    hasNamespace(namespaces) {\n        if (!Array.isArray(namespaces)) {\n            namespaces = [namespaces]\n        }\n        for (let namespace of namespaces) {\n            if (JFACTORY_DEV) {\n                if (!/^[\\w:]+$/.test(namespace)) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"namespace\",\n                        reason: \"must be alphanumeric, underscore and colon characters\",\n                        given: namespace\n                    })\n                }\n            }\n            if (namespace && this.namespace.has(namespace)) {\n                return namespace\n            }\n        }\n        return false\n    }\n\n    addNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new JFACTORY_ERR_INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.add(namespace)\n    }\n\n    deleteNamespace(namespace) {\n        if (JFACTORY_DEV) {\n            if (!/^[\\w:]+$/.test(namespace)) {\n                throw new JFACTORY_ERR_INVALID_VALUE({\n                    target: \"namespace\",\n                    reason: \"must be alphanumeric, underscore and colon characters\",\n                    given: namespace\n                })\n            }\n        }\n        this.namespace.delete(namespace)\n    }\n\n    toString() {\n        return this.namespace.size ? this.event + \".\" + Array.from(this.namespace.values()).join(\".\") : this.event;\n    }\n}\n\n// -----------------------------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------------------------\n\nif (JFACTORY_DEV) {\n    JFactoryEvents.validateSelector = function(selector) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateSelector(selector)\", selector)\n                .notUndefined()\n                .validSpaces();\n        }\n\n        for (let [event, ns] of selector.split(\" \")\n            .map(v => v.split(\".\"))\n            .map(v => [v.shift(), v.join(\".\")])) {\n            event && JFactoryEvents.validateEvent(event);\n            ns && JFactoryEvents.validateNamespace(ns);\n        }\n        return true\n    };\n\n    JFactoryEvents.validateEvent = function(event) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateEvent(event)\", event)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:]+$/.test(event)) {\n            throw new JFACTORY_ERR_INVALID_VALUE({\n                target: \"JFactoryEvents.validateEvent(event)\",\n                reason: \"must be alphanumeric, underscore and colon characters\",\n                given: event\n            })\n        }\n\n        return true\n    };\n\n    JFactoryEvents.validateNamespace = function(namespace) { // ex: ns.ns2.ns3\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryEvents.validateNamespace(namespace)\", namespace)\n                .notUndefined()\n                .notEmptyString()\n                .validSpaces();\n        }\n\n        if (!/^[\\w:.]+$/.test(namespace)) {\n            throw new JFACTORY_ERR_INVALID_VALUE({\n                target: \"JFactoryEvents.validateNamespace(namespace)\",\n                reason: \"must be alphanumeric, underscore, dot and colon characters\",\n                given: namespace\n            })\n        }\n\n        return true\n    };\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_ERR_REQUEST_ERROR } from \"./JFactoryError\";\nimport { JFactoryPromise } from \"./JFactoryPromise\";\nimport {\n    JFACTORY_COMPAT_AbortController,\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    jFactoryCompat_require\n} from \"./jFactoryCompat.mjs\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryFetch\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryFetch extends JFactoryPromise {\n\n    constructor(optionalArgs, url, fetchOptions = {}) {\n        if (typeof optionalArgs === \"function\") {\n            super(optionalArgs);\n        } else {\n            if (typeof optionalArgs === \"string\") {\n                [optionalArgs, url, fetchOptions] = [{}, arguments[0], arguments[1]]\n            }\n\n            let fetchRequest = new Request(url, fetchOptions);\n\n            super(optionalArgs, (resolve, reject) => {\n                let promise = fetch(fetchRequest)\n                    .then(response => {\n                        this.$chain.fetchResponse = response;\n                        if (!response.ok) {\n                            throw Error(response.status + \":\" + response.statusText);\n                        }\n                        return response\n                    });\n\n                if (fetchOptions.$typeText) {\n                    promise = promise\n                        .then(response => response.text())\n                        .then(r => this.$chain.responseText = r);\n                }\n                else if (fetchOptions.$typeJSON) {\n                    promise = promise\n                        .then(response => response.json())\n                        .then(r => this.$chain.responseJSON = r);\n                }\n\n                promise = promise.catch(reason => {\n                    throw new JFACTORY_ERR_REQUEST_ERROR({\n                        reason: reason.message || reason,\n                        target: this.$chain.fetchResponse && this.$chain.fetchResponse.url || url,\n                        owner: this,\n                        fetchOptions,\n                        fetchRequest,\n                        fetchResponse: this.$chain.fetchResponse || null\n                    }, optionalArgs.traceSource)\n                });\n\n                promise.then(resolve, reject)\n            });\n\n            this.$chain.fetchOptions = fetchOptions;\n            this.$chain.fetchRequest = fetchRequest;\n\n            let abortCtrl = fetchOptions.abortController || new AbortController();\n            fetchOptions.signal = abortCtrl.signal;\n            this.$chain.fetchAbortController = abortCtrl;\n        }\n    }\n\n    $chainAbort(reason = \"request aborted\") {\n        super.$chainAbort(reason);\n        this.$chain.fetchAbortController.abort();\n        return this\n    }\n}\n\njFactoryCompat_require(\n    JFACTORY_COMPAT_fetch,\n    JFACTORY_COMPAT_Request,\n    JFACTORY_COMPAT_AbortController\n);","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\nimport { JFACTORY_DEV, JFACTORY_CLI } from \"./jFactory-env\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { jFactoryFunctionConditional } from \"./JFactoryFunction\";\nimport { helper_defaultsDeep, NOOP } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryLogger\n// ---------------------------------------------------------------------------------------------------------------------\n// A contextual logger that prepends a label and allows runtime filtering while preserving the caller line number\n// ---------------------------------------------------------------------------------------------------------------------\n// logger.createSubLogger(label) create a sub-logger of logger; \"logger\" can be a sub-logger.\n// logger.disable() disable console for itself and sub-loggers\n// logger.disallow('log') disallow logger.log() only\n// logger.disallow('log', subLogger.label) disallow sub-logger.log() only. This is callable from any logger/sub-logger\n// ---------------------------------------------------------------------------------------------------------------------\n// Status : Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nconst SYMBOL_ENABLED = Symbol();\n\nexport class JFactoryLogger {\n\n    constructor(options) {\n        if (JFACTORY_DEV && options) {\n            JFactoryExpect(\"JFactoryLogger(options)\", options)\n                .properties(Object.getOwnPropertyNames(JFactoryLogger.DEFAULT_CONFIG))\n        }\n        helper_defaultsDeep(this, options, JFactoryLogger.DEFAULT_CONFIG);\n        this.condition = jFactoryFunctionConditional(JFactoryLogger.DEFAULT_CONDITION);\n        this.installAccessor(\"log\");\n        this.installAccessor(\"warn\");\n        this.installAccessor(\"error\")\n    }\n\n    get enabled() {\n        return this[SYMBOL_ENABLED] && (this.parentLogger ? this.parentLogger.enabled : true)\n    }\n\n    set enabled(v) {\n        v ? this.enable() : this.disable()\n    }\n\n    enable() {\n        if (this[SYMBOL_ENABLED] !== true) {\n            this[SYMBOL_ENABLED] = true;\n        }\n    }\n\n    disable() {\n        if (this[SYMBOL_ENABLED] !== false) {\n            this[SYMBOL_ENABLED] = false;\n        }\n    }\n\n    disallow(nativeName, label = this.label) {\n        if (!this.filters[label]) {this.filters[label] = {}}\n        this.filters[label][nativeName] = true\n    }\n\n    allow(nativeName, label = this.label) {\n        if (this.filters[label]) {\n            delete this.filters[label][nativeName]\n        }\n    }\n\n    installAccessor(nativeName, targetName = nativeName, target = this) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"JFactoryLogger(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        }\n        Object.defineProperties(target, {\n            [targetName]: {\n                get: this.accessor.bind(this, nativeName/*, target*/),\n                configurable: true\n            }\n        })\n    }\n\n    accessor(nativeName/*, target*/) {\n        if (!this[SYMBOL_ENABLED]) {\n            return NOOP;\n        }\n        return this.condition(nativeName) && this.formatter[nativeName](this) || NOOP\n    }\n\n    createSubLogger(label) {\n        /** @type JFactoryLogger */\n        let sub = new JFactoryLogger({\n            enabled: this.enabled,\n            label: this.label + \".\" + label,\n            styles_css: this.styles_css,\n            styles_cli: this.styles_cli,\n            console: this.console,\n            formatter: this.formatter\n        });\n        sub.parentLogger = this;\n        sub.condition.addCondition(() => this.enabled);\n        sub.filters = this.filters; // shared to allow/disallow from anywhere\n        return sub\n    }\n}\n\n// #limitation# To preserve the line number, we can only use native functions, like bind\n// #limitation# Because we use bind(), only the style of the first element can be efficiently defined\n\nJFactoryLogger.FORMATTER_NATIVE = {\n    log: logger => logger.console.log.bind(logger.console, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_CLI = {\n    log: logger => logger.console.log.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    warn: logger => logger.console.warn.bind(logger.console, logger.styles_cli.label, logger.label + \">\"),\n    error: logger => logger.console.error.bind(logger.console, logger.styles_cli.label, logger.label + \">\")\n};\n\nJFactoryLogger.FORMATTER_BROWSER = {\n    log: logger => logger.console.log.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    warn: logger => logger.console.warn.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label),\n    error: logger => logger.console.error.bind(logger.console, \"%c\" + logger.label + \">\", logger.styles_css.label)\n};\n\n/** @return {boolean} */\nJFactoryLogger.DEFAULT_CONDITION = function(nativeName) {\n    if (JFACTORY_DEV) {\n        JFactoryExpect(\"JFactoryLogger.condition(nativeName)\", nativeName).equalIn([\"log\", \"warn\", \"error\"]);\n        JFactoryExpect(\"JFactoryLogger.enabled\", this.enabled).equal(true);\n    }\n    return !(this.filters[this.label] && this.filters[this.label][nativeName])\n};\n\nJFactoryLogger.DEFAULT_CONFIG = /** @lends JFactoryLogger# */ {\n    label: \"\",\n    enabled: true,\n    parentLogger: null,\n    formatter: JFACTORY_CLI ?\n        JFactoryLogger.FORMATTER_CLI :\n        JFactoryLogger.FORMATTER_BROWSER,\n    console,\n    filters: {\n    },\n    styles_cli: {\n        label: \"\\x1b[1;30m%s\\x1b[0m\"\n    },\n    styles_css: {\n        label: \"color: gray\"\n    }\n};","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// JFactoryTime\n// ---------------------------------------------------------------------------------------------------------------------\n// Status: Beta\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class JFactoryTime extends Date {\n    toString() {\n        return this.toLocaleTimeString() + \", \" + this.getUTCMilliseconds() + \"ms (\" + this.valueOf() + \")\"\n    }\n    $toDurationString() {\n        let hours = this.getUTCHours();\n        let minutes = this.getUTCMinutes();\n        let seconds = this.getUTCSeconds();\n        let milliseconds = this.getUTCMilliseconds();\n\n        let a = [];\n        if (hours) {\n            a.push(hours + \"h\")\n        }\n        if (minutes) {\n            a.push(minutes + \"min\")\n        }\n        if (seconds) {\n            a.push(seconds + \"s\")\n        }\n        a.push(milliseconds + \"ms\");\n        if (a.length === 1) {\n            return a[0];\n        } else {\n            return a.join(\",\") + \" (\" + this.valueOf() + \")\";\n        }\n    }\n}\n\nexport class JFactoryTimeTrace extends Date {\n    constructor() {\n        super();\n        this.elapsed = null;\n        Object.defineProperties(this, {\n            t1: { value: null, writable: true },\n            t0: { value: new JFactoryTime() }\n        })\n    }\n    end() {\n        this.t1 = new JFactoryTime();\n        this.elapsed = new JFactoryTime(this.t1 - this.t0).$toDurationString()\n    }\n    toString() {\n        return this.elapsed\n    }\n}","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// TraitCore\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { JFACTORY_DEV, JFACTORY_CFG_LOG } from \"./jFactory-env\";\nimport {\n    JFACTORY_ERR_KEY_DUPLICATED, JFACTORY_ERR_KEY_MISSING,\n    JFACTORY_ERR_PROMISE_EXPIRED, JFactoryError\n} from \"./JFactoryError\";\nimport { jFactory } from \"./jFactory\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { JFactoryAbout } from \"./JFactoryAbout\";\nimport { JFactoryLogger } from \"./JFactoryLogger\";\nimport { JFactoryPromise, JFactoryPromiseSync } from \"./JFactoryPromise\";\nimport { JFactoryEventsManager } from \"./JFactoryEvents\";\nimport { JFactoryObject } from \"./JFactoryObject\";\nimport { JFactoryTimeTrace } from \"./JFactoryTime\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Object\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitCore {\n    trait_constructor() {\n        const owner = this;\n\n        class SubMap extends Map {\n            constructor(...args) {\n                super(...args);\n                Object.defineProperty(this, \"id_autoinc\", { value: 0, writable: true });\n            }\n            $registerSync(key, value) {\n                let sub = Object.defineProperties({}, {\n                    $value: { value },\n                    $phaseRemove: { value: TraitService.getContextualRemovePhase(owner) }\n                });\n                this.set(key, sub);\n                return sub\n            }\n            $registerAsync(key, taskName, promise) {\n                let task = owner.$task(taskName, promise.$chain);\n\n                // End of promise chain must complete the task\n                promise.$chain.then(() => { // synchronous then\n                    task.$chainAutoComplete()\n                });\n\n                // Aborted task must abort the promise if still running\n                task.$chain.then(() => {// synchronous then\n                    if (!promise.$chain.isCompleted) {\n                        promise.$chainAbort(\"aborted by task\")\n                    }\n                });\n\n                Object.defineProperty(promise, \"$phaseRemove\", { value: task.$phaseRemove });\n                this.set(key, promise);\n                return task\n            }\n\n            $id_resolve(str) {\n                if (str.indexOf(\"?\") >= 0) {\n                    let id = ++this.id_autoinc;\n                    str = str.replace(/\\?/g, id)\n                }\n                return str\n            }\n        }\n\n        const proto = Object.assign(Object.create(null), {\n            [TraitCore.SYMBOL_PRIVATE]: Object.create(null),\n            assign: function(property, value, descriptor) {JFactoryObject.assign(this, property, value, descriptor)},\n            createSubMap: () => new SubMap()\n        });\n\n        Object.defineProperty(this, \"$\", { value: Object.create(proto) });\n\n        // pre-define most important properties\n        // to order them first in devtool (reduced form only)\n        this.$.assign({\n            tasks: null,\n            requests: null\n        }, JFactoryObject.descriptors.ENUMERABLE_WRITABLE);\n    }\n}\n\nTraitCore.SYMBOL_PRIVATE = Symbol(\"_\");\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait About\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitAbout {\n\n    trait_constructor(about) {\n        JFactoryObject.assign(this.$, \"about\",\n            new JFactoryAbout(this, about), JFactoryObject.descriptors.READONLY)\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Log\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitLog {\n\n    trait_constructor() {\n        let config = Object.assign({\n            label: this.$.about.name\n        }, JFACTORY_CFG_LOG.enabled || {\n            enabled: false\n        });\n\n        let logger = new JFactoryLogger(config);\n\n        Object.defineProperty(this.$, \"logger\", { value: logger });\n\n        logger.installAccessor(\"log\",   \"$log\",     this);\n        logger.installAccessor(\"warn\",  \"$logWarn\", this);\n        logger.installAccessor(\"error\", \"$logErr\",  this);\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Tasks\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitTask {\n\n    trait_constructor() {\n        this.$.assign(\"tasks\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $task(id, executorOrValue) {\n        id = this.$.tasks.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$task(id)\", id).typeString();\n            JFactoryExpect(\"$task(executorOrValue)\", executorOrValue).notUndefined();\n            if (this.$.tasks.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$task(id)\", given: id })\n            }\n        }\n\n        let task;\n\n        if (typeof executorOrValue === \"function\") {\n            task  = new JFactoryPromise({ name: id, owner: this }, executorOrValue)\n        } else {\n            task = JFactoryPromise.resolve({ name: id, owner: this }, executorOrValue);\n        }\n\n        task.$phaseRemove = TraitService.getContextualRemovePhase(this);\n\n        let metrics;\n        if (JFACTORY_DEV) {\n            metrics = new JFactoryTimeTrace();\n            task.$taskMetrics = { $dev_timing: metrics };\n        }\n\n        task.$chain.then(() => {\n            if (JFACTORY_DEV) {\n                metrics.end();\n            }\n            if (this.$.tasks.get(id)) {\n                this.$taskRemove(id);\n            }\n        });\n\n        this.$.tasks.set(id, task);\n        return task\n    }\n\n    $taskRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$taskRemove(reason)\", reason).typeString();\n            if (!this.$.tasks.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$taskRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger\n            if (this.$.tasks.get(id)._called) {debugger}\n            this.$.tasks.get(id)._called = true\n        }\n\n        let entry = this.$.tasks.get(id);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.tasks.delete(id);\n        entry.$chainAbort(reason || \"$taskRemove()\");\n    }\n\n    $taskRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$taskRemoveAll(removePhase)\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let tasks = this.$.tasks;\n        if (tasks.size) {\n            for (const [key, task] of tasks) {\n                if (task.$phaseRemove === removePhase) {\n                    this.$taskRemove(key, \"$taskRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n\n    $taskPromiseAll(autoComplete = false) {\n        let pending = [];\n        if (this.$.tasks.size) {\n            for (let task of this.$.tasks.values()) {\n                if (autoComplete) {\n                    // resolves the chain as soon as no more pending promise in the chain\n                    task.$chain.chainConfig.chainAutoComplete = true;\n                }\n                // still pending ?\n                if (task.$chain.isPending) {\n                    pending.push(task.$chain)\n                }\n            }\n        }\n        if (pending.length) {\n            return Promise.all(pending);\n        } else {\n            return JFactoryPromiseSync.resolve()\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Events\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitEvents {\n\n    trait_constructor() {\n        assignPrivate(this, \"events\", {\n            custom: new JFactoryEventsManager(this),\n            kernel: new JFactoryEventsManager(this)\n        }, JFactoryObject.descriptors.NONE);\n\n        let eventManager = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n\n        // if (JFACTORY_DEV) { // very slow; requires optimization\n        //     // registry are auto updated in dev mode (unoptimized implementation)\n        //\n        //     let listenerUpdate = () => {\n        //         this.$.listeners = eventManager.getDomListeners(this.$.about.fingerprint);\n        //     };\n        //     let observerUpdate = () => {\n        //         this.$.observers = eventManager.getObservers();\n        //     };\n        //\n        //     eventManager.onListenerUpdate = listenerUpdate;\n        //     eventManager.onObserverUpdate = observerUpdate;\n        //\n        //     let observer = new MutationObserver(listenerUpdate);\n        //     observer.observe(document.documentElement, {childList: true, subtree: true});\n        //\n        //     listenerUpdate();\n        //     observerUpdate();\n        // } else\n        {\n            Object.defineProperties(this.$, {\n                listeners: {\n                    get: eventManager.getDomListeners.bind(eventManager, this.$.about.fingerprint),\n                    enumerable: true\n                },\n                observers: {\n                    get: eventManager.getObservers.bind(eventManager),\n                    enumerable: true\n                }\n            })\n        }\n    }\n\n    $on(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.on(...arguments)\n    }\n\n    $off(/* events, target, selector, handler, options */) {\n        this.$[TraitCore.SYMBOL_PRIVATE].events.custom.off(...arguments)\n    }\n\n    $trigger(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.trigger(...arguments)\n    }\n\n    $triggerParallel(/* events, target, data */) {\n        return this.$[TraitCore.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)\n    }\n\n    $notify(events, data) {\n        return this.$trigger(events, data)\n            .then(() => this.$[TraitCore.SYMBOL_PRIVATE].events.kernel.trigger(events, data))\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait States\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitState {\n\n    trait_constructor() {\n        const states = Object.create(null);\n        const stateRoutes = Object.create(null);\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        assignPrivate(this, { states, stateRoutes }, JFactoryObject.descriptors.READONLY);\n\n        JFactoryObject.assign(this.$, \"states\", new Proxy(states, {\n            set: (target, key, val) => this.$state(key, val),\n            get: (target, key) => states[key]\n        }), JFactoryObject.descriptors.READONLY);\n\n        kernel.on(\"beforeStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].before\n                && (h = stateRoutes[data.key].before(data.val))) {\n                return this.$notify(h);\n            }\n        });\n\n        kernel.on(\"afterStateChange\", (e, data) => {\n            let h;\n            if (stateRoutes[data.key] && stateRoutes[data.key].after\n                && (h = stateRoutes[data.key].after(data.val))) {\n                return this.$notify(h);\n            }\n        });\n    }\n\n    $state(key, val, notify = true) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$state(key)\", key).typeString();\n            JFactoryExpect(\"$state(notify)\", notify).typeBoolean();\n        }\n\n        return new JFactoryPromiseSync(async resolve => {\n\n            let states = this.$[TraitCore.SYMBOL_PRIVATE].states;\n            let previousVal = states[key];\n            let pending;\n\n            if (!(key in states) || previousVal !== val) {\n\n                pending = notify && this.$notify(\"beforeStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"beforeStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n\n                if (pending && !pending.$isSettled) {\n                    states[key] = pending;\n                    await pending;\n                }\n\n                if (val === undefined) {\n                    delete states[key]\n                } else {\n                    states[key] = val;\n                }\n\n                pending = notify && this.$notify(\"afterStateChange\", { key, val, previousVal });\n                if (JFACTORY_DEV) {\n                    pending && JFactoryExpect(\"afterStateChange result\", pending).type(JFactoryPromiseSync);\n                }\n            }\n\n            if (pending) {\n                pending.then(resolve);\n            } else {\n                resolve()\n            }\n        });\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Service\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitService {\n\n    trait_constructor() {\n        /**\n         * @name this.$.service\n         * @type {object}\n         */\n        JFactoryObject.assign(this.$, \"service\", Object.create(null), JFactoryObject.descriptors.READONLY);\n        this.$.service.phase = TraitService.PHASE.NONE;\n        this.$.service.phaseQueue = JFactoryPromise.resolve({ name: \"phaseQueue\" }, null);\n        this.$.service.phaseTask = null;\n        this.$.service.phaseMap = {\n            install: new Set(),\n            enable: new Set(),\n            disable: new Set(),\n            uninstall: new Set()\n        };\n\n        // Set initial states but don't trigger events\n        this.$state(\"installed\", false, false);\n        this.$state(\"enabled\", false, false);\n\n        // Define the events to notify before/after a state change\n        // stateName : {before : eventName, after : eventName}\n\n        // SPEC\n        // stat is changed before calling handlers even if pending\n\n        assignPrivateMember(this, \"stateRoutes\", {\n            installed: { after: val => val ? \"install\" : \"uninstall\" },\n            enabled: { after: val => val ? \"enable\"  : \"disable\" }\n        }, JFactoryObject.descriptors.NONE);\n\n        let custom = this.$[TraitCore.SYMBOL_PRIVATE].events.custom;\n        let kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n\n        // Attach a remove phase namespaces on events\n        custom.affiliateAddRule((context, parsedEvent, namespaces, options) =>\n            TraitService.setEventNamespaceRemovePhase(this, parsedEvent, options)\n        );\n\n        // Attach module event handlers\n\n        /** @name JFactoryCoreObject#onInstall */\n        /** @name JFactoryCoreObject#onEnable */\n        /** @name JFactoryCoreObject#onDisable */\n        /** @name JFactoryCoreObject#onUninstall */\n\n        let phaseResolve = handler => {\n            if (this.$.tasks.size) {\n                this.$taskRemoveAll(this.$.service.phase)\n            }\n            let promise = JFactoryPromiseSync.resolve();\n            if (handler) {\n                promise = promise\n                    .then(() => handler.call(this))\n                    .then(() => this.$taskPromiseAll(true))\n            }\n            return promise\n                .catch(e => {\n                    if (!(/*this.$.service.isPhaseKilling &&*/ e instanceof JFACTORY_ERR_PROMISE_EXPIRED)) {\n                        this.$logErr(\"unhandled promise rejection in \" + this.$.service.phase + \";\",\n                            ...e instanceof JFactoryError ? e : [e])\n                    }\n                });\n        };\n\n        kernel.on(\"install\", () => phaseResolve(this.onInstall));\n        kernel.on(\"enable\", () => phaseResolve(this.onEnable));\n        kernel.on(\"disable\", () => phaseResolve(this.onDisable));\n        kernel.on(\"uninstall\", () => phaseResolve(this.onUninstall));\n\n        kernel.on(\"disable\",   () => this.$off({ removal: TraitService.PHASE.DISABLE }));\n        kernel.on(\"uninstall\", () => this.$off({ removal: TraitService.PHASE.UNINSTALL }));\n    }\n\n    $install(enable) {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"install\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (!this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.INSTALL;\n                    return this.$state(\"installed\", true)\n                }\n            });\n\n        this.$.service.phaseMap.install.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.install.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n\n        // register the enable\n        if (enable) {return this.$enable()}\n        return p\n    }\n\n    $enable() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"enable\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.installed && !this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.ENABLE;\n                    return this.$state(\"enabled\", true)\n                }\n            });\n\n        this.$.service.phaseMap.enable.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.enable.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    $disable() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"disable\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.enabled) {\n                    this.$.service.phase = TraitService.PHASE.DISABLE;\n                    return this.$state(\"enabled\", false)\n                }\n            });\n\n        this.$.service.phaseMap.disable.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.disable.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        // expires all stacked enable\n        for (let [key, val] of this.$.service.phaseMap.enable.entries()) {\n            if (val === this.$.service.phaseTask) {\n                TraitService.phaseKill(this);\n            }\n            val.$chainAbort();\n            this.$.service.phaseMap.enable.delete(key)\n        }\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    $uninstall() {\n        let resolve;\n        const p = new JFactoryPromise(\n            { name: \"uninstall\", config: { chainAutoComplete: true } },\n            _resolve => resolve = _resolve)\n            .then(() => {\n                if (this.$.states.installed) {\n                    this.$.service.phase = TraitService.PHASE.UNINSTALL;\n                    return this.$state(\"installed\", false)\n                }\n            });\n\n        this.$.service.phaseMap.uninstall.add(p);\n        p.$chain.then(() => {\n            this.$.service.phaseTask = null;\n            this.$.service.phaseMap.uninstall.delete(p);\n            this.$.service.phase = TraitService.PHASE.NONE\n        });\n\n        // expires all stacked install\n        for (let [key, val] of this.$.service.phaseMap.install.entries()) {\n            if (val === this.$.service.phaseTask) {\n                TraitService.phaseKill(this);\n            }\n            val.$chainAbort();\n            this.$.service.phaseMap.install.delete(key)\n        }\n\n        // queue disable before uninstall\n        this.$disable();\n\n        this.$.service.phaseQueue = this.$.service.phaseQueue.then(() => {\n            this.$.service.phaseTask = p;\n            resolve();\n            return p.$chain\n        });\n        return p\n    }\n\n    static phaseKill(component) {\n        // component.$.service.isPhaseKilling = true;\n        if (component.$.tasks.size) {\n            component.$taskRemoveAll(TraitService.getContextualRemovePhase(component));\n        }\n        component.$.service.phase = TraitService.PHASE.NONE;\n    }\n\n    static getContextualRemovePhase(jFactoryCoreObject) {\n        return TraitService.PHASE_REVERT[jFactoryCoreObject.$.service.phase]\n    }\n\n    static setEventNamespaceRemovePhase(jFactoryCoreObject, parsedEvent, options) {\n        let curRemovePhase = parsedEvent.hasNamespace(TraitService.PHASES);\n        let newRemovePhase = options && options.removal;\n\n        if (!newRemovePhase) {\n            newRemovePhase = TraitService.getContextualRemovePhase(jFactoryCoreObject);\n        }\n\n        // special case : on(\"uninstall\") with removal = DISABLE (the default value)\n        // => disable() is always called before uninstall() causing the event to be removed too early\n        if (parsedEvent.event === \"uninstall\" && newRemovePhase === TraitService.PHASE.DISABLE) {\n            newRemovePhase = TraitService.PHASE.UNINSTALL\n        }\n\n        if (curRemovePhase !== newRemovePhase) {\n            parsedEvent.deleteNamespace(curRemovePhase);\n            parsedEvent.addNamespace(newRemovePhase);\n        }\n\n        parsedEvent.addNamespace(newRemovePhase);\n    }\n}\n\nTraitService.PHASE = {\n    NONE: \"PHASE_NONE\",\n    INSTALL: \"PHASE_INSTALL\",\n    ENABLE: \"PHASE_ENABLE\",\n    DISABLE: \"PHASE_DISABLE\",\n    UNINSTALL: \"PHASE_UNINSTALL\"\n};\n\nTraitService.PHASE_REVERT = {\n    [TraitService.PHASE.INSTALL]: TraitService.PHASE.UNINSTALL,\n    [TraitService.PHASE.UNINSTALL]: TraitService.PHASE.INSTALL,\n    [TraitService.PHASE.DISABLE]: TraitService.PHASE.ENABLE,\n    [TraitService.PHASE.ENABLE]: TraitService.PHASE.DISABLE,\n    [TraitService.PHASE.NONE]: TraitService.PHASE.DISABLE\n};\n\nTraitService.PHASES = Object.values(TraitService.PHASE);\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport function assignPrivate(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE], property, value, descriptor)\n}\n\nexport function assignPrivateMember(scope, property, value, descriptor) {\n    JFactoryObject.assign(scope.$[TraitCore.SYMBOL_PRIVATE][property], value, descriptor)\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactory.PHASE = JFactoryObject.disinherit(TraitService.PHASE);\n\njFactory.TraitCore = TraitCore;\njFactory.TraitAbout = TraitAbout;\njFactory.TraitLog = TraitLog;\njFactory.TraitEvents = TraitEvents;\njFactory.TraitState = TraitState;\njFactory.TraitService = TraitService;\njFactory.TraitTask = TraitTask;","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// TraitComponents\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\nimport { jFactory } from \"./jFactory\";\nimport { JFACTORY_DEV } from \"./jFactory-env\";\nimport { JFACTORY_COMPAT_MutationObserver, jFactoryCompat_require } from \"./jFactoryCompat\";\nimport { JFACTORY_ERR_INVALID_VALUE, JFACTORY_ERR_KEY_DUPLICATED, JFACTORY_ERR_KEY_MISSING } from \"./JFactoryError\";\nimport { JFactoryExpect } from \"./JFactoryExpect\";\nimport { TraitCore, TraitService } from \"./TraitsCore\";\nimport { JFactoryFetch } from \"./JFactoryFetch\";\nimport { JFactoryPromise } from \"./JFactoryPromise\";\nimport { JFactoryObject } from \"./JFactoryObject\";\nimport { jFactoryTrace } from \"./JFactoryTrace\";\nimport { helper_isPlainObject, helper_url_abs, jQuery } from \"./jFactory-helpers\";\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Fetch\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitFetch {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$fetchRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$fetchRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"requests\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $fetch(id, url, fetchOptions = {}) {\n        id = this.$.requests.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetch(id)\", id).typeString();\n            JFactoryExpect(\"$fetch(url)\", url).typeString();\n            JFactoryExpect(\"$fetch(fetchOptions)\", fetchOptions).typePlainObject();\n            if (this.$.requests.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$fetch(id)\", given: id })\n            }\n        }\n\n        let promise = new JFactoryFetch({\n            name: id,\n            traceSource: jFactoryTrace.tracer.captureTraceSource(\"$fetch\"),\n            config: {\n                chainAutoComplete: true\n            }\n        }, url, fetchOptions);\n\n        this.$.requests.$registerAsync(id, '$fetch(\"' + id + '\")', promise);\n\n        promise.$chain.then(() => {\n            if (this.$.requests.has(id)) {\n                this.$fetchRemove(id)\n            }\n        });\n\n        return promise;\n    }\n\n    $fetchText(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeText: true });\n    }\n\n    $fetchJSON(id, url, fetchOptions = {}) {\n        return this.$fetch(id, url, { ...fetchOptions, $typeJSON: true });\n    }\n\n    $fetchRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$fetchRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$fetchRemove(reason)\", reason).typeString();\n            if (!this.$.requests.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$fetchRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.requests.get(id)._debug_remove_called) {debugger}\n            this.$.requests.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.requests.get(id);\n        this.$.requests.delete(id);\n        entry.$chainAbort(reason || \"$fetchRemove()\");\n    }\n\n    $fetchRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.requests;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$fetchRemove(key, \"$fetchRemoveAll(\" + removePhase + \")\")\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Timeout\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitTimeout {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$timeoutRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$timeoutRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeouts\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $timeout(id, delay, handler = null, ...args) {\n        // id\n        // id, delay\n        // id, delay, handler, ...args\n\n        id = this.$.timeouts.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            JFactoryExpect(\"handler\", handler).type(Function, null);\n            if (this.$.timeouts.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$timeout(id)\", given: id })\n            }\n        }\n\n        let timer;\n        let promise = new JFactoryPromise(\n            {\n                name: id,\n                traceSource: jFactoryTrace.tracer.captureTraceSource(\"$timeout\"),\n                config: {\n                    chainAutoComplete: true\n                }\n            },\n            resolve => {\n                timer = setTimeout(() => {\n                    if (!promise.$isExpired) {\n                        resolve(handler ? handler(...args) : undefined);\n                    }\n                }, delay)\n            }\n        );\n\n        promise.$chain.data.timer = timer;\n        this.$.timeouts.$registerAsync(id, '$timeout(\"' + id + '\")', promise);\n\n        promise.$chain.then(() => {\n            if (this.$.timeouts.has(id)) {\n                this.$timeoutRemove(id);\n            }\n        });\n\n        return promise;\n    }\n\n    $timeoutRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$timeoutRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$timeoutRemove(reason)\", reason).typeString();\n            if (!this.$.timeouts.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$timeoutRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeouts.get(id)._debug_remove_called) {debugger}\n            this.$.timeouts.get(id)._debug_remove_called = true;\n        }\n\n        let entry = this.$.timeouts.get(id);\n        clearTimeout(entry.$chain.data.timer);\n        // deleting before chainAbort() to prevent remove() recall\n        this.$.timeouts.delete(id);\n        entry.$chainAbort(reason || \"$timeoutRemove()\");\n    }\n\n    $timeoutRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES);\n        }\n        let subs = this.$.timeouts;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$timeoutRemove(key, \"$timeoutRemoveAll()\")\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Interval\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitInterval {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$intervalRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$intervalRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"timeints\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $interval(id, delay, handler, ...args) {\n        id = this.$.timeints.$id_resolve(id);\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            JFactoryExpect(\"delay\", delay).typeNumber();\n            if (this.$.timeints.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$interval(id)\", given: id })\n            }\n        }\n        let timer = setInterval(handler, delay, ...args);\n        this.$.timeints.$registerSync(id, timer)\n    }\n\n    $intervalRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$intervalRemove(id)\", id).typeString();\n            if (!this.$.timeints.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$intervalRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.timeints.get(id)._debug_remove_called) {debugger}\n            this.$.timeints.get(id)._debug_remove_called = true\n        }\n        clearInterval(this.$.timeints.get(id).$value);\n        this.$.timeints.delete(id)\n    }\n\n    $intervalRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.timeints;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$intervalRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait Mutations\n// ---------------------------------------------------------------------------------------------------------------------\n\nif (JFACTORY_DEV) {\n    jFactoryCompat_require(JFACTORY_COMPAT_MutationObserver);\n}\n\nexport class TraitMutation {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$mutationRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$mutationRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"mutations\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $mutation(id, parent, config, handler) {\n        id = this.$.mutations.$id_resolve(id);\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"parent\", parent).type(HTMLElement, Document);\n            JFactoryExpect(\"config\", config).typePlainObject();\n            JFactoryExpect(\"handler\", handler).typeFunction();\n            if (this.$.mutations.has(id)) {\n                throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$mutation(id)\", given: id })\n            }\n        }\n        let observer = new MutationObserver(handler);\n        observer.observe(parent, config);\n        this.$.mutations.$registerSync(id, observer);\n    }\n\n    $mutationRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$mutationRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$mutationRemove(reason)\", reason).typeString();\n            if (!this.$.mutations.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$mutationRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.mutations.get(id)._debug_remove_called) {debugger}\n            this.$.mutations.get(id)._debug_remove_called = true\n        }\n        this.$.mutations.get(id).$value.disconnect();\n        this.$.mutations.delete(id)\n    }\n\n    $mutationRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.mutations;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$mutationRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// Trait DOM\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitDOM {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$domRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$domRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"dom\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $dom(id, jQueryArgument, appendTo) {\n        id = this.$.dom.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"jQueryArgument\", jQueryArgument).type(String, Object);\n            appendTo && JFactoryExpect(\"appendTo\", appendTo).type(String, Object);\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$dom(id)\", given: id })\n        }\n\n        let dom = jQuery(jQueryArgument);\n\n        if (dom[0].tagName === \"TEMPLATE\") {\n            dom = jQuery(jQuery(dom[0]).html());\n        }\n\n        if (domId) {\n            if (JFACTORY_DEV) {\n                if (dom[0].nodeType !== Node.ELEMENT_NODE) {\n                    throw new JFACTORY_ERR_INVALID_VALUE({\n                        target: \"$dom(#id)\",\n                        given: dom,\n                        reason: \"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE\"\n                    })\n                }\n            }\n            dom[0].id = id\n        }\n\n        if (appendTo) {\n            dom.appendTo(appendTo)\n        }\n\n        return this.$.dom.$registerSync(id, dom).$value;\n    }\n\n    $domFetch(id, url, fetchOptions, appendTo) {\n        if (fetchOptions && !helper_isPlainObject(fetchOptions)) {\n            [fetchOptions, appendTo] = [{}, fetchOptions]\n        }\n\n        id = this.$.dom.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n            appendTo && JFactoryExpect(\"appendTo\", appendTo).type(String, Object);\n            fetchOptions && JFactoryExpect(\"fetchOptions\", fetchOptions).type(Object);\n        }\n\n        let domId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            domId = true\n        }\n\n        if (JFACTORY_DEV && this.$.dom.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$domFetch(id)\", given: id })\n        }\n\n        let promise = this.$fetchText('$domFetch(\"' + id + '\")', url, fetchOptions)\n            .then(r => {\n                let dom = jQuery(r);\n                if (domId) {\n                    dom[0].id = id\n                }\n                if (appendTo) {\n                    dom.appendTo(appendTo)\n                }\n                return dom\n            });\n\n        this.$.dom.$registerAsync(id, '$domFetch(\"' + id + '\")', promise);\n        return promise\n    }\n\n    $domRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$domRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$domRemove(reason)\", reason).typeString();\n            if (!this.$.dom.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$domRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.dom.get(id)._debug_remove_called) {debugger}\n            this.$.dom.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.dom.get(id);\n        let value = entry.$value;\n        if (value instanceof jQuery) {\n            value.remove()\n        }\n        if (entry instanceof JFactoryFetch) {\n            entry.$chainAbort(reason || \"$domRemove()\");\n        }\n        this.$.dom.delete(id)\n    }\n\n    $domRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.dom;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$domRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n//  Trait CSS\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport class TraitCSS {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$cssRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$cssRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"css\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $css(id, styleBody) {\n        id = this.$.css.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"css\", styleBody).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$css(id)\", given: id })\n        }\n\n        return this.$.css.$registerSync(id,\n            jQuery(\"<style>\")\n                .attr(cssId ? { id } : {})\n                .html(styleBody)\n                .appendTo(\"head\")\n        ).$value;\n    }\n\n    $cssFetch(id, url, appendTo = \"head\") {\n        id = this.$.css.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"url\", url).typeString();\n        }\n\n        let cssId;\n        if (id[0] === \"#\") {\n            id = id.substring(1);\n            cssId = true\n        }\n\n        if (JFACTORY_DEV && this.$.css.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$cssFetch(id)\", given: id })\n        }\n\n        url = helper_url_abs(url);\n\n        let exist = jQuery(appendTo).find(`link[href=\"${url}\"]`)[0];\n        if (exist) {\n            exist.dataset.usage = parseInt(exist.dataset.usage) + 1;\n            let dom = jQuery(exist);\n\n            let promise = JFactoryPromise.resolve(\n                {\n                    name: id,\n                    config: { chainAutoComplete: true },\n                    traceSource: jFactoryTrace.tracer.captureTraceSource(\"$cssFetch\")\n                },\n                dom\n            );\n            promise.$chain.data.dom = dom;\n            this.$.css.$registerAsync(id, '$cssFetch(\"' + id + '\")', promise);\n\n            return promise\n        } else {\n            let dom;\n            let promise = new JFactoryPromise(\n                {\n                    name: id,\n                    config: { chainAutoComplete: true },\n                    traceSource: jFactoryTrace.tracer.captureTraceSource(\"$cssFetch\")\n                },\n                resolve => dom = jQuery(\"<link>\",\n                    { id: cssId ? id : \"\", rel: \"stylesheet\", type: \"text/css\", \"data-usage\": \"1\" })\n                    .appendTo(appendTo)\n                    .on(\"load\", () => resolve(dom))\n                    .attr(\"href\", url)\n            );\n\n            promise.$chain.data.dom = dom;\n            this.$.css.$registerAsync(id, '$cssFetch(\"' + id + '\")', promise);\n            return promise\n        }\n    }\n\n    $cssRemove(id, reason) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$cssRemove(id)\", id).typeString();\n            reason && JFactoryExpect(\"$cssRemove(reason)\", reason).typeString();\n            if (!this.$.css.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$cssRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.css.get(id)._debug_remove_called) {debugger}\n            this.$.css.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.css.get(id);\n        let value = entry.$chain && entry.$chain.data.dom || entry.$value;\n        if (value instanceof jQuery) {\n            let usage = parseInt(value[0].dataset.usage) - 1;\n            if (usage) {\n                value[0].dataset.usage = usage\n            } else {\n                value.remove()\n            }\n        }\n        if (entry instanceof JFactoryPromise) {\n            entry.$chainAbort(reason || \"$cssRemove()\")\n        }\n        this.$.css.delete(id)\n    }\n\n    $cssRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.css;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$cssRemove(key)\n                }\n            }\n        }\n    }\n}\n\nexport class TraitLibVue {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$vueRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$vueRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"vue\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $vue(id, vue) {\n        id = this.$.vue.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"vue\", vue).type(Object);\n        }\n\n        if (JFACTORY_DEV && this.$.vue.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$vue(id)\", given: id })\n        }\n\n        return this.$.vue.$registerSync(id, vue).$value;\n    }\n\n    $vueRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$vueRemove(id)\", id).typeString();\n            if (!this.$.vue.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$vueRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.vue.get(id)._debug_remove_called) {debugger}\n            this.$.vue.get(id)._debug_remove_called = true\n        }\n\n        let entry = this.$.vue.get(id);\n        jQuery(entry.$value.$el).remove();\n        entry.$value.$destroy();\n        this.$.vue.delete(id)\n    }\n\n    $vueRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.vue;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$vueRemove(key)\n                }\n            }\n        }\n    }\n}\n\nexport class TraitLibReact {\n    trait_constructor() {\n        const kernel = this.$[TraitCore.SYMBOL_PRIVATE].events.kernel;\n        kernel.on(\"disable\", () => this.$reactRemoveAll(TraitService.PHASE.DISABLE));\n        kernel.on(\"uninstall\", () => this.$reactRemoveAll(TraitService.PHASE.UNINSTALL));\n        this.$.assign(\"react\", this.$.createSubMap(), JFactoryObject.descriptors.ENUMERABLE);\n    }\n\n    $react(id, container, element, ...renderOtherArguments) {\n        id = this.$.react.$id_resolve(id);\n\n        if (JFACTORY_DEV) {\n            if (!jFactory.ReactDOM) {\n                throw new Error(\"jFactory.ReactDOM=ReactDOM must be set before using the React Trait\");\n            }\n            JFactoryExpect(\"id\", id).typeString();\n            JFactoryExpect(\"container\", container).type(HTMLElement, jQuery);\n        }\n\n        if (JFACTORY_DEV && this.$.react.has(id)) {\n            throw new JFACTORY_ERR_KEY_DUPLICATED({ target: \"$react(id)\", given: id })\n        }\n\n        container = jQuery(container)[0];\n        let view = jFactory.ReactDOM.render(element, container, ...renderOtherArguments);\n        return this.$.react.$registerSync(id, { container, view }).$value.view;\n    }\n\n    $reactRemove(id) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"$reactRemove(id)\", id).typeString();\n            if (!this.$.react.has(id)) {\n                throw new JFACTORY_ERR_KEY_MISSING({\n                    target: \"$reactRemove(id)\",\n                    given: id\n                })\n            }\n            // eslint-disable-next-line no-debugger,brace-style\n            if (this.$.react.get(id)._debug_remove_called) {debugger}\n            this.$.react.get(id)._debug_remove_called = true\n        }\n\n        let value = this.$.react.get(id).$value;\n        let el = value.container;\n        if (el) {\n            if (!jFactory.ReactDOM.unmountComponentAtNode(el)) {\n                if (JFACTORY_DEV) {\n                    this.$logWarn(\"unmountComponentAtNode failed to unmount\", el);\n                }\n            }\n            jQuery(el).remove();\n        }\n        this.$.react.delete(id)\n    }\n\n    $reactRemoveAll(removePhase) {\n        if (JFACTORY_DEV) {\n            JFactoryExpect(\"removePhase\", removePhase)\n                .equalIn(TraitService.PHASES)\n        }\n        let subs = this.$.react;\n        if (subs.size) {\n            for (const [key, sub] of subs) {\n                if (sub.$phaseRemove === removePhase) {\n                    this.$reactRemove(key)\n                }\n            }\n        }\n    }\n}\n\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n// ---------------------------------------------------------------------------------------------------------------------\n\njFactory.TraitFetch = TraitFetch;\njFactory.TraitTimeout = TraitTimeout;\njFactory.TraitInterval = TraitInterval;\njFactory.TraitMutation = TraitMutation;\njFactory.TraitDOM = TraitDOM;\njFactory.TraitCSS = TraitCSS;\njFactory.TraitLibVue = TraitLibVue;\njFactory.TraitLibReact = TraitLibReact;","/* jFactory, Copyright (c) 2019, Stéphane Plazis, https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt */\n\n// ---------------------------------------------------------------------------------------------------------------------\n// jFactory bundle index (see package.json scripts to compile the /dist)\n// ---------------------------------------------------------------------------------------------------------------------\n// Used by the build scripts to compile modules targeting the configuration (production, development, debug...)\n// Almost everything is exported; The resulting modules should be imported by a bundler that supports Tree Shacking.\n// ---------------------------------------------------------------------------------------------------------------------\n\nexport * from \"./jFactory\";\nexport * from \"./jFactory-bootstrap\";\nexport * from \"./jFactory-env\";\nexport * from \"./jFactory-helpers\";\nexport * from \"./jFactory-traits\";\n\nexport * from \"./JFactoryAbout\";\nexport * from \"./JFactoryError\";\nexport * from \"./JFactoryEvents\";\nexport * from \"./JFactoryExpect\";\nexport * from \"./JFactoryFetch\";\nexport * from \"./JFactoryFunction\";\nexport * from \"./JFactoryLogger\";\nexport * from \"./JFactoryObject\";\nexport * from \"./JFactoryPromise\";\nexport * from \"./JFactoryTime\";\nexport * from \"./JFactoryTrace\";\nexport * from \"./JFactoryTraits\";\n\nexport * from \"./jFactoryCompat\";\nexport * from \"./jFactoryLoader\";\n\nexport * from \"./TraitsCore\";\nexport * from \"./TraitsComponents\";\n\nimport { jFactoryBootstrap } from \"./jFactory-bootstrap\";\nif (typeof jFactoryOverride === \"undefined\" || !jFactoryOverride) {\n    jFactoryBootstrap();\n}"],"names":["JFACTORY_DEV","JFACTORY_DEBUG","JFACTORY_CLI","process","versions","node","JFACTORY_CFG_LOG","enabled","JFACTORY_CFG_JFactoryError","keys","JFACTORY_CFG_JFactoryTrace","libOptions","offline","Boolean","globalThis","chrome","filter","value","lineNumber","jQuery","$","helper_isString","_","isString","helper_isNumber","isNumber","helper_isPlainObject","isPlainObject","helper_defaultsDeep","defaultsDeep","helper_lowerFirst","lowerFirst","helper_get","get","helper_template","template","helper_camelCase","camelCase","NOOP","helper_setFunctionName","name","f","Object","defineProperty","helper_url_abs_a","document","createElement","helper_url_abs","url","href","helper_isNative","Function","prototype","toString","call","indexOf","helper_Deferred","Deferred","this","_done","_fail","execute","list","args","h","fulfilled","resolve","arguments","reject","done","callback","push","fail","seq","jFactoryLoader_init","handler","jFactoryOverride","jFactoryLoader_onInit","JFactoryTrace_NOFILTER","[object Object]","label","stackTraceLimit","Infinity","omitAboveFunctionName","omitSelf","_stackTraceLimit","Error","traceSource","source","targetObject","captureTraceSource","trace","toPrintableTrace","then","r","log","console","enumerable","configurable","Promise","JFactoryTrace_LIB_STACKTRACE","config","super","StackTrace","fromError","traceFrames","slice","findIndex","functionName","endsWith","formatTraceFrames","header","linePrefix","window","map","sf","join","jFactoryTrace","use","constructor","warn","tracer","attachTrace","JFactoryError","message","data","assign","create","toPrintable","$data","Symbol","iterator","object","DEFAULT_KEYS","find","key","val","templateData","nv","entries","undefined","getId","JSON","stringify","length","JSON_MAX","substring","e","String","templateMessage","part","split","placeholder","RE_PLACEHOLDER","lastIndex","exec","trim","toPrintableData","type","ret","E","factory","JFACTORY_ERR_INVALID_VALUE","JFACTORY_ERR_INVALID_CALL","JFACTORY_ERR_PROMISE_EXPIRED","JFACTORY_ERR_REQUEST_ERROR","JFACTORY_ERR_KEY_DUPLICATED","JFACTORY_ERR_KEY_MISSING","JFactoryExpect","error","jFactoryThrow","target","reason","given","staticMethods","notUndefined","notEmptyString","notFalsy","validSpaces","replace","matchReg","reg","test","expected","ok","typeNull","typeBoolean","typeString","typeNumber","typeFunction","typePlainObject","equalIn","Array","isArray","values","includes","getOwnPropertyNames","writable","getOwnPropertyDescriptor","notWritable","propertyIsEnumerable","notEnumerable","notConfigurable","reservedProperty","callStatic","JFactoryTraits","callerInstance","callerConstructor","options","trait","traitArgs","cache","CACHE","has","add","set","WeakSet","JFactoryTrait","export","traitInstance","trait_constructor","apply","isStatic","sourceDescriptor","getOwnPropertyDescriptors","propertyName","prefix","getPrefix","getTarget","propertyDescriptor","parsed","parser","defaultParser","EXCLUDES","WeakMap","JFactoryFunctionComposer","handlers","handlerGroups","handlerGroup","unshift","composer","composite","context","canceled","parameters","from","result","iteration","next","composite_iterator","scope","jFactoryFunctionExpirable","originalHandler","JFactoryFunctionExpirable","compose","expiredCalls","expired","isExpired","expirable","setExpired","addExpireCondition","condition","last","bind","onExpired","onNotExpired","MaxWarningExpiration","jFactoryFunctionConditional","JFactoryFunctionConditional","first","conditional","addCondition","handle","jFactoryFunctionWrappable","JFactoryFunctionWrappable","wrappable","beforeAll","justBefore","justAfter","afterAll","jFactoryTraits","states","service","phase","owner","$logErr","JFactoryCoreObject","inject","jFactory","TraitCore","TraitAbout","TraitLog","TraitEvents","TraitState","TraitService","TraitTask","JFactoryComponent","TraitFetch","TraitDOM","TraitCSS","TraitMutation","TraitTimeout","TraitInterval","TraitLibVue","TraitLibReact","properties","JFACTORY_COMPAT_globalThis","info","JFACTORY_COMPAT_fetch","fetch","JFACTORY_COMPAT_Request","Request","JFACTORY_COMPAT_AbortController","AbortController","signal","JFACTORY_COMPAT_MutationObserver","MutationObserver","jFactoryCompat_require","compat","jFactoryCompat_run","entry","pass","ignore","jFactoryBootstrap","JFactoryObject","descriptorPrototype","DESCRIPTORS_PROTOTYPE","o","NONE","WRITABLE","ENUMERABLE","CONFIGURABLE","CONFIGURABLE_WRITABLE","WRITABLE_CONFIGURABLE","CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE","ENUMERABLE_WRITABLE","WRITABLE_ENUMERABLE","WRITABLE_ENUMERABLE_CONFIGURABLE","WRITABLE_CONFIGURABLE_ENUMERABLE","ENUMERABLE_CONFIGURABLE_WRITABLE","ENUMERABLE_WRITABLE_CONFIGURABLE","CONFIGURABLE_WRITABLE_ENUMERABLE","CONFIGURABLE_ENUMERABLE_WRITABLE","READONLY","property","descriptor","descriptors","getOwnPropertySymbols","defineProperties","flat","disinherit","createDescriptors","moduleGenId","uid","JFactoryAbout","about","fingerprint","toLowerCase","JFactoryPromise","executor","chainId","DEFAULT_CONFIG","Number","_resolve","_reject","chain","JFactoryPromiseChain","$chain","$type","$value","$isSettled","$isRejected","$isFulfilled","$isExpired","$isAborted","$dev_name","$dev_path","JFactoryPromisePath","$dev_position","$dev_source","tryAutoComplete","isPending","$chainComplete","onResolve","onReject","TypeError","called","resolvePromise","y","rejectPromise","errorExpired","onSettle","chainMap","chainConfig","chainAutoComplete","size","_chainAutoComplete","__resolve__","__reject__","onFulfilled","onRejected","forceType","wrappedFulfilled","wrappedRejected","newPromise","startsWith","__onFulfilled__","__onRejected__","fNames","chainName","optionalArgs","chainRoot","complete","promise","abort","silent","Map","isCompleted","__deferred__","item","i","printable","v","JFactoryPromiseSync","JFactoryEvents","registry","onListenerUpdate","onObserverUpdate","events","selector","validateSelector","HTMLElement","wrappedHandler","on","stack","off","pending","event","trigger","triggerHandler","all","async","JFactoryEventsManager","parent","affiliateRules","affiliateAddRule","rule_namespace","namespaces","JFactoryEventSelectorParser","parsedEvent","namespace","addNamespace","affiliate","argL","jquery","triggerSeries","triggerParallel","elm","_data","types","JFactoryEventSelector","hasNamespace","_events","expando","k","eventTypeEntry","selectors","s","Set","delete","ns","shift","validateEvent","validateNamespace","JFactoryFetch","fetchOptions","fetchRequest","response","fetchResponse","status","statusText","$typeText","text","responseText","$typeJSON","json","responseJSON","catch","abortCtrl","abortController","fetchAbortController","$chainAbort","SYMBOL_ENABLED","JFactoryLogger","DEFAULT_CONDITION","installAccessor","parentLogger","enable","disable","nativeName","filters","targetName","accessor","formatter","sub","styles_css","styles_cli","FORMATTER_NATIVE","logger","FORMATTER_CLI","FORMATTER_BROWSER","equal","JFactoryTime","Date","toLocaleTimeString","getUTCMilliseconds","valueOf","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","a","JFactoryTimeTrace","elapsed","t1","t0","$toDurationString","SubMap","$phaseRemove","getContextualRemovePhase","taskName","task","$task","$chainAutoComplete","str","id","id_autoinc","proto","SYMBOL_PRIVATE","createSubMap","tasks","requests","executorOrValue","$id_resolve","metrics","$taskMetrics","$dev_timing","end","$taskRemove","_called","removePhase","PHASES","autoComplete","assignPrivate","custom","kernel","eventManager","listeners","getDomListeners","observers","getObservers","$trigger","stateRoutes","Proxy","$state","before","$notify","after","notify","previousVal","PHASE","phaseQueue","phaseTask","phaseMap","install","uninstall","assignPrivateMember","installed","setEventNamespaceRemovePhase","phaseResolve","$taskRemoveAll","$taskPromiseAll","onInstall","onEnable","onDisable","onUninstall","$off","removal","DISABLE","UNINSTALL","p","INSTALL","$enable","ENABLE","phaseKill","$disable","component","jFactoryCoreObject","PHASE_REVERT","curRemovePhase","newRemovePhase","deleteNamespace","$fetchRemoveAll","$registerAsync","$fetchRemove","$fetch","_debug_remove_called","subs","$timeoutRemoveAll","delay","timeouts","timer","setTimeout","$timeoutRemove","clearTimeout","$intervalRemoveAll","timeints","setInterval","$registerSync","clearInterval","$intervalRemove","$mutationRemoveAll","mutations","Document","observer","observe","disconnect","$mutationRemove","$domRemoveAll","jQueryArgument","appendTo","domId","dom","tagName","html","nodeType","Node","ELEMENT_NODE","$fetchText","remove","$domRemove","$cssRemoveAll","styleBody","cssId","css","attr","exist","dataset","usage","parseInt","rel","data-usage","$cssRemove","$vueRemoveAll","vue","$el","$destroy","$vueRemove","$reactRemoveAll","container","element","renderOtherArguments","react","ReactDOM","view","render","el","unmountComponentAtNode","$logWarn","$reactRemove"],"mappings":"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"}