import e from"lodash";import t from"jquery";
/*!
 * jFactory, Copyright (c) 2019, StÃ©phane Plazis
 * https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt
 */
const s=!0,i=!1,r="undefined"!=typeof process&&process.versions&&process.versions.node,n={TraitLog:!r||!1,JFactoryError:{keys:["$.about.name","$dev_name","$name","name","id"]},JFactoryTrace:!r&&{keys:["$dev_traceLog","$dev_traceSource"],libOptions:{offline:Boolean(globalThis.chrome),filter:function(e){return e.lineNumber}}},jFactoryDev:{requireCompatibility:{globalThis:{test:()=>globalThis,info:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},fetch:{test:()=>fetch,info:"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"},Request:{test:()=>Request,info:"https://developer.mozilla.org/docs/Web/API/Request"},"AbortController, AbortSignal":{test:()=>(new AbortController).signal,info:"https://developer.mozilla.org/docs/Web/API/AbortController, https://developer.mozilla.org/docs/Web/API/AbortSignal"},MutationObserver:{test:()=>MutationObserver,info:"https://developer.mozilla.org/docs/Web/API/MutationObserver"}}}},a={seq:[],init(){if(this.seq){let e=this.seq;delete this.seq;for(let t of e)t();delete globalThis.jFactoryOverride}},onInit(e){this.seq.push(e)}};function o(){console.log("jFactory is running in development mode.\nPerformances will be affected.");for(let[e,t]of Object.entries(n.jFactoryDev.requireCompatibility)){let s;try{s=Boolean(t.test())}catch(e){}s||console.warn(`jFactory may require the support of "${e}", ${t.info}`)}}function l(){!n.TraitLog&&console.warn("jFactory: LOGS REMOVED")}a.onInit(o),a.onInit(l);const c=t,h=e.isNative,u=e.isString,p=e.isNumber,d=e.isPlainObject,m=e.defaultsDeep,f=e.lowerFirst,$=e.get,g=e.template,v=e.camelCase,b=e=>(b.a.href=e,b.a.href);b.a=document.createElement("a");const E=()=>{},A=(e,t)=>Object.defineProperty(t,"name",{value:e});class S{constructor({label:e,stackTraceLimit:t,keys:s,libOptions:i}={}){this.label=e||"The stack has been printed in the console",this.stackTraceLimit=t||1/0,this.keys=s||["stackLog","stackSource"],this.libOptions=i||{}}captureTraceSource(e,t){let s;this.stackTraceLimit&&(s=Error.stackTraceLimit,Error.stackTraceLimit=this.stackTraceLimit),e||(e="captureTraceSource",t=!0);let i={source:new Error,omitAboveFunctionName:e,omitSelf:t};return this.stackTraceLimit&&(Error.stackTraceLimit=s),i}attachTrace(e,t){"object"!=typeof t&&(t=this.captureTraceSource(t||"attachTrace",!t));let s=t.source;this.toPrintableTrace(t).then(e=>s=e);let i=()=>console.log(s)||this.label;Object.defineProperty(e,this.keys[0],{enumerable:!1,configurable:!0,get:()=>i()}),Object.defineProperty(e,this.keys[1],{enumerable:!1,configurable:!0,get:()=>t})}toPrintableTrace(e){return Promise.resolve(e.source)}}class y extends S{constructor(e){super(e)}toPrintableTrace(e){return StackTrace.fromError(e.source,this.libOptions).then(t=>{if(e.omitAboveFunctionName){let s=t.findIndex(t=>t.functionName&&t.functionName.endsWith(e.omitAboveFunctionName));s>0&&(e.omitSelf&&s++,t=t.slice(s))}return t=t.filter(this.libOptions.filter),this.formatTraceFrames(t)})}formatTraceFrames(e){let t,s;return this.libOptions.offline&&window.chrome?(t="Error\n",s="\tat "):(t="",s=""),t+e.map(e=>s+e.toString()).join("\n")}}const R={};a.onInit((function(){let e=n.JFactoryTrace;if(e&&!1!==e.use){let t;t="function"==typeof e.use?e.use:"object"==typeof StackTrace?y:S,t===y&&console.warn("jFactory: Stack trace enabled; Performance will be affected"),R.tracer=new t(e)}else R.tracer={captureTraceSource:E,attachTrace:E}}));class L extends Error{constructor(e="unspecified error",t=null){t=Object.assign(Object.create(null),t),super(e=L.toPrintable(e,t)),this.$data=Object.assign(Object.create(null),t)}toString(){return this.message}*[Symbol.iterator](){yield this.message,yield this.$data}static getId(e){return e[(n.JFactoryError.keys||L.DEFAULT_KEYS).find(t=>{let s=$(e,t);return s||0===s})]}static toPrintableData(e){const t={};let s;for(let[i,r]of Object.entries(e)){switch(typeof r){case"function":r=r.name+"()";break;case"object":if(null===r){r="null";break}if(r instanceof Error){r=r.toString();break}if(void 0!==(s=L.getId(r)))r='"'+s+'"';else if(h(r.toString))try{s=JSON.stringify(r),r=s.length>L.JSON_MAX?s.substring(0,L.JSON_MAX)+"[...]":s}catch(e){r="[object "+r.constructor.name+"]"}else r=r.toString();break;case"string":r='"'+r+'"';break;default:r=String(r)}t[i]=r}return t}static toPrintable(e,t){const s=[];for(let i of e.split(";")){let e,r=L.RE_PLACEHOLDER;if(r.lastIndex=0,e=r.exec(i)){do{if(e[1]&&e[1]in t){s.push(i.trim());break}}while(null!==(e=r.exec(i)))}else s.push(i.trim())}return f(g(s.join("; "))(L.toPrintableData(t)))}}L.JSON_MAX=40,L.DEFAULT_KEYS=["name","id"],L.RE_PLACEHOLDER=/\${([^}]+)}/g;let _=new Proxy(L,{set:function(e,t,s){let{template:i}=s;if(e[t])throw new Error("already declared");return e[t]=class extends L{constructor(e,t){super(i,e),R.tracer.attachTrace(this.$data,t)}},e[t].prototype.name="Error jFactoryError."+t,!0}});function w(e,t){if(!new.target)return new w(e,t);this.label=e,this.value=t}_.INVALID_VALUE={template:"invalid value for ${target}; Reason: ${reason}; Given: ${given}"},_.INVALID_CALL={template:"invalid call ${target}; Reason: ${reason}; Owner: ${owner}"},_.PROMISE_EXPIRED={template:"expired promise ${target}; Reason: ${reason}"},_.REQUEST_ERROR={template:"error requesting ${target}; Reason: ${reason}; Owner: ${owner}"},_.KEY_DUPLICATED={template:"duplicated key for ${target}; Given: ${given}"},_.KEY_MISSING={template:"missing key for ${target}; Given: ${given}"};const O=function(e,t,s){throw new _.INVALID_VALUE({target:e,reason:s,given:t})},T={notUndefined:(e,t)=>(void 0===t&&O(e,t,"cannot be undefined"),!0),notEmptyString:(e,t)=>(""===t&&O(e,t,"cannot be empty string"),!0),notFalsy:(e,t)=>(t||O(e,t,'cannot be a falsy value (undefined, null, NaN, 0, "")'),!0),validSpaces:(e,t)=>(t.replace&&t.replace(/\s+/g," ").trim()===t||O(e,t,"invalid space delimiters"),!0),matchReg:(e,t,s)=>(s.test(t)||O(e,t,'string "'+t+'" must match '+s),!0),type(e,t,...s){let i,r=!1;for(let n of s){null===n?i="Null":"name"in n&&(i=n.name);let s=T["type"+i];if(s)try{r=s(e,t)}catch(e){}else r=t instanceof n;if(r)break}return r||O(e,t,"must be an instance of ["+s.map(e=>e.name).join(", ")+"]"),!0},typeNull:(e,t)=>(null!==t&&O(e,t,"must be null"),!0),typeBoolean:(e,t)=>(!0!==t&&!1!==t&&O(e,t,"must be a boolean"),!0),typeString:(e,t)=>(u(t)||O(e,t,"must be a string"),!0),typeNumber:(e,t)=>(p(t)||O(e,t,"must be a number"),!0),typeFunction:(e,t)=>("function"!=typeof t&&O(e,t,"must be a function"),!0),typePlainObject:(e,t)=>(d(t)||O(e,t,"must be a plain object"),!0),equal(e,t,...s){let i=!1;for(let e of s)if(i=t===e)break;return i||O(e,t,"must be one of ["+s+"]"),!0},equalIn:(e,t,s)=>(Array.isArray(s)||(s=Object.values(s)),s.includes(t)||O(e,t,"must be one from ["+s.join(", ")+"]"),!0),properties(e,t,s){for(let i of Object.getOwnPropertyNames(t))w(e+', property name "'+i+'"',i).equalIn(s);return!0},writable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable||O(e,t,"must be writable"),!0),notWritable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable&&O(e,t,"must not be writable"),!0),enumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)||O(e,t,"must be enumerable"),!0),notEnumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)&&O(e,t,"must not be enumerable"),!0),configurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable||O(e,t,"must be configurable"),!0),notConfigurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable&&O(e,t,"must not be configurable"),!0),reservedProperty:(e,t,s)=>(s in t&&O(e,t,"is a reserved property"),!0)};a.onInit((function(){Object.assign(w,T);for(const e of Object.getOwnPropertyNames(T))w.prototype[e]=function(...t){return w[e](this.label,this.value,...t),this}}));class P{constructor(e,t,s={}){this.callerInstance=e,this.callerConstructor=t,this.options=s}use(e,...t){w("JFactoryTraits(trait)",e).typeFunction();let{callerInstance:s,callerConstructor:i}=this,r=P.CACHE.get(s);if(r){if(r.has(e))return n.TraitLog&&console.warn(`${e.name} already called on`,s),this;r.add(e)}else P.CACHE.set(s,new WeakSet([e]));!i.JFactoryTrait&&(i.JFactoryTrait=new WeakSet),i.JFactoryTrait.has(e)||(i.JFactoryTrait.add(e),this.export(e.prototype,i.prototype),this.export(e,i,!0));let a=new e(s,...t);return a.trait_constructor&&a.trait_constructor.apply(s,t),this}export(e,t,s){let i=Object.getOwnPropertyDescriptors(e);for(let r of Object.keys(i)){let n=P.getPrefix(r);if(P.getTarget(r,t,n)){let n=i[r],a=(this.options.parser||P.defaultParser)(r,n,e,t,s);a&&(({propertyName:r,propertyDescriptor:n}=a),Object.defineProperty(t,r,n))}}}static defaultParser(e,t,s,i,r){let a=t.value;return r?null:e in i?(n.TraitLog&&console.warn(`${i.constructor.name}> skipping export of existing property "${e}"`,a),null):"object"==typeof a?(n.TraitLog&&console.warn(`${i.constructor.name}> skipping export of shared object "${e}"`,a),null):{propertyName:e,propertyDescriptor:t}}static getPrefix(e){let t=e.split("_");return t.length>1?t[0]:null}static getTarget(e,t,s){return P.EXCLUDES.includes(e)||"trait"===s?null:t}}P.CACHE=new WeakMap,P.EXCLUDES=["constructor","prototype","length","size"];class I{constructor(){this.handlers=Object.create(null)}*[Symbol.iterator](e=[]){e.length||(e=Object.keys(this.handlers)),e.length||(e=["default"]);for(let t of e)t in this.handlers&&(yield*this.handlers[t])}first(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).unshift(t),this}last(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).push(t),this}compose(...e){let t=this,s=function(){let s={canceled:!1,parameters:Array.from(arguments),result:void 0},i=t[Symbol.iterator](e),r=i.next();return I.composite_iterator(this,s,r,i)};return s.composer=t,s}static composite_iterator(e,t,s,i){let r,n;for(;!t.canceled&&!s.done;)if(r=s.value,n=e?r.call(e,t,...t.parameters):r(t,...t.parameters),s=i.next(),n instanceof Promise){if(!s.done||n.constructor===Promise)return n.then(A([r.name,"[compositeAsyncHandler]"].filter(Boolean).join(" "),(function(r){return t.result=r,I.composite_iterator(e,t,s,i)})));t.result=n}else t.result=n;return t.result}}function N(e){return new j(e).compose()}class j{constructor(e){this.originalHandler=e,this.expiredCalls=0,this.composer=new I;let t,s=this.composer.compose("conditions"),i=this;this.isExpired=e=>t||s.call(e)||!1,this.setExpired=e=>t=e?e instanceof Error?e:new _.INVALID_CALL({target:this.originalHandler,reason:"manually expired"}):Boolean(this.expiredCalls=0),this.addExpireCondition=function(e){this.composer.last("conditions",(function(t){let s=function(s){return w("JFactoryFunctionExpirable.addExpireCondition(), result",s).type(Boolean,Error),i.setExpired(!!s&&((t.canceled=!0)&&(s instanceof Error?s:new _.INVALID_CALL({target:i.originalHandler,reason:"conditionally expired",condition:e}))))},r=e.apply(this,t.parameters);return r instanceof Promise?r.then(s):s(r)}))}}compose(){let e=this,t=function(){let t=e.isExpired(this),s=e.constructor.call.bind(void 0,e,this,arguments);return t instanceof Promise?t.then(s):s(t)};return Object.assign(t,{expirable:this,isExpired:e=>this.isExpired(e),setExpired:e=>this.setExpired(e),addExpireCondition:e=>(this.addExpireCondition(e),t)})}static call(e,t,s,i){return i?e.onExpired(i):e.onNotExpired(t,s)}onExpired(e){return this.expiredCalls<j.MaxWarningExpiration&&(this.expiredCalls++,n.TraitLog&&console.warn(...new _.INVALID_CALL({...e.$data,reason:e.$data.reason+"; expiredCalls="+this.expiredCalls+(this.expiredCalls===j.MaxWarningExpiration?"; Max Warning Exceeded":"")}))),e}onNotExpired(e,t){return this.originalHandler.apply(e,t)}}function M(e){return new C(e).compose()}j.MaxWarningExpiration=10;class C{constructor(e){this.originalHandler=e,this.composer=new I,this.composer.first("original",A([e.name,"[condition]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("conditions","original");return Object.assign(e,{conditional:this,addCondition:t=>(this.addCondition(t),e)})}addCondition(e){this.composer.last("conditions",(function(t){let s=function(e){w("JFactoryFunctionConditional.addCondition(), result",e).typeBoolean(),!e&&(t.canceled=!0)},i=e.apply(this,t.parameters);return i instanceof Promise?i.then(s):s(i)}))}}function k(e){return new D(e).compose()}class D{constructor(e){this.originalHandler=e,this.composer=new I,this.composer.first("original",A([e.name,"[wrapped]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("before","original","after");return Object.assign(e,{wrappable:this,beforeAll:t=>(this.beforeAll(t),e),justBefore:t=>(this.justBefore(t),e),justAfter:t=>(this.justAfter(t),e),afterAll:t=>(this.afterAll(t),e)})}beforeAll(e){this.composer.first("before",e)}justBefore(e){this.composer.last("before",e)}justAfter(e){this.composer.first("after",e)}afterAll(e){this.composer.last("after",e)}}function F(e,t){return new P(e,t,{parser(e,t){let s=P.defaultParser(...arguments);if(s){({propertyName:e,propertyDescriptor:t}=s);let i=t.value;if("function"==typeof i)switch(i.name){case"$install":case"$uninstall":case"$enable":case"$disable":case"$state":break;default:t.value=k(i).beforeAll((function(){if(!this.$.states.enabled&&"PHASE_NONE"===this.$.service.phase){let e=new _.INVALID_CALL({owner:this,target:i,reason:"component disabled"});throw this.$logErr(...e),e}}))}return{propertyName:e,propertyDescriptor:t}}}})}class U{constructor(e){U.inject(this,U,e)}static inject(e,t,s){F(e,t).use(H.TraitCore).use(H.TraitAbout,{name:s}).use(H.TraitLog).use(H.TraitEvents).use(H.TraitState).use(H.TraitService).use(H.TraitTask)}}class B extends U{constructor(e){super(e),B.inject(this,B)}static inject(e,t){F(e,t).use(H.TraitFetch).use(H.TraitDOM).use(H.TraitCSS).use(H.TraitMutation).use(H.TraitTimeout).use(H.TraitInterval).use(H.TraitLibVue).use(H.TraitLibReact)}}const H=(e,t)=>Object.assign(new B(e),t);class V{static createDescriptors(e=V.DESCRIPTORS_PROTOTYPE){let t=V.create(e,!0,!0),s=Object.create(null);return s.NONE=t(),s.WRITABLE=t({writable:!0}),s.ENUMERABLE=t({enumerable:!0}),s.CONFIGURABLE=t({configurable:!0}),s.CONFIGURABLE_WRITABLE=s.WRITABLE_CONFIGURABLE=t({writable:!0,configurable:!0}),s.CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE=t({enumerable:!0,configurable:!0}),s.ENUMERABLE_WRITABLE=s.WRITABLE_ENUMERABLE=t({writable:!0,enumerable:!0}),s.WRITABLE_ENUMERABLE_CONFIGURABLE=s.WRITABLE_CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE_WRITABLE=s.ENUMERABLE_WRITABLE_CONFIGURABLE=s.CONFIGURABLE_WRITABLE_ENUMERABLE=s.CONFIGURABLE_ENUMERABLE_WRITABLE=t({writable:!0,enumerable:!0,configurable:!0}),s.READONLY=t({writable:!1,enumerable:!1,configurable:!1}),s}static assign(e,t,s,i){let r={};switch(typeof t){case"string":case"symbol":if(!i)throw new Error("missing descriptor argument; use Object.assign instead");(i=Object.create(i)).value=s,Object.defineProperty(e,t,i);break;case"object":if([s,i]=[t,s],!i)throw new Error("missing descriptor argument; use Object.assign instead");for(let e of Object.getOwnPropertyNames(s))r[e]=Object.create(i),r[e].value=s[e];for(let e of Object.getOwnPropertySymbols(s))r[e]=Object.create(i),r[e].value=s[e];Object.defineProperties(e,r);break;default:throw new Error("invalid property argument")}return e}static create(e,t=!1,s=!1){return function(i){return t?Object.assign(s?Object.create(null):{},e,i):Object.assign(Object.create(s?Object.assign(Object.create(null),e):e),i)}}static disinherit(e){return Object.assign(Object.create(null),e)}}V.DESCRIPTORS_PROTOTYPE={writable:!1,enumerable:!1,configurable:!1},a.onInit((function(){V.descriptors=V.createDescriptors()}));const Y=()=>++Y.uid;Y.uid=0;class q{constructor(e,t={}){let s,i;w("JFactoryAbout(owner)",e).type(Object),w("JFactoryAbout(about)",t).typePlainObject().reservedProperty("uid").reservedProperty("fingerprint"),"name"in t&&w("JFactoryAbout(about.name)",t.name).typeString().notEmptyString();let r=Y();t.name?(s=t.name,delete t.name,i="jFactory_"+v(s.toLowerCase())+"_"+r):(delete t.name,s=`[${e.constructor.name}#${r}]`,i="jFactory_"+e.constructor.name+"_"+r),V.assign(this,{uid:r,name:s,fingerprint:i},V.descriptors.ENUMERABLE),Object.assign(this,t),w("JFactoryAbout.name",this.name).matchReg(/^[\w[\]#]+$/),w("JFactoryAbout.fingerprint",this.fingerprint).matchReg(/^[\w]+$/)}}const J=()=>++J.uid;J.uid=0;class W extends Promise{constructor({name:e,config:t,traceSource:s},i){1===arguments.length&&([e,t,i]=[null,null,arguments[0]]);const r=J();let n,a;t={...W.DEFAULT_CONFIG,...t},w("name",e=e||"unnamed").type(String,Number).matchReg(/^[^. ]+$/),w("config",t).typePlainObject(),w("executor",i).typeFunction(),super((e,t)=>{n=e,a=t});const o=new G(this,r,e,t);Object.defineProperties(this,{$chain:{enumerable:!0,writable:!0,value:o},$type:{writable:!0,value:"promise"},$value:{writable:!0,value:void 0},$isSettled:{writable:!0,value:!1},$isRejected:{writable:!0,value:null},$isFulfilled:{writable:!0,value:null},$isExpired:{writable:!0,value:!1},$isAborted:{writable:!0,value:!1}}),Object.defineProperties(this,{$dev_name:{configurable:!0,value:e+"["+r+":0]"},$dev_path:{writable:!0,value:new K(this)},$dev_position:{writable:!0,value:0}}),h(i)||Object.defineProperties(this,{$dev_source:{value:i}}),R.tracer.attachTrace(this,s);const l=()=>{if(!this.$chain.isPending)try{this.$chainComplete("auto-completed")}catch(e){console.error(e)}},c=e=>{if(!this.$isSettled){if(e===this)return void u(new TypeError("Chaining cycle detected for promise "+this.$dev_name));let t;if(null!==e&&("object"==typeof e||"function"==typeof x))try{t=e.then}catch(e){return void u(e)}if("function"==typeof t){let s=!1,i=function(e){s||(s=!0,c(e))},r=function(e){s||(s=!0,u(e))};try{t.call(e,i,r)}catch(e){s||u(e)}}else this.$isRejected=!1,this.$isFulfilled=!0,this.$isExpired&&(e=this.$chain.errorExpired),n(e),p(e)}},u=e=>{this.$isSettled||(this.$isRejected=!0,this.$isFulfilled=!1,a(e),p(e))},p=e=>{this.$value=e,this.$isSettled=!0,this.$chain.chainMap.set(this,!0),this.$chain.chainConfig.chainAutoComplete&&(1!==this.$chain.chainMap.size||this.$isExpired?l():this.then(l))};let d=t.chainAutoComplete;Object.defineProperty(t,"chainAutoComplete",{get:()=>d,set:e=>{d!==e&&(d=e,e&&l())}}),o.chainMap.set(this,!1),Object.defineProperties(this,{__resolve__:{value:c},__reject__:{value:u}});try{i(c,u)}catch(e){u(e)}}then(e,t,s){let i,r,n,a=h(e)&&!e.name.startsWith("bound ");e&&"function"==typeof e&&(i=function(s){return"await"===o?n.$isAborted?t(n.$chain.errorExpired):e(s):n.$isExpired?void 0:(n.$isSettled,e(s))}),t&&"function"==typeof t&&(r=function(e){return n.$isSettled,t(e)});let o=s||(a?"await":void 0===e?"catch":"then");n=Object.assign(super.then(i,r),this),J.uid--,n.$type=o;{n.$dev_position=this.$chain.chainMap.size;let s="";e&&e.name&&(s+=e.name),t&&t.name&&(s+=","+t.name),Object.defineProperties(n,{$dev_name:{value:this.$chain.chainName+"["+this.$chain.chainId+":"+this.$dev_position+"]."+n.$type+(s?"("+s+")":"")+"["+n.$chain.chainId+":"+n.$dev_position+"]"},$dev_path:{value:new K(this.$dev_path,n)},$dev_onFulfilled:{value:e},$dev_onRejected:{value:t}})}return n.$chain.chainMap.set(n,!1),this.$isExpired&&W.setExpired(n,!0,!this.$isAborted,this.$chain.errorExpired),n}$catchExpired(e){return this.then(t=>this.$chain.chainRoot.$isExpired?e(t):t,void 0,"$catchExpired")}static resolve(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),t instanceof this&&1===arguments.length?t:new this(e,(function(e){e(t)}))}static reject(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),new this(e,(function(e,s){s(t)}))}$toPromise(){return Promise.resolve(this)}$chainAbort(e="$chainAbort()"){return this.$chain.complete(e,!0),this}$chainComplete(e="$chainComplete()"){try{this.$chain.complete(e,!1)}catch(e){throw e instanceof _.INVALID_CALL?new _.INVALID_CALL({target:e.$data.target,reason:"Trying to complete a pending chain. Use $chainAbort() if you want to stop it."}):e}return this}$chainAutoComplete(){return this.$chain.chainConfig.chainAutoComplete=!0,this}static setExpired(e,t,s,i){if(!e.$isSettled){if(!t)throw new _.INVALID_CALL({target:e,reason:"promise must be aborted or settled before setting it to expired."});e.$isAborted=!s,e.__resolve__(i)}e.$isExpired=!0}}W.DEFAULT_CONFIG={chainAutoComplete:!1};class G{constructor(e,t,s,i){Object.defineProperties(this,{chainConfig:{value:i},chainRoot:{value:e},chainId:{value:t},chainName:{value:s},chainMap:{value:new Map},isCompleted:{value:!1,configurable:!0},data:{value:{}},__deferred__:{value:c.Deferred()}})}get isPending(){return Array.from(this.chainMap.values()).includes(!1)}then(e){return this.__deferred__.done(e),this}complete(e="chain.complete()",t){let s=this.chainRoot;if(!s.$isExpired){let i=s.$chain.errorExpired=new _.PROMISE_EXPIRED({target:s,reason:e}),r=this.chainMap;for(let e of r.keys())W.setExpired(e,t,!1,i);Object.defineProperty(this,"isCompleted",{value:!0}),this.__deferred__.resolve()}return this}}class K extends Array{constructor(){super();for(let e of arguments)Array.isArray(e)?this.push(...e):this.push(e)}get printable(){return this.map((e,t)=>0===t?e.$dev_name:e.$dev_name.split(".")[1]).join(".")}toString(){return this.printable}}class z extends Promise{constructor(e){let t={$isSettled:!1,$isRejected:null,$value:void 0};super((s,i)=>{let r=!1,n=e=>{e instanceof Promise?z.resolve(e).then(n,a):r||(r=!0,t.$isSettled=!0,t.$isRejected=!1,t.$value=e,s(e))},a=e=>{r||(r=!0,t.$isSettled=!0,t.$isRejected=!0,t.$value=e,i(e))};try{e(n,a)}catch(e){a(e)}}),Object.assign(this,t),t=this}then(e,t){if(this.$isSettled){let s=this.$value;try{if(this.$isRejected){if(super.then(void 0,()=>null),!t||"function"!=typeof t)return z.reject(s);s=t(s)}else e&&"function"==typeof e&&(s=e(s))}catch(e){return z.reject(e)}return z.resolve(s)}return super.then(e,t)}static resolve(e){return e instanceof z?e:new z(e instanceof Promise?e.then.bind(e):t=>t(e))}}class Q{constructor(){Object.defineProperties(this,{registry:{value:c(Object.create(null))},handlers:{value:new WeakMap},onListenerUpdate:{value:null,writable:!0},onObserverUpdate:{value:null,writable:!0}})}on({events:e,handler:t,target:s,selector:i}){Q.validateSelector(e),w("JFactoryEvents.on({handler})",t).typeFunction(),s&&w("JFactoryEvents.on({target})",s).type(String,c,HTMLElement),i&&w("JFactoryEvents.on({selector})",s).typeString();let r=this.handlers.get(t);s?(r||this.handlers.set(t,!0),i?c(s).on(e,i,t):c(s).on(e,t),this.onListenerUpdate&&this.onListenerUpdate(arguments)):(r||(this.handlers.set(t,r=function(e,{data:s,stack:i}){i.push(()=>t(e,s))}),r.originalHandler=t),this.registry.on(e,r),this.onObserverUpdate&&this.onObserverUpdate(arguments))}off({events:e,handler:t,target:s,selector:i}){if(void 0!==e&&(Q.validateSelector(e),t&&w("JFactoryEvents.off({handler})",t).typeFunction(),s&&w("JFactoryEvents.off({target})",s).type(String,c,HTMLElement),i&&w("JFactoryEvents.off({selector})",s).typeString()),s)i?c(s).off(e,i,t):c(s).off(e,t);else{if(c("*").off(e,t),t&&!(t=this.handlers.get(t)))throw new _.INVALID_VALUE({target:"handler",reason:"not registered",given:t});this.registry.off(e,t)}this.onObserverUpdate&&this.onObserverUpdate(arguments),this.onListenerUpdate&&this.onListenerUpdate(arguments)}triggerParallel({events:e,data:t,target:s}){Q.validateSelector(e),s&&w("JFactoryEvents.triggerParallel({target})",s).type(String,c,HTMLElement);const i=[],r=[];if(e=e.split(" "),s)for(let r of e)c(s).trigger(r,{data:t,stack:i});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:i});for(let e of i){let t=e();t instanceof Promise&&!t.$isSettled&&r.push(t)}return r.length?Promise.all(r):z.resolve()}triggerSeries({events:e,data:t,target:s}){return Q.validateSelector(e),s&&w("JFactoryEvents.triggerSeries({target})",s).type(String,c,HTMLElement),new z(async i=>{const r=[];if(e=e.split(" "),s)for(let i of e)c(s).trigger(i,{data:t,stack:r});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:r});for(let e of r){let t=e();t instanceof Promise&&!t.$isSettled&&await t}i()})}}class X extends Q{constructor(e){super(),Object.defineProperties(this,{parent:{value:e},affiliateRules:{value:(new I).compose()}}),this.affiliateAddRule(X.rule_namespace)}affiliate(e="",t="",s){let i=new Z(e);for(let e of i.events)this.affiliateRules(e,t,s);return i.toString()}affiliateAddRule(e){this.affiliateRules.composer.last(e)}static rule_namespace(e,t,s){s=s.split(".");for(let e of s)e&&t.addNamespace(e)}on(e,t,s,i,r){switch(arguments.length){case 2:[i,t]=[t];break;case 3:"function"==typeof arguments[2]?[i,s]=[s]:[i,r,t,s]=[t,s];break;case 4:"object"==typeof arguments[3]&&([r,i,s]=[i,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,r),void 0===t?super.on({events:e,handler:i}):super.on({events:e,target:t,selector:s,handler:i})}off(e,t,s,i,r){const n=arguments.length;switch(n){case 1:"object"==typeof arguments[0]&&([r,e]=[e]);break;case 2:"function"==typeof arguments[1]?[i,t]=[t]:d(arguments[1])&&([r,t]=[t]);break;case 3:"function"==typeof arguments[2]?[i,s]=[s]:"function"==typeof arguments[1]&&([i,r,t,s]=[t,s]);break;case 4:"object"==typeof arguments[3]&&([r,i,s]=[i,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,r),n<2?super.off({events:e}):t?super.off({events:e,target:t,selector:s,handler:i}):super.off({events:e,handler:i})}trigger(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerSeries({events:e,target:t,data:s}):super.triggerSeries({events:e,data:s})}triggerParallel(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerParallel({events:e,target:t,data:s}):super.triggerParallel({events:e,data:s})}getDomListeners(e){let t=new Map;for(let s of c("*")){let i=c._data(s,"events");if(i)for(let r of Object.values(i))for(let i of r){let r;if(new ee(i.namespace).hasNamespace(e)){(r=t.get(s))||t.set(s,r={}),(r[i.type]||(r[i.type]=[])).push({selector:i.selector||null,handler:i.handler,namespace:i.namespace})}}}return t}getObservers(){let e=new Map,t=this.registry._events;if(!t){let e=Object.values(this.registry)[0],s=Object.getOwnPropertyNames(e).find(e=>0===e.indexOf("jQuery"));e&&s&&(t=this.registry._events=e[s].events)}if(t)for(let[s,i]of Object.entries(t)){let t=e.get(s);t||(t=[],e.set(s,t));for(let e of i)t.push({handler:e.handler.originalHandler,namespace:e.namespace})}return e}}class Z{constructor(e){Q.validateSelector(e),this.events=e.split(" ").map(e=>new ee(e))}toString(){let e=[];for(let t of this.events)e.push(t.toString());return e.join(" ")}}class ee{constructor(e){let[t,...s]=e.split(".");this.event=t,this.namespace=new Set(s)}hasNamespace(e){Array.isArray(e)||(e=[e]);for(let t of e){if(!/^[\w:]+$/.test(t))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:t});if(t&&this.namespace.has(t))return t}return!1}addNamespace(e){if(!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.add(e)}deleteNamespace(e){if(!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.delete(e)}toString(){return this.namespace.size?this.event+"."+Array.from(this.namespace.values()).join("."):this.event}}Q.validateSelector=function(e){w("JFactoryEvents.validateSelector(selector)",e).notUndefined().validSpaces();for(let[t,s]of e.split(" ").map(e=>e.split(".")).map(e=>[e.shift(),e.join(".")]))t&&Q.validateEvent(t),s&&Q.validateNamespace(s);return!0},Q.validateEvent=function(e){if(w("JFactoryEvents.validateEvent(event)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"JFactoryEvents.validateEvent(event)",reason:"must be alphanumeric, underscore and colon characters",given:e});return!0},Q.validateNamespace=function(e){if(w("JFactoryEvents.validateNamespace(namespace)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:.]+$/.test(e))throw new _.INVALID_VALUE({target:"JFactoryEvents.validateNamespace(namespace)",reason:"must be alphanumeric, underscore, dot and colon characters",given:e});return!0};class te extends W{constructor(e,t,s={}){if("function"==typeof e)super(e);else{"string"==typeof e&&([e,t,s]=[{},arguments[0],arguments[1]]);let i=new Request(t,s);super(e,(r,n)=>{let a=fetch(i).then(e=>{if(this.$chain.fetchResponse=e,!e.ok)throw Error(e.status+":"+e.statusText);return e});s.$typeText?a=a.then(e=>e.text()).then(e=>this.$chain.responseText=e):s.$typeJSON&&(a=a.then(e=>e.json()).then(e=>this.$chain.responseJSON=e)),a=a.catch(r=>{throw new _.REQUEST_ERROR({reason:r.message||r,target:this.$chain.fetchResponse&&this.$chain.fetchResponse.url||t,owner:this,fetchOptions:s,fetchRequest:i,fetchResponse:this.$chain.fetchResponse||null},e.traceSource)}),a.then(r,n)}),this.$chain.fetchOptions=s,this.$chain.fetchRequest=i;let r=s.abortController||new AbortController;s.signal=r.signal,this.$chain.fetchAbortController=r}}$chainAbort(e="request aborted"){return super.$chainAbort(e),this.$chain.fetchAbortController.abort(),this}}const se=Symbol();class ie{constructor(e){e&&w("JFactoryLogger(options)",e).properties(Object.getOwnPropertyNames(ie.DEFAULT_CONFIG)),m(this,e,ie.DEFAULT_CONFIG),this.condition=M(ie.DEFAULT_CONDITION),this.installAccessor("log"),this.installAccessor("warn"),this.installAccessor("error")}get enabled(){return this[se]&&(!this.parentLogger||this.parentLogger.enabled)}set enabled(e){e?this.enable():this.disable()}enable(){!0!==this[se]&&(this[se]=!0)}disable(){!1!==this[se]&&(this[se]=!1)}disallow(e,t=this.label){this.filters[t]||(this.filters[t]={}),this.filters[t][e]=!0}allow(e,t=this.label){this.filters[t]&&delete this.filters[t][e]}installAccessor(e,t=e,s=this){w("JFactoryLogger(nativeName)",e).equalIn(["log","warn","error"]),Object.defineProperties(s,{[t]:{get:this.accessor.bind(this,e),configurable:!0}})}accessor(e){return this[se]&&this.condition(e)&&this.formatter[e](this)||E}createSubLogger(e){let t=new ie({enabled:this.enabled,label:this.label+"."+e,styles_css:this.styles_css,styles_cli:this.styles_cli,console:this.console,formatter:this.formatter});return t.parentLogger=this,t.condition.addCondition(()=>this.enabled),t.filters=this.filters,t}}ie.FORMATTER_NATIVE={log:e=>e.console.log.bind(e.console,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.label+">"),error:e=>e.console.error.bind(e.console,e.label+">")},ie.FORMATTER_CLI={log:e=>e.console.log.bind(e.console,e.styles_cli.label,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.styles_cli.label,e.label+">"),error:e=>e.console.error.bind(e.console,e.styles_cli.label,e.label+">")},ie.FORMATTER_BROWSER={log:e=>e.console.log.bind(e.console,"%c"+e.label+">",e.styles_css.label),warn:e=>e.console.warn.bind(e.console,"%c"+e.label+">",e.styles_css.label),error:e=>e.console.error.bind(e.console,"%c"+e.label+">",e.styles_css.label)},ie.DEFAULT_CONDITION=function(e){return w("JFactoryLogger.condition(nativeName)",e).equalIn(["log","warn","error"]),w("JFactoryLogger.enabled",this.enabled).equal(!0),!(this.filters[this.label]&&this.filters[this.label][e])},ie.DEFAULT_CONFIG={label:"",enabled:!0,parentLogger:null,formatter:r?ie.FORMATTER_CLI:ie.FORMATTER_BROWSER,console:console,filters:{},styles_cli:{label:"[1;30m%s[0m"},styles_css:{label:"color: gray"}};class re extends Date{toString(){return this.toLocaleTimeString()+", "+this.getUTCMilliseconds()+"ms ("+this.valueOf()+")"}$toDurationString(){let e=this.getUTCHours(),t=this.getUTCMinutes(),s=this.getUTCSeconds(),i=this.getUTCMilliseconds(),r=[];return e&&r.push(e+"h"),t&&r.push(t+"min"),s&&r.push(s+"s"),r.push(i+"ms"),1===r.length?r[0]:r.join(",")+" ("+this.valueOf()+")"}}class ne extends Date{constructor(){super(),this.elapsed=null,Object.defineProperties(this,{t1:{value:null,writable:!0},t0:{value:new re}})}end(){this.t1=new re,this.elapsed=new re(this.t1-this.t0).$toDurationString()}toString(){return this.elapsed}}class ae{trait_constructor(){const e=this;class t extends Map{$registerSync(t,s){let i=Object.defineProperties({},{$value:{value:s},$phaseRemove:{value:pe.getContextualRemovePhase(e)}});return this.set(t,i),i}$registerAsync(t,s,i){let r=e.$task(s,i.$chain);return i.$chain.then(()=>{r.$chainAutoComplete()}),r.$chain.then(()=>{i.$chain.isCompleted||i.$chainAbort("aborted by task")}),Object.defineProperty(i,"$phaseRemove",{value:r.$phaseRemove}),this.set(t,i),r}}const s=Object.assign(Object.create(null),{[ae.SYMBOL_PRIVATE]:Object.create(null),assign:function(e,t,s){V.assign(this,e,t,s)},createSubMap:()=>new t});Object.defineProperty(this,"$",{value:Object.create(s)}),this.$.assign({tasks:null,requests:null},V.descriptors.ENUMERABLE_WRITABLE)}}ae.SYMBOL_PRIVATE=Symbol("_");class oe{trait_constructor(e){V.assign(this.$,"about",new q(this,e),V.descriptors.READONLY)}}class le{trait_constructor(){let e=Object.assign({label:this.$.about.name},n.TraitLog||{enabled:!1}),t=new ie(e);Object.defineProperty(this.$,"logger",{value:t}),t.installAccessor("log","$log",this),t.installAccessor("warn","$logWarn",this),t.installAccessor("error","$logErr",this)}}class ce{trait_constructor(){this.$.assign("tasks",new Map,V.descriptors.ENUMERABLE)}$task(e,t){if(w("$task(id)",e).typeString(),w("$task(executorOrValue)",t).notUndefined(),this.$.tasks.has(e))throw new _.KEY_DUPLICATED({target:"$task(id)",given:e});let s,i;return s="function"==typeof t?new W({name:e,owner:this},t):W.resolve({name:e,owner:this},t),s.$phaseRemove=pe.getContextualRemovePhase(this),i=new ne,s.$taskMetrics={$dev_timing:i},s.$chain.then(()=>{i.end(),this.$.tasks.get(e)&&this.$taskRemove(e)}),this.$.tasks.set(e,s),s}$taskRemove(e,t){if(w("$taskRemove(id)",e).typeString(),t&&w("$taskRemove(reason)",t).typeString(),!this.$.tasks.has(e))throw new _.KEY_MISSING({target:"$taskRemove(id)",given:e});this.$.tasks.get(e)._called,this.$.tasks.get(e)._called=!0;let s=this.$.tasks.get(e);this.$.tasks.delete(e),s.$chainAbort(t||"$taskRemove()")}$taskRemoveAll(e){w("$taskRemoveAll(removePhase)",e).equalIn(pe.PHASES);let t=this.$.tasks;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$taskRemove(s,"$taskRemoveAll("+e+")")}$taskPromiseAll(e=!1){let t=[];if(this.$.tasks.size)for(let s of this.$.tasks.values())e&&(s.$chain.chainConfig.chainAutoComplete=!0),s.$chain.isPending&&t.push(s.$chain);return t.length?Promise.all(t):z.resolve()}}class he{trait_constructor(){de(this,"events",{custom:new X(this),kernel:new X(this)},V.descriptors.NONE);let e=this.$[ae.SYMBOL_PRIVATE].events.custom;Object.defineProperties(this.$,{listeners:{get:e.getDomListeners.bind(e,this.$.about.fingerprint),enumerable:!0},observers:{get:e.getObservers.bind(e),enumerable:!0}})}$on(){this.$[ae.SYMBOL_PRIVATE].events.custom.on(...arguments)}$off(){this.$[ae.SYMBOL_PRIVATE].events.custom.off(...arguments)}$trigger(){return this.$[ae.SYMBOL_PRIVATE].events.custom.trigger(...arguments)}$triggerParallel(){return this.$[ae.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)}$notify(e,t){return this.$trigger(e,t).then(()=>this.$[ae.SYMBOL_PRIVATE].events.kernel.trigger(e,t))}}class ue{trait_constructor(){const e=Object.create(null),t=Object.create(null),s=this.$[ae.SYMBOL_PRIVATE].events.kernel;de(this,{states:e,stateRoutes:t},V.descriptors.READONLY),V.assign(this.$,"states",new Proxy(e,{set:(e,t,s)=>this.$state(t,s),get:(t,s)=>e[s]}),V.descriptors.READONLY),s.on("beforeStateChange",(e,s)=>{let i;if(t[s.key]&&t[s.key].before&&(i=t[s.key].before(s.val)))return this.$notify(i)}),s.on("afterStateChange",(e,s)=>{let i;if(t[s.key]&&t[s.key].after&&(i=t[s.key].after(s.val)))return this.$notify(i)})}$state(e,t,s=!0){return w("$state(key)",e).typeString(),w("$state(notify)",s).typeBoolean(),new z(async i=>{let r,n=this.$[ae.SYMBOL_PRIVATE].states,a=n[e];e in n&&a===t||(r=s&&this.$notify("beforeStateChange",{key:e,val:t,previousVal:a}),r&&w("beforeStateChange result",r).type(z),r&&!r.$isSettled&&(n[e]=r,await r),void 0===t?delete n[e]:n[e]=t,r=s&&this.$notify("afterStateChange",{key:e,val:t,previousVal:a}),r&&w("afterStateChange result",r).type(z)),r?r.then(i):i()})}}class pe{trait_constructor(){V.assign(this.$,"service",Object.create(null),V.descriptors.READONLY),this.$.service.phase=pe.PHASE.NONE,this.$.service.phaseQueue=W.resolve({name:"phaseQueue"},null),this.$.service.phaseTask=null,this.$.service.phaseMap={install:new Set,enable:new Set,disable:new Set,uninstall:new Set},this.$state("installed",!1,!1),this.$state("enabled",!1,!1),me(this,"stateRoutes",{installed:{after:e=>e?"install":"uninstall"},enabled:{after:e=>e?"enable":"disable"}},V.descriptors.NONE);let e=this.$[ae.SYMBOL_PRIVATE].events.custom,t=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.affiliateAddRule((e,t,s,i)=>pe.setEventNamespaceRemovePhase(this,t,i));let s=e=>{this.$.tasks.size&&this.$taskRemoveAll(this.$.service.phase);let t=z.resolve();return e&&(t=t.then(()=>e.call(this)).then(()=>this.$taskPromiseAll(!0))),t.catch(e=>{e instanceof _.PROMISE_EXPIRED||this.$logErr("unhandled promise rejection in "+this.$.service.phase+";",...e instanceof L?e:[e])})};t.on("install",()=>s(this.onInstall)),t.on("enable",()=>s(this.onEnable)),t.on("disable",()=>s(this.onDisable)),t.on("uninstall",()=>s(this.onUninstall)),t.on("disable",()=>this.$off({removal:pe.PHASE.DISABLE})),t.on("uninstall",()=>this.$off({removal:pe.PHASE.UNINSTALL}))}$install(e){let t;const s=new W({name:"install",config:{chainAutoComplete:!0}},e=>t=e).then(()=>{if(!this.$.states.installed)return this.$.service.phase=pe.PHASE.INSTALL,this.$state("installed",!0)});return this.$.service.phaseMap.install.add(s),s.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.install.delete(s),this.$.service.phase=pe.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=s,t(),s.$chain)),e?this.$enable():s}$enable(){let e;const t=new W({name:"enable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed&&!this.$.states.enabled)return this.$.service.phase=pe.PHASE.ENABLE,this.$state("enabled",!0)});return this.$.service.phaseMap.enable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.enable.delete(t),this.$.service.phase=pe.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$disable(){let e;const t=new W({name:"disable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.enabled)return this.$.service.phase=pe.PHASE.DISABLE,this.$state("enabled",!1)});this.$.service.phaseMap.disable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.disable.delete(t),this.$.service.phase=pe.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.enable.entries())t===this.$.service.phaseTask&&pe.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.enable.delete(e);return this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$uninstall(){let e;const t=new W({name:"uninstall",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed)return this.$.service.phase=pe.PHASE.UNINSTALL,this.$state("installed",!1)});this.$.service.phaseMap.uninstall.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.uninstall.delete(t),this.$.service.phase=pe.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.install.entries())t===this.$.service.phaseTask&&pe.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.install.delete(e);return this.$disable(),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}static phaseKill(e){e.$.tasks.size&&e.$taskRemoveAll(pe.getContextualRemovePhase(e)),e.$.service.phase=pe.PHASE.NONE}static getContextualRemovePhase(e){return pe.PHASE_REVERT[e.$.service.phase]}static setEventNamespaceRemovePhase(e,t,s){let i=t.hasNamespace(pe.PHASES),r=s&&s.removal;r||(r=pe.getContextualRemovePhase(e)),"uninstall"===t.event&&r===pe.PHASE.DISABLE&&(r=pe.PHASE.UNINSTALL),i!==r&&(t.deleteNamespace(i),t.addNamespace(r)),t.addNamespace(r)}}function de(e,t,s,i){V.assign(e.$[ae.SYMBOL_PRIVATE],t,s,i)}function me(e,t,s,i){V.assign(e.$[ae.SYMBOL_PRIVATE][t],s,i)}pe.PHASE={NONE:"PHASE_NONE",INSTALL:"PHASE_INSTALL",ENABLE:"PHASE_ENABLE",DISABLE:"PHASE_DISABLE",UNINSTALL:"PHASE_UNINSTALL"},pe.PHASE_REVERT={[pe.PHASE.INSTALL]:pe.PHASE.UNINSTALL,[pe.PHASE.UNINSTALL]:pe.PHASE.INSTALL,[pe.PHASE.DISABLE]:pe.PHASE.ENABLE,[pe.PHASE.ENABLE]:pe.PHASE.DISABLE,[pe.PHASE.NONE]:pe.PHASE.DISABLE},pe.PHASES=Object.values(pe.PHASE),H.PHASE=V.disinherit(pe.PHASE),H.TraitCore=ae,H.TraitAbout=oe,H.TraitLog=le,H.TraitEvents=he,H.TraitState=ue,H.TraitService=pe,H.TraitTask=ce;class fe{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$fetchRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$fetchRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("requests",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$fetch(e,t,s={}){if(w("$fetch(id)",e).typeString(),w("$fetch(url)",t).typeString(),w("$fetch(fetchOptions)",s).typePlainObject(),this.$.requests.has(e))throw new _.KEY_DUPLICATED({target:"$fetch(id)",given:e});let i=new te({name:e,traceSource:R.tracer.captureTraceSource("$fetch"),config:{chainAutoComplete:!0}},t,s);return this.$.requests.$registerAsync(e,'$fetch("'+e+'")',i),i.$chain.then(()=>{this.$.requests.has(e)&&this.$fetchRemove(e)}),i}$fetchText(e,t,s={}){return this.$fetch(e,t,{...s,$typeText:!0})}$fetchJSON(e,t,s={}){return this.$fetch(e,t,{...s,$typeJSON:!0})}$fetchRemove(e,t){if(w("$fetchRemove(id)",e).typeString(),t&&w("$fetchRemove(reason)",t).typeString(),!this.$.requests.has(e))throw new _.KEY_MISSING({target:"$fetchRemove(id)",given:e});this.$.requests.get(e)._debug_remove_called,this.$.requests.get(e)._debug_remove_called=!0;let s=this.$.requests.get(e);this.$.requests.delete(e),s.$chainAbort(t||"$fetchRemove()")}$fetchRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.requests;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$fetchRemove(s,"$fetchRemoveAll("+e+")")}}class $e{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$timeoutRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$timeoutRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("timeouts",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$timeout(e,t,s=null,...i){if(w("id",e).typeString(),w("delay",t).typeNumber(),w("handler",s).type(Function,null),this.$.timeouts.has(e))throw new _.KEY_DUPLICATED({target:"$timeout(id)",given:e});let r,n=new W({name:e,traceSource:R.tracer.captureTraceSource("$timeout"),config:{chainAutoComplete:!0}},e=>{r=setTimeout(()=>{n.$isExpired||e(s?s(...i):void 0)},t)});return n.$chain.data.timer=r,this.$.timeouts.$registerAsync(e,'$timeout("'+e+'")',n),n.$chain.then(()=>{this.$.timeouts.has(e)&&this.$timeoutRemove(e)}),n}$timeoutRemove(e,t){if(w("$timeoutRemove(id)",e).typeString(),t&&w("$timeoutRemove(reason)",t).typeString(),!this.$.timeouts.has(e))throw new _.KEY_MISSING({target:"$timeoutRemove(id)",given:e});this.$.timeouts.get(e)._debug_remove_called,this.$.timeouts.get(e)._debug_remove_called=!0;let s=this.$.timeouts.get(e);clearTimeout(s.$chain.data.timer),this.$.timeouts.delete(e),s.$chainAbort(t||"$timeoutRemove()")}$timeoutRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.timeouts;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$timeoutRemove(s,"$timeoutRemoveAll()")}}class ge{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$intervalRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$intervalRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("timeints",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$interval(e,t,s,...i){if(w("id",e).typeString(),w("handler",s).typeFunction(),w("delay",t).typeNumber(),this.$.timeints.has(e))throw new _.KEY_DUPLICATED({target:"$interval(id)",given:e});let r=setInterval(s,t,...i);this.$.timeints.$registerSync(e,r)}$intervalRemove(e){if(w("$intervalRemove(id)",e).typeString(),!this.$.timeints.has(e))throw new _.KEY_MISSING({target:"$intervalRemove(id)",given:e});this.$.timeints.get(e)._debug_remove_called,this.$.timeints.get(e)._debug_remove_called=!0,clearInterval(this.$.timeints.get(e).$value),this.$.timeints.delete(e)}$intervalRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.timeints;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$intervalRemove(s)}}class ve{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$mutationRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$mutationRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("mutations",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$mutation(e,t,s,i){if(w("id",e).typeString(),w("parent",t).type(HTMLElement,Document),w("config",s).typePlainObject(),w("handler",i).typeFunction(),this.$.mutations.has(e))throw new _.KEY_DUPLICATED({target:"$mutation(id)",given:e});let r=new MutationObserver(i);r.observe(t,s),this.$.mutations.$registerSync(e,r)}$mutationRemove(e,t){if(w("$mutationRemove(id)",e).typeString(),t&&w("$mutationRemove(reason)",t).typeString(),!this.$.mutations.has(e))throw new _.KEY_MISSING({target:"$mutationRemove(id)",given:e});this.$.mutations.get(e)._debug_remove_called,this.$.mutations.get(e)._debug_remove_called=!0,this.$.mutations.get(e).$value.disconnect(),this.$.mutations.delete(e)}$mutationRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.mutations;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$mutationRemove(s)}}class be{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$domRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$domRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("dom",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$dom(e,t,s){let i;if(w("id",e).typeString(),w("jQueryArgument",t).type(String,Object),s&&w("appendTo",s).type(String,Object),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.dom.has(e))throw new _.KEY_DUPLICATED({target:"$dom(id)",given:e});let r=c(t);if("TEMPLATE"===r[0].tagName&&(r=c(c(r[0]).html())),i){if(r[0].nodeType!==Node.ELEMENT_NODE)throw new _.INVALID_VALUE({target:"$dom(#id)",given:r,reason:"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE"});r[0].id=e}return s&&r.appendTo(s),this.$.dom.$registerSync(e,r).$value}$domFetch(e,t,s,i){let r;if(s&&!d(s)&&([s,i]=[{},s]),w("id",e).typeString(),w("url",t).typeString(),i&&w("appendTo",i).type(String,Object),s&&w("fetchOptions",s).type(Object),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.dom.has(e))throw new _.KEY_DUPLICATED({target:"$domFetch(id)",given:e});let n=this.$fetchText('$domFetch("'+e+'")',t,s).then(t=>{let s=c(t);return r&&(s[0].id=e),i&&s.appendTo(i),s});return this.$.dom.$registerAsync(e,'$domFetch("'+e+'")',n),n}$domRemove(e,t){if(w("$domRemove(id)",e).typeString(),t&&w("$domRemove(reason)",t).typeString(),!this.$.dom.has(e))throw new _.KEY_MISSING({target:"$domRemove(id)",given:e});this.$.dom.get(e)._debug_remove_called,this.$.dom.get(e)._debug_remove_called=!0;let s=this.$.dom.get(e),i=s.$value;i instanceof c&&i.remove(),s instanceof te&&s.$chainAbort(t||"$domRemove()"),this.$.dom.delete(e)}$domRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.dom;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$domRemove(s)}}class Ee{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$cssRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$cssRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("css",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$css(e,t){let s;if(w("id",e).typeString(),w("css",t).typeString(),"#"===e[0]&&(e=e.substring(1),s=!0),this.$.css.has(e))throw new _.KEY_DUPLICATED({target:"$css(id)",given:e});return this.$.css.$registerSync(e,c("<style>").attr(s?{id:e}:{}).html(t).appendTo("head")).$value}$cssFetch(e,t,s="head"){let i;if(w("id",e).typeString(),w("url",t).typeString(),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.css.has(e))throw new _.KEY_DUPLICATED({target:"$cssFetch(id)",given:e});t=b(t);let r=c(s).find(`link[href="${t}"]`)[0];if(r){r.dataset.usage=parseInt(r.dataset.usage)+1;let t=c(r),s=W.resolve({name:e,config:{chainAutoComplete:!0},traceSource:R.tracer.captureTraceSource("$cssFetch")},t);return s.$chain.data.dom=t,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',s),s}{let r,n=new W({name:e,config:{chainAutoComplete:!0},traceSource:R.tracer.captureTraceSource("$cssFetch")},n=>r=c("<link>",{id:i?e:"",rel:"stylesheet",type:"text/css","data-usage":"1"}).appendTo(s).on("load",()=>n(r)).attr("href",t));return n.$chain.data.dom=r,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',n),n}}$cssRemove(e,t){if(w("$cssRemove(id)",e).typeString(),t&&w("$cssRemove(reason)",t).typeString(),!this.$.css.has(e))throw new _.KEY_MISSING({target:"$cssRemove(id)",given:e});this.$.css.get(e)._debug_remove_called,this.$.css.get(e)._debug_remove_called=!0;let s=this.$.css.get(e),i=s.$chain&&s.$chain.data.dom||s.$value;if(i instanceof c){let e=parseInt(i[0].dataset.usage)-1;e?i[0].dataset.usage=e:i.remove()}s instanceof W&&s.$chainAbort(t||"$cssRemove()"),this.$.css.delete(e)}$cssRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.css;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$cssRemove(s)}}class Ae{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$vueRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$vueRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("vue",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$vue(e,t){if(w("id",e).typeString(),w("vue",t).type(Object),this.$.vue.has(e))throw new _.KEY_DUPLICATED({target:"$vue(id)",given:e});return this.$.vue.$registerSync(e,t).$value}$vueRemove(e){if(w("$vueRemove(id)",e).typeString(),!this.$.vue.has(e))throw new _.KEY_MISSING({target:"$vueRemove(id)",given:e});this.$.vue.get(e)._debug_remove_called,this.$.vue.get(e)._debug_remove_called=!0;let t=this.$.vue.get(e);c(t.$value.$el).remove(),t.$value.$destroy(),this.$.vue.delete(e)}$vueRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.vue;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$vueRemove(s)}}class Se{trait_constructor(){const e=this.$[ae.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$reactRemoveAll(pe.PHASE.DISABLE)),e.on("uninstall",()=>this.$reactRemoveAll(pe.PHASE.UNINSTALL)),this.$.assign("react",this.$.createSubMap(),V.descriptors.ENUMERABLE)}$react(e,t,s,...i){if(!H.ReactDOM)throw new Error("jFactory.ReactDOM=ReactDOM must be set before using the React Trait");if(w("id",e).typeString(),w("container",t).type(HTMLElement,c),this.$.react.has(e))throw new _.KEY_DUPLICATED({target:"$react(id)",given:e});t=c(t)[0];let r=H.ReactDOM.render(s,t,...i);return this.$.react.$registerSync(e,{container:t,view:r}).$value.view}$reactRemove(e){if(w("$reactRemove(id)",e).typeString(),!this.$.react.has(e))throw new _.KEY_MISSING({target:"$reactRemove(id)",given:e});this.$.react.get(e)._debug_remove_called,this.$.react.get(e)._debug_remove_called=!0;let t=this.$.react.get(e).$value.container;t&&(H.ReactDOM.unmountComponentAtNode(t)||this.$logWarn("unmountComponentAtNode failed to unmount",t),c(t).remove()),this.$.react.delete(e)}$reactRemoveAll(e){w("removePhase",e).equalIn(pe.PHASES);let t=this.$.react;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$reactRemove(s)}}H.TraitFetch=fe,H.TraitTimeout=$e,H.TraitInterval=ge,H.TraitMutation=ve,H.TraitDOM=be,H.TraitCSS=Ee,H.TraitLibVue=Ae,H.TraitLibReact=Se,"undefined"!=typeof jFactoryOverride&&jFactoryOverride||a.init();export{r as JFACTORY_CLI,i as JFACTORY_DEBUG,s as JFACTORY_DEV,q as JFactoryAbout,B as JFactoryComponent,U as JFactoryCoreObject,L as JFactoryError,ee as JFactoryEventSelector,Z as JFactoryEventSelectorParser,Q as JFactoryEvents,X as JFactoryEventsManager,w as JFactoryExpect,te as JFactoryFetch,I as JFactoryFunctionComposer,C as JFactoryFunctionConditional,j as JFactoryFunctionExpirable,D as JFactoryFunctionWrappable,ie as JFactoryLogger,V as JFactoryObject,W as JFactoryPromise,G as JFactoryPromiseChain,K as JFactoryPromisePath,z as JFactoryPromiseSync,re as JFactoryTime,ne as JFactoryTimeTrace,y as JFactoryTrace_LIB_STACKTRACE,S as JFactoryTrace_NOFILTER,P as JFactoryTraits,oe as TraitAbout,Ee as TraitCSS,ae as TraitCore,be as TraitDOM,he as TraitEvents,fe as TraitFetch,ge as TraitInterval,Se as TraitLibReact,Ae as TraitLibVue,le as TraitLog,ve as TraitMutation,pe as TraitService,ue as TraitState,ce as TraitTask,$e as TraitTimeout,de as assignPrivate,me as assignPrivateMember,H as jFactory,n as jFactoryConfig,o as jFactoryDev,_ as jFactoryError,M as jFactoryFunctionConditional,N as jFactoryFunctionExpirable,k as jFactoryFunctionWrappable,l as jFactoryInit,a as jFactoryLoader,R as jFactoryTrace,F as jFactoryTraits};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
