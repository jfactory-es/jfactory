/*!
 * jFactory v1.7.0-alpha.0
 * https://github.com/jfactory-es/jfactory
 *
 * Copyright (c) 2019, StÃ©phane Plazis
 * https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt
 */
import e from"lodash";import t from"jquery";const s=!0,i=!1,r="undefined"!=typeof process&&process.versions&&process.versions.node,a={TraitLog:!r||false,JFactoryError:{keys:["$.about.name","$dev_name","$name","name","id"]},JFactoryTrace:!r&&{keys:["$dev_traceLog","$dev_traceSource"],libOptions:{offline:Boolean(globalThis.chrome),filter:function(e){return e.lineNumber}}},jFactoryDev:{requireCompatibility:{globalThis:{test:()=>globalThis,info:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},fetch:{test:()=>fetch,info:"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"},Request:{test:()=>Request,info:"https://developer.mozilla.org/docs/Web/API/Request"},"AbortController, AbortSignal":{test:()=>(new AbortController).signal,info:"https://developer.mozilla.org/docs/Web/API/AbortController, https://developer.mozilla.org/docs/Web/API/AbortSignal"},MutationObserver:{test:()=>MutationObserver,info:"https://developer.mozilla.org/docs/Web/API/MutationObserver"}}}},n={seq:[],init(){if(this.seq){let e=this.seq;delete this.seq;for(let t of e)t();delete globalThis.jFactoryOverride}},onInit(e){this.seq.push(e)}};n.onInit((function(){console.log("jFactory is running in development mode; performances will be affected");for(let[e,t]of Object.entries(a.jFactoryDev.requireCompatibility)){let s;try{s=Boolean(t.test())}catch(e){}s||console.warn(`jFactory may require the support of "${e}", ${t.info}`)}})),n.onInit((function(){!a.TraitLog&&console.warn("jFactory logs disabled")}));const o=t,l=e.isNative,c=e.isString,h=e.isNumber,u=e.isPlainObject,d=e.defaultsDeep,p=e.lowerFirst,m=e.get,$=e.template,f=e.camelCase,g=()=>{},v=(e,t)=>Object.defineProperty(t,"name",{value:e}),b=e=>("a"in b||(b.a=document.createElement("a")),b.a.href=e,b.a.href);class E{constructor({label:e,stackTraceLimit:t,keys:s,libOptions:i}={}){this.label=e||"The stack has been printed in the console",this.stackTraceLimit=t||1/0,this.keys=s||["stackLog","stackSource"],this.libOptions=i||{}}captureTraceSource(e,t){let s;this.stackTraceLimit&&(s=Error.stackTraceLimit,Error.stackTraceLimit=this.stackTraceLimit),e||(e="captureTraceSource",t=!0);let i={source:new Error,omitAboveFunctionName:e,omitSelf:t};return this.stackTraceLimit&&(Error.stackTraceLimit=s),i}attachTrace(e,t){"object"!=typeof t&&(t=this.captureTraceSource(t||"attachTrace",!t));let s=t.source;this.toPrintableTrace(t).then(e=>s=e);let i=()=>console.log(s)||this.label;Object.defineProperty(e,this.keys[0],{enumerable:!1,configurable:!0,get:()=>i()}),Object.defineProperty(e,this.keys[1],{enumerable:!1,configurable:!0,get:()=>t})}toPrintableTrace(e){return Promise.resolve(e.source)}}class A extends E{constructor(e){super(e)}toPrintableTrace(e){return StackTrace.fromError(e.source,this.libOptions).then(t=>{if(e.omitAboveFunctionName){let s=t.findIndex(t=>t.functionName&&t.functionName.endsWith(e.omitAboveFunctionName));s>0&&(e.omitSelf&&s++,t=t.slice(s))}return t=t.filter(this.libOptions.filter),this.formatTraceFrames(t)})}formatTraceFrames(e){let t,s;return this.libOptions.offline&&window.chrome?(t="Error\n",s="\tat "):(t="",s=""),t+e.map(e=>s+e.toString()).join("\n")}}const S={};n.onInit((function(){let e=a.JFactoryTrace;if(e&&!1!==e.use){let t;t="function"==typeof e.use?e.use:"object"==typeof StackTrace?A:E,t===A&&console.warn("jFactory: Stack trace enabled; Performance will be affected"),S.tracer=new t(e)}else S.tracer={captureTraceSource:g,attachTrace:g}}));class y extends Error{constructor(e="unspecified error",t=null){t=Object.assign(Object.create(null),t),super(e=y.toPrintable(e,t)),this.$data=Object.assign(Object.create(null),t)}toString(){return this.message}*[Symbol.iterator](){yield this.message,yield this.$data}static getId(e){return e[(a.JFactoryError.keys||y.DEFAULT_KEYS).find(t=>{let s=m(e,t);return s||0===s})]}static toPrintableData(e){const t={};let s;for(let[i,r]of Object.entries(e)){switch(typeof r){case"function":r=r.name+"()";break;case"object":if(null===r){r="null";break}if(r instanceof Error){r=r.toString();break}if(void 0!==(s=y.getId(r)))r='"'+s+'"';else if(l(r.toString))try{s=JSON.stringify(r),r=s.length>y.JSON_MAX?s.substring(0,y.JSON_MAX)+"[...]":s}catch(e){r="[object "+r.constructor.name+"]"}else r=r.toString();break;case"string":r='"'+r+'"';break;default:r=String(r)}t[i]=r}return t}static toPrintable(e,t){const s=[];for(let i of e.split(";")){let e,r=y.RE_PLACEHOLDER;if(r.lastIndex=0,e=r.exec(i)){do{if(e[1]&&e[1]in t){s.push(i.trim());break}}while(null!==(e=r.exec(i)))}else s.push(i.trim())}return p($(s.join("; "))(y.toPrintableData(t)))}}y.JSON_MAX=40,y.DEFAULT_KEYS=["name","id"],y.RE_PLACEHOLDER=/\${([^}]+)}/g;let _=new Proxy(y,{set:function(e,t,s){let{template:i}=s;if(e[t])throw new Error("already declared");return e[t]=class extends y{constructor(e,t){super(i,e),S.tracer.attachTrace(this.$data,t)}},e[t].prototype.name="Error jFactoryError."+t,!0}});function R(e,t){if(!new.target)return new R(e,t);this.label=e,this.value=t}_.INVALID_VALUE={template:"invalid value for ${target}; Reason: ${reason}; Given: ${given}"},_.INVALID_CALL={template:"invalid call ${target}; Reason: ${reason}; Owner: ${owner}"},_.PROMISE_EXPIRED={template:"expired promise ${target}; Reason: ${reason}"},_.REQUEST_ERROR={template:"error requesting ${target}; Reason: ${reason}; Owner: ${owner}"},_.KEY_DUPLICATED={template:"duplicated key for ${target}; Given: ${given}"},_.KEY_MISSING={template:"missing key for ${target}; Given: ${given}"};const L=function(e,t,s){throw new _.INVALID_VALUE({target:e,reason:s,given:t})},w={notUndefined:(e,t)=>(void 0===t&&L(e,t,"cannot be undefined"),!0),notEmptyString:(e,t)=>(""===t&&L(e,t,"cannot be empty string"),!0),notFalsy:(e,t)=>(t||L(e,t,'cannot be a falsy value (undefined, null, NaN, 0, "")'),!0),validSpaces:(e,t)=>(t.replace&&t.replace(/\s+/g," ").trim()===t||L(e,t,"invalid space delimiters"),!0),matchReg:(e,t,s)=>(s.test(t)||L(e,t,'string "'+t+'" must match '+s),!0),type(e,t,...s){let i,r=!1;for(let a of s){null===a?i="Null":"name"in a&&(i=a.name);let s=w["type"+i];if(s)try{r=s(e,t)}catch(e){}else r=t instanceof a;if(r)break}return r||L(e,t,"must be an instance of ["+s.map(e=>e.name).join(", ")+"]"),!0},typeNull:(e,t)=>(null!==t&&L(e,t,"must be null"),!0),typeBoolean:(e,t)=>(!0!==t&&!1!==t&&L(e,t,"must be a boolean"),!0),typeString:(e,t)=>(c(t)||L(e,t,"must be a string"),!0),typeNumber:(e,t)=>(h(t)||L(e,t,"must be a number"),!0),typeFunction:(e,t)=>("function"!=typeof t&&L(e,t,"must be a function"),!0),typePlainObject:(e,t)=>(u(t)||L(e,t,"must be a plain object"),!0),equal(e,t,...s){let i=!1;for(let e of s)if(i=t===e)break;return i||L(e,t,"must be one of ["+s+"]"),!0},equalIn:(e,t,s)=>(Array.isArray(s)||(s=Object.values(s)),s.includes(t)||L(e,t,"must be one from ["+s.join(", ")+"]"),!0),properties(e,t,s){for(let i of Object.getOwnPropertyNames(t))R(e+', property name "'+i+'"',i).equalIn(s);return!0},writable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable||L(e,t,"must be writable"),!0),notWritable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable&&L(e,t,"must not be writable"),!0),enumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)||L(e,t,"must be enumerable"),!0),notEnumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)&&L(e,t,"must not be enumerable"),!0),configurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable||L(e,t,"must be configurable"),!0),notConfigurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable&&L(e,t,"must not be configurable"),!0),reservedProperty:(e,t,s)=>(s in t&&L(e,t,"is a reserved property"),!0)};n.onInit((function(){Object.assign(R,w);for(const e of Object.getOwnPropertyNames(w))R.prototype[e]=function(...t){return R[e](this.label,this.value,...t),this}}));class O{constructor(e,t,s={}){this.callerInstance=e,this.callerConstructor=t,this.options=s}use(e,...t){R("JFactoryTraits(trait)",e).typeFunction();let{callerInstance:s,callerConstructor:i}=this,r=O.CACHE.get(s);if(r){if(r.has(e))return a.TraitLog&&console.warn(e.name+" already called on",s),this;r.add(e)}else O.CACHE.set(s,new WeakSet([e]));!i.JFactoryTrait&&(i.JFactoryTrait=new WeakSet),i.JFactoryTrait.has(e)||(i.JFactoryTrait.add(e),this.export(e.prototype,i.prototype),this.export(e,i,!0));let n=new e(s,...t);return n.trait_constructor&&n.trait_constructor.apply(s,t),this}export(e,t,s){let i=Object.getOwnPropertyDescriptors(e);for(let r of Object.keys(i)){let a=O.getPrefix(r);if(O.getTarget(r,t,a)){let a=i[r],n=(this.options.parser||O.defaultParser)(r,a,e,t,s);n&&(({propertyName:r,propertyDescriptor:a}=n),Object.defineProperty(t,r,a))}}}static defaultParser(e,t,s,i,r){let n=t.value;return r?null:e in i?(a.TraitLog&&console.warn(`${i.constructor.name}> skipping export of existing property "${e}"`,n),null):"object"==typeof n?(a.TraitLog&&console.warn(`${i.constructor.name}> skipping export of shared object "${e}"`,n),null):{propertyName:e,propertyDescriptor:t}}static getPrefix(e){let t=e.split("_");return t.length>1?t[0]:null}static getTarget(e,t,s){return O.EXCLUDES.includes(e)||"trait"===s?null:t}}O.CACHE=new WeakMap,O.EXCLUDES=["constructor","prototype","length","size"];class T{constructor(){this.handlers=Object.create(null)}*[Symbol.iterator](e=[]){e.length||(e=Object.keys(this.handlers)),e.length||(e=["default"]);for(let t of e)t in this.handlers&&(yield*this.handlers[t])}first(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).unshift(t),this}last(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).push(t),this}compose(...e){let t=this,s=function(){let s={canceled:!1,parameters:Array.from(arguments),result:void 0},i=t[Symbol.iterator](e),r=i.next();return T.composite_iterator(this,s,r,i)};return s.composer=t,s}static composite_iterator(e,t,s,i){let r,a;for(;!t.canceled&&!s.done;)if(r=s.value,a=e?r.call(e,t,...t.parameters):r(t,...t.parameters),s=i.next(),a instanceof Promise){if(!s.done||a.constructor===Promise)return a.then(v([r.name,"[compositeAsyncHandler]"].filter(Boolean).join(" "),(function(r){return t.result=r,T.composite_iterator(e,t,s,i)})));t.result=a}else t.result=a;return t.result}}function P(e){return new I(e).compose()}class I{constructor(e){this.originalHandler=e,this.expiredCalls=0,this.composer=new T;let t,s=this.composer.compose("conditions"),i=this;this.isExpired=e=>t||s.call(e)||!1,this.setExpired=e=>t=e?e instanceof Error?e:new _.INVALID_CALL({target:this.originalHandler,reason:"manually expired"}):Boolean(this.expiredCalls=0),this.addExpireCondition=function(e){this.composer.last("conditions",(function(t){let s=function(s){return R("JFactoryFunctionExpirable.addExpireCondition(), result",s).type(Boolean,Error),i.setExpired(!!s&&((t.canceled=!0)&&(s instanceof Error?s:new _.INVALID_CALL({target:i.originalHandler,reason:"conditionally expired",condition:e}))))},r=e.apply(this,t.parameters);return r instanceof Promise?r.then(s):s(r)}))}}compose(){let e=this,t=function(){let t=e.isExpired(this),s=e.constructor.call.bind(void 0,e,this,arguments);return t instanceof Promise?t.then(s):s(t)};return Object.assign(t,{expirable:this,isExpired:e=>this.isExpired(e),setExpired:e=>this.setExpired(e),addExpireCondition:e=>(this.addExpireCondition(e),t)})}static call(e,t,s,i){return i?e.onExpired(i):e.onNotExpired(t,s)}onExpired(e){return this.expiredCalls<I.MaxWarningExpiration&&(this.expiredCalls++,a.TraitLog&&console.warn(...new _.INVALID_CALL({...e.$data,reason:e.$data.reason+"; expiredCalls="+this.expiredCalls+(this.expiredCalls===I.MaxWarningExpiration?"; Max Warning Exceeded":"")}))),e}onNotExpired(e,t){return this.originalHandler.apply(e,t)}}function N(e){return new j(e).compose()}I.MaxWarningExpiration=10;class j{constructor(e){this.originalHandler=e,this.composer=new T,this.composer.first("original",v([e.name,"[condition]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("conditions","original");return Object.assign(e,{conditional:this,addCondition:t=>(this.addCondition(t),e)})}addCondition(e){this.composer.last("conditions",(function(t){let s=function(e){R("JFactoryFunctionConditional.addCondition(), result",e).typeBoolean(),!e&&(t.canceled=!0)},i=e.apply(this,t.parameters);return i instanceof Promise?i.then(s):s(i)}))}}function C(e){return new M(e).compose()}class M{constructor(e){this.originalHandler=e,this.composer=new T,this.composer.first("original",v([e.name,"[wrapped]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("before","original","after");return Object.assign(e,{wrappable:this,beforeAll:t=>(this.beforeAll(t),e),justBefore:t=>(this.justBefore(t),e),justAfter:t=>(this.justAfter(t),e),afterAll:t=>(this.afterAll(t),e)})}beforeAll(e){this.composer.first("before",e)}justBefore(e){this.composer.last("before",e)}justAfter(e){this.composer.first("after",e)}afterAll(e){this.composer.last("after",e)}}function k(e,t){return new O(e,t,{parser(e,t){let s=O.defaultParser(...arguments);if(s){({propertyName:e,propertyDescriptor:t}=s);let i=t.value;if("function"==typeof i)switch(i.name){case"$install":case"$uninstall":case"$enable":case"$disable":case"$state":break;default:t.value=C(i).beforeAll((function(){if(!this.$.states.enabled&&"PHASE_NONE"===this.$.service.phase){let e=new _.INVALID_CALL({owner:this,target:i,reason:"component disabled"});throw this.$logErr(...e),e}}))}return{propertyName:e,propertyDescriptor:t}}}})}class D{constructor(e){D.inject(this,D,e)}static inject(e,t,s){k(e,t).use(U.TraitCore).use(U.TraitAbout,{name:s}).use(U.TraitLog).use(U.TraitEvents).use(U.TraitState).use(U.TraitService).use(U.TraitTask)}}class F extends D{constructor(e){super(e),F.inject(this,F)}static inject(e,t){k(e,t).use(U.TraitFetch).use(U.TraitDOM).use(U.TraitCSS).use(U.TraitMutation).use(U.TraitTimeout).use(U.TraitInterval).use(U.TraitLibVue).use(U.TraitLibReact)}}const U=(e,t)=>Object.assign(new F(e),t);class B{static createDescriptors(e=B.DESCRIPTORS_PROTOTYPE){let t=B.create(e,!0,!0),s=Object.create(null);return s.NONE=t(),s.WRITABLE=t({writable:!0}),s.ENUMERABLE=t({enumerable:!0}),s.CONFIGURABLE=t({configurable:!0}),s.CONFIGURABLE_WRITABLE=s.WRITABLE_CONFIGURABLE=t({writable:!0,configurable:!0}),s.CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE=t({enumerable:!0,configurable:!0}),s.ENUMERABLE_WRITABLE=s.WRITABLE_ENUMERABLE=t({writable:!0,enumerable:!0}),s.WRITABLE_ENUMERABLE_CONFIGURABLE=s.WRITABLE_CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE_WRITABLE=s.ENUMERABLE_WRITABLE_CONFIGURABLE=s.CONFIGURABLE_WRITABLE_ENUMERABLE=s.CONFIGURABLE_ENUMERABLE_WRITABLE=t({writable:!0,enumerable:!0,configurable:!0}),s.READONLY=t({writable:!1,enumerable:!1,configurable:!1}),s}static assign(e,t,s,i){let r={};switch(typeof t){case"string":case"symbol":if(!i)throw new Error("missing descriptor argument; use Object.assign instead");(i=Object.create(i)).value=s,Object.defineProperty(e,t,i);break;case"object":if([s,i]=[t,s],!i)throw new Error("missing descriptor argument; use Object.assign instead");for(let e of Object.getOwnPropertyNames(s))r[e]=Object.create(i),r[e].value=s[e];for(let e of Object.getOwnPropertySymbols(s))r[e]=Object.create(i),r[e].value=s[e];Object.defineProperties(e,r);break;default:throw new Error("invalid property argument")}return e}static create(e,t=!1,s=!1){return function(i){return t?Object.assign(s?Object.create(null):{},e,i):Object.assign(Object.create(s?Object.assign(Object.create(null),e):e),i)}}static disinherit(e){return Object.assign(Object.create(null),e)}}B.DESCRIPTORS_PROTOTYPE={writable:!1,enumerable:!1,configurable:!1},n.onInit((function(){B.descriptors=B.createDescriptors()}));const H=()=>++H.uid;H.uid=0;class V{constructor(e,t={}){let s,i;R("JFactoryAbout(owner)",e).type(Object),R("JFactoryAbout(about)",t).typePlainObject().reservedProperty("uid").reservedProperty("fingerprint"),"name"in t&&R("JFactoryAbout(about.name)",t.name).typeString().notEmptyString();let r=H();t.name?(s=t.name,delete t.name,i="jFactory_"+f(s.toLowerCase())+"_"+r):(delete t.name,s=`[${e.constructor.name}#${r}]`,i="jFactory_"+e.constructor.name+"_"+r),B.assign(this,{uid:r,name:s,fingerprint:i},B.descriptors.ENUMERABLE),Object.assign(this,t),R("JFactoryAbout.name",this.name).matchReg(/^[\w[\]#]+$/),R("JFactoryAbout.fingerprint",this.fingerprint).matchReg(/^[\w]+$/)}}const Y=()=>++Y.uid;Y.uid=0;class q extends Promise{constructor({name:e,config:t,traceSource:s},i){1===arguments.length&&([e,t,i]=[null,null,arguments[0]]);const r=Y();let a,n;t={...q.DEFAULT_CONFIG,...t},R("name",e=e||"unnamed").type(String,Number).matchReg(/^[^. ]+$/),R("config",t).typePlainObject(),R("executor",i).typeFunction(),super((e,t)=>{a=e,n=t});const o=new J(this,r,e,t);Object.defineProperties(this,{$chain:{enumerable:!0,writable:!0,value:o},$type:{writable:!0,value:"promise"},$value:{writable:!0,value:void 0},$isSettled:{writable:!0,value:!1},$isRejected:{writable:!0,value:null},$isFulfilled:{writable:!0,value:null},$isExpired:{writable:!0,value:!1},$isAborted:{writable:!0,value:!1}}),Object.defineProperties(this,{$dev_name:{configurable:!0,value:e+"["+r+":0]"},$dev_path:{writable:!0,value:new W(this)},$dev_position:{writable:!0,value:0}}),l(i)||Object.defineProperties(this,{$dev_source:{value:i}}),S.tracer.attachTrace(this,s);const c=()=>{if(!this.$chain.isPending)try{this.$chainComplete("auto-completed")}catch(e){console.error(e)}},h=e=>{if(!this.$isSettled){if(e===this)return void u(new TypeError("Chaining cycle detected for promise "+this.$dev_name));let t;if(null!==e&&("object"==typeof e||"function"==typeof x))try{t=e.then}catch(e){return void u(e)}if("function"==typeof t){let s=!1,i=function(e){s||(s=!0,h(e))},r=function(e){s||(s=!0,u(e))};try{t.call(e,i,r)}catch(e){s||u(e)}}else this.$isRejected=!1,this.$isFulfilled=!0,this.$isExpired&&(e=this.$chain.errorExpired),a(e),d(e)}},u=e=>{this.$isSettled||(this.$isRejected=!0,this.$isFulfilled=!1,n(e),d(e))},d=e=>{this.$value=e,this.$isSettled=!0,this.$chain.chainMap.set(this,!0),this.$chain.chainConfig.chainAutoComplete&&(1!==this.$chain.chainMap.size||this.$isExpired?c():this.then(c))};let p=t.chainAutoComplete;Object.defineProperty(t,"chainAutoComplete",{get:()=>p,set:e=>{p!==e&&(p=e,e&&c())}}),o.chainMap.set(this,!1),Object.defineProperties(this,{__resolve__:{value:h},__reject__:{value:u}});try{i(h,u)}catch(e){u(e)}}then(e,t,s){let i,r,a,n=l(e)&&!e.name.startsWith("bound ");e&&"function"==typeof e&&(i=function(s){return"await"===o?a.$isAborted?t(a.$chain.errorExpired):e(s):a.$isExpired?void 0:(a.$isSettled,e(s))}),t&&"function"==typeof t&&(r=function(e){return a.$isSettled,t(e)});let o=s||(n?"await":void 0===e?"catch":"then");a=Object.assign(super.then(i,r),this),Y.uid--,a.$type=o;{a.$dev_position=this.$chain.chainMap.size;let s="";e&&e.name&&(s+=e.name),t&&t.name&&(s+=","+t.name),Object.defineProperties(a,{$dev_name:{value:this.$chain.chainName+"["+this.$chain.chainId+":"+this.$dev_position+"]."+a.$type+(s?"("+s+")":"")+"["+a.$chain.chainId+":"+a.$dev_position+"]"},$dev_path:{value:new W(this.$dev_path,a)},$dev_onFulfilled:{value:e},$dev_onRejected:{value:t}})}return a.$chain.chainMap.set(a,!1),this.$isExpired&&q.setExpired(a,!0,!this.$isAborted,this.$chain.errorExpired),a}$catchExpired(e){return this.then(t=>this.$chain.chainRoot.$isExpired?e(t):t,void 0,"$catchExpired")}static resolve(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),t instanceof this&&1===arguments.length?t:new this(e,(function(e){e(t)}))}static reject(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),new this(e,(function(e,s){s(t)}))}$toPromise(){return Promise.resolve(this)}$chainAbort(e="$chainAbort()"){return this.$chain.complete(e,!0),this}$chainComplete(e="$chainComplete()"){try{this.$chain.complete(e,!1)}catch(e){throw e instanceof _.INVALID_CALL?new _.INVALID_CALL({target:e.$data.target,reason:"Trying to complete a pending chain. Use $chainAbort() if you want to stop it."}):e}return this}$chainAutoComplete(){return this.$chain.chainConfig.chainAutoComplete=!0,this}static setExpired(e,t,s,i){if(!e.$isSettled){if(!t)throw new _.INVALID_CALL({target:e,reason:"promise must be aborted or settled before setting it to expired."});e.$isAborted=!s,e.__resolve__(i)}e.$isExpired=!0}}q.DEFAULT_CONFIG={chainAutoComplete:!1};class J{constructor(e,t,s,i){Object.defineProperties(this,{chainConfig:{value:i},chainRoot:{value:e},chainId:{value:t},chainName:{value:s},chainMap:{value:new Map},isCompleted:{value:!1,configurable:!0},data:{value:{}},__deferred__:{value:o.Deferred()}})}get isPending(){return Array.from(this.chainMap.values()).includes(!1)}then(e){return this.__deferred__.done(e),this}complete(e="chain.complete()",t){let s=this.chainRoot;if(!s.$isExpired){let i=s.$chain.errorExpired=new _.PROMISE_EXPIRED({target:s,reason:e}),r=this.chainMap;for(let e of r.keys())q.setExpired(e,t,!1,i);Object.defineProperty(this,"isCompleted",{value:!0}),this.__deferred__.resolve()}return this}}class W extends Array{constructor(){super();for(let e of arguments)Array.isArray(e)?this.push(...e):this.push(e)}get printable(){return this.map((e,t)=>0===t?e.$dev_name:e.$dev_name.split(".")[1]).join(".")}toString(){return this.printable}}class G extends Promise{constructor(e){let t={$isSettled:!1,$isRejected:null,$value:void 0};super((s,i)=>{let r=!1,a=e=>{e instanceof Promise?G.resolve(e).then(a,n):r||(r=!0,t.$isSettled=!0,t.$isRejected=!1,t.$value=e,s(e))},n=e=>{r||(r=!0,t.$isSettled=!0,t.$isRejected=!0,t.$value=e,i(e))};try{e(a,n)}catch(e){n(e)}}),Object.assign(this,t),t=this}then(e,t){if(this.$isSettled){let s=this.$value;try{if(this.$isRejected){if(super.then(void 0,()=>null),!t||"function"!=typeof t)return G.reject(s);s=t(s)}else e&&"function"==typeof e&&(s=e(s))}catch(e){return G.reject(e)}return G.resolve(s)}return super.then(e,t)}static resolve(e){return e instanceof G?e:new G(e instanceof Promise?e.then.bind(e):t=>t(e))}}class K{constructor(){Object.defineProperties(this,{registry:{value:o(Object.create(null))},handlers:{value:new WeakMap},onListenerUpdate:{value:null,writable:!0},onObserverUpdate:{value:null,writable:!0}})}on({events:e,handler:t,target:s,selector:i}){K.validateSelector(e),R("JFactoryEvents.on({handler})",t).typeFunction(),s&&R("JFactoryEvents.on({target})",s).type(String,o,HTMLElement),i&&R("JFactoryEvents.on({selector})",s).typeString();let r=this.handlers.get(t);s?(r||this.handlers.set(t,!0),i?o(s).on(e,i,t):o(s).on(e,t),this.onListenerUpdate&&this.onListenerUpdate(arguments)):(r||(this.handlers.set(t,r=function(e,{data:s,stack:i}){i.push(()=>t(e,s))}),r.originalHandler=t),this.registry.on(e,r),this.onObserverUpdate&&this.onObserverUpdate(arguments))}off({events:e,handler:t,target:s,selector:i}){if(void 0!==e&&(K.validateSelector(e),t&&R("JFactoryEvents.off({handler})",t).typeFunction(),s&&R("JFactoryEvents.off({target})",s).type(String,o,HTMLElement),i&&R("JFactoryEvents.off({selector})",s).typeString()),s)i?o(s).off(e,i,t):o(s).off(e,t);else{if(o("*").off(e,t),t&&!(t=this.handlers.get(t)))throw new _.INVALID_VALUE({target:"handler",reason:"not registered",given:t});this.registry.off(e,t)}this.onObserverUpdate&&this.onObserverUpdate(arguments),this.onListenerUpdate&&this.onListenerUpdate(arguments)}triggerParallel({events:e,data:t,target:s}){K.validateSelector(e),s&&R("JFactoryEvents.triggerParallel({target})",s).type(String,o,HTMLElement);const i=[],r=[];if(e=e.split(" "),s)for(let r of e)o(s).trigger(r,{data:t,stack:i});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:i});for(let e of i){let t=e();t instanceof Promise&&!t.$isSettled&&r.push(t)}return r.length?Promise.all(r):G.resolve()}triggerSeries({events:e,data:t,target:s}){return K.validateSelector(e),s&&R("JFactoryEvents.triggerSeries({target})",s).type(String,o,HTMLElement),new G(async i=>{const r=[];if(e=e.split(" "),s)for(let i of e)o(s).trigger(i,{data:t,stack:r});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:r});for(let e of r){let t=e();t instanceof Promise&&!t.$isSettled&&await t}i()})}}class z extends K{constructor(e){super(),Object.defineProperties(this,{parent:{value:e},affiliateRules:{value:(new T).compose()}}),this.affiliateAddRule(z.rule_namespace)}affiliate(e="",t="",s){let i=new Q(e);for(let e of i.events)this.affiliateRules(e,t,s);return i.toString()}affiliateAddRule(e){this.affiliateRules.composer.last(e)}static rule_namespace(e,t,s){s=s.split(".");for(let e of s)e&&t.addNamespace(e)}on(e,t,s,i,r){switch(arguments.length){case 2:[i,t]=[t];break;case 3:"function"==typeof arguments[2]?[i,s]=[s]:[i,r,t,s]=[t,s];break;case 4:"object"==typeof arguments[3]&&([r,i,s]=[i,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,r),void 0===t?super.on({events:e,handler:i}):super.on({events:e,target:t,selector:s,handler:i})}off(e,t,s,i,r){const a=arguments.length;switch(a){case 1:"object"==typeof arguments[0]&&([r,e]=[e]);break;case 2:"function"==typeof arguments[1]?[i,t]=[t]:u(arguments[1])&&([r,t]=[t]);break;case 3:"function"==typeof arguments[2]?[i,s]=[s]:"function"==typeof arguments[1]&&([i,r,t,s]=[t,s]);break;case 4:"object"==typeof arguments[3]&&([r,i,s]=[i,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,r),a<2?super.off({events:e}):t?super.off({events:e,target:t,selector:s,handler:i}):super.off({events:e,handler:i})}trigger(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerSeries({events:e,target:t,data:s}):super.triggerSeries({events:e,data:s})}triggerParallel(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerParallel({events:e,target:t,data:s}):super.triggerParallel({events:e,data:s})}getDomListeners(e){let t=new Map;for(let s of o("*")){let i=o._data(s,"events");if(i)for(let r of Object.values(i))for(let i of r){let r;if(new X(i.namespace).hasNamespace(e)){(r=t.get(s))||t.set(s,r={}),(r[i.type]||(r[i.type]=[])).push({selector:i.selector||null,handler:i.handler,namespace:i.namespace})}}}return t}getObservers(){let e=new Map,t=this.registry._events;if(!t){let e=Object.values(this.registry)[0],s=Object.getOwnPropertyNames(e).find(e=>0===e.indexOf("jQuery"));e&&s&&(t=this.registry._events=e[s].events)}if(t)for(let[s,i]of Object.entries(t)){let t=e.get(s);t||(t=[],e.set(s,t));for(let e of i)t.push({handler:e.handler.originalHandler,namespace:e.namespace})}return e}}class Q{constructor(e){K.validateSelector(e),this.events=e.split(" ").map(e=>new X(e))}toString(){let e=[];for(let t of this.events)e.push(t.toString());return e.join(" ")}}class X{constructor(e){let[t,...s]=e.split(".");this.event=t,this.namespace=new Set(s)}hasNamespace(e){Array.isArray(e)||(e=[e]);for(let t of e){if(!/^[\w:]+$/.test(t))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:t});if(t&&this.namespace.has(t))return t}return!1}addNamespace(e){if(!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.add(e)}deleteNamespace(e){if(!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.delete(e)}toString(){return this.namespace.size?this.event+"."+Array.from(this.namespace.values()).join("."):this.event}}K.validateSelector=function(e){R("JFactoryEvents.validateSelector(selector)",e).notUndefined().validSpaces();for(let[t,s]of e.split(" ").map(e=>e.split(".")).map(e=>[e.shift(),e.join(".")]))t&&K.validateEvent(t),s&&K.validateNamespace(s);return!0},K.validateEvent=function(e){if(R("JFactoryEvents.validateEvent(event)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"JFactoryEvents.validateEvent(event)",reason:"must be alphanumeric, underscore and colon characters",given:e});return!0},K.validateNamespace=function(e){if(R("JFactoryEvents.validateNamespace(namespace)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:.]+$/.test(e))throw new _.INVALID_VALUE({target:"JFactoryEvents.validateNamespace(namespace)",reason:"must be alphanumeric, underscore, dot and colon characters",given:e});return!0};class Z extends q{constructor(e,t,s={}){if("function"==typeof e)super(e);else{"string"==typeof e&&([e,t,s]=[{},arguments[0],arguments[1]]);let i=new Request(t,s);super(e,(r,a)=>{let n=fetch(i).then(e=>{if(this.$chain.fetchResponse=e,!e.ok)throw Error(e.status+":"+e.statusText);return e});s.$typeText?n=n.then(e=>e.text()).then(e=>this.$chain.responseText=e):s.$typeJSON&&(n=n.then(e=>e.json()).then(e=>this.$chain.responseJSON=e)),n=n.catch(r=>{throw new _.REQUEST_ERROR({reason:r.message||r,target:this.$chain.fetchResponse&&this.$chain.fetchResponse.url||t,owner:this,fetchOptions:s,fetchRequest:i,fetchResponse:this.$chain.fetchResponse||null},e.traceSource)}),n.then(r,a)}),this.$chain.fetchOptions=s,this.$chain.fetchRequest=i;let r=s.abortController||new AbortController;s.signal=r.signal,this.$chain.fetchAbortController=r}}$chainAbort(e="request aborted"){return super.$chainAbort(e),this.$chain.fetchAbortController.abort(),this}}const ee=Symbol();class te{constructor(e){e&&R("JFactoryLogger(options)",e).properties(Object.getOwnPropertyNames(te.DEFAULT_CONFIG)),d(this,e,te.DEFAULT_CONFIG),this.condition=N(te.DEFAULT_CONDITION),this.installAccessor("log"),this.installAccessor("warn"),this.installAccessor("error")}get enabled(){return this[ee]&&(!this.parentLogger||this.parentLogger.enabled)}set enabled(e){e?this.enable():this.disable()}enable(){!0!==this[ee]&&(this[ee]=!0)}disable(){!1!==this[ee]&&(this[ee]=!1)}disallow(e,t=this.label){this.filters[t]||(this.filters[t]={}),this.filters[t][e]=!0}allow(e,t=this.label){this.filters[t]&&delete this.filters[t][e]}installAccessor(e,t=e,s=this){R("JFactoryLogger(nativeName)",e).equalIn(["log","warn","error"]),Object.defineProperties(s,{[t]:{get:this.accessor.bind(this,e),configurable:!0}})}accessor(e){return this[ee]&&this.condition(e)&&this.formatter[e](this)||g}createSubLogger(e){let t=new te({enabled:this.enabled,label:this.label+"."+e,styles_css:this.styles_css,styles_cli:this.styles_cli,console:this.console,formatter:this.formatter});return t.parentLogger=this,t.condition.addCondition(()=>this.enabled),t.filters=this.filters,t}}te.FORMATTER_NATIVE={log:e=>e.console.log.bind(e.console,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.label+">"),error:e=>e.console.error.bind(e.console,e.label+">")},te.FORMATTER_CLI={log:e=>e.console.log.bind(e.console,e.styles_cli.label,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.styles_cli.label,e.label+">"),error:e=>e.console.error.bind(e.console,e.styles_cli.label,e.label+">")},te.FORMATTER_BROWSER={log:e=>e.console.log.bind(e.console,"%c"+e.label+">",e.styles_css.label),warn:e=>e.console.warn.bind(e.console,"%c"+e.label+">",e.styles_css.label),error:e=>e.console.error.bind(e.console,"%c"+e.label+">",e.styles_css.label)},te.DEFAULT_CONDITION=function(e){return R("JFactoryLogger.condition(nativeName)",e).equalIn(["log","warn","error"]),R("JFactoryLogger.enabled",this.enabled).equal(!0),!(this.filters[this.label]&&this.filters[this.label][e])},te.DEFAULT_CONFIG={label:"",enabled:!0,parentLogger:null,formatter:r?te.FORMATTER_CLI:te.FORMATTER_BROWSER,console:console,filters:{},styles_cli:{label:"[1;30m%s[0m"},styles_css:{label:"color: gray"}};class se extends Date{toString(){return this.toLocaleTimeString()+", "+this.getUTCMilliseconds()+"ms ("+this.valueOf()+")"}$toDurationString(){let e=this.getUTCHours(),t=this.getUTCMinutes(),s=this.getUTCSeconds(),i=this.getUTCMilliseconds(),r=[];return e&&r.push(e+"h"),t&&r.push(t+"min"),s&&r.push(s+"s"),r.push(i+"ms"),1===r.length?r[0]:r.join(",")+" ("+this.valueOf()+")"}}class ie extends Date{constructor(){super(),this.elapsed=null,Object.defineProperties(this,{t1:{value:null,writable:!0},t0:{value:new se}})}end(){this.t1=new se,this.elapsed=new se(this.t1-this.t0).$toDurationString()}toString(){return this.elapsed}}class re{trait_constructor(){const e=this;class t extends Map{constructor(...e){super(...e),Object.defineProperty(this,"id_autoinc",{value:0,writable:!0})}$registerSync(t,s){let i=Object.defineProperties({},{$value:{value:s},$phaseRemove:{value:he.getContextualRemovePhase(e)}});return this.set(t,i),i}$registerAsync(t,s,i){let r=e.$task(s,i.$chain);return i.$chain.then(()=>{r.$chainAutoComplete()}),r.$chain.then(()=>{i.$chain.isCompleted||i.$chainAbort("aborted by task")}),Object.defineProperty(i,"$phaseRemove",{value:r.$phaseRemove}),this.set(t,i),r}$id_resolve(e){if(e.indexOf("?")>=0){let t=++this.id_autoinc;e=e.replace(/\?/g,t)}return e}}const s=Object.assign(Object.create(null),{[re.SYMBOL_PRIVATE]:Object.create(null),assign:function(e,t,s){B.assign(this,e,t,s)},createSubMap:()=>new t});Object.defineProperty(this,"$",{value:Object.create(s)}),this.$.assign({tasks:null,requests:null},B.descriptors.ENUMERABLE_WRITABLE)}}re.SYMBOL_PRIVATE=Symbol("_");class ae{trait_constructor(e){B.assign(this.$,"about",new V(this,e),B.descriptors.READONLY)}}class ne{trait_constructor(){let e=Object.assign({label:this.$.about.name},a.TraitLog||{enabled:!1}),t=new te(e);Object.defineProperty(this.$,"logger",{value:t}),t.installAccessor("log","$log",this),t.installAccessor("warn","$logWarn",this),t.installAccessor("error","$logErr",this)}}class oe{trait_constructor(){this.$.assign("tasks",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$task(e,t){if(R("$task(id)",e=this.$.tasks.$id_resolve(e)).typeString(),R("$task(executorOrValue)",t).notUndefined(),this.$.tasks.has(e))throw new _.KEY_DUPLICATED({target:"$task(id)",given:e});let s,i;return s="function"==typeof t?new q({name:e,owner:this},t):q.resolve({name:e,owner:this},t),s.$phaseRemove=he.getContextualRemovePhase(this),i=new ie,s.$taskMetrics={$dev_timing:i},s.$chain.then(()=>{i.end(),this.$.tasks.get(e)&&this.$taskRemove(e)}),this.$.tasks.set(e,s),s}$taskRemove(e,t){if(R("$taskRemove(id)",e).typeString(),t&&R("$taskRemove(reason)",t).typeString(),!this.$.tasks.has(e))throw new _.KEY_MISSING({target:"$taskRemove(id)",given:e});this.$.tasks.get(e)._called,this.$.tasks.get(e)._called=!0;let s=this.$.tasks.get(e);this.$.tasks.delete(e),s.$chainAbort(t||"$taskRemove()")}$taskRemoveAll(e){R("$taskRemoveAll(removePhase)",e).equalIn(he.PHASES);let t=this.$.tasks;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$taskRemove(s,"$taskRemoveAll("+e+")")}$taskPromiseAll(e=!1){let t=[];if(this.$.tasks.size)for(let s of this.$.tasks.values())e&&(s.$chain.chainConfig.chainAutoComplete=!0),s.$chain.isPending&&t.push(s.$chain);return t.length?Promise.all(t):G.resolve()}}class le{trait_constructor(){ue(this,"events",{custom:new z(this),kernel:new z(this)},B.descriptors.NONE);let e=this.$[re.SYMBOL_PRIVATE].events.custom;Object.defineProperties(this.$,{listeners:{get:e.getDomListeners.bind(e,this.$.about.fingerprint),enumerable:!0},observers:{get:e.getObservers.bind(e),enumerable:!0}})}$on(){this.$[re.SYMBOL_PRIVATE].events.custom.on(...arguments)}$off(){this.$[re.SYMBOL_PRIVATE].events.custom.off(...arguments)}$trigger(){return this.$[re.SYMBOL_PRIVATE].events.custom.trigger(...arguments)}$triggerParallel(){return this.$[re.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)}$notify(e,t){return this.$trigger(e,t).then(()=>this.$[re.SYMBOL_PRIVATE].events.kernel.trigger(e,t))}}class ce{trait_constructor(){const e=Object.create(null),t=Object.create(null),s=this.$[re.SYMBOL_PRIVATE].events.kernel;ue(this,{states:e,stateRoutes:t},B.descriptors.READONLY),B.assign(this.$,"states",new Proxy(e,{set:(e,t,s)=>this.$state(t,s),get:(t,s)=>e[s]}),B.descriptors.READONLY),s.on("beforeStateChange",(e,s)=>{let i;if(t[s.key]&&t[s.key].before&&(i=t[s.key].before(s.val)))return this.$notify(i)}),s.on("afterStateChange",(e,s)=>{let i;if(t[s.key]&&t[s.key].after&&(i=t[s.key].after(s.val)))return this.$notify(i)})}$state(e,t,s=!0){return R("$state(key)",e).typeString(),R("$state(notify)",s).typeBoolean(),new G(async i=>{let r,a=this.$[re.SYMBOL_PRIVATE].states,n=a[e];e in a&&n===t||(r=s&&this.$notify("beforeStateChange",{key:e,val:t,previousVal:n}),r&&R("beforeStateChange result",r).type(G),r&&!r.$isSettled&&(a[e]=r,await r),void 0===t?delete a[e]:a[e]=t,r=s&&this.$notify("afterStateChange",{key:e,val:t,previousVal:n}),r&&R("afterStateChange result",r).type(G)),r?r.then(i):i()})}}class he{trait_constructor(){B.assign(this.$,"service",Object.create(null),B.descriptors.READONLY),this.$.service.phase=he.PHASE.NONE,this.$.service.phaseQueue=q.resolve({name:"phaseQueue"},null),this.$.service.phaseTask=null,this.$.service.phaseMap={install:new Set,enable:new Set,disable:new Set,uninstall:new Set},this.$state("installed",!1,!1),this.$state("enabled",!1,!1),de(this,"stateRoutes",{installed:{after:e=>e?"install":"uninstall"},enabled:{after:e=>e?"enable":"disable"}},B.descriptors.NONE);let e=this.$[re.SYMBOL_PRIVATE].events.custom,t=this.$[re.SYMBOL_PRIVATE].events.kernel;e.affiliateAddRule((e,t,s,i)=>he.setEventNamespaceRemovePhase(this,t,i));let s=e=>{this.$.tasks.size&&this.$taskRemoveAll(this.$.service.phase);let t=G.resolve();return e&&(t=t.then(()=>e.call(this)).then(()=>this.$taskPromiseAll(!0))),t.catch(e=>{e instanceof _.PROMISE_EXPIRED||this.$logErr("unhandled promise rejection in "+this.$.service.phase+";",...e instanceof y?e:[e])})};t.on("install",()=>s(this.onInstall)),t.on("enable",()=>s(this.onEnable)),t.on("disable",()=>s(this.onDisable)),t.on("uninstall",()=>s(this.onUninstall)),t.on("disable",()=>this.$off({removal:he.PHASE.DISABLE})),t.on("uninstall",()=>this.$off({removal:he.PHASE.UNINSTALL}))}$install(e){let t;const s=new q({name:"install",config:{chainAutoComplete:!0}},e=>t=e).then(()=>{if(!this.$.states.installed)return this.$.service.phase=he.PHASE.INSTALL,this.$state("installed",!0)});return this.$.service.phaseMap.install.add(s),s.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.install.delete(s),this.$.service.phase=he.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=s,t(),s.$chain)),e?this.$enable():s}$enable(){let e;const t=new q({name:"enable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed&&!this.$.states.enabled)return this.$.service.phase=he.PHASE.ENABLE,this.$state("enabled",!0)});return this.$.service.phaseMap.enable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.enable.delete(t),this.$.service.phase=he.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$disable(){let e;const t=new q({name:"disable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.enabled)return this.$.service.phase=he.PHASE.DISABLE,this.$state("enabled",!1)});this.$.service.phaseMap.disable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.disable.delete(t),this.$.service.phase=he.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.enable.entries())t===this.$.service.phaseTask&&he.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.enable.delete(e);return this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$uninstall(){let e;const t=new q({name:"uninstall",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed)return this.$.service.phase=he.PHASE.UNINSTALL,this.$state("installed",!1)});this.$.service.phaseMap.uninstall.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.uninstall.delete(t),this.$.service.phase=he.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.install.entries())t===this.$.service.phaseTask&&he.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.install.delete(e);return this.$disable(),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}static phaseKill(e){e.$.tasks.size&&e.$taskRemoveAll(he.getContextualRemovePhase(e)),e.$.service.phase=he.PHASE.NONE}static getContextualRemovePhase(e){return he.PHASE_REVERT[e.$.service.phase]}static setEventNamespaceRemovePhase(e,t,s){let i=t.hasNamespace(he.PHASES),r=s&&s.removal;r||(r=he.getContextualRemovePhase(e)),"uninstall"===t.event&&r===he.PHASE.DISABLE&&(r=he.PHASE.UNINSTALL),i!==r&&(t.deleteNamespace(i),t.addNamespace(r)),t.addNamespace(r)}}function ue(e,t,s,i){B.assign(e.$[re.SYMBOL_PRIVATE],t,s,i)}function de(e,t,s,i){B.assign(e.$[re.SYMBOL_PRIVATE][t],s,i)}he.PHASE={NONE:"PHASE_NONE",INSTALL:"PHASE_INSTALL",ENABLE:"PHASE_ENABLE",DISABLE:"PHASE_DISABLE",UNINSTALL:"PHASE_UNINSTALL"},he.PHASE_REVERT={[he.PHASE.INSTALL]:he.PHASE.UNINSTALL,[he.PHASE.UNINSTALL]:he.PHASE.INSTALL,[he.PHASE.DISABLE]:he.PHASE.ENABLE,[he.PHASE.ENABLE]:he.PHASE.DISABLE,[he.PHASE.NONE]:he.PHASE.DISABLE},he.PHASES=Object.values(he.PHASE),U.PHASE=B.disinherit(he.PHASE),U.TraitCore=re,U.TraitAbout=ae,U.TraitLog=ne,U.TraitEvents=le,U.TraitState=ce,U.TraitService=he,U.TraitTask=oe;class pe{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$fetchRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$fetchRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("requests",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$fetch(e,t,s={}){if(R("$fetch(id)",e=this.$.requests.$id_resolve(e)).typeString(),R("$fetch(url)",t).typeString(),R("$fetch(fetchOptions)",s).typePlainObject(),this.$.requests.has(e))throw new _.KEY_DUPLICATED({target:"$fetch(id)",given:e});let i=new Z({name:e,traceSource:S.tracer.captureTraceSource("$fetch"),config:{chainAutoComplete:!0}},t,s);return this.$.requests.$registerAsync(e,'$fetch("'+e+'")',i),i.$chain.then(()=>{this.$.requests.has(e)&&this.$fetchRemove(e)}),i}$fetchText(e,t,s={}){return this.$fetch(e,t,{...s,$typeText:!0})}$fetchJSON(e,t,s={}){return this.$fetch(e,t,{...s,$typeJSON:!0})}$fetchRemove(e,t){if(R("$fetchRemove(id)",e).typeString(),t&&R("$fetchRemove(reason)",t).typeString(),!this.$.requests.has(e))throw new _.KEY_MISSING({target:"$fetchRemove(id)",given:e});this.$.requests.get(e)._debug_remove_called,this.$.requests.get(e)._debug_remove_called=!0;let s=this.$.requests.get(e);this.$.requests.delete(e),s.$chainAbort(t||"$fetchRemove()")}$fetchRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.requests;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$fetchRemove(s,"$fetchRemoveAll("+e+")")}}class me{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$timeoutRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$timeoutRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("timeouts",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$timeout(e,t,s=null,...i){if(R("id",e=this.$.timeouts.$id_resolve(e)).typeString(),R("delay",t).typeNumber(),R("handler",s).type(Function,null),this.$.timeouts.has(e))throw new _.KEY_DUPLICATED({target:"$timeout(id)",given:e});let r,a=new q({name:e,traceSource:S.tracer.captureTraceSource("$timeout"),config:{chainAutoComplete:!0}},e=>{r=setTimeout(()=>{a.$isExpired||e(s?s(...i):void 0)},t)});return a.$chain.data.timer=r,this.$.timeouts.$registerAsync(e,'$timeout("'+e+'")',a),a.$chain.then(()=>{this.$.timeouts.has(e)&&this.$timeoutRemove(e)}),a}$timeoutRemove(e,t){if(R("$timeoutRemove(id)",e).typeString(),t&&R("$timeoutRemove(reason)",t).typeString(),!this.$.timeouts.has(e))throw new _.KEY_MISSING({target:"$timeoutRemove(id)",given:e});this.$.timeouts.get(e)._debug_remove_called,this.$.timeouts.get(e)._debug_remove_called=!0;let s=this.$.timeouts.get(e);clearTimeout(s.$chain.data.timer),this.$.timeouts.delete(e),s.$chainAbort(t||"$timeoutRemove()")}$timeoutRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.timeouts;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$timeoutRemove(s,"$timeoutRemoveAll()")}}class $e{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$intervalRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$intervalRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("timeints",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$interval(e,t,s,...i){if(R("id",e=this.$.timeints.$id_resolve(e)).typeString(),R("handler",s).typeFunction(),R("delay",t).typeNumber(),this.$.timeints.has(e))throw new _.KEY_DUPLICATED({target:"$interval(id)",given:e});let r=setInterval(s,t,...i);this.$.timeints.$registerSync(e,r)}$intervalRemove(e){if(R("$intervalRemove(id)",e).typeString(),!this.$.timeints.has(e))throw new _.KEY_MISSING({target:"$intervalRemove(id)",given:e});this.$.timeints.get(e)._debug_remove_called,this.$.timeints.get(e)._debug_remove_called=!0,clearInterval(this.$.timeints.get(e).$value),this.$.timeints.delete(e)}$intervalRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.timeints;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$intervalRemove(s)}}class fe{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$mutationRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$mutationRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("mutations",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$mutation(e,t,s,i){if(R("id",e=this.$.mutations.$id_resolve(e)).typeString(),R("parent",t).type(HTMLElement,Document),R("config",s).typePlainObject(),R("handler",i).typeFunction(),this.$.mutations.has(e))throw new _.KEY_DUPLICATED({target:"$mutation(id)",given:e});let r=new MutationObserver(i);r.observe(t,s),this.$.mutations.$registerSync(e,r)}$mutationRemove(e,t){if(R("$mutationRemove(id)",e).typeString(),t&&R("$mutationRemove(reason)",t).typeString(),!this.$.mutations.has(e))throw new _.KEY_MISSING({target:"$mutationRemove(id)",given:e});this.$.mutations.get(e)._debug_remove_called,this.$.mutations.get(e)._debug_remove_called=!0,this.$.mutations.get(e).$value.disconnect(),this.$.mutations.delete(e)}$mutationRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.mutations;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$mutationRemove(s)}}class ge{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$domRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$domRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("dom",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$dom(e,t,s){let i;if(R("id",e=this.$.dom.$id_resolve(e)).typeString(),R("jQueryArgument",t).type(String,Object),s&&R("appendTo",s).type(String,Object),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.dom.has(e))throw new _.KEY_DUPLICATED({target:"$dom(id)",given:e});let r=o(t);if("TEMPLATE"===r[0].tagName&&(r=o(o(r[0]).html())),i){if(r[0].nodeType!==Node.ELEMENT_NODE)throw new _.INVALID_VALUE({target:"$dom(#id)",given:r,reason:"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE"});r[0].id=e}return s&&r.appendTo(s),this.$.dom.$registerSync(e,r).$value}$domFetch(e,t,s,i){let r;if(s&&!u(s)&&([s,i]=[{},s]),R("id",e=this.$.dom.$id_resolve(e)).typeString(),R("url",t).typeString(),i&&R("appendTo",i).type(String,Object),s&&R("fetchOptions",s).type(Object),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.dom.has(e))throw new _.KEY_DUPLICATED({target:"$domFetch(id)",given:e});let a=this.$fetchText('$domFetch("'+e+'")',t,s).then(t=>{let s=o(t);return r&&(s[0].id=e),i&&s.appendTo(i),s});return this.$.dom.$registerAsync(e,'$domFetch("'+e+'")',a),a}$domRemove(e,t){if(R("$domRemove(id)",e).typeString(),t&&R("$domRemove(reason)",t).typeString(),!this.$.dom.has(e))throw new _.KEY_MISSING({target:"$domRemove(id)",given:e});this.$.dom.get(e)._debug_remove_called,this.$.dom.get(e)._debug_remove_called=!0;let s=this.$.dom.get(e),i=s.$value;i instanceof o&&i.remove(),s instanceof Z&&s.$chainAbort(t||"$domRemove()"),this.$.dom.delete(e)}$domRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.dom;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$domRemove(s)}}class ve{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$cssRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$cssRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("css",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$css(e,t){let s;if(R("id",e=this.$.css.$id_resolve(e)).typeString(),R("css",t).typeString(),"#"===e[0]&&(e=e.substring(1),s=!0),this.$.css.has(e))throw new _.KEY_DUPLICATED({target:"$css(id)",given:e});return this.$.css.$registerSync(e,o("<style>").attr(s?{id:e}:{}).html(t).appendTo("head")).$value}$cssFetch(e,t,s="head"){let i;if(R("id",e=this.$.css.$id_resolve(e)).typeString(),R("url",t).typeString(),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.css.has(e))throw new _.KEY_DUPLICATED({target:"$cssFetch(id)",given:e});t=b(t);let r=o(s).find(`link[href="${t}"]`)[0];if(r){r.dataset.usage=parseInt(r.dataset.usage)+1;let t=o(r),s=q.resolve({name:e,config:{chainAutoComplete:!0},traceSource:S.tracer.captureTraceSource("$cssFetch")},t);return s.$chain.data.dom=t,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',s),s}{let r,a=new q({name:e,config:{chainAutoComplete:!0},traceSource:S.tracer.captureTraceSource("$cssFetch")},a=>r=o("<link>",{id:i?e:"",rel:"stylesheet",type:"text/css","data-usage":"1"}).appendTo(s).on("load",()=>a(r)).attr("href",t));return a.$chain.data.dom=r,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',a),a}}$cssRemove(e,t){if(R("$cssRemove(id)",e).typeString(),t&&R("$cssRemove(reason)",t).typeString(),!this.$.css.has(e))throw new _.KEY_MISSING({target:"$cssRemove(id)",given:e});this.$.css.get(e)._debug_remove_called,this.$.css.get(e)._debug_remove_called=!0;let s=this.$.css.get(e),i=s.$chain&&s.$chain.data.dom||s.$value;if(i instanceof o){let e=parseInt(i[0].dataset.usage)-1;e?i[0].dataset.usage=e:i.remove()}s instanceof q&&s.$chainAbort(t||"$cssRemove()"),this.$.css.delete(e)}$cssRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.css;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$cssRemove(s)}}class be{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$vueRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$vueRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("vue",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$vue(e,t){if(R("id",e=this.$.vue.$id_resolve(e)).typeString(),R("vue",t).type(Object),this.$.vue.has(e))throw new _.KEY_DUPLICATED({target:"$vue(id)",given:e});return this.$.vue.$registerSync(e,t).$value}$vueRemove(e){if(R("$vueRemove(id)",e).typeString(),!this.$.vue.has(e))throw new _.KEY_MISSING({target:"$vueRemove(id)",given:e});this.$.vue.get(e)._debug_remove_called,this.$.vue.get(e)._debug_remove_called=!0;let t=this.$.vue.get(e);o(t.$value.$el).remove(),t.$value.$destroy(),this.$.vue.delete(e)}$vueRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.vue;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$vueRemove(s)}}class Ee{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$reactRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$reactRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("react",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$react(e,t,s,...i){if(e=this.$.react.$id_resolve(e),!U.ReactDOM)throw new Error("jFactory.ReactDOM=ReactDOM must be set before using the React Trait");if(R("id",e).typeString(),R("container",t).type(HTMLElement,o),this.$.react.has(e))throw new _.KEY_DUPLICATED({target:"$react(id)",given:e});t=o(t)[0];let r=U.ReactDOM.render(s,t,...i);return this.$.react.$registerSync(e,{container:t,view:r}).$value.view}$reactRemove(e){if(R("$reactRemove(id)",e).typeString(),!this.$.react.has(e))throw new _.KEY_MISSING({target:"$reactRemove(id)",given:e});this.$.react.get(e)._debug_remove_called,this.$.react.get(e)._debug_remove_called=!0;let t=this.$.react.get(e).$value.container;t&&(U.ReactDOM.unmountComponentAtNode(t)||this.$logWarn("unmountComponentAtNode failed to unmount",t),o(t).remove()),this.$.react.delete(e)}$reactRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.react;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$reactRemove(s)}}U.TraitFetch=pe,U.TraitTimeout=me,U.TraitInterval=$e,U.TraitMutation=fe,U.TraitDOM=ge,U.TraitCSS=ve,U.TraitLibVue=be,U.TraitLibReact=Ee,"undefined"!=typeof jFactoryOverride&&jFactoryOverride||n.init();export{r as JFACTORY_CLI,i as JFACTORY_DEBUG,s as JFACTORY_DEV,V as JFactoryAbout,F as JFactoryComponent,D as JFactoryCoreObject,y as JFactoryError,X as JFactoryEventSelector,Q as JFactoryEventSelectorParser,K as JFactoryEvents,z as JFactoryEventsManager,R as JFactoryExpect,Z as JFactoryFetch,T as JFactoryFunctionComposer,j as JFactoryFunctionConditional,I as JFactoryFunctionExpirable,M as JFactoryFunctionWrappable,te as JFactoryLogger,B as JFactoryObject,q as JFactoryPromise,J as JFactoryPromiseChain,W as JFactoryPromisePath,G as JFactoryPromiseSync,se as JFactoryTime,ie as JFactoryTimeTrace,A as JFactoryTrace_LIB_STACKTRACE,E as JFactoryTrace_NOFILTER,O as JFactoryTraits,ae as TraitAbout,ve as TraitCSS,re as TraitCore,ge as TraitDOM,le as TraitEvents,pe as TraitFetch,$e as TraitInterval,Ee as TraitLibReact,be as TraitLibVue,ne as TraitLog,fe as TraitMutation,he as TraitService,ce as TraitState,oe as TraitTask,me as TraitTimeout,ue as assignPrivate,de as assignPrivateMember,U as jFactory,a as jFactoryConfig,_ as jFactoryError,N as jFactoryFunctionConditional,P as jFactoryFunctionExpirable,C as jFactoryFunctionWrappable,n as jFactoryLoader,S as jFactoryTrace,k as jFactoryTraits};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
