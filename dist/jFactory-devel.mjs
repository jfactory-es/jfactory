import e from"lodash";import t from"jquery";
/*!
 * jFactory v1.7.0-alpha.0
 * https://github.com/jfactory-es/jfactory
 *
 * Copyright (c) 2019, StÃ©phane Plazis
 * https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt
 */
const s=!0,i=!1,r="undefined"!=typeof process&&process.versions&&process.versions.node,a={TraitLog:!r||false,JFactoryError:{keys:["$.about.name","$dev_name","$name","name","id"]},JFactoryTrace:!r&&{keys:["$dev_traceLog","$dev_traceSource"],libOptions:{offline:Boolean(globalThis.chrome),filter:function(e){return e.lineNumber}}},jFactoryDev:{requireCompatibility:{globalThis:{test:()=>globalThis,info:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},fetch:{test:()=>fetch,info:"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"},Request:{test:()=>Request,info:"https://developer.mozilla.org/docs/Web/API/Request"},"AbortController, AbortSignal":{test:()=>(new AbortController).signal,info:"https://developer.mozilla.org/docs/Web/API/AbortController, https://developer.mozilla.org/docs/Web/API/AbortSignal"},MutationObserver:{test:()=>MutationObserver,info:"https://developer.mozilla.org/docs/Web/API/MutationObserver"}}}},n={seq:[],init(){if(this.seq){let e=this.seq;delete this.seq;for(let t of e)t();delete globalThis.jFactoryOverride}},onInit(e){this.seq.push(e)}};n.onInit((function(){console.log("jFactory is running in development mode; performances will be affected");for(let[e,t]of Object.entries(a.jFactoryDev.requireCompatibility)){let s;try{s=Boolean(t.test())}catch(e){}s||console.warn(`jFactory may require the support of "${e}", ${t.info}`)}})),n.onInit((function(){!a.TraitLog&&console.warn("jFactory logs disabled")}));const o=t,l=e.isNative,c=e.isString,h=e.isNumber,u=e.isPlainObject,d=e.defaultsDeep,p=e.lowerFirst,m=e.get,$=e.template,f=e.camelCase,g=()=>{},v=(e,t)=>Object.defineProperty(t,"name",{value:e}),b=e=>(b.a.href=e,b.a.href);b.a=document.createElement("a");class E{constructor({label:e,stackTraceLimit:t,keys:s,libOptions:i}={}){this.label=e||"The stack has been printed in the console",this.stackTraceLimit=t||1/0,this.keys=s||["stackLog","stackSource"],this.libOptions=i||{}}captureTraceSource(e,t){let s;this.stackTraceLimit&&(s=Error.stackTraceLimit,Error.stackTraceLimit=this.stackTraceLimit),e||(e="captureTraceSource",t=!0);let i={source:new Error,omitAboveFunctionName:e,omitSelf:t};return this.stackTraceLimit&&(Error.stackTraceLimit=s),i}attachTrace(e,t){"object"!=typeof t&&(t=this.captureTraceSource(t||"attachTrace",!t));let s=t.source;this.toPrintableTrace(t).then(e=>s=e);let i=()=>console.log(s)||this.label;Object.defineProperty(e,this.keys[0],{enumerable:!1,configurable:!0,get:()=>i()}),Object.defineProperty(e,this.keys[1],{enumerable:!1,configurable:!0,get:()=>t})}toPrintableTrace(e){return Promise.resolve(e.source)}}class A extends E{constructor(e){super(e)}toPrintableTrace(e){return StackTrace.fromError(e.source,this.libOptions).then(t=>{if(e.omitAboveFunctionName){let s=t.findIndex(t=>t.functionName&&t.functionName.endsWith(e.omitAboveFunctionName));s>0&&(e.omitSelf&&s++,t=t.slice(s))}return t=t.filter(this.libOptions.filter),this.formatTraceFrames(t)})}formatTraceFrames(e){let t,s;return this.libOptions.offline&&window.chrome?(t="Error\n",s="\tat "):(t="",s=""),t+e.map(e=>s+e.toString()).join("\n")}}const S={};n.onInit((function(){let e=a.JFactoryTrace;if(e&&!1!==e.use){let t;t="function"==typeof e.use?e.use:"object"==typeof StackTrace?A:E,t===A&&console.warn("jFactory: Stack trace enabled; Performance will be affected"),S.tracer=new t(e)}else S.tracer={captureTraceSource:g,attachTrace:g}}));class y extends Error{constructor(e="unspecified error",t=null){t=Object.assign(Object.create(null),t),super(e=y.toPrintable(e,t)),this.$data=Object.assign(Object.create(null),t)}toString(){return this.message}*[Symbol.iterator](){yield this.message,yield this.$data}static getId(e){return e[(a.JFactoryError.keys||y.DEFAULT_KEYS).find(t=>{let s=m(e,t);return s||0===s})]}static toPrintableData(e){const t={};let s;for(let[i,r]of Object.entries(e)){switch(typeof r){case"function":r=r.name+"()";break;case"object":if(null===r){r="null";break}if(r instanceof Error){r=r.toString();break}if(void 0!==(s=y.getId(r)))r='"'+s+'"';else if(l(r.toString))try{s=JSON.stringify(r),r=s.length>y.JSON_MAX?s.substring(0,y.JSON_MAX)+"[...]":s}catch(e){r="[object "+r.constructor.name+"]"}else r=r.toString();break;case"string":r='"'+r+'"';break;default:r=String(r)}t[i]=r}return t}static toPrintable(e,t){const s=[];for(let i of e.split(";")){let e,r=y.RE_PLACEHOLDER;if(r.lastIndex=0,e=r.exec(i)){do{if(e[1]&&e[1]in t){s.push(i.trim());break}}while(null!==(e=r.exec(i)))}else s.push(i.trim())}return p($(s.join("; "))(y.toPrintableData(t)))}}y.JSON_MAX=40,y.DEFAULT_KEYS=["name","id"],y.RE_PLACEHOLDER=/\${([^}]+)}/g;let _=new Proxy(y,{set:function(e,t,s){let{template:i}=s;if(e[t])throw new Error("already declared");return e[t]=class extends y{constructor(e,t){super(i,e),S.tracer.attachTrace(this.$data,t)}},e[t].prototype.name="Error jFactoryError."+t,!0}});function R(e,t){if(!new.target)return new R(e,t);this.label=e,this.value=t}_.INVALID_VALUE={template:"invalid value for ${target}; Reason: ${reason}; Given: ${given}"},_.INVALID_CALL={template:"invalid call ${target}; Reason: ${reason}; Owner: ${owner}"},_.PROMISE_EXPIRED={template:"expired promise ${target}; Reason: ${reason}"},_.REQUEST_ERROR={template:"error requesting ${target}; Reason: ${reason}; Owner: ${owner}"},_.KEY_DUPLICATED={template:"duplicated key for ${target}; Given: ${given}"},_.KEY_MISSING={template:"missing key for ${target}; Given: ${given}"};const L=function(e,t,s){throw new _.INVALID_VALUE({target:e,reason:s,given:t})},w={notUndefined:(e,t)=>(void 0===t&&L(e,t,"cannot be undefined"),!0),notEmptyString:(e,t)=>(""===t&&L(e,t,"cannot be empty string"),!0),notFalsy:(e,t)=>(t||L(e,t,'cannot be a falsy value (undefined, null, NaN, 0, "")'),!0),validSpaces:(e,t)=>(t.replace&&t.replace(/\s+/g," ").trim()===t||L(e,t,"invalid space delimiters"),!0),matchReg:(e,t,s)=>(s.test(t)||L(e,t,'string "'+t+'" must match '+s),!0),type(e,t,...s){let i,r=!1;for(let a of s){null===a?i="Null":"name"in a&&(i=a.name);let s=w["type"+i];if(s)try{r=s(e,t)}catch(e){}else r=t instanceof a;if(r)break}return r||L(e,t,"must be an instance of ["+s.map(e=>e.name).join(", ")+"]"),!0},typeNull:(e,t)=>(null!==t&&L(e,t,"must be null"),!0),typeBoolean:(e,t)=>(!0!==t&&!1!==t&&L(e,t,"must be a boolean"),!0),typeString:(e,t)=>(c(t)||L(e,t,"must be a string"),!0),typeNumber:(e,t)=>(h(t)||L(e,t,"must be a number"),!0),typeFunction:(e,t)=>("function"!=typeof t&&L(e,t,"must be a function"),!0),typePlainObject:(e,t)=>(u(t)||L(e,t,"must be a plain object"),!0),equal(e,t,...s){let i=!1;for(let e of s)if(i=t===e)break;return i||L(e,t,"must be one of ["+s+"]"),!0},equalIn:(e,t,s)=>(Array.isArray(s)||(s=Object.values(s)),s.includes(t)||L(e,t,"must be one from ["+s.join(", ")+"]"),!0),properties(e,t,s){for(let i of Object.getOwnPropertyNames(t))R(e+', property name "'+i+'"',i).equalIn(s);return!0},writable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable||L(e,t,"must be writable"),!0),notWritable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable&&L(e,t,"must not be writable"),!0),enumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)||L(e,t,"must be enumerable"),!0),notEnumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)&&L(e,t,"must not be enumerable"),!0),configurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable||L(e,t,"must be configurable"),!0),notConfigurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable&&L(e,t,"must not be configurable"),!0),reservedProperty:(e,t,s)=>(s in t&&L(e,t,"is a reserved property"),!0)};n.onInit((function(){Object.assign(R,w);for(const e of Object.getOwnPropertyNames(w))R.prototype[e]=function(...t){return R[e](this.label,this.value,...t),this}}));class O{constructor(e,t,s={}){this.callerInstance=e,this.callerConstructor=t,this.options=s}use(e,...t){R("JFactoryTraits(trait)",e).typeFunction();let{callerInstance:s,callerConstructor:i}=this,r=O.CACHE.get(s);if(r){if(r.has(e))return a.TraitLog&&console.warn(e.name+" already called on",s),this;r.add(e)}else O.CACHE.set(s,new WeakSet([e]));!i.JFactoryTrait&&(i.JFactoryTrait=new WeakSet),i.JFactoryTrait.has(e)||(i.JFactoryTrait.add(e),this.export(e.prototype,i.prototype),this.export(e,i,!0));let n=new e(s,...t);return n.trait_constructor&&n.trait_constructor.apply(s,t),this}export(e,t,s){let i=Object.getOwnPropertyDescriptors(e);for(let r of Object.keys(i)){let a=O.getPrefix(r);if(O.getTarget(r,t,a)){let a=i[r],n=(this.options.parser||O.defaultParser)(r,a,e,t,s);n&&(({propertyName:r,propertyDescriptor:a}=n),Object.defineProperty(t,r,a))}}}static defaultParser(e,t,s,i,r){let n=t.value;return r?null:e in i?(a.TraitLog&&console.warn(`${i.constructor.name}> skipping export of existing property "${e}"`,n),null):"object"==typeof n?(a.TraitLog&&console.warn(`${i.constructor.name}> skipping export of shared object "${e}"`,n),null):{propertyName:e,propertyDescriptor:t}}static getPrefix(e){let t=e.split("_");return t.length>1?t[0]:null}static getTarget(e,t,s){return O.EXCLUDES.includes(e)||"trait"===s?null:t}}O.CACHE=new WeakMap,O.EXCLUDES=["constructor","prototype","length","size"];class T{constructor(){this.handlers=Object.create(null)}*[Symbol.iterator](e=[]){e.length||(e=Object.keys(this.handlers)),e.length||(e=["default"]);for(let t of e)t in this.handlers&&(yield*this.handlers[t])}first(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).unshift(t),this}last(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).push(t),this}compose(...e){let t=this,s=function(){let s={canceled:!1,parameters:Array.from(arguments),result:void 0},i=t[Symbol.iterator](e),r=i.next();return T.composite_iterator(this,s,r,i)};return s.composer=t,s}static composite_iterator(e,t,s,i){let r,a;for(;!t.canceled&&!s.done;)if(r=s.value,a=e?r.call(e,t,...t.parameters):r(t,...t.parameters),s=i.next(),a instanceof Promise){if(!s.done||a.constructor===Promise)return a.then(v([r.name,"[compositeAsyncHandler]"].filter(Boolean).join(" "),(function(r){return t.result=r,T.composite_iterator(e,t,s,i)})));t.result=a}else t.result=a;return t.result}}function P(e){return new I(e).compose()}class I{constructor(e){this.originalHandler=e,this.expiredCalls=0,this.composer=new T;let t,s=this.composer.compose("conditions"),i=this;this.isExpired=e=>t||s.call(e)||!1,this.setExpired=e=>t=e?e instanceof Error?e:new _.INVALID_CALL({target:this.originalHandler,reason:"manually expired"}):Boolean(this.expiredCalls=0),this.addExpireCondition=function(e){this.composer.last("conditions",(function(t){let s=function(s){return R("JFactoryFunctionExpirable.addExpireCondition(), result",s).type(Boolean,Error),i.setExpired(!!s&&((t.canceled=!0)&&(s instanceof Error?s:new _.INVALID_CALL({target:i.originalHandler,reason:"conditionally expired",condition:e}))))},r=e.apply(this,t.parameters);return r instanceof Promise?r.then(s):s(r)}))}}compose(){let e=this,t=function(){let t=e.isExpired(this),s=e.constructor.call.bind(void 0,e,this,arguments);return t instanceof Promise?t.then(s):s(t)};return Object.assign(t,{expirable:this,isExpired:e=>this.isExpired(e),setExpired:e=>this.setExpired(e),addExpireCondition:e=>(this.addExpireCondition(e),t)})}static call(e,t,s,i){return i?e.onExpired(i):e.onNotExpired(t,s)}onExpired(e){return this.expiredCalls<I.MaxWarningExpiration&&(this.expiredCalls++,a.TraitLog&&console.warn(...new _.INVALID_CALL({...e.$data,reason:e.$data.reason+"; expiredCalls="+this.expiredCalls+(this.expiredCalls===I.MaxWarningExpiration?"; Max Warning Exceeded":"")}))),e}onNotExpired(e,t){return this.originalHandler.apply(e,t)}}function N(e){return new j(e).compose()}I.MaxWarningExpiration=10;class j{constructor(e){this.originalHandler=e,this.composer=new T,this.composer.first("original",v([e.name,"[condition]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("conditions","original");return Object.assign(e,{conditional:this,addCondition:t=>(this.addCondition(t),e)})}addCondition(e){this.composer.last("conditions",(function(t){let s=function(e){R("JFactoryFunctionConditional.addCondition(), result",e).typeBoolean(),!e&&(t.canceled=!0)},i=e.apply(this,t.parameters);return i instanceof Promise?i.then(s):s(i)}))}}function C(e){return new M(e).compose()}class M{constructor(e){this.originalHandler=e,this.composer=new T,this.composer.first("original",v([e.name,"[wrapped]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("before","original","after");return Object.assign(e,{wrappable:this,beforeAll:t=>(this.beforeAll(t),e),justBefore:t=>(this.justBefore(t),e),justAfter:t=>(this.justAfter(t),e),afterAll:t=>(this.afterAll(t),e)})}beforeAll(e){this.composer.first("before",e)}justBefore(e){this.composer.last("before",e)}justAfter(e){this.composer.first("after",e)}afterAll(e){this.composer.last("after",e)}}function k(e,t){return new O(e,t,{parser(e,t){let s=O.defaultParser(...arguments);if(s){({propertyName:e,propertyDescriptor:t}=s);let i=t.value;if("function"==typeof i)switch(i.name){case"$install":case"$uninstall":case"$enable":case"$disable":case"$state":break;default:t.value=C(i).beforeAll((function(){if(!this.$.states.enabled&&"PHASE_NONE"===this.$.service.phase){let e=new _.INVALID_CALL({owner:this,target:i,reason:"component disabled"});throw this.$logErr(...e),e}}))}return{propertyName:e,propertyDescriptor:t}}}})}class D{constructor(e){D.inject(this,D,e)}static inject(e,t,s){k(e,t).use(U.TraitCore).use(U.TraitAbout,{name:s}).use(U.TraitLog).use(U.TraitEvents).use(U.TraitState).use(U.TraitService).use(U.TraitTask)}}class F extends D{constructor(e){super(e),F.inject(this,F)}static inject(e,t){k(e,t).use(U.TraitFetch).use(U.TraitDOM).use(U.TraitCSS).use(U.TraitMutation).use(U.TraitTimeout).use(U.TraitInterval).use(U.TraitLibVue).use(U.TraitLibReact)}}const U=(e,t)=>Object.assign(new F(e),t);class B{static createDescriptors(e=B.DESCRIPTORS_PROTOTYPE){let t=B.create(e,!0,!0),s=Object.create(null);return s.NONE=t(),s.WRITABLE=t({writable:!0}),s.ENUMERABLE=t({enumerable:!0}),s.CONFIGURABLE=t({configurable:!0}),s.CONFIGURABLE_WRITABLE=s.WRITABLE_CONFIGURABLE=t({writable:!0,configurable:!0}),s.CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE=t({enumerable:!0,configurable:!0}),s.ENUMERABLE_WRITABLE=s.WRITABLE_ENUMERABLE=t({writable:!0,enumerable:!0}),s.WRITABLE_ENUMERABLE_CONFIGURABLE=s.WRITABLE_CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE_WRITABLE=s.ENUMERABLE_WRITABLE_CONFIGURABLE=s.CONFIGURABLE_WRITABLE_ENUMERABLE=s.CONFIGURABLE_ENUMERABLE_WRITABLE=t({writable:!0,enumerable:!0,configurable:!0}),s.READONLY=t({writable:!1,enumerable:!1,configurable:!1}),s}static assign(e,t,s,i){let r={};switch(typeof t){case"string":case"symbol":if(!i)throw new Error("missing descriptor argument; use Object.assign instead");(i=Object.create(i)).value=s,Object.defineProperty(e,t,i);break;case"object":if([s,i]=[t,s],!i)throw new Error("missing descriptor argument; use Object.assign instead");for(let e of Object.getOwnPropertyNames(s))r[e]=Object.create(i),r[e].value=s[e];for(let e of Object.getOwnPropertySymbols(s))r[e]=Object.create(i),r[e].value=s[e];Object.defineProperties(e,r);break;default:throw new Error("invalid property argument")}return e}static create(e,t=!1,s=!1){return function(i){return t?Object.assign(s?Object.create(null):{},e,i):Object.assign(Object.create(s?Object.assign(Object.create(null),e):e),i)}}static disinherit(e){return Object.assign(Object.create(null),e)}}B.DESCRIPTORS_PROTOTYPE={writable:!1,enumerable:!1,configurable:!1},n.onInit((function(){B.descriptors=B.createDescriptors()}));const H=()=>++H.uid;H.uid=0;class V{constructor(e,t={}){let s,i;R("JFactoryAbout(owner)",e).type(Object),R("JFactoryAbout(about)",t).typePlainObject().reservedProperty("uid").reservedProperty("fingerprint"),"name"in t&&R("JFactoryAbout(about.name)",t.name).typeString().notEmptyString();let r=H();t.name?(s=t.name,delete t.name,i="jFactory_"+f(s.toLowerCase())+"_"+r):(delete t.name,s=`[${e.constructor.name}#${r}]`,i="jFactory_"+e.constructor.name+"_"+r),B.assign(this,{uid:r,name:s,fingerprint:i},B.descriptors.ENUMERABLE),Object.assign(this,t),R("JFactoryAbout.name",this.name).matchReg(/^[\w[\]#]+$/),R("JFactoryAbout.fingerprint",this.fingerprint).matchReg(/^[\w]+$/)}}const Y=()=>++Y.uid;Y.uid=0;class q extends Promise{constructor({name:e,config:t,traceSource:s},i){1===arguments.length&&([e,t,i]=[null,null,arguments[0]]);const r=Y();let a,n;t={...q.DEFAULT_CONFIG,...t},R("name",e=e||"unnamed").type(String,Number).matchReg(/^[^. ]+$/),R("config",t).typePlainObject(),R("executor",i).typeFunction(),super((e,t)=>{a=e,n=t});const o=new J(this,r,e,t);Object.defineProperties(this,{$chain:{enumerable:!0,writable:!0,value:o},$type:{writable:!0,value:"promise"},$value:{writable:!0,value:void 0},$isSettled:{writable:!0,value:!1},$isRejected:{writable:!0,value:null},$isFulfilled:{writable:!0,value:null},$isExpired:{writable:!0,value:!1},$isAborted:{writable:!0,value:!1}}),Object.defineProperties(this,{$dev_name:{configurable:!0,value:e+"["+r+":0]"},$dev_path:{writable:!0,value:new W(this)},$dev_position:{writable:!0,value:0}}),l(i)||Object.defineProperties(this,{$dev_source:{value:i}}),S.tracer.attachTrace(this,s);const c=()=>{if(!this.$chain.isPending)try{this.$chainComplete("auto-completed")}catch(e){console.error(e)}},h=e=>{if(!this.$isSettled){if(e===this)return void u(new TypeError("Chaining cycle detected for promise "+this.$dev_name));let t;if(null!==e&&("object"==typeof e||"function"==typeof x))try{t=e.then}catch(e){return void u(e)}if("function"==typeof t){let s=!1,i=function(e){s||(s=!0,h(e))},r=function(e){s||(s=!0,u(e))};try{t.call(e,i,r)}catch(e){s||u(e)}}else this.$isRejected=!1,this.$isFulfilled=!0,this.$isExpired&&(e=this.$chain.errorExpired),a(e),d(e)}},u=e=>{this.$isSettled||(this.$isRejected=!0,this.$isFulfilled=!1,n(e),d(e))},d=e=>{this.$value=e,this.$isSettled=!0,this.$chain.chainMap.set(this,!0),this.$chain.chainConfig.chainAutoComplete&&(1!==this.$chain.chainMap.size||this.$isExpired?c():this.then(c))};let p=t.chainAutoComplete;Object.defineProperty(t,"chainAutoComplete",{get:()=>p,set:e=>{p!==e&&(p=e,e&&c())}}),o.chainMap.set(this,!1),Object.defineProperties(this,{__resolve__:{value:h},__reject__:{value:u}});try{i(h,u)}catch(e){u(e)}}then(e,t,s){let i,r,a,n=l(e)&&!e.name.startsWith("bound ");e&&"function"==typeof e&&(i=function(s){return"await"===o?a.$isAborted?t(a.$chain.errorExpired):e(s):a.$isExpired?void 0:(a.$isSettled,e(s))}),t&&"function"==typeof t&&(r=function(e){return a.$isSettled,t(e)});let o=s||(n?"await":void 0===e?"catch":"then");a=Object.assign(super.then(i,r),this),Y.uid--,a.$type=o;{a.$dev_position=this.$chain.chainMap.size;let s="";e&&e.name&&(s+=e.name),t&&t.name&&(s+=","+t.name),Object.defineProperties(a,{$dev_name:{value:this.$chain.chainName+"["+this.$chain.chainId+":"+this.$dev_position+"]."+a.$type+(s?"("+s+")":"")+"["+a.$chain.chainId+":"+a.$dev_position+"]"},$dev_path:{value:new W(this.$dev_path,a)},$dev_onFulfilled:{value:e},$dev_onRejected:{value:t}})}return a.$chain.chainMap.set(a,!1),this.$isExpired&&q.setExpired(a,!0,!this.$isAborted,this.$chain.errorExpired),a}$catchExpired(e){return this.then(t=>this.$chain.chainRoot.$isExpired?e(t):t,void 0,"$catchExpired")}static resolve(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),t instanceof this&&1===arguments.length?t:new this(e,(function(e){e(t)}))}static reject(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),new this(e,(function(e,s){s(t)}))}$toPromise(){return Promise.resolve(this)}$chainAbort(e="$chainAbort()"){return this.$chain.complete(e,!0),this}$chainComplete(e="$chainComplete()"){try{this.$chain.complete(e,!1)}catch(e){throw e instanceof _.INVALID_CALL?new _.INVALID_CALL({target:e.$data.target,reason:"Trying to complete a pending chain. Use $chainAbort() if you want to stop it."}):e}return this}$chainAutoComplete(){return this.$chain.chainConfig.chainAutoComplete=!0,this}static setExpired(e,t,s,i){if(!e.$isSettled){if(!t)throw new _.INVALID_CALL({target:e,reason:"promise must be aborted or settled before setting it to expired."});e.$isAborted=!s,e.__resolve__(i)}e.$isExpired=!0}}q.DEFAULT_CONFIG={chainAutoComplete:!1};class J{constructor(e,t,s,i){Object.defineProperties(this,{chainConfig:{value:i},chainRoot:{value:e},chainId:{value:t},chainName:{value:s},chainMap:{value:new Map},isCompleted:{value:!1,configurable:!0},data:{value:{}},__deferred__:{value:o.Deferred()}})}get isPending(){return Array.from(this.chainMap.values()).includes(!1)}then(e){return this.__deferred__.done(e),this}complete(e="chain.complete()",t){let s=this.chainRoot;if(!s.$isExpired){let i=s.$chain.errorExpired=new _.PROMISE_EXPIRED({target:s,reason:e}),r=this.chainMap;for(let e of r.keys())q.setExpired(e,t,!1,i);Object.defineProperty(this,"isCompleted",{value:!0}),this.__deferred__.resolve()}return this}}class W extends Array{constructor(){super();for(let e of arguments)Array.isArray(e)?this.push(...e):this.push(e)}get printable(){return this.map((e,t)=>0===t?e.$dev_name:e.$dev_name.split(".")[1]).join(".")}toString(){return this.printable}}class G extends Promise{constructor(e){let t={$isSettled:!1,$isRejected:null,$value:void 0};super((s,i)=>{let r=!1,a=e=>{e instanceof Promise?G.resolve(e).then(a,n):r||(r=!0,t.$isSettled=!0,t.$isRejected=!1,t.$value=e,s(e))},n=e=>{r||(r=!0,t.$isSettled=!0,t.$isRejected=!0,t.$value=e,i(e))};try{e(a,n)}catch(e){n(e)}}),Object.assign(this,t),t=this}then(e,t){if(this.$isSettled){let s=this.$value;try{if(this.$isRejected){if(super.then(void 0,()=>null),!t||"function"!=typeof t)return G.reject(s);s=t(s)}else e&&"function"==typeof e&&(s=e(s))}catch(e){return G.reject(e)}return G.resolve(s)}return super.then(e,t)}static resolve(e){return e instanceof G?e:new G(e instanceof Promise?e.then.bind(e):t=>t(e))}}class K{constructor(){Object.defineProperties(this,{registry:{value:o(Object.create(null))},handlers:{value:new WeakMap},onListenerUpdate:{value:null,writable:!0},onObserverUpdate:{value:null,writable:!0}})}on({events:e,handler:t,target:s,selector:i}){K.validateSelector(e),R("JFactoryEvents.on({handler})",t).typeFunction(),s&&R("JFactoryEvents.on({target})",s).type(String,o,HTMLElement),i&&R("JFactoryEvents.on({selector})",s).typeString();let r=this.handlers.get(t);s?(r||this.handlers.set(t,!0),i?o(s).on(e,i,t):o(s).on(e,t),this.onListenerUpdate&&this.onListenerUpdate(arguments)):(r||(this.handlers.set(t,r=function(e,{data:s,stack:i}){i.push(()=>t(e,s))}),r.originalHandler=t),this.registry.on(e,r),this.onObserverUpdate&&this.onObserverUpdate(arguments))}off({events:e,handler:t,target:s,selector:i}){if(void 0!==e&&(K.validateSelector(e),t&&R("JFactoryEvents.off({handler})",t).typeFunction(),s&&R("JFactoryEvents.off({target})",s).type(String,o,HTMLElement),i&&R("JFactoryEvents.off({selector})",s).typeString()),s)i?o(s).off(e,i,t):o(s).off(e,t);else{if(o("*").off(e,t),t&&!(t=this.handlers.get(t)))throw new _.INVALID_VALUE({target:"handler",reason:"not registered",given:t});this.registry.off(e,t)}this.onObserverUpdate&&this.onObserverUpdate(arguments),this.onListenerUpdate&&this.onListenerUpdate(arguments)}triggerParallel({events:e,data:t,target:s}){K.validateSelector(e),s&&R("JFactoryEvents.triggerParallel({target})",s).type(String,o,HTMLElement);const i=[],r=[];if(e=e.split(" "),s)for(let r of e)o(s).trigger(r,{data:t,stack:i});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:i});for(let e of i){let t=e();t instanceof Promise&&!t.$isSettled&&r.push(t)}return r.length?Promise.all(r):G.resolve()}triggerSeries({events:e,data:t,target:s}){return K.validateSelector(e),s&&R("JFactoryEvents.triggerSeries({target})",s).type(String,o,HTMLElement),new G(async i=>{const r=[];if(e=e.split(" "),s)for(let i of e)o(s).trigger(i,{data:t,stack:r});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:r});for(let e of r){let t=e();t instanceof Promise&&!t.$isSettled&&await t}i()})}}class z extends K{constructor(e){super(),Object.defineProperties(this,{parent:{value:e},affiliateRules:{value:(new T).compose()}}),this.affiliateAddRule(z.rule_namespace)}affiliate(e="",t="",s){let i=new Q(e);for(let e of i.events)this.affiliateRules(e,t,s);return i.toString()}affiliateAddRule(e){this.affiliateRules.composer.last(e)}static rule_namespace(e,t,s){s=s.split(".");for(let e of s)e&&t.addNamespace(e)}on(e,t,s,i,r){switch(arguments.length){case 2:[i,t]=[t];break;case 3:"function"==typeof arguments[2]?[i,s]=[s]:[i,r,t,s]=[t,s];break;case 4:"object"==typeof arguments[3]&&([r,i,s]=[i,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,r),void 0===t?super.on({events:e,handler:i}):super.on({events:e,target:t,selector:s,handler:i})}off(e,t,s,i,r){const a=arguments.length;switch(a){case 1:"object"==typeof arguments[0]&&([r,e]=[e]);break;case 2:"function"==typeof arguments[1]?[i,t]=[t]:u(arguments[1])&&([r,t]=[t]);break;case 3:"function"==typeof arguments[2]?[i,s]=[s]:"function"==typeof arguments[1]&&([i,r,t,s]=[t,s]);break;case 4:"object"==typeof arguments[3]&&([r,i,s]=[i,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,r),a<2?super.off({events:e}):t?super.off({events:e,target:t,selector:s,handler:i}):super.off({events:e,handler:i})}trigger(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerSeries({events:e,target:t,data:s}):super.triggerSeries({events:e,data:s})}triggerParallel(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerParallel({events:e,target:t,data:s}):super.triggerParallel({events:e,data:s})}getDomListeners(e){let t=new Map;for(let s of o("*")){let i=o._data(s,"events");if(i)for(let r of Object.values(i))for(let i of r){let r;if(new X(i.namespace).hasNamespace(e)){(r=t.get(s))||t.set(s,r={}),(r[i.type]||(r[i.type]=[])).push({selector:i.selector||null,handler:i.handler,namespace:i.namespace})}}}return t}getObservers(){let e=new Map,t=this.registry._events;if(!t){let e=Object.values(this.registry)[0],s=Object.getOwnPropertyNames(e).find(e=>0===e.indexOf("jQuery"));e&&s&&(t=this.registry._events=e[s].events)}if(t)for(let[s,i]of Object.entries(t)){let t=e.get(s);t||(t=[],e.set(s,t));for(let e of i)t.push({handler:e.handler.originalHandler,namespace:e.namespace})}return e}}class Q{constructor(e){K.validateSelector(e),this.events=e.split(" ").map(e=>new X(e))}toString(){let e=[];for(let t of this.events)e.push(t.toString());return e.join(" ")}}class X{constructor(e){let[t,...s]=e.split(".");this.event=t,this.namespace=new Set(s)}hasNamespace(e){Array.isArray(e)||(e=[e]);for(let t of e){if(!/^[\w:]+$/.test(t))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:t});if(t&&this.namespace.has(t))return t}return!1}addNamespace(e){if(!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.add(e)}deleteNamespace(e){if(!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.delete(e)}toString(){return this.namespace.size?this.event+"."+Array.from(this.namespace.values()).join("."):this.event}}K.validateSelector=function(e){R("JFactoryEvents.validateSelector(selector)",e).notUndefined().validSpaces();for(let[t,s]of e.split(" ").map(e=>e.split(".")).map(e=>[e.shift(),e.join(".")]))t&&K.validateEvent(t),s&&K.validateNamespace(s);return!0},K.validateEvent=function(e){if(R("JFactoryEvents.validateEvent(event)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:]+$/.test(e))throw new _.INVALID_VALUE({target:"JFactoryEvents.validateEvent(event)",reason:"must be alphanumeric, underscore and colon characters",given:e});return!0},K.validateNamespace=function(e){if(R("JFactoryEvents.validateNamespace(namespace)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:.]+$/.test(e))throw new _.INVALID_VALUE({target:"JFactoryEvents.validateNamespace(namespace)",reason:"must be alphanumeric, underscore, dot and colon characters",given:e});return!0};class Z extends q{constructor(e,t,s={}){if("function"==typeof e)super(e);else{"string"==typeof e&&([e,t,s]=[{},arguments[0],arguments[1]]);let i=new Request(t,s);super(e,(r,a)=>{let n=fetch(i).then(e=>{if(this.$chain.fetchResponse=e,!e.ok)throw Error(e.status+":"+e.statusText);return e});s.$typeText?n=n.then(e=>e.text()).then(e=>this.$chain.responseText=e):s.$typeJSON&&(n=n.then(e=>e.json()).then(e=>this.$chain.responseJSON=e)),n=n.catch(r=>{throw new _.REQUEST_ERROR({reason:r.message||r,target:this.$chain.fetchResponse&&this.$chain.fetchResponse.url||t,owner:this,fetchOptions:s,fetchRequest:i,fetchResponse:this.$chain.fetchResponse||null},e.traceSource)}),n.then(r,a)}),this.$chain.fetchOptions=s,this.$chain.fetchRequest=i;let r=s.abortController||new AbortController;s.signal=r.signal,this.$chain.fetchAbortController=r}}$chainAbort(e="request aborted"){return super.$chainAbort(e),this.$chain.fetchAbortController.abort(),this}}const ee=Symbol();class te{constructor(e){e&&R("JFactoryLogger(options)",e).properties(Object.getOwnPropertyNames(te.DEFAULT_CONFIG)),d(this,e,te.DEFAULT_CONFIG),this.condition=N(te.DEFAULT_CONDITION),this.installAccessor("log"),this.installAccessor("warn"),this.installAccessor("error")}get enabled(){return this[ee]&&(!this.parentLogger||this.parentLogger.enabled)}set enabled(e){e?this.enable():this.disable()}enable(){!0!==this[ee]&&(this[ee]=!0)}disable(){!1!==this[ee]&&(this[ee]=!1)}disallow(e,t=this.label){this.filters[t]||(this.filters[t]={}),this.filters[t][e]=!0}allow(e,t=this.label){this.filters[t]&&delete this.filters[t][e]}installAccessor(e,t=e,s=this){R("JFactoryLogger(nativeName)",e).equalIn(["log","warn","error"]),Object.defineProperties(s,{[t]:{get:this.accessor.bind(this,e),configurable:!0}})}accessor(e){return this[ee]&&this.condition(e)&&this.formatter[e](this)||g}createSubLogger(e){let t=new te({enabled:this.enabled,label:this.label+"."+e,styles_css:this.styles_css,styles_cli:this.styles_cli,console:this.console,formatter:this.formatter});return t.parentLogger=this,t.condition.addCondition(()=>this.enabled),t.filters=this.filters,t}}te.FORMATTER_NATIVE={log:e=>e.console.log.bind(e.console,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.label+">"),error:e=>e.console.error.bind(e.console,e.label+">")},te.FORMATTER_CLI={log:e=>e.console.log.bind(e.console,e.styles_cli.label,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.styles_cli.label,e.label+">"),error:e=>e.console.error.bind(e.console,e.styles_cli.label,e.label+">")},te.FORMATTER_BROWSER={log:e=>e.console.log.bind(e.console,"%c"+e.label+">",e.styles_css.label),warn:e=>e.console.warn.bind(e.console,"%c"+e.label+">",e.styles_css.label),error:e=>e.console.error.bind(e.console,"%c"+e.label+">",e.styles_css.label)},te.DEFAULT_CONDITION=function(e){return R("JFactoryLogger.condition(nativeName)",e).equalIn(["log","warn","error"]),R("JFactoryLogger.enabled",this.enabled).equal(!0),!(this.filters[this.label]&&this.filters[this.label][e])},te.DEFAULT_CONFIG={label:"",enabled:!0,parentLogger:null,formatter:r?te.FORMATTER_CLI:te.FORMATTER_BROWSER,console:console,filters:{},styles_cli:{label:"[1;30m%s[0m"},styles_css:{label:"color: gray"}};class se extends Date{toString(){return this.toLocaleTimeString()+", "+this.getUTCMilliseconds()+"ms ("+this.valueOf()+")"}$toDurationString(){let e=this.getUTCHours(),t=this.getUTCMinutes(),s=this.getUTCSeconds(),i=this.getUTCMilliseconds(),r=[];return e&&r.push(e+"h"),t&&r.push(t+"min"),s&&r.push(s+"s"),r.push(i+"ms"),1===r.length?r[0]:r.join(",")+" ("+this.valueOf()+")"}}class ie extends Date{constructor(){super(),this.elapsed=null,Object.defineProperties(this,{t1:{value:null,writable:!0},t0:{value:new se}})}end(){this.t1=new se,this.elapsed=new se(this.t1-this.t0).$toDurationString()}toString(){return this.elapsed}}class re{trait_constructor(){const e=this;class t extends Map{constructor(...e){super(...e),Object.defineProperty(this,"id_autoinc",{value:0,writable:!0})}$registerSync(t,s){let i=Object.defineProperties({},{$value:{value:s},$phaseRemove:{value:he.getContextualRemovePhase(e)}});return this.set(t,i),i}$registerAsync(t,s,i){let r=e.$task(s,i.$chain);return i.$chain.then(()=>{r.$chainAutoComplete()}),r.$chain.then(()=>{i.$chain.isCompleted||i.$chainAbort("aborted by task")}),Object.defineProperty(i,"$phaseRemove",{value:r.$phaseRemove}),this.set(t,i),r}$id_resolve(e){if(e.indexOf("?")>=0){let t=++this.id_autoinc;e=e.replace(/\?/g,t)}return e}}const s=Object.assign(Object.create(null),{[re.SYMBOL_PRIVATE]:Object.create(null),assign:function(e,t,s){B.assign(this,e,t,s)},createSubMap:()=>new t});Object.defineProperty(this,"$",{value:Object.create(s)}),this.$.assign({tasks:null,requests:null},B.descriptors.ENUMERABLE_WRITABLE)}}re.SYMBOL_PRIVATE=Symbol("_");class ae{trait_constructor(e){B.assign(this.$,"about",new V(this,e),B.descriptors.READONLY)}}class ne{trait_constructor(){let e=Object.assign({label:this.$.about.name},a.TraitLog||{enabled:!1}),t=new te(e);Object.defineProperty(this.$,"logger",{value:t}),t.installAccessor("log","$log",this),t.installAccessor("warn","$logWarn",this),t.installAccessor("error","$logErr",this)}}class oe{trait_constructor(){this.$.assign("tasks",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$task(e,t){if(R("$task(id)",e=this.$.tasks.$id_resolve(e)).typeString(),R("$task(executorOrValue)",t).notUndefined(),this.$.tasks.has(e))throw new _.KEY_DUPLICATED({target:"$task(id)",given:e});let s,i;return s="function"==typeof t?new q({name:e,owner:this},t):q.resolve({name:e,owner:this},t),s.$phaseRemove=he.getContextualRemovePhase(this),i=new ie,s.$taskMetrics={$dev_timing:i},s.$chain.then(()=>{i.end(),this.$.tasks.get(e)&&this.$taskRemove(e)}),this.$.tasks.set(e,s),s}$taskRemove(e,t){if(R("$taskRemove(id)",e).typeString(),t&&R("$taskRemove(reason)",t).typeString(),!this.$.tasks.has(e))throw new _.KEY_MISSING({target:"$taskRemove(id)",given:e});this.$.tasks.get(e)._called,this.$.tasks.get(e)._called=!0;let s=this.$.tasks.get(e);this.$.tasks.delete(e),s.$chainAbort(t||"$taskRemove()")}$taskRemoveAll(e){R("$taskRemoveAll(removePhase)",e).equalIn(he.PHASES);let t=this.$.tasks;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$taskRemove(s,"$taskRemoveAll("+e+")")}$taskPromiseAll(e=!1){let t=[];if(this.$.tasks.size)for(let s of this.$.tasks.values())e&&(s.$chain.chainConfig.chainAutoComplete=!0),s.$chain.isPending&&t.push(s.$chain);return t.length?Promise.all(t):G.resolve()}}class le{trait_constructor(){ue(this,"events",{custom:new z(this),kernel:new z(this)},B.descriptors.NONE);let e=this.$[re.SYMBOL_PRIVATE].events.custom;Object.defineProperties(this.$,{listeners:{get:e.getDomListeners.bind(e,this.$.about.fingerprint),enumerable:!0},observers:{get:e.getObservers.bind(e),enumerable:!0}})}$on(){this.$[re.SYMBOL_PRIVATE].events.custom.on(...arguments)}$off(){this.$[re.SYMBOL_PRIVATE].events.custom.off(...arguments)}$trigger(){return this.$[re.SYMBOL_PRIVATE].events.custom.trigger(...arguments)}$triggerParallel(){return this.$[re.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)}$notify(e,t){return this.$trigger(e,t).then(()=>this.$[re.SYMBOL_PRIVATE].events.kernel.trigger(e,t))}}class ce{trait_constructor(){const e=Object.create(null),t=Object.create(null),s=this.$[re.SYMBOL_PRIVATE].events.kernel;ue(this,{states:e,stateRoutes:t},B.descriptors.READONLY),B.assign(this.$,"states",new Proxy(e,{set:(e,t,s)=>this.$state(t,s),get:(t,s)=>e[s]}),B.descriptors.READONLY),s.on("beforeStateChange",(e,s)=>{let i;if(t[s.key]&&t[s.key].before&&(i=t[s.key].before(s.val)))return this.$notify(i)}),s.on("afterStateChange",(e,s)=>{let i;if(t[s.key]&&t[s.key].after&&(i=t[s.key].after(s.val)))return this.$notify(i)})}$state(e,t,s=!0){return R("$state(key)",e).typeString(),R("$state(notify)",s).typeBoolean(),new G(async i=>{let r,a=this.$[re.SYMBOL_PRIVATE].states,n=a[e];e in a&&n===t||(r=s&&this.$notify("beforeStateChange",{key:e,val:t,previousVal:n}),r&&R("beforeStateChange result",r).type(G),r&&!r.$isSettled&&(a[e]=r,await r),void 0===t?delete a[e]:a[e]=t,r=s&&this.$notify("afterStateChange",{key:e,val:t,previousVal:n}),r&&R("afterStateChange result",r).type(G)),r?r.then(i):i()})}}class he{trait_constructor(){B.assign(this.$,"service",Object.create(null),B.descriptors.READONLY),this.$.service.phase=he.PHASE.NONE,this.$.service.phaseQueue=q.resolve({name:"phaseQueue"},null),this.$.service.phaseTask=null,this.$.service.phaseMap={install:new Set,enable:new Set,disable:new Set,uninstall:new Set},this.$state("installed",!1,!1),this.$state("enabled",!1,!1),de(this,"stateRoutes",{installed:{after:e=>e?"install":"uninstall"},enabled:{after:e=>e?"enable":"disable"}},B.descriptors.NONE);let e=this.$[re.SYMBOL_PRIVATE].events.custom,t=this.$[re.SYMBOL_PRIVATE].events.kernel;e.affiliateAddRule((e,t,s,i)=>he.setEventNamespaceRemovePhase(this,t,i));let s=e=>{this.$.tasks.size&&this.$taskRemoveAll(this.$.service.phase);let t=G.resolve();return e&&(t=t.then(()=>e.call(this)).then(()=>this.$taskPromiseAll(!0))),t.catch(e=>{e instanceof _.PROMISE_EXPIRED||this.$logErr("unhandled promise rejection in "+this.$.service.phase+";",...e instanceof y?e:[e])})};t.on("install",()=>s(this.onInstall)),t.on("enable",()=>s(this.onEnable)),t.on("disable",()=>s(this.onDisable)),t.on("uninstall",()=>s(this.onUninstall)),t.on("disable",()=>this.$off({removal:he.PHASE.DISABLE})),t.on("uninstall",()=>this.$off({removal:he.PHASE.UNINSTALL}))}$install(e){let t;const s=new q({name:"install",config:{chainAutoComplete:!0}},e=>t=e).then(()=>{if(!this.$.states.installed)return this.$.service.phase=he.PHASE.INSTALL,this.$state("installed",!0)});return this.$.service.phaseMap.install.add(s),s.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.install.delete(s),this.$.service.phase=he.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=s,t(),s.$chain)),e?this.$enable():s}$enable(){let e;const t=new q({name:"enable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed&&!this.$.states.enabled)return this.$.service.phase=he.PHASE.ENABLE,this.$state("enabled",!0)});return this.$.service.phaseMap.enable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.enable.delete(t),this.$.service.phase=he.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$disable(){let e;const t=new q({name:"disable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.enabled)return this.$.service.phase=he.PHASE.DISABLE,this.$state("enabled",!1)});this.$.service.phaseMap.disable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.disable.delete(t),this.$.service.phase=he.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.enable.entries())t===this.$.service.phaseTask&&he.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.enable.delete(e);return this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$uninstall(){let e;const t=new q({name:"uninstall",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed)return this.$.service.phase=he.PHASE.UNINSTALL,this.$state("installed",!1)});this.$.service.phaseMap.uninstall.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.uninstall.delete(t),this.$.service.phase=he.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.install.entries())t===this.$.service.phaseTask&&he.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.install.delete(e);return this.$disable(),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}static phaseKill(e){e.$.tasks.size&&e.$taskRemoveAll(he.getContextualRemovePhase(e)),e.$.service.phase=he.PHASE.NONE}static getContextualRemovePhase(e){return he.PHASE_REVERT[e.$.service.phase]}static setEventNamespaceRemovePhase(e,t,s){let i=t.hasNamespace(he.PHASES),r=s&&s.removal;r||(r=he.getContextualRemovePhase(e)),"uninstall"===t.event&&r===he.PHASE.DISABLE&&(r=he.PHASE.UNINSTALL),i!==r&&(t.deleteNamespace(i),t.addNamespace(r)),t.addNamespace(r)}}function ue(e,t,s,i){B.assign(e.$[re.SYMBOL_PRIVATE],t,s,i)}function de(e,t,s,i){B.assign(e.$[re.SYMBOL_PRIVATE][t],s,i)}he.PHASE={NONE:"PHASE_NONE",INSTALL:"PHASE_INSTALL",ENABLE:"PHASE_ENABLE",DISABLE:"PHASE_DISABLE",UNINSTALL:"PHASE_UNINSTALL"},he.PHASE_REVERT={[he.PHASE.INSTALL]:he.PHASE.UNINSTALL,[he.PHASE.UNINSTALL]:he.PHASE.INSTALL,[he.PHASE.DISABLE]:he.PHASE.ENABLE,[he.PHASE.ENABLE]:he.PHASE.DISABLE,[he.PHASE.NONE]:he.PHASE.DISABLE},he.PHASES=Object.values(he.PHASE),U.PHASE=B.disinherit(he.PHASE),U.TraitCore=re,U.TraitAbout=ae,U.TraitLog=ne,U.TraitEvents=le,U.TraitState=ce,U.TraitService=he,U.TraitTask=oe;class pe{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$fetchRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$fetchRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("requests",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$fetch(e,t,s={}){if(R("$fetch(id)",e=this.$.requests.$id_resolve(e)).typeString(),R("$fetch(url)",t).typeString(),R("$fetch(fetchOptions)",s).typePlainObject(),this.$.requests.has(e))throw new _.KEY_DUPLICATED({target:"$fetch(id)",given:e});let i=new Z({name:e,traceSource:S.tracer.captureTraceSource("$fetch"),config:{chainAutoComplete:!0}},t,s);return this.$.requests.$registerAsync(e,'$fetch("'+e+'")',i),i.$chain.then(()=>{this.$.requests.has(e)&&this.$fetchRemove(e)}),i}$fetchText(e,t,s={}){return this.$fetch(e,t,{...s,$typeText:!0})}$fetchJSON(e,t,s={}){return this.$fetch(e,t,{...s,$typeJSON:!0})}$fetchRemove(e,t){if(R("$fetchRemove(id)",e).typeString(),t&&R("$fetchRemove(reason)",t).typeString(),!this.$.requests.has(e))throw new _.KEY_MISSING({target:"$fetchRemove(id)",given:e});this.$.requests.get(e)._debug_remove_called,this.$.requests.get(e)._debug_remove_called=!0;let s=this.$.requests.get(e);this.$.requests.delete(e),s.$chainAbort(t||"$fetchRemove()")}$fetchRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.requests;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$fetchRemove(s,"$fetchRemoveAll("+e+")")}}class me{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$timeoutRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$timeoutRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("timeouts",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$timeout(e,t,s=null,...i){if(R("id",e=this.$.timeouts.$id_resolve(e)).typeString(),R("delay",t).typeNumber(),R("handler",s).type(Function,null),this.$.timeouts.has(e))throw new _.KEY_DUPLICATED({target:"$timeout(id)",given:e});let r,a=new q({name:e,traceSource:S.tracer.captureTraceSource("$timeout"),config:{chainAutoComplete:!0}},e=>{r=setTimeout(()=>{a.$isExpired||e(s?s(...i):void 0)},t)});return a.$chain.data.timer=r,this.$.timeouts.$registerAsync(e,'$timeout("'+e+'")',a),a.$chain.then(()=>{this.$.timeouts.has(e)&&this.$timeoutRemove(e)}),a}$timeoutRemove(e,t){if(R("$timeoutRemove(id)",e).typeString(),t&&R("$timeoutRemove(reason)",t).typeString(),!this.$.timeouts.has(e))throw new _.KEY_MISSING({target:"$timeoutRemove(id)",given:e});this.$.timeouts.get(e)._debug_remove_called,this.$.timeouts.get(e)._debug_remove_called=!0;let s=this.$.timeouts.get(e);clearTimeout(s.$chain.data.timer),this.$.timeouts.delete(e),s.$chainAbort(t||"$timeoutRemove()")}$timeoutRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.timeouts;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$timeoutRemove(s,"$timeoutRemoveAll()")}}class $e{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$intervalRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$intervalRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("timeints",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$interval(e,t,s,...i){if(R("id",e=this.$.timeints.$id_resolve(e)).typeString(),R("handler",s).typeFunction(),R("delay",t).typeNumber(),this.$.timeints.has(e))throw new _.KEY_DUPLICATED({target:"$interval(id)",given:e});let r=setInterval(s,t,...i);this.$.timeints.$registerSync(e,r)}$intervalRemove(e){if(R("$intervalRemove(id)",e).typeString(),!this.$.timeints.has(e))throw new _.KEY_MISSING({target:"$intervalRemove(id)",given:e});this.$.timeints.get(e)._debug_remove_called,this.$.timeints.get(e)._debug_remove_called=!0,clearInterval(this.$.timeints.get(e).$value),this.$.timeints.delete(e)}$intervalRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.timeints;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$intervalRemove(s)}}class fe{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$mutationRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$mutationRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("mutations",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$mutation(e,t,s,i){if(R("id",e=this.$.mutations.$id_resolve(e)).typeString(),R("parent",t).type(HTMLElement,Document),R("config",s).typePlainObject(),R("handler",i).typeFunction(),this.$.mutations.has(e))throw new _.KEY_DUPLICATED({target:"$mutation(id)",given:e});let r=new MutationObserver(i);r.observe(t,s),this.$.mutations.$registerSync(e,r)}$mutationRemove(e,t){if(R("$mutationRemove(id)",e).typeString(),t&&R("$mutationRemove(reason)",t).typeString(),!this.$.mutations.has(e))throw new _.KEY_MISSING({target:"$mutationRemove(id)",given:e});this.$.mutations.get(e)._debug_remove_called,this.$.mutations.get(e)._debug_remove_called=!0,this.$.mutations.get(e).$value.disconnect(),this.$.mutations.delete(e)}$mutationRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.mutations;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$mutationRemove(s)}}class ge{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$domRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$domRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("dom",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$dom(e,t,s){let i;if(R("id",e=this.$.dom.$id_resolve(e)).typeString(),R("jQueryArgument",t).type(String,Object),s&&R("appendTo",s).type(String,Object),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.dom.has(e))throw new _.KEY_DUPLICATED({target:"$dom(id)",given:e});let r=o(t);if("TEMPLATE"===r[0].tagName&&(r=o(o(r[0]).html())),i){if(r[0].nodeType!==Node.ELEMENT_NODE)throw new _.INVALID_VALUE({target:"$dom(#id)",given:r,reason:"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE"});r[0].id=e}return s&&r.appendTo(s),this.$.dom.$registerSync(e,r).$value}$domFetch(e,t,s,i){let r;if(s&&!u(s)&&([s,i]=[{},s]),R("id",e=this.$.dom.$id_resolve(e)).typeString(),R("url",t).typeString(),i&&R("appendTo",i).type(String,Object),s&&R("fetchOptions",s).type(Object),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.dom.has(e))throw new _.KEY_DUPLICATED({target:"$domFetch(id)",given:e});let a=this.$fetchText('$domFetch("'+e+'")',t,s).then(t=>{let s=o(t);return r&&(s[0].id=e),i&&s.appendTo(i),s});return this.$.dom.$registerAsync(e,'$domFetch("'+e+'")',a),a}$domRemove(e,t){if(R("$domRemove(id)",e).typeString(),t&&R("$domRemove(reason)",t).typeString(),!this.$.dom.has(e))throw new _.KEY_MISSING({target:"$domRemove(id)",given:e});this.$.dom.get(e)._debug_remove_called,this.$.dom.get(e)._debug_remove_called=!0;let s=this.$.dom.get(e),i=s.$value;i instanceof o&&i.remove(),s instanceof Z&&s.$chainAbort(t||"$domRemove()"),this.$.dom.delete(e)}$domRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.dom;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$domRemove(s)}}class ve{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$cssRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$cssRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("css",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$css(e,t){let s;if(R("id",e=this.$.css.$id_resolve(e)).typeString(),R("css",t).typeString(),"#"===e[0]&&(e=e.substring(1),s=!0),this.$.css.has(e))throw new _.KEY_DUPLICATED({target:"$css(id)",given:e});return this.$.css.$registerSync(e,o("<style>").attr(s?{id:e}:{}).html(t).appendTo("head")).$value}$cssFetch(e,t,s="head"){let i;if(R("id",e=this.$.css.$id_resolve(e)).typeString(),R("url",t).typeString(),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.css.has(e))throw new _.KEY_DUPLICATED({target:"$cssFetch(id)",given:e});t=b(t);let r=o(s).find(`link[href="${t}"]`)[0];if(r){r.dataset.usage=parseInt(r.dataset.usage)+1;let t=o(r),s=q.resolve({name:e,config:{chainAutoComplete:!0},traceSource:S.tracer.captureTraceSource("$cssFetch")},t);return s.$chain.data.dom=t,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',s),s}{let r,a=new q({name:e,config:{chainAutoComplete:!0},traceSource:S.tracer.captureTraceSource("$cssFetch")},a=>r=o("<link>",{id:i?e:"",rel:"stylesheet",type:"text/css","data-usage":"1"}).appendTo(s).on("load",()=>a(r)).attr("href",t));return a.$chain.data.dom=r,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',a),a}}$cssRemove(e,t){if(R("$cssRemove(id)",e).typeString(),t&&R("$cssRemove(reason)",t).typeString(),!this.$.css.has(e))throw new _.KEY_MISSING({target:"$cssRemove(id)",given:e});this.$.css.get(e)._debug_remove_called,this.$.css.get(e)._debug_remove_called=!0;let s=this.$.css.get(e),i=s.$chain&&s.$chain.data.dom||s.$value;if(i instanceof o){let e=parseInt(i[0].dataset.usage)-1;e?i[0].dataset.usage=e:i.remove()}s instanceof q&&s.$chainAbort(t||"$cssRemove()"),this.$.css.delete(e)}$cssRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.css;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$cssRemove(s)}}class be{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$vueRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$vueRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("vue",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$vue(e,t){if(R("id",e=this.$.vue.$id_resolve(e)).typeString(),R("vue",t).type(Object),this.$.vue.has(e))throw new _.KEY_DUPLICATED({target:"$vue(id)",given:e});return this.$.vue.$registerSync(e,t).$value}$vueRemove(e){if(R("$vueRemove(id)",e).typeString(),!this.$.vue.has(e))throw new _.KEY_MISSING({target:"$vueRemove(id)",given:e});this.$.vue.get(e)._debug_remove_called,this.$.vue.get(e)._debug_remove_called=!0;let t=this.$.vue.get(e);o(t.$value.$el).remove(),t.$value.$destroy(),this.$.vue.delete(e)}$vueRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.vue;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$vueRemove(s)}}class Ee{trait_constructor(){const e=this.$[re.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$reactRemoveAll(he.PHASE.DISABLE)),e.on("uninstall",()=>this.$reactRemoveAll(he.PHASE.UNINSTALL)),this.$.assign("react",this.$.createSubMap(),B.descriptors.ENUMERABLE)}$react(e,t,s,...i){if(e=this.$.react.$id_resolve(e),!U.ReactDOM)throw new Error("jFactory.ReactDOM=ReactDOM must be set before using the React Trait");if(R("id",e).typeString(),R("container",t).type(HTMLElement,o),this.$.react.has(e))throw new _.KEY_DUPLICATED({target:"$react(id)",given:e});t=o(t)[0];let r=U.ReactDOM.render(s,t,...i);return this.$.react.$registerSync(e,{container:t,view:r}).$value.view}$reactRemove(e){if(R("$reactRemove(id)",e).typeString(),!this.$.react.has(e))throw new _.KEY_MISSING({target:"$reactRemove(id)",given:e});this.$.react.get(e)._debug_remove_called,this.$.react.get(e)._debug_remove_called=!0;let t=this.$.react.get(e).$value.container;t&&(U.ReactDOM.unmountComponentAtNode(t)||this.$logWarn("unmountComponentAtNode failed to unmount",t),o(t).remove()),this.$.react.delete(e)}$reactRemoveAll(e){R("removePhase",e).equalIn(he.PHASES);let t=this.$.react;if(t.size)for(const[s,i]of t)i.$phaseRemove===e&&this.$reactRemove(s)}}U.TraitFetch=pe,U.TraitTimeout=me,U.TraitInterval=$e,U.TraitMutation=fe,U.TraitDOM=ge,U.TraitCSS=ve,U.TraitLibVue=be,U.TraitLibReact=Ee,"undefined"!=typeof jFactoryOverride&&jFactoryOverride||n.init();export{r as JFACTORY_CLI,i as JFACTORY_DEBUG,s as JFACTORY_DEV,V as JFactoryAbout,F as JFactoryComponent,D as JFactoryCoreObject,y as JFactoryError,X as JFactoryEventSelector,Q as JFactoryEventSelectorParser,K as JFactoryEvents,z as JFactoryEventsManager,R as JFactoryExpect,Z as JFactoryFetch,T as JFactoryFunctionComposer,j as JFactoryFunctionConditional,I as JFactoryFunctionExpirable,M as JFactoryFunctionWrappable,te as JFactoryLogger,B as JFactoryObject,q as JFactoryPromise,J as JFactoryPromiseChain,W as JFactoryPromisePath,G as JFactoryPromiseSync,se as JFactoryTime,ie as JFactoryTimeTrace,A as JFactoryTrace_LIB_STACKTRACE,E as JFactoryTrace_NOFILTER,O as JFactoryTraits,ae as TraitAbout,ve as TraitCSS,re as TraitCore,ge as TraitDOM,le as TraitEvents,pe as TraitFetch,$e as TraitInterval,Ee as TraitLibReact,be as TraitLibVue,ne as TraitLog,fe as TraitMutation,he as TraitService,ce as TraitState,oe as TraitTask,me as TraitTimeout,ue as assignPrivate,de as assignPrivateMember,U as jFactory,a as jFactoryConfig,_ as jFactoryError,N as jFactoryFunctionConditional,P as jFactoryFunctionExpirable,C as jFactoryFunctionWrappable,n as jFactoryLoader,S as jFactoryTrace,k as jFactoryTraits};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiakZhY3RvcnktZGV2ZWwubWpzIiwic291cmNlcyI6WyIuLi9zcmMvakZhY3RvcnktZW52Lm1qcyIsIi4uL3NyYy9qRmFjdG9yeS1jb25maWcubWpzIiwiLi4vc3JjL2pGYWN0b3J5LWxvYWRlci5tanMiLCIuLi9zcmMvakZhY3RvcnktaGVscGVycy5tanMiLCIuLi9zcmMvSkZhY3RvcnlUcmFjZS5tanMiLCIuLi9zcmMvSkZhY3RvcnlFcnJvci5tanMiLCIuLi9zcmMvSkZhY3RvcnlFeHBlY3QubWpzIiwiLi4vc3JjL0pGYWN0b3J5VHJhaXRzLm1qcyIsIi4uL3NyYy9KRmFjdG9yeUZ1bmN0aW9uLm1qcyIsIi4uL3NyYy9qRmFjdG9yeS10cmFpdHMubWpzIiwiLi4vc3JjL2pGYWN0b3J5Lm1qcyIsIi4uL3NyYy9KRmFjdG9yeU9iamVjdC5tanMiLCIuLi9zcmMvSkZhY3RvcnlBYm91dC5tanMiLCIuLi9zcmMvSkZhY3RvcnlQcm9taXNlLm1qcyIsIi4uL3NyYy9KRmFjdG9yeUV2ZW50cy5tanMiLCIuLi9zcmMvSkZhY3RvcnlGZXRjaC5tanMiLCIuLi9zcmMvSkZhY3RvcnlMb2dnZXIubWpzIiwiLi4vc3JjL0pGYWN0b3J5VGltZS5tanMiLCIuLi9zcmMvVHJhaXRzQ29yZS5tanMiLCIuLi9zcmMvVHJhaXRzQ29tcG9uZW50cy5tanMiLCIuLi9zcmMvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogakZhY3RvcnkgQ09NUElMRVJfVkVSXG4gKiBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuICovXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gakZhY3RvcnkgRW52XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gQ29tcGlsZS10aW1lIGltbXV0YWJsZSBFbnY7IHVzZWQgYnkgVHJlZSBTaGFraW5nIHRvIHJlbW92ZSB1bnVzZWQgY29kZVxuZXhwb3J0IGNvbnN0IEpGQUNUT1JZX0RFViA9IHR5cGVvZiBDT01QSUxFUl9ERVYgPT09IFwidW5kZWZpbmVkXCIgPyBmYWxzZSA6IENPTVBJTEVSX0RFVjsgLy8gRGV2ZWxvcGVyIE1vZGVcbmV4cG9ydCBjb25zdCBKRkFDVE9SWV9ERUJVRyA9IHR5cGVvZiBDT01QSUxFUl9ERUJVRyA9PT0gXCJ1bmRlZmluZWRcIiA/IGZhbHNlIDogQ09NUElMRVJfREVCVUc7IC8vIERlYnVnIHRoZSBsaWJyYXJ5XG5leHBvcnQgY29uc3QgSkZBQ1RPUllfQ0xJID0gdHlwZW9mIENPTVBJTEVSX0NMSSA9PT0gXCJ1bmRlZmluZWRcIiA/XG4gICAgdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgOiBDT01QSUxFUl9DTEk7IiwiaW1wb3J0IHsgSkZBQ1RPUllfREVWLCBKRkFDVE9SWV9DTEksIEpGQUNUT1JZX0RFQlVHIH0gZnJvbSBcIi4vakZhY3RvcnktZW52XCI7XG5cbi8vIE11dGFibGUgY29uZmlndXJhdGlvblxuZXhwb3J0IGNvbnN0IGpGYWN0b3J5Q29uZmlnID0ge1xuICAgIFRyYWl0TG9nOiBKRkFDVE9SWV9ERVYgJiYgIUpGQUNUT1JZX0NMSSB8fCBKRkFDVE9SWV9ERUJVRyxcbiAgICBKRmFjdG9yeUVycm9yOiB7XG4gICAgICAgIGtleXM6IFtcIiQuYWJvdXQubmFtZVwiLCBcIiRkZXZfbmFtZVwiLCBcIiRuYW1lXCIsIFwibmFtZVwiLCBcImlkXCJdXG4gICAgfSxcbiAgICBKRmFjdG9yeVRyYWNlOiBKRkFDVE9SWV9ERVYgJiYgIUpGQUNUT1JZX0NMSVxuICAgICAgICAmJiB7XG4gICAgICAgICAgICBrZXlzOiBbXCIkZGV2X3RyYWNlTG9nXCIsIFwiJGRldl90cmFjZVNvdXJjZVwiXSxcbiAgICAgICAgICAgIGxpYk9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBvZmZsaW5lOiBCb29sZWFuKGdsb2JhbFRoaXMuY2hyb21lKSwgLy8gbG9hZGluZyBzb3VyY2VtYXBzIGlzIG5vdCByZXF1aXJlZCBpbiBjaHJvbWVcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5saW5lTnVtYmVyXG4gICAgICAgICAgICAgICAgICAgIC8vICYmICh2YWx1ZS5maWxlTmFtZSArIHZhbHVlLmZ1bmN0aW9uTmFtZSkudG9Mb2NhbGVMb3dlckNhc2UoKS5pbmRleE9mKCdqZmFjdG9yeScpIDwgMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICBqRmFjdG9yeURldjogSkZBQ1RPUllfREVWXG4gICAgICAgICYmIHtcbiAgICAgICAgICAgIHJlcXVpcmVDb21wYXRpYmlsaXR5OiB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpczoge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0OiAoKSA9PiBnbG9iYWxUaGlzLFxuICAgICAgICAgICAgICAgICAgICBpbmZvOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2dsb2JhbFRoaXNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmV0Y2g6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogKCkgPT4gZmV0Y2gsXG4gICAgICAgICAgICAgICAgICAgIGluZm86IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSS9Vc2luZ19GZXRjaFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSZXF1ZXN0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3Q6ICgpID0+IFJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgIGluZm86IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL1JlcXVlc3RcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJBYm9ydENvbnRyb2xsZXIsIEFib3J0U2lnbmFsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogKCkgPT4gbmV3IEFib3J0Q29udHJvbGxlcigpLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQWJvcnRDb250cm9sbGVyLCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9BYm9ydFNpZ25hbFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBNdXRhdGlvbk9ic2VydmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3Q6ICgpID0+IE11dGF0aW9uT2JzZXJ2ZXIsXG4gICAgICAgICAgICAgICAgICAgIGluZm86IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL011dGF0aW9uT2JzZXJ2ZXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxufSIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBKRkFDVE9SWV9DTEksIEpGQUNUT1JZX0RFViB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgakZhY3RvcnlDb25maWcgfSBmcm9tIFwiLi9qRmFjdG9yeS1jb25maWdcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeSBMb2FkZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNvbnN0IGpGYWN0b3J5TG9hZGVyID0ge1xuICAgIHNlcTogW10sXG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VxKSB7XG4gICAgICAgICAgICBsZXQgc2VxID0gdGhpcy5zZXE7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZXE7XG4gICAgICAgICAgICBmb3IgKGxldCBtb2R1bGUgb2Ygc2VxKSB7XG4gICAgICAgICAgICAgICAgbW9kdWxlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBnbG9iYWxUaGlzLmpGYWN0b3J5T3ZlcnJpZGVcbiAgICAgICAgfVxuICAgIH0sXG4gICAgb25Jbml0KGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5zZXEucHVzaChoYW5kbGVyKVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGpGYWN0b3J5RGV2KCkge1xuICAgIGNvbnNvbGUubG9nKFwiakZhY3RvcnkgaXMgcnVubmluZyBpbiBkZXZlbG9wbWVudCBtb2RlOyBwZXJmb3JtYW5jZXMgd2lsbCBiZSBhZmZlY3RlZFwiKTtcbiAgICBmb3IgKGxldCBbbmFtZSwgZW50cnldIG9mIE9iamVjdC5lbnRyaWVzKGpGYWN0b3J5Q29uZmlnLmpGYWN0b3J5RGV2LnJlcXVpcmVDb21wYXRpYmlsaXR5KSkge1xuICAgICAgICBsZXQgcGFzcztcbiAgICAgICAgdHJ5IHtwYXNzID0gQm9vbGVhbihlbnRyeS50ZXN0KCkpfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgICBpZiAoIXBhc3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgakZhY3RvcnkgbWF5IHJlcXVpcmUgdGhlIHN1cHBvcnQgb2YgXCIke25hbWV9XCIsICR7ZW50cnkuaW5mb31gKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBqRmFjdG9yeUluaXQoKSB7XG4gICAgIWpGYWN0b3J5Q29uZmlnLlRyYWl0TG9nICYmIChKRkFDVE9SWV9ERVYgfHwgSkZBQ1RPUllfQ0xJKSAmJiBjb25zb2xlLndhcm4oXCJqRmFjdG9yeSBsb2dzIGRpc2FibGVkXCIpO1xufVxuXG5KRkFDVE9SWV9ERVYgJiYgakZhY3RvcnlMb2FkZXIub25Jbml0KGpGYWN0b3J5RGV2KTtcbmpGYWN0b3J5TG9hZGVyLm9uSW5pdChqRmFjdG9yeUluaXQpOyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gakZhY3RvcnkgSGVscGVyc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDZW50cmFsaXplIGhlbHBlcnMgYW5kIGV4dGVybmFscyBpbiBvbmUgbW9kdWxlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjb25zdCBqUXVlcnkgPSAkO1xuXG5leHBvcnQgY29uc3QgaGVscGVyX2lzTmF0aXZlID0gXy5pc05hdGl2ZTtcbmV4cG9ydCBjb25zdCBoZWxwZXJfaXNTdHJpbmcgPSBfLmlzU3RyaW5nO1xuZXhwb3J0IGNvbnN0IGhlbHBlcl9pc051bWJlciA9IF8uaXNOdW1iZXI7XG5leHBvcnQgY29uc3QgaGVscGVyX2lzUGxhaW5PYmplY3QgPSBfLmlzUGxhaW5PYmplY3Q7XG5leHBvcnQgY29uc3QgaGVscGVyX2RlZmF1bHRzRGVlcCA9IF8uZGVmYXVsdHNEZWVwO1xuZXhwb3J0IGNvbnN0IGhlbHBlcl9sb3dlckZpcnN0ID0gXy5sb3dlckZpcnN0O1xuZXhwb3J0IGNvbnN0IGhlbHBlcl9nZXQgPSBfLmdldDtcbmV4cG9ydCBjb25zdCBoZWxwZXJfdGVtcGxhdGUgPSBfLnRlbXBsYXRlO1xuZXhwb3J0IGNvbnN0IGhlbHBlcl9jYW1lbENhc2UgPSBfLmNhbWVsQ2FzZTtcblxuZXhwb3J0IGNvbnN0IE5PT1AgPSAoKSA9PiB7fTtcbmV4cG9ydCBjb25zdCBoZWxwZXJfc2V0RnVuY3Rpb25OYW1lID0gKG5hbWUsIGYpID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyB2YWx1ZTogbmFtZSB9KTtcbmV4cG9ydCBjb25zdCBoZWxwZXJfdXJsX2FicyA9IHVybCA9PiB7aGVscGVyX3VybF9hYnMuYS5ocmVmID0gdXJsOyByZXR1cm4gaGVscGVyX3VybF9hYnMuYS5ocmVmfTtcbmhlbHBlcl91cmxfYWJzLmEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTsiLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgakZhY3RvcnlDb25maWcgfSBmcm9tIFwiLi9qRmFjdG9yeS1jb25maWdcIjtcbmltcG9ydCB7IGpGYWN0b3J5TG9hZGVyIH0gZnJvbSBcIi4vakZhY3RvcnktbG9hZGVyXCI7XG5pbXBvcnQgeyBOT09QIH0gZnJvbSBcIi4vakZhY3RvcnktaGVscGVyc1wiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5VHJhY2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gI2xpbWl0YXRpb24jIEVycm9yLnN0YWNrIGlzIG5vdCBzdGFuZGFyZGl6ZWRcbi8vIC0gI2xpbWl0YXRpb24jIEVycm9yLnN0YWNrIGlzIG5vdCBzb3VyY2UtbWFwcGVkXG4vLyAtICNsaW1pdGF0aW9uIyBidWcgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU4NDI0NFxuLy8gLSAjbGltaXRhdGlvbiMgU3RhY2tUcmFjZS5qcyByZXNvbHZlcyBzb3VyY2VtYXBzLiBVbmZvcnR1bmF0ZWx5LCBpdCBkb2Vzbid0IHdvcmsgd2l0aCBcIndlYnBhY2s6XCIgcHJvdG9jb2xcbi8vICAgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFja3RyYWNlanMvc3RhY2t0cmFjZS5qcy9pc3N1ZXMvMjA5XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvXG4vLyBodHRwczovL3d3dy5zdGFja3RyYWNlanMuY29tL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vdm9jYWluZS9zb3VyY2VtYXBwZWQtc3RhY2t0cmFjZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeVRyYWNlX05PRklMVEVSIHtcblxuICAgIGNvbnN0cnVjdG9yKHsgbGFiZWwsIHN0YWNrVHJhY2VMaW1pdCwga2V5cywgbGliT3B0aW9ucyB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsIHx8IFwiVGhlIHN0YWNrIGhhcyBiZWVuIHByaW50ZWQgaW4gdGhlIGNvbnNvbGVcIjtcbiAgICAgICAgdGhpcy5zdGFja1RyYWNlTGltaXQgPSBzdGFja1RyYWNlTGltaXQgfHwgSW5maW5pdHk7XG4gICAgICAgIHRoaXMua2V5cyA9IGtleXMgfHwgW1wic3RhY2tMb2dcIiwgXCJzdGFja1NvdXJjZVwiXTtcbiAgICAgICAgdGhpcy5saWJPcHRpb25zID0gbGliT3B0aW9ucyB8fCB7fVxuICAgIH1cblxuICAgIGNhcHR1cmVUcmFjZVNvdXJjZShvbWl0QWJvdmVGdW5jdGlvbk5hbWUsIG9taXRTZWxmKSB7XG4gICAgICAgIGxldCBfc3RhY2tUcmFjZUxpbWl0O1xuICAgICAgICBpZiAodGhpcy5zdGFja1RyYWNlTGltaXQpIHtcbiAgICAgICAgICAgIF9zdGFja1RyYWNlTGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG4gICAgICAgICAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSB0aGlzLnN0YWNrVHJhY2VMaW1pdFxuICAgICAgICB9XG4gICAgICAgIGlmICghb21pdEFib3ZlRnVuY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICBvbWl0QWJvdmVGdW5jdGlvbk5hbWUgPSBcImNhcHR1cmVUcmFjZVNvdXJjZVwiO1xuICAgICAgICAgICAgb21pdFNlbGYgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRyYWNlU291cmNlID0ge1xuICAgICAgICAgICAgc291cmNlOiBuZXcgRXJyb3IoKSxcbiAgICAgICAgICAgIG9taXRBYm92ZUZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgIG9taXRTZWxmXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnN0YWNrVHJhY2VMaW1pdCkge1xuICAgICAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gX3N0YWNrVHJhY2VMaW1pdFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFjZVNvdXJjZVxuICAgIH1cblxuICAgIGF0dGFjaFRyYWNlKHRhcmdldE9iamVjdCwgdHJhY2VTb3VyY2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0cmFjZVNvdXJjZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdHJhY2VTb3VyY2UgPSB0aGlzLmNhcHR1cmVUcmFjZVNvdXJjZSh0cmFjZVNvdXJjZSB8fCBcImF0dGFjaFRyYWNlXCIsICF0cmFjZVNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdHJhY2UgPSB0cmFjZVNvdXJjZS5zb3VyY2U7XG4gICAgICAgIHRoaXMudG9QcmludGFibGVUcmFjZSh0cmFjZVNvdXJjZSlcbiAgICAgICAgICAgIC50aGVuKHIgPT4gdHJhY2UgPSByKTtcblxuICAgICAgICBsZXQgbG9nID0gKCkgPT4gY29uc29sZS5sb2codHJhY2UpIHx8IHRoaXMubGFiZWw7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldE9iamVjdCwgdGhpcy5rZXlzWzBdIC8qIHRyYWNlTG9nICovLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGhpZGUgdGhlIGZ1bmN0aW9uIGJvZHkgdG8gaW1wcm92ZSByZWFkYWJpbGl0eSBpbiBkZXZ0b29sXG4gICAgICAgICAgICBnZXQ6ICgpID0+IGxvZygpXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0T2JqZWN0LCB0aGlzLmtleXNbMV0gLyogdHJhY2VTb3VyY2UgKi8sIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgdHJhY2VTb3VyY2UgRXJyb3IgdG8gaW1wcm92ZSByZWFkYWJpbGl0eSBpbiBkZXZ0b29sLCBzcGVjaWFsbHkgaW4gRmlyZWZveFxuICAgICAgICAgICAgZ2V0OiAoKSA9PiB0cmFjZVNvdXJjZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0b1ByaW50YWJsZVRyYWNlKHRyYWNlU291cmNlKSB7XG4gICAgICAgIC8vIFNQRUM6IHRoaXMgb3ZlcnJpZGFibGUgbWV0aG9kIHJldHVybnMgYSBwcm9taXNlXG4gICAgICAgIC8vIGJlY2F1c2Ugc3RhY2t0cmFjZSBwYXJzZXJzIG1heSBiZSBhc3luY2hyb25vdXNcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cmFjZVNvdXJjZS5zb3VyY2UpXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlUcmFjZV9MSUJfU1RBQ0tUUkFDRSBleHRlbmRzIEpGYWN0b3J5VHJhY2VfTk9GSUxURVIge1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgdG9QcmludGFibGVUcmFjZSh0cmFjZVNvdXJjZSkge1xuICAgICAgICByZXR1cm4gU3RhY2tUcmFjZS5mcm9tRXJyb3IodHJhY2VTb3VyY2Uuc291cmNlLCB0aGlzLmxpYk9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbih0cmFjZUZyYW1lcyA9PiB7XG5cbiAgICAgICAgICAgICAgICBpZiAodHJhY2VTb3VyY2Uub21pdEFib3ZlRnVuY3Rpb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzbGljZSA9IHRyYWNlRnJhbWVzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuZnVuY3Rpb25OYW1lICYmIHZhbHVlLmZ1bmN0aW9uTmFtZS5lbmRzV2l0aCh0cmFjZVNvdXJjZS5vbWl0QWJvdmVGdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGljZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjZVNvdXJjZS5vbWl0U2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlKytcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlRnJhbWVzID0gdHJhY2VGcmFtZXMuc2xpY2Uoc2xpY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyYWNlRnJhbWVzID0gdHJhY2VGcmFtZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcih0aGlzLmxpYk9wdGlvbnMuZmlsdGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRUcmFjZUZyYW1lcyh0cmFjZUZyYW1lcylcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvcm1hdFRyYWNlRnJhbWVzKHRyYWNlRnJhbWVzKSB7XG4gICAgICAgIGxldCBoZWFkZXI7XG4gICAgICAgIGxldCBsaW5lUHJlZml4O1xuICAgICAgICBpZiAodGhpcy5saWJPcHRpb25zLm9mZmxpbmUgJiYgd2luZG93LmNocm9tZSkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIGZhbGxvd2luZyBzeW50YXggaXMgZGV0ZWN0ZWQgb24gQ2hyb21lLFxuICAgICAgICAgICAgLy8gdGhlIGNvbnNvbGUubG9nKCkgd2lsbCBjb252ZXJ0IHRoZSBmaWxlTmFtZXMgdXNpbmcgc291cmNlbWFwc1xuICAgICAgICAgICAgaGVhZGVyID0gXCJFcnJvclxcblwiOyAvLyBub3RlcyB0aGF0IGFueXRoaW5nIGFmdGVyIFwiRXJyb3JcIiBpcyB2YWxpZFxuICAgICAgICAgICAgbGluZVByZWZpeCA9IFwiXFx0YXQgXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoZWFkZXIgPSBcIlwiO1xuICAgICAgICAgICAgbGluZVByZWZpeCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWRlciArXG4gICAgICAgICAgICB0cmFjZUZyYW1lc1xuICAgICAgICAgICAgICAgIC5tYXAoc2YgPT4gbGluZVByZWZpeCArIHNmLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgLmpvaW4oXCJcXG5cIik7XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGpGYWN0b3J5VHJhY2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNvbnN0IGpGYWN0b3J5VHJhY2UgPSB7fTtcblxuakZhY3RvcnlMb2FkZXIub25Jbml0KGZ1bmN0aW9uKCkge1xuICAgIGxldCBjb25maWcgPSBqRmFjdG9yeUNvbmZpZy5KRmFjdG9yeVRyYWNlO1xuICAgIGlmIChjb25maWcgJiYgY29uZmlnLnVzZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdHJ1Y3RvciA9IHR5cGVvZiBjb25maWcudXNlID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgICAgICAgY29uZmlnLnVzZSA6XG4gICAgICAgICAgICB0eXBlb2YgU3RhY2tUcmFjZSA9PT0gXCJvYmplY3RcIiA/IEpGYWN0b3J5VHJhY2VfTElCX1NUQUNLVFJBQ0UgOiBKRmFjdG9yeVRyYWNlX05PRklMVEVSO1xuICAgICAgICBpZiAoY29uc3RydWN0b3IgPT09IEpGYWN0b3J5VHJhY2VfTElCX1NUQUNLVFJBQ0UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcImpGYWN0b3J5OiBTdGFjayB0cmFjZSBlbmFibGVkOyBQZXJmb3JtYW5jZSB3aWxsIGJlIGFmZmVjdGVkXCIpXG4gICAgICAgIH1cbiAgICAgICAgakZhY3RvcnlUcmFjZS50cmFjZXIgPSBuZXcgY29uc3RydWN0b3IoY29uZmlnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBqRmFjdG9yeVRyYWNlLnRyYWNlciA9IHtcbiAgICAgICAgICAgIGNhcHR1cmVUcmFjZVNvdXJjZTogTk9PUCxcbiAgICAgICAgICAgIGF0dGFjaFRyYWNlOiBOT09QXG4gICAgICAgIH07XG4gICAgfVxufSk7IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGQUNUT1JZX0RFViB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgakZhY3RvcnlDb25maWcgfSBmcm9tIFwiLi9qRmFjdG9yeS1jb25maWdcIjtcbmltcG9ydCB7IGhlbHBlcl9nZXQsIGhlbHBlcl9pc05hdGl2ZSwgaGVscGVyX2xvd2VyRmlyc3QsIGhlbHBlcl90ZW1wbGF0ZSB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcbmltcG9ydCB7IGpGYWN0b3J5VHJhY2UgfSBmcm9tIFwiLi9KRmFjdG9yeVRyYWNlXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlFcnJvclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gXCJ1bnNwZWNpZmllZCBlcnJvclwiLCBkYXRhID0gbnVsbCkge1xuICAgICAgICBkYXRhID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBkYXRhKTtcbiAgICAgICAgbWVzc2FnZSA9IEpGYWN0b3J5RXJyb3IudG9QcmludGFibGUobWVzc2FnZSwgZGF0YSk7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLiRkYXRhID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBkYXRhKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZVxuICAgIH1cblxuICAgICogW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHlpZWxkIHRoaXMubWVzc2FnZTtcbiAgICAgICAgeWllbGQgdGhpcy4kZGF0YTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SWQob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3RbKGpGYWN0b3J5Q29uZmlnLkpGYWN0b3J5RXJyb3Iua2V5cyB8fCBKRmFjdG9yeUVycm9yLkRFRkFVTFRfS0VZUykuZmluZChrZXkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbCA9IGhlbHBlcl9nZXQob2JqZWN0LCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbCB8fCB2YWwgPT09IDBcbiAgICAgICAgfSldXG4gICAgfVxuXG4gICAgc3RhdGljIHRvUHJpbnRhYmxlRGF0YShkYXRhKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlRGF0YSA9IHt9O1xuICAgICAgICBsZXQgbnY7XG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwubmFtZSArIFwiKClcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBcIm51bGxcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChudiA9IEpGYWN0b3J5RXJyb3IuZ2V0SWQodmFsKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gJ1wiJyArIG52ICsgJ1wiJ1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWxwZXJfaXNOYXRpdmUodmFsLnRvU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbC50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG52ID0gSlNPTi5zdHJpbmdpZnkodmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gbnYubGVuZ3RoID4gSkZhY3RvcnlFcnJvci5KU09OX01BWFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudi5zdWJzdHJpbmcoMCwgSkZhY3RvcnlFcnJvci5KU09OX01BWCkgKyBcIlsuLi5dXCIgOiBudjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IFwiW29iamVjdCBcIiArIHZhbC5jb25zdHJ1Y3Rvci5uYW1lICsgXCJdXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAnXCInICsgdmFsICsgJ1wiJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gU3RyaW5nKHZhbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBsYXRlRGF0YVtrZXldID0gdmFsXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlRGF0YVxuICAgIH1cblxuICAgIHN0YXRpYyB0b1ByaW50YWJsZSh0ZW1wbGF0ZSwgZGF0YSkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZU1lc3NhZ2UgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcGFydCBvZiB0ZW1wbGF0ZS5zcGxpdChcIjtcIikpIHtcbiAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIGxldCBSRV9QTEFDRUhPTERFUiA9IEpGYWN0b3J5RXJyb3IuUkVfUExBQ0VIT0xERVI7XG4gICAgICAgICAgICBSRV9QTEFDRUhPTERFUi5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaWYgKChwbGFjZWhvbGRlciA9IFJFX1BMQUNFSE9MREVSLmV4ZWMocGFydCkpKSB7XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJbMV0gJiYgcGxhY2Vob2xkZXJbMV0gaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVNZXNzYWdlLnB1c2gocGFydC50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKChwbGFjZWhvbGRlciA9IFJFX1BMQUNFSE9MREVSLmV4ZWMocGFydCkpICE9PSBudWxsKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU1lc3NhZ2UucHVzaChwYXJ0LnRyaW0oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlbHBlcl9sb3dlckZpcnN0KGhlbHBlcl90ZW1wbGF0ZSh0ZW1wbGF0ZU1lc3NhZ2Uuam9pbihcIjsgXCIpKShKRmFjdG9yeUVycm9yLnRvUHJpbnRhYmxlRGF0YShkYXRhKSkpO1xuICAgIH1cbn1cblxuSkZhY3RvcnlFcnJvci5KU09OX01BWCA9IDQwO1xuSkZhY3RvcnlFcnJvci5ERUZBVUxUX0tFWVMgPSBbXCJuYW1lXCIsIFwiaWRcIl07XG5KRmFjdG9yeUVycm9yLlJFX1BMQUNFSE9MREVSID0gL1xcJHsoW159XSspfS9nO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGpGYWN0b3J5RXJyb3Jcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGxldCBqRmFjdG9yeUVycm9yID0gbmV3IFByb3h5KEpGYWN0b3J5RXJyb3IsIHtcbiAgICBzZXQ6IGZ1bmN0aW9uKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIGxldCB7IHRlbXBsYXRlIH0gPSB2YWx1ZTtcblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIHRhcmdldFtwcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFscmVhZHkgZGVjbGFyZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRbcHJvcGVydHldID0gY2xhc3MgZXh0ZW5kcyBKRmFjdG9yeUVycm9yIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGRhdGEsIHRyYWNlU291cmNlKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIodGVtcGxhdGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGpGYWN0b3J5VHJhY2UudHJhY2VyLmF0dGFjaFRyYWNlKHRoaXMuJGRhdGEsIHRyYWNlU291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ2F1dGlvbjogQ2hyb21lIGF1dG9tYXRpY2FsbHkgcmVzb2x2ZXMgc291cmNlbWFwIHdoZW4gbG9nZ2luZyBlcnJvcnNcbiAgICAgICAgLy8gYnV0IG9ubHkgaWYgdGhlIGVycm9yIG5hbWUgc3RhcnRzIHdpdGggXCJFcnJvclwiXG4gICAgICAgIHRhcmdldFtwcm9wZXJ0eV0ucHJvdG90eXBlLm5hbWUgPSBcIkVycm9yIGpGYWN0b3J5RXJyb3IuXCIgKyBwcm9wZXJ0eTtcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn0pO1xuXG5qRmFjdG9yeUVycm9yLklOVkFMSURfVkFMVUUgPSB7IHRlbXBsYXRlOiBcImludmFsaWQgdmFsdWUgZm9yICR7dGFyZ2V0fTsgUmVhc29uOiAke3JlYXNvbn07IEdpdmVuOiAke2dpdmVufVwiIH07XG5qRmFjdG9yeUVycm9yLklOVkFMSURfQ0FMTCA9IHsgdGVtcGxhdGU6IFwiaW52YWxpZCBjYWxsICR7dGFyZ2V0fTsgUmVhc29uOiAke3JlYXNvbn07IE93bmVyOiAke293bmVyfVwiIH07XG5qRmFjdG9yeUVycm9yLlBST01JU0VfRVhQSVJFRCA9IHsgdGVtcGxhdGU6IFwiZXhwaXJlZCBwcm9taXNlICR7dGFyZ2V0fTsgUmVhc29uOiAke3JlYXNvbn1cIiB9O1xuakZhY3RvcnlFcnJvci5SRVFVRVNUX0VSUk9SID0geyB0ZW1wbGF0ZTogXCJlcnJvciByZXF1ZXN0aW5nICR7dGFyZ2V0fTsgUmVhc29uOiAke3JlYXNvbn07IE93bmVyOiAke293bmVyfVwiIH07XG5qRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEID0geyB0ZW1wbGF0ZTogXCJkdXBsaWNhdGVkIGtleSBmb3IgJHt0YXJnZXR9OyBHaXZlbjogJHtnaXZlbn1cIiB9O1xuakZhY3RvcnlFcnJvci5LRVlfTUlTU0lORyA9IHsgdGVtcGxhdGU6IFwibWlzc2luZyBrZXkgZm9yICR7dGFyZ2V0fTsgR2l2ZW46ICR7Z2l2ZW59XCIgfTsiLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgakZhY3RvcnlFcnJvciB9IGZyb20gXCIuL0pGYWN0b3J5RXJyb3JcIjtcbmltcG9ydCB7IGhlbHBlcl9pc051bWJlciwgaGVscGVyX2lzUGxhaW5PYmplY3QsIGhlbHBlcl9pc1N0cmluZyB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcbmltcG9ydCB7IGpGYWN0b3J5TG9hZGVyIH0gZnJvbSBcIi4vakZhY3RvcnktbG9hZGVyXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlFeHBlY3Rcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQSBzbWFsbCBpbnB1dC9vdXRwdXQgdmFsaWRhdGlvbiB0b29sXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQWxwaGEsIERyYWZ0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBAcmV0dXJuIHsqfEpGYWN0b3J5RXhwZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gSkZhY3RvcnlFeHBlY3QobGFiZWwsIHZhbHVlKSB7XG4gICAgaWYgKG5ldy50YXJnZXQpIHtcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKRmFjdG9yeUV4cGVjdChsYWJlbCwgdmFsdWUpXG4gICAgfVxufVxuXG5jb25zdCBlcnJvciA9IGZ1bmN0aW9uIGpGYWN0b3J5VGhyb3cobGFiZWwsIHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSh7XG4gICAgICAgIHRhcmdldDogbGFiZWwsXG4gICAgICAgIHJlYXNvbjogbWVzc2FnZSxcbiAgICAgICAgZ2l2ZW46IHZhbHVlXG4gICAgfSlcbn07XG5cbmNvbnN0IHN0YXRpY01ldGhvZHMgPSB7XG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBub3RVbmRlZmluZWRcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgbm90VW5kZWZpbmVkXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgbm90VW5kZWZpbmVkKGxhYmVsLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcImNhbm5vdCBiZSB1bmRlZmluZWRcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdEVtcHR5U3RyaW5nXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdEVtcHR5U3RyaW5nXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgbm90RW1wdHlTdHJpbmcobGFiZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcImNhbm5vdCBiZSBlbXB0eSBzdHJpbmdcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdEZhbHN5XG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdEZhbHN5XG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgbm90RmFsc3kobGFiZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgJ2Nhbm5vdCBiZSBhIGZhbHN5IHZhbHVlICh1bmRlZmluZWQsIG51bGwsIE5hTiwgMCwgXCJcIiknKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdmFsaWRTcGFjZXNcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdmFsaWRTcGFjZXNcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICB2YWxpZFNwYWNlcyhsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZS5yZXBsYWNlIHx8IHZhbHVlLnJlcGxhY2UoL1xccysvZywgXCIgXCIpLnRyaW0oKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJpbnZhbGlkIHNwYWNlIGRlbGltaXRlcnNcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG1hdGNoUmVnXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7UmVnRXhwfSByZWdcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBtYXRjaFJlZ1xuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIG1hdGNoUmVnKGxhYmVsLCB2YWx1ZSwgcmVnKSB7XG4gICAgICAgIGlmICghcmVnLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsICdzdHJpbmcgXCInICsgdmFsdWUgKyAnXCIgbXVzdCBtYXRjaCAnICsgcmVnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcGFyYW0gey4uLip9IGV4cGVjdGVkXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHR5cGUobGFiZWwsIHZhbHVlLCAuLi5leHBlY3RlZCkge1xuICAgICAgICBsZXQgbmFtZSwgb2sgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgY29uc3RydWN0b3Igb2YgZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBcIk51bGxcIlxuICAgICAgICAgICAgfSBlbHNlIGlmIChcIm5hbWVcIiBpbiBjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBjb25zdHJ1Y3Rvci5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdGVzdCA9IHN0YXRpY01ldGhvZHNbXCJ0eXBlXCIgKyBuYW1lXTtcbiAgICAgICAgICAgIGlmICh0ZXN0KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtvayA9IHRlc3QobGFiZWwsIHZhbHVlLyosIGUqLyl9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvayA9IHZhbHVlIGluc3RhbmNlb2YgY29uc3RydWN0b3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvaykgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBbXCIgKyBleHBlY3RlZC5tYXAoZSA9PiBlLm5hbWUpLmpvaW4oXCIsIFwiKSArIFwiXVwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZU51bGxcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZU51bGxcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICB0eXBlTnVsbChsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBudWxsXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlQm9vbGVhblxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlQm9vbGVhblxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHR5cGVCb29sZWFuKGxhYmVsLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHRydWUgJiYgdmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBhIGJvb2xlYW5cIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHR5cGVTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZVN0cmluZ1xuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHR5cGVTdHJpbmcobGFiZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICghaGVscGVyX2lzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgYSBzdHJpbmdcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHR5cGVOdW1iZXJcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZU51bWJlclxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHR5cGVOdW1iZXIobGFiZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICghaGVscGVyX2lzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgYSBudW1iZXJcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHR5cGVGdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlRnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICB0eXBlRnVuY3Rpb24obGFiZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgYSBmdW5jdGlvblwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZVBsYWluT2JqZWN0XG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHR5cGVQbGFpbk9iamVjdFxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHR5cGVQbGFpbk9iamVjdChsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFoZWxwZXJfaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IGJlIGEgcGxhaW4gb2JqZWN0XCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBlcXVhbFxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcGFyYW0geyp9IGV4cGVjdGVkXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZXF1YWxcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBlcXVhbChsYWJlbCwgdmFsdWUsIC4uLmV4cGVjdGVkKSB7XG4gICAgICAgIGxldCBvayA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBlIG9mIGV4cGVjdGVkKSB7XG4gICAgICAgICAgICBpZiAoKG9rID0gdmFsdWUgPT09IGUpKSBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IGJlIG9uZSBvZiBbXCIgKyBleHBlY3RlZCArIFwiXVwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGVxdWFsSW5cbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGV4cGVjdGVkXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZXF1YWxJblxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIGVxdWFsSW4obGFiZWwsIHZhbHVlLCBleHBlY3RlZCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgICAgICAgICBleHBlY3RlZCA9IE9iamVjdC52YWx1ZXMoZXhwZWN0ZWQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFleHBlY3RlZC5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IGJlIG9uZSBmcm9tIFtcIiArIGV4cGVjdGVkLmpvaW4oXCIsIFwiKSArIFwiXVwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcHJvcGVydGllc1xuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBleHBlY3RlZFxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHByb3BlcnRpZXNcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBwcm9wZXJ0aWVzKGxhYmVsLCB2YWx1ZSwgZXhwZWN0ZWQpIHtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KGxhYmVsICsgJywgcHJvcGVydHkgbmFtZSBcIicgKyBuYW1lICsgJ1wiJywgbmFtZSkuZXF1YWxJbihleHBlY3RlZClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHdyaXRhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB3cml0YWJsZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHdyaXRhYmxlKGxhYmVsLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KS53cml0YWJsZSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgd3JpdGFibGVcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdFdyaXRhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBub3RXcml0YWJsZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIG5vdFdyaXRhYmxlKGxhYmVsLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpLndyaXRhYmxlKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBub3QgYmUgd3JpdGFibGVcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGVudW1lcmFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGVudW1lcmFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBlbnVtZXJhYmxlKGxhYmVsLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBlbnVtZXJhYmxlXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBub3RFbnVtZXJhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBub3RFbnVtZXJhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgbm90RW51bWVyYWJsZShsYWJlbCwgdmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBub3QgYmUgZW51bWVyYWJsZVwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgY29uZmlndXJhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBjb25maWd1cmFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBjb25maWd1cmFibGUobGFiZWwsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgY29uZmlndXJhYmxlXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBub3RDb25maWd1cmFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdENvbmZpZ3VyYWJsZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIG5vdENvbmZpZ3VyYWJsZShsYWJlbCwgdmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KS5jb25maWd1cmFibGUpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IG5vdCBiZSBjb25maWd1cmFibGVcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHJlc2VydmVkUHJvcGVydHlcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHJlc2VydmVkUHJvcGVydHlcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICByZXNlcnZlZFByb3BlcnR5KGxhYmVsLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJpcyBhIHJlc2VydmVkIHByb3BlcnR5XCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG59O1xuXG5qRmFjdG9yeUxvYWRlci5vbkluaXQoZnVuY3Rpb24oKSB7XG4gICAgT2JqZWN0LmFzc2lnbihKRmFjdG9yeUV4cGVjdCwgc3RhdGljTWV0aG9kcyk7XG4gICAgLy8gR2VuZXJhdGUgbWVtYmVycyBmcm9tIHN0YXRpYyBtZXRob2RzXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHN0YXRpY01ldGhvZHMpKSB7XG4gICAgICAgIEpGYWN0b3J5RXhwZWN0LnByb3RvdHlwZVtuYW1lXSA9XG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxsU3RhdGljKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBKRmFjdG9yeUV4cGVjdFtuYW1lXSh0aGlzLmxhYmVsLCB0aGlzLnZhbHVlLCAuLi5hcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgIH1cbn0pOyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBKRkFDVE9SWV9ERVYgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmltcG9ydCB7IGpGYWN0b3J5Q29uZmlnIH0gZnJvbSBcIi4vakZhY3RvcnktY29uZmlnXCI7XG5pbXBvcnQgeyBKRmFjdG9yeUV4cGVjdCB9IGZyb20gXCIuL0pGYWN0b3J5RXhwZWN0XCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlUcmFpdHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5VHJhaXRzIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0pGYWN0b3J5Q29yZU9iamVjdHxPYmplY3R9IGNhbGxlckluc3RhbmNlXG4gICAgICogQHBhcmFtIHtDbGFzc3xGdW5jdGlvbn0gY2FsbGVyQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhbGxlckluc3RhbmNlLCBjYWxsZXJDb25zdHJ1Y3Rvciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7SkZhY3RvcnlDb3JlT2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYWxsZXJJbnN0YW5jZSA9IGNhbGxlckluc3RhbmNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7Q2xhc3N8RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhbGxlckNvbnN0cnVjdG9yID0gY2FsbGVyQ29uc3RydWN0b3I7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIHVzZSh0cmFpdCwgLi4udHJhaXRBcmdzKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlUcmFpdHModHJhaXQpXCIsIHRyYWl0KS50eXBlRnVuY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGxlckNvbnN0cnVjdG9yIGlzIG5vdCBhbHdheXMgdGhlIGNhbGxlckluc3RhbmNlLmNvbnN0cnVjdG9yOlxuICAgICAgICAvLyBUaGUgVHJhaXQgY2FuIGJlIGluamVjdGVkIGluIGFuIGluaGVyaXRlZCBjb25zdHJ1Y3RvciBmcm9tIHN1cGVyKCkgYXQgY2FsbCB0aW1lXG4gICAgICAgIGxldCB7IGNhbGxlckluc3RhbmNlLCBjYWxsZXJDb25zdHJ1Y3RvciB9ID0gdGhpcztcblxuICAgICAgICAvLyBEZXRlY3QgaW1wcm9wZXIgZHVwbGljYXRpb24gKGNhbiBiZSBhIHRyYWl0IGFscmVhZHkgY2FsbGVkIGJ5IGEgc3VwZXIgY2xhc3MpXG4gICAgICAgIGxldCBjYWNoZSA9IEpGYWN0b3J5VHJhaXRzLkNBQ0hFLmdldChjYWxsZXJJbnN0YW5jZSk7XG5cbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICBpZiAoY2FjaGUuaGFzKHRyYWl0KSkge1xuICAgICAgICAgICAgICAgIGlmIChqRmFjdG9yeUNvbmZpZy5UcmFpdExvZykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7dHJhaXQubmFtZX0gYWxyZWFkeSBjYWxsZWQgb25gLCBjYWxsZXJJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5hZGQodHJhaXQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBKRmFjdG9yeVRyYWl0cy5DQUNIRS5zZXQoY2FsbGVySW5zdGFuY2UsIG5ldyBXZWFrU2V0KFt0cmFpdF0pKVxuICAgICAgICB9XG5cbiAgICAgICAgIWNhbGxlckNvbnN0cnVjdG9yLkpGYWN0b3J5VHJhaXQgJiYgKGNhbGxlckNvbnN0cnVjdG9yLkpGYWN0b3J5VHJhaXQgPSBuZXcgV2Vha1NldCk7XG5cbiAgICAgICAgaWYgKCFjYWxsZXJDb25zdHJ1Y3Rvci5KRmFjdG9yeVRyYWl0Lmhhcyh0cmFpdCkpIHtcbiAgICAgICAgICAgIGNhbGxlckNvbnN0cnVjdG9yLkpGYWN0b3J5VHJhaXQuYWRkKHRyYWl0KTtcbiAgICAgICAgICAgIHRoaXMuZXhwb3J0KHRyYWl0LnByb3RvdHlwZSwgY2FsbGVyQ29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICAgICAgICAgIHRoaXMuZXhwb3J0KHRyYWl0LCBjYWxsZXJDb25zdHJ1Y3RvciwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbiBhIFRyYWl0LmNvbnN0cnVjdG9yKGNhbGxlckluc3RhbmNlLCAuLi5hcmdzKSA6IHRoaXMgIT0gY2FsbGVySW5zdGFuY2VcbiAgICAgICAgLy8gSW4gYSBUcmFpdC50cmFpdF9jb25zdHJ1Y3RvciguLi5hcmdzKSA6IHRoaXMgPT0gY2FsbGVySW5zdGFuY2UgKHRyYWl0cyBpcyBpbmplY3RlZCBhbmQgYXZhaWxhYmxlKVxuXG4gICAgICAgIC8vIFRyYWl0cyBhcmUgaW5qZWN0aW9ucy4gVGhleSBhcmUgbm90IGR5bmFtaWMgaW5oZXJpdGFuY2UuXG4gICAgICAgIC8vIFNvIHRoZSBUcmFpdC5jb25zdHJ1Y3RvcigpIGRvZXNuJ3Qgc2hhcmUgdGhlIFwidGhpc1wiIGtleXdvcmQgd2l0aCBpdHMgY2FsbGVyLlxuXG4gICAgICAgIC8vICNsaW1pdGF0aW9uIyBObyB3YXkgdG8gYmluZCBhbiBFUzYgY2xhc3MgY29uc3RydWN0b3IgdG8gYW4gb2JqZWN0XG4gICAgICAgIC8vID0+IEltcGxlbWVudGVyIGNhbiBkZWZpbmUgYSBcInRyYWl0X2NvbnN0cnVjdG9yKClcIiB0aGF0IGlzIGF1dG9tYXRpY2FsbHkgYm91bmQgdG8gXCJjYWxsZXJJbnN0YW5jZVwiXG4gICAgICAgIC8vIGFuZCBjYWxsZWQgYWZ0ZXIgdGhlIG5hdGl2ZSB0cmFpdCBjb25zdHJ1Y3RvcigpLlxuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgICAgIGxldCB0cmFpdEluc3RhbmNlID0gbmV3IHRyYWl0KGNhbGxlckluc3RhbmNlLCAuLi50cmFpdEFyZ3MpO1xuICAgICAgICBpZiAodHJhaXRJbnN0YW5jZS50cmFpdF9jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgdHJhaXRJbnN0YW5jZS50cmFpdF9jb25zdHJ1Y3Rvci5hcHBseShjYWxsZXJJbnN0YW5jZSwgdHJhaXRBcmdzKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZXhwb3J0KHNvdXJjZSwgdGFyZ2V0LCBpc1N0YXRpYykge1xuICAgICAgICBsZXQgc291cmNlRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSk7XG5cbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHlOYW1lIG9mIE9iamVjdC5rZXlzKHNvdXJjZURlc2NyaXB0b3IpKSB7XG4gICAgICAgICAgICBsZXQgcHJlZml4ID0gSkZhY3RvcnlUcmFpdHMuZ2V0UHJlZml4KHByb3BlcnR5TmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChKRmFjdG9yeVRyYWl0cy5nZXRUYXJnZXQocHJvcGVydHlOYW1lLCB0YXJnZXQsIHByZWZpeCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlEZXNjcmlwdG9yID0gc291cmNlRGVzY3JpcHRvcltwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgICAgIGxldCBwYXJzZWQgPSAodGhpcy5vcHRpb25zLnBhcnNlciB8fCBKRmFjdG9yeVRyYWl0cy5kZWZhdWx0UGFyc2VyKShcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eURlc2NyaXB0b3IsIHNvdXJjZSwgdGFyZ2V0LCBpc1N0YXRpY1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgICAgICAgICAoeyBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5RGVzY3JpcHRvciB9ID0gcGFyc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eURlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UGFyc2VyKHByb3BlcnR5TmFtZSwgcHJvcGVydHlEZXNjcmlwdG9yLCBzb3VyY2UsIHRhcmdldCwgaXNTdGF0aWMpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gcHJvcGVydHlEZXNjcmlwdG9yLnZhbHVlO1xuXG4gICAgICAgIGlmIChpc1N0YXRpYykge3JldHVybiBudWxsfSAvLyBkb24ndCBleHBvcnQgc3RhdGljIG1lbWJlcnNcblxuICAgICAgICBpZiAocHJvcGVydHlOYW1lIGluIHRhcmdldCkgeyAvLyBza2lwIGV4aXN0aW5nIHByb3BlcnRpZXNcbiAgICAgICAgICAgIGlmIChqRmFjdG9yeUNvbmZpZy5UcmFpdExvZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgYCR7dGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWV9PiBza2lwcGluZyBleHBvcnQgb2YgZXhpc3RpbmcgcHJvcGVydHkgXCIke3Byb3BlcnR5TmFtZX1cImAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7IC8vIHByZXZlbnQgc2hhcmVkIG9iamVjdCBleHBvcnRhdGlvblxuICAgICAgICAgICAgaWYgKGpGYWN0b3J5Q29uZmlnLlRyYWl0TG9nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICBgJHt0YXJnZXQuY29uc3RydWN0b3IubmFtZX0+IHNraXBwaW5nIGV4cG9ydCBvZiBzaGFyZWQgb2JqZWN0IFwiJHtwcm9wZXJ0eU5hbWV9XCJgLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHByb3BlcnR5TmFtZSwgcHJvcGVydHlEZXNjcmlwdG9yIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0UHJlZml4KGtleSkge1xuICAgICAgICBsZXQgc3BsaXQgPSBrZXkuc3BsaXQoXCJfXCIpO1xuICAgICAgICByZXR1cm4gc3BsaXQubGVuZ3RoID4gMSA/IHNwbGl0WzBdIDogbnVsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VGFyZ2V0KGtleSwgdGFyZ2V0LCBwcmVmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgSkZhY3RvcnlUcmFpdHMuRVhDTFVERVMuaW5jbHVkZXMoa2V5KSB8fFxuICAgICAgICAgICAgcHJlZml4ID09PSBcInRyYWl0XCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldFxuICAgIH1cbn1cblxuSkZhY3RvcnlUcmFpdHMuQ0FDSEUgPSBuZXcgV2Vha01hcDtcbkpGYWN0b3J5VHJhaXRzLkVYQ0xVREVTID0gW1wiY29uc3RydWN0b3JcIiwgXCJwcm90b3R5cGVcIiwgXCJsZW5ndGhcIiwgXCJzaXplXCJdOyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBKRkFDVE9SWV9ERVYgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmltcG9ydCB7IGpGYWN0b3J5Q29uZmlnIH0gZnJvbSBcIi4vakZhY3RvcnktY29uZmlnXCI7XG5pbXBvcnQgeyBKRmFjdG9yeUV4cGVjdCB9IGZyb20gXCIuL0pGYWN0b3J5RXhwZWN0XCI7XG5pbXBvcnQgeyBqRmFjdG9yeUVycm9yIH0gZnJvbSBcIi4vSkZhY3RvcnlFcnJvclwiO1xuaW1wb3J0IHsgaGVscGVyX3NldEZ1bmN0aW9uTmFtZSB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5RnVuY3Rpb25Db21wb3NlciB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuXG4gICAgKiBbU3ltYm9sLml0ZXJhdG9yXShoYW5kbGVyR3JvdXBzID0gW10pIHtcblxuICAgICAgICBpZiAoIWhhbmRsZXJHcm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBoYW5kbGVyR3JvdXBzID0gT2JqZWN0LmtleXModGhpcy5oYW5kbGVycylcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhbmRsZXJHcm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBoYW5kbGVyR3JvdXBzID0gW1wiZGVmYXVsdFwiXVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaGFuZGxlckdyb3VwIG9mIGhhbmRsZXJHcm91cHMpIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyR3JvdXAgaW4gdGhpcy5oYW5kbGVycykge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLmhhbmRsZXJzW2hhbmRsZXJHcm91cF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAcmV0dXJuIHtKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXJ9ICovXG4gICAgZmlyc3QoaGFuZGxlckdyb3VwLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBbaGFuZGxlckdyb3VwLCBoYW5kbGVyXSA9IFtcImRlZmF1bHRcIiwgaGFuZGxlckdyb3VwXVxuICAgICAgICB9XG4gICAgICAgICh0aGlzLmhhbmRsZXJzW2hhbmRsZXJHcm91cF0gfHwgKHRoaXMuaGFuZGxlcnNbaGFuZGxlckdyb3VwXSA9IFtdKSkudW5zaGlmdChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKiogQHJldHVybiB7SkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyfSAqL1xuICAgIGxhc3QoaGFuZGxlckdyb3VwLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBbaGFuZGxlckdyb3VwLCBoYW5kbGVyXSA9IFtcImRlZmF1bHRcIiwgaGFuZGxlckdyb3VwXVxuICAgICAgICB9XG4gICAgICAgICh0aGlzLmhhbmRsZXJzW2hhbmRsZXJHcm91cF0gfHwgKHRoaXMuaGFuZGxlcnNbaGFuZGxlckdyb3VwXSA9IFtdKSkucHVzaChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKiogQHJldHVybiB7KGZ1bmN0aW9uKCk6ICopICYge2NvbXBvc2VyOiBKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXJ9fSAqL1xuICAgIGNvbXBvc2UoLi4uaGFuZGxlckdyb3Vwcykge1xuICAgICAgICBsZXQgY29tcG9zZXIgPSB0aGlzO1xuICAgICAgICBsZXQgY29tcG9zaXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyAhISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhIC8vXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICB3cmFwcGVkIGZ1bmN0aW9uICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICBZb3Ugc2hvdWxkIEJsYWNrYm94IEpGYWN0b3J5RnVuY3Rpb24ubWpzICAgIC8vXG4gICAgICAgICAgICAvLyAgICB0byBzaW1wbGlmeSBkZWJ1Z2dpbmcgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAhISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhLS0hISEhIC8vXG4gICAgICAgICAgICBsZXQgY29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICBjYW5jZWxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczogQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IGl0ZXJhdG9yID0gY29tcG9zZXJbU3ltYm9sLml0ZXJhdG9yXShoYW5kbGVyR3JvdXBzKTtcbiAgICAgICAgICAgIGxldCBpdGVyYXRpb24gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyLmNvbXBvc2l0ZV9pdGVyYXRvcihcbiAgICAgICAgICAgICAgICB0aGlzIC8qIHByZXNlcnZlIGNhbGwgc2NvcGUgKi8sIGNvbnRleHQsIGl0ZXJhdGlvbiwgaXRlcmF0b3IpXG4gICAgICAgIH07XG4gICAgICAgIGNvbXBvc2l0ZS5jb21wb3NlciA9IGNvbXBvc2VyO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH1cblxuICAgIC8vIFNQRUM6IENvbXBvc2l0ZSBmdW5jdGlvbnMgcmV0dXJucyBwcm9taXNlICpvbmx5KiBpZiBhdCBsZWFzdFxuICAgIC8vIG9uZSBoYW5kbGVyIHJldHVybnMgYSBwcm9taXNlIChhc3luYyBmdW5jdGlvbiBvciBwcm9taXNlIHJldHVybilcbiAgICAvLyBTbyB3ZSBjYW5ub3QganVzdCBpdGVyYXRlIHVzaW5nIGFuIFwiYXdhaXQgZm9yIG9mXCJcbiAgICBzdGF0aWMgY29tcG9zaXRlX2l0ZXJhdG9yKHNjb3BlLCBjb250ZXh0LCBpdGVyYXRpb24sIGhhbmRsZXJzKSB7XG4gICAgICAgIGxldCBoYW5kbGVyLFxuICAgICAgICAgICAgcmVzdWx0O1xuXG4gICAgICAgIHdoaWxlICghY29udGV4dC5jYW5jZWxlZCAmJiAhaXRlcmF0aW9uLmRvbmUpIHtcbiAgICAgICAgICAgIGhhbmRsZXIgPSBpdGVyYXRpb24udmFsdWU7XG4gICAgICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyLmNhbGwoc2NvcGUsIGNvbnRleHQsIC4uLmNvbnRleHQucGFyYW1ldGVycylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcihjb250ZXh0LCAuLi5jb250ZXh0LnBhcmFtZXRlcnMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVyYXRpb24gPSBoYW5kbGVycy5uZXh0KCk7IC8vIHByZXBhcmVzIG5leHQgaXRlcmF0aW9uIHRvIGtub3cgaWYgXCJkb25lXCJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhdGlvbi5kb25lXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhc2Ugb2YgbGFzdCBoYW5kbGVyIHJldHVybmluZyBhIHByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gI2xpbWl0YXRpb24jIG5vdyB3YXkgdG8gZGV0ZWN0IGlmIHRoZSBwcm9taXNlIGlzIHRoZSByZXR1cm5lZCB2YWx1ZSBvciBhbiBcImF3YWl0XCJcbiAgICAgICAgICAgICAgICAgICAgLy8gKHdlIGRvbid0IHdhbnQgdG8gY2hhbmdlIHRoZSB2YWx1ZSBvZiBjb250ZXh0LnJlc3VsdCBkdXJpbmcgYSBwZW5kaW5nIGhhbmRsZXIpXG4gICAgICAgICAgICAgICAgICAgIC8vID0+IG5hdGl2ZSBQcm9taXNlIGFyZSBhbHdheXMgY2hhaW5lZFxuICAgICAgICAgICAgICAgICAgICAmJiByZXN1bHQuY29uc3RydWN0b3IgIT09IFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZXN1bHQgPSByZXN1bHQgLy8gd2UgY2FuIHNhZmVseSBzZXQgdGhlIG5ldyByZXN1bHRcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oaGVscGVyX3NldEZ1bmN0aW9uTmFtZShcbiAgICAgICAgICAgICAgICAgICAgICAgIFtoYW5kbGVyLm5hbWUsIFwiW2NvbXBvc2l0ZUFzeW5jSGFuZGxlcl1cIl0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXIuY29tcG9zaXRlX2l0ZXJhdG9yKHNjb3BlLCBjb250ZXh0LCBpdGVyYXRpb24sIGhhbmRsZXJzKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZXN1bHQgPSByZXN1bHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dC5yZXN1bHRcbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlGdW5jdGlvbkV4cGlyYWJsZSAtIEV4cGlyYWJsZSBGdW5jdGlvbiBQYXR0ZXJuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIGpGYWN0b3J5RnVuY3Rpb25FeHBpcmFibGUob3JpZ2luYWxIYW5kbGVyKSB7XG4gICAgcmV0dXJuIG5ldyBKRmFjdG9yeUZ1bmN0aW9uRXhwaXJhYmxlKG9yaWdpbmFsSGFuZGxlcikuY29tcG9zZSgpXG59XG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUZ1bmN0aW9uRXhwaXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsSGFuZGxlcikge1xuICAgICAgICB0aGlzLm9yaWdpbmFsSGFuZGxlciA9IG9yaWdpbmFsSGFuZGxlcjtcbiAgICAgICAgdGhpcy5leHBpcmVkQ2FsbHMgPSAwO1xuICAgICAgICB0aGlzLmNvbXBvc2VyID0gbmV3IEpGYWN0b3J5RnVuY3Rpb25Db21wb3NlcjtcblxuICAgICAgICBsZXQgaXNFeHBpcmVkID0gdGhpcy5jb21wb3Nlci5jb21wb3NlKFwiY29uZGl0aW9uc1wiKTtcbiAgICAgICAgbGV0IGV4cGlyYWJsZSA9IHRoaXM7XG4gICAgICAgIGxldCBleHBpcmVkO1xuXG4gICAgICAgIC8vIGNhbm5vdCB1c2UgYSByZWFsIGFjY2Vzc29yIGhlcmUgKGNvbmRpdGlvbnMgY2FuIGJlIHNjb3BlZCwgc28gaXNFeHBpcmVkIHRvbylcbiAgICAgICAgdGhpcy5pc0V4cGlyZWQgPSBzY29wZSA9PiBleHBpcmVkIHx8IGlzRXhwaXJlZC5jYWxsKHNjb3BlKSB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRFeHBpcmVkID0gdmFsdWUgPT4gZXhwaXJlZCA9IHZhbHVlID9cbiAgICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgRXJyb3IgPyB2YWx1ZSA6IG5ldyBqRmFjdG9yeUVycm9yLklOVkFMSURfQ0FMTCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLm9yaWdpbmFsSGFuZGxlcixcbiAgICAgICAgICAgICAgICByZWFzb246IFwibWFudWFsbHkgZXhwaXJlZFwiXG4gICAgICAgICAgICB9KSA6IEJvb2xlYW4odGhpcy5leHBpcmVkQ2FsbHMgPSAwKTtcblxuICAgICAgICB0aGlzLmFkZEV4cGlyZUNvbmRpdGlvbiA9IGZ1bmN0aW9uKGNvbmRpdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jb21wb3Nlci5sYXN0KFwiY29uZGl0aW9uc1wiLCBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGRvbmUgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUZ1bmN0aW9uRXhwaXJhYmxlLmFkZEV4cGlyZUNvbmRpdGlvbigpLCByZXN1bHRcIiwgcmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlKEJvb2xlYW4sIEVycm9yKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBpcmFibGUuc2V0RXhwaXJlZChyZXN1bHQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnRleHQuY2FuY2VsZWQgPSB0cnVlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBqRmFjdG9yeUVycm9yLklOVkFMSURfQ0FMTCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZXhwaXJhYmxlLm9yaWdpbmFsSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBcImNvbmRpdGlvbmFsbHkgZXhwaXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBjb25kaXRpb24uYXBwbHkodGhpcywgY29udGV4dC5wYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSA/IHJlc3VsdC50aGVuKGRvbmUpIDogZG9uZShyZXN1bHQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb3NlKCkge1xuICAgICAgICBsZXQgZXhwaXJhYmxlID0gdGhpcztcbiAgICAgICAgbGV0IGNvbXBvc2l0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGlzRXhwaXJlZCA9IGV4cGlyYWJsZS5pc0V4cGlyZWQodGhpcyk7XG4gICAgICAgICAgICBsZXQgY2FsbCA9IGV4cGlyYWJsZS5jb25zdHJ1Y3Rvci5jYWxsLmJpbmQodW5kZWZpbmVkLCBleHBpcmFibGUsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICByZXR1cm4gaXNFeHBpcmVkIGluc3RhbmNlb2YgUHJvbWlzZSA/IGlzRXhwaXJlZC50aGVuKGNhbGwpIDogY2FsbChpc0V4cGlyZWQpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihjb21wb3NpdGUsIHtcbiAgICAgICAgICAgIGV4cGlyYWJsZTogdGhpcyxcbiAgICAgICAgICAgIGlzRXhwaXJlZDogZiA9PiB0aGlzLmlzRXhwaXJlZChmKSxcbiAgICAgICAgICAgIHNldEV4cGlyZWQ6IGYgPT4gdGhpcy5zZXRFeHBpcmVkKGYpLFxuICAgICAgICAgICAgYWRkRXhwaXJlQ29uZGl0aW9uOiBmID0+IHt0aGlzLmFkZEV4cGlyZUNvbmRpdGlvbihmKTsgcmV0dXJuIGNvbXBvc2l0ZX1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNhbGwoZXhwaXJhYmxlLCBzY29wZSwgYXJncywgaXNFeHBpcmVkKSB7XG4gICAgICAgIHJldHVybiBpc0V4cGlyZWQgPyBleHBpcmFibGUub25FeHBpcmVkKGlzRXhwaXJlZCkgOiBleHBpcmFibGUub25Ob3RFeHBpcmVkKHNjb3BlLCBhcmdzKTtcbiAgICB9XG5cbiAgICBvbkV4cGlyZWQoZXhwaXJlZCkge1xuICAgICAgICBpZiAodGhpcy5leHBpcmVkQ2FsbHMgPCBKRmFjdG9yeUZ1bmN0aW9uRXhwaXJhYmxlLk1heFdhcm5pbmdFeHBpcmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGlyZWRDYWxscysrO1xuICAgICAgICAgICAgaWYgKGpGYWN0b3J5Q29uZmlnLlRyYWl0TG9nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKC4uLm5ldyBqRmFjdG9yeUVycm9yLklOVkFMSURfQ0FMTCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmV4cGlyZWQuJGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbjogZXhwaXJlZC4kZGF0YS5yZWFzb25cbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCI7IGV4cGlyZWRDYWxscz1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyB0aGlzLmV4cGlyZWRDYWxsc1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5leHBpcmVkQ2FsbHMgPT09IEpGYWN0b3J5RnVuY3Rpb25FeHBpcmFibGUuTWF4V2FybmluZ0V4cGlyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiOyBNYXggV2FybmluZyBFeGNlZWRlZFwiIDogXCJcIilcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4cGlyZWRcbiAgICB9XG5cbiAgICBvbk5vdEV4cGlyZWQoc2NvcGUsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxIYW5kbGVyLmFwcGx5KHNjb3BlLCBhcmdzKVxuICAgIH1cbn1cblxuSkZhY3RvcnlGdW5jdGlvbkV4cGlyYWJsZS5NYXhXYXJuaW5nRXhwaXJhdGlvbiA9IDEwO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5RnVuY3Rpb25Db25kaXRpb25hbCAtIENvbmRpdGlvbmFsIEZ1bmN0aW9uIFBhdHRlcm5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZnVuY3Rpb24gakZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsKG9yaWdpbmFsSGFuZGxlcikge1xuICAgIHJldHVybiBuZXcgSkZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsKG9yaWdpbmFsSGFuZGxlcikuY29tcG9zZSgpXG59XG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUZ1bmN0aW9uQ29uZGl0aW9uYWwge1xuXG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxIYW5kbGVyID0gb3JpZ2luYWxIYW5kbGVyO1xuICAgICAgICB0aGlzLmNvbXBvc2VyID0gbmV3IEpGYWN0b3J5RnVuY3Rpb25Db21wb3NlcjtcbiAgICAgICAgdGhpcy5jb21wb3Nlci5maXJzdChcIm9yaWdpbmFsXCIsIGhlbHBlcl9zZXRGdW5jdGlvbk5hbWUoXG4gICAgICAgICAgICBbb3JpZ2luYWxIYW5kbGVyLm5hbWUsIFwiW2NvbmRpdGlvbl1cIl0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEhhbmRsZXIuYXBwbHkodGhpcywgY29udGV4dC5wYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29tcG9zZSgpIHtcbiAgICAgICAgbGV0IGNvbXBvc2l0ZSA9IHRoaXMuY29tcG9zZXIuY29tcG9zZShcImNvbmRpdGlvbnNcIiwgXCJvcmlnaW5hbFwiKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY29tcG9zaXRlLCB7XG4gICAgICAgICAgICBjb25kaXRpb25hbDogdGhpcyxcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbjogZiA9PiB7dGhpcy5hZGRDb25kaXRpb24oZik7IHJldHVybiBjb21wb3NpdGV9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZENvbmRpdGlvbihjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb21wb3Nlci5sYXN0KFwiY29uZGl0aW9uc1wiLCBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICBsZXQgaGFuZGxlID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RnVuY3Rpb25Db25kaXRpb25hbC5hZGRDb25kaXRpb24oKSwgcmVzdWx0XCIsIHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50eXBlQm9vbGVhbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAhcmVzdWx0ICYmIChjb250ZXh0LmNhbmNlbGVkID0gdHJ1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNvbmRpdGlvbi5hcHBseSh0aGlzLCBjb250ZXh0LnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UgPyByZXN1bHQudGhlbihoYW5kbGUpIDogaGFuZGxlKHJlc3VsdCk7XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5RnVuY3Rpb25XcmFwcGFibGUgLSBXcmFwcGFibGUgRnVuY3Rpb24gUGF0dGVyblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBqRmFjdG9yeUZ1bmN0aW9uV3JhcHBhYmxlKG9yaWdpbmFsSGFuZGxlcikge1xuICAgIHJldHVybiBuZXcgSkZhY3RvcnlGdW5jdGlvbldyYXBwYWJsZShvcmlnaW5hbEhhbmRsZXIpLmNvbXBvc2UoKVxufVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlGdW5jdGlvbldyYXBwYWJsZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcmlnaW5hbEhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbEhhbmRsZXIgPSBvcmlnaW5hbEhhbmRsZXI7XG4gICAgICAgIHRoaXMuY29tcG9zZXIgPSBuZXcgSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyO1xuICAgICAgICB0aGlzLmNvbXBvc2VyLmZpcnN0KFwib3JpZ2luYWxcIiwgaGVscGVyX3NldEZ1bmN0aW9uTmFtZShcbiAgICAgICAgICAgIFtvcmlnaW5hbEhhbmRsZXIubmFtZSwgXCJbd3JhcHBlZF1cIl0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEhhbmRsZXIuYXBwbHkodGhpcywgY29udGV4dC5wYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29tcG9zZSgpIHtcbiAgICAgICAgbGV0IGNvbXBvc2l0ZSA9IHRoaXMuY29tcG9zZXIuY29tcG9zZShcImJlZm9yZVwiLCBcIm9yaWdpbmFsXCIsIFwiYWZ0ZXJcIik7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbXBvc2l0ZSwge1xuICAgICAgICAgICAgd3JhcHBhYmxlOiB0aGlzLFxuICAgICAgICAgICAgYmVmb3JlQWxsOiBmID0+IHt0aGlzLmJlZm9yZUFsbChmKTsgcmV0dXJuIGNvbXBvc2l0ZX0sXG4gICAgICAgICAgICBqdXN0QmVmb3JlOiBmID0+IHt0aGlzLmp1c3RCZWZvcmUoZik7IHJldHVybiBjb21wb3NpdGV9LFxuICAgICAgICAgICAganVzdEFmdGVyOiBmID0+IHt0aGlzLmp1c3RBZnRlcihmKTsgcmV0dXJuIGNvbXBvc2l0ZX0sXG4gICAgICAgICAgICBhZnRlckFsbDogZiA9PiB7dGhpcy5hZnRlckFsbChmKTsgcmV0dXJuIGNvbXBvc2l0ZX1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYmVmb3JlQWxsKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5jb21wb3Nlci5maXJzdChcImJlZm9yZVwiLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgICBqdXN0QmVmb3JlKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5jb21wb3Nlci5sYXN0KFwiYmVmb3JlXCIsIGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGp1c3RBZnRlcihoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuY29tcG9zZXIuZmlyc3QoXCJhZnRlclwiLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgICBhZnRlckFsbChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuY29tcG9zZXIubGFzdChcImFmdGVyXCIsIGhhbmRsZXIpO1xuICAgIH1cbn0iLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgakZhY3RvcnlFcnJvciB9IGZyb20gXCIuL0pGYWN0b3J5RXJyb3JcIjtcbmltcG9ydCB7IEpGYWN0b3J5VHJhaXRzIH0gZnJvbSBcIi4vSkZhY3RvcnlUcmFpdHNcIjtcbmltcG9ydCB7IGpGYWN0b3J5RnVuY3Rpb25XcmFwcGFibGUgfSBmcm9tIFwiLi9KRmFjdG9yeUZ1bmN0aW9uXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gakZhY3RvcnlUcmFpdHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIGpGYWN0b3J5VHJhaXRzKGNhbGxlckluc3RhbmNlLCBjYWxsZXJDb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBuZXcgSkZhY3RvcnlUcmFpdHMoY2FsbGVySW5zdGFuY2UsIGNhbGxlckNvbnN0cnVjdG9yLCB7XG5cbiAgICAgICAgcGFyc2VyKHByb3BlcnR5TmFtZSwgcHJvcGVydHlEZXNjcmlwdG9yLyosIHNvdXJjZSwgdGFyZ2V0LCBpc1N0YXRpYyAqLykge1xuICAgICAgICAgICAgbGV0IHBhcnNlZCA9IEpGYWN0b3J5VHJhaXRzLmRlZmF1bHRQYXJzZXIoLi4uYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgICAgICh7IHByb3BlcnR5TmFtZSwgcHJvcGVydHlEZXNjcmlwdG9yIH0gPSBwYXJzZWQpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcHJvcGVydHlEZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkaW5zdGFsbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiR1bmluc3RhbGxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkZW5hYmxlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJGRpc2FibGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkc3RhdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlEZXNjcmlwdG9yLnZhbHVlID0gakZhY3RvcnlGdW5jdGlvbldyYXBwYWJsZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJlZm9yZUFsbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy4kLnN0YXRlcy5lbmFibGVkICYmIHRoaXMuJC5zZXJ2aWNlLnBoYXNlID09PSBcIlBIQVNFX05PTkVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlID0gbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogXCJjb21wb25lbnQgZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGxvZ0VyciguLi5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5RGVzY3JpcHRvciB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufSIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBqRmFjdG9yeVRyYWl0cyB9IGZyb20gXCIuL2pGYWN0b3J5LXRyYWl0c1wiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByZWRlZmluZWQgQ29tcG9uZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEBtaXhlcyBUcmFpdENvcmVcbiAqIEBtaXhlcyBUcmFpdEFib3V0XG4gKiBAbWl4ZXMgVHJhaXRMb2dcbiAqIEBtaXhlcyBUcmFpdEV2ZW50c1xuICogQG1peGVzIFRyYWl0U3RhdGVcbiAqIEBtaXhlcyBUcmFpdFNlcnZpY2VcbiAqIEBtaXhlcyBUcmFpdFRhc2tcbiAqL1xuZXhwb3J0IGNsYXNzIEpGYWN0b3J5Q29yZU9iamVjdCB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICBKRmFjdG9yeUNvcmVPYmplY3QuaW5qZWN0KHRoaXMsIEpGYWN0b3J5Q29yZU9iamVjdCwgbmFtZSlcbiAgICB9XG5cbiAgICBzdGF0aWMgaW5qZWN0KHRhcmdldCwgY29uc3RydWN0b3IsIG5hbWUpIHtcbiAgICAgICAgakZhY3RvcnlUcmFpdHModGFyZ2V0LCBjb25zdHJ1Y3RvcilcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRDb3JlKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdEFib3V0LCB7IG5hbWUgfSlcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRMb2cpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0RXZlbnRzKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdFN0YXRlKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdFNlcnZpY2UpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0VGFzayk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBtaXhlcyBUcmFpdEZldGNoXG4gKiBAbWl4ZXMgVHJhaXRET01cbiAqIEBtaXhlcyBUcmFpdENTU1xuICogQG1peGVzIFRyYWl0TXV0YXRpb25cbiAqIEBtaXhlcyBUcmFpdFRpbWVvdXRcbiAqIEBtaXhlcyBUcmFpdEludGVydmFsXG4gKiBAbWl4ZXMgVHJhaXRMaWJWdWVcbiAqIEBtaXhlcyBUcmFpdExpYlJlYWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUNvbXBvbmVudCBleHRlbmRzIEpGYWN0b3J5Q29yZU9iamVjdCB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICBzdXBlcihuYW1lKTtcbiAgICAgICAgSkZhY3RvcnlDb21wb25lbnQuaW5qZWN0KHRoaXMsIEpGYWN0b3J5Q29tcG9uZW50KVxuICAgIH1cblxuICAgIHN0YXRpYyBpbmplY3QodGFyZ2V0LCBjb25zdHJ1Y3Rvcikge1xuICAgICAgICBqRmFjdG9yeVRyYWl0cyh0YXJnZXQsIGNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdEZldGNoKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdERPTSlcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRDU1MpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0TXV0YXRpb24pXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0VGltZW91dClcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRJbnRlcnZhbClcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRMaWJWdWUpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0TGliUmVhY3QpO1xuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKiBAcmV0dXJuIHtKRmFjdG9yeUNvbXBvbmVudH0gKi9cbmV4cG9ydCBjb25zdCBqRmFjdG9yeSA9IChuYW1lLCBwcm9wZXJ0aWVzKSA9PiBPYmplY3QuYXNzaWduKG5ldyBKRmFjdG9yeUNvbXBvbmVudChuYW1lKSwgcHJvcGVydGllcyk7IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IGpGYWN0b3J5TG9hZGVyIH0gZnJvbSBcIi4vakZhY3RvcnktbG9hZGVyXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gakZhY3RvcnlPYmplY3Rcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBBbHBoYVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeU9iamVjdCB7XG5cbiAgICBzdGF0aWMgY3JlYXRlRGVzY3JpcHRvcnMoZGVzY3JpcHRvclByb3RvdHlwZSA9IEpGYWN0b3J5T2JqZWN0LkRFU0NSSVBUT1JTX1BST1RPVFlQRSkge1xuICAgICAgICBsZXQgY3JlYXRlID0gSkZhY3RvcnlPYmplY3QuY3JlYXRlKGRlc2NyaXB0b3JQcm90b3R5cGUsIHRydWUsIHRydWUpO1xuICAgICAgICBsZXQgbyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgby5OT05FID0gY3JlYXRlKCk7XG5cbiAgICAgICAgby5XUklUQUJMRSAgICAgPSBjcmVhdGUoeyB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgby5FTlVNRVJBQkxFICAgPSBjcmVhdGUoeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICBvLkNPTkZJR1VSQUJMRSA9IGNyZWF0ZSh7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICBvLkNPTkZJR1VSQUJMRV9XUklUQUJMRSAgID1cbiAgICAgICAgby5XUklUQUJMRV9DT05GSUdVUkFCTEUgICA9IGNyZWF0ZSh7IHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgby5DT05GSUdVUkFCTEVfRU5VTUVSQUJMRSA9XG4gICAgICAgIG8uRU5VTUVSQUJMRV9DT05GSUdVUkFCTEUgPSBjcmVhdGUoeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgby5FTlVNRVJBQkxFX1dSSVRBQkxFICAgICA9XG4gICAgICAgIG8uV1JJVEFCTEVfRU5VTUVSQUJMRSAgICAgPSBjcmVhdGUoeyB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICBvLldSSVRBQkxFX0VOVU1FUkFCTEVfQ09ORklHVVJBQkxFID1cbiAgICAgICAgby5XUklUQUJMRV9DT05GSUdVUkFCTEVfRU5VTUVSQUJMRSA9XG4gICAgICAgIG8uRU5VTUVSQUJMRV9DT05GSUdVUkFCTEVfV1JJVEFCTEUgPVxuICAgICAgICBvLkVOVU1FUkFCTEVfV1JJVEFCTEVfQ09ORklHVVJBQkxFID1cbiAgICAgICAgby5DT05GSUdVUkFCTEVfV1JJVEFCTEVfRU5VTUVSQUJMRSA9XG4gICAgICAgIG8uQ09ORklHVVJBQkxFX0VOVU1FUkFCTEVfV1JJVEFCTEUgPSBjcmVhdGUoeyB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIC8vIFNob3J0Y3V0c1xuICAgICAgICBvLlJFQURPTkxZID0gY3JlYXRlKHsgd3JpdGFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiBmYWxzZSB9KTtcblxuICAgICAgICByZXR1cm4gb1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYXNzaWduKG9iaiwgJ215UHJvcGVydHknLCAxMjMsIHt3cml0YWJsZTpmYWxzZX0pXG4gICAgICogYXNzaWduKG9iaiwge2E6MSwgYjoyfScsIHt3cml0YWJsZTpmYWxzZX0pXG4gICAgICpcbiAgICAgKiBkZXByZWNhdGVkXG4gICAgICogYXNzaWduKG9iaiwgJ215UHJvcGVydHknLCB7dmFsdWU6XCJva1wiLCB3cml0YWJsZTpmYWxzZX0pID0+IG5vdCBzdHJpY3RcbiAgICAgKiBhc3NpZ24ob2JqLCAnbXlQcm9wZXJ0eScsIDEyMykgPT4gdXNlIG5hdGl2ZSBpbnN0ZWFkXG4gICAgICogYXNzaWduKG9iaiwge2E6MSwgYjoyfSkgPT4gdXNlIG5hdGl2ZSBpbnN0ZWFkXG4gICAgICovXG4gICAgc3RhdGljIGFzc2lnbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGVzY3JpcHRvcikge1xuICAgICAgICBsZXQgZGVzY3JpcHRvcnMgPSB7fTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBwcm9wZXJ0eSkge1xuXG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG5cbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAvLyBhc3NpZ24ob2JqLCAnbXlQcm9wZXJ0eScsIDEyMywge3dyaXRhYmxlOmZhbHNlfSlcbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAgICAgICAgIGlmICghZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nIGRlc2NyaXB0b3IgYXJndW1lbnQ7IHVzZSBPYmplY3QuYXNzaWduIGluc3RlYWRcIilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmNyZWF0ZShkZXNjcmlwdG9yKTsgLy8gYXZvaWQgZGVzY3JpcHRvciBjb3JydXB0aW9uXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcblxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIC8vIGFzc2lnbihvYmosIHthOjEsIGI6Mn0nLCB7d3JpdGFibGU6ZmFsc2V9KVxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgICAgICAgICAgW3ZhbHVlLCBkZXNjcmlwdG9yXSA9IFtwcm9wZXJ0eSwgdmFsdWVdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgZGVzY3JpcHRvciBhcmd1bWVudDsgdXNlIE9iamVjdC5hc3NpZ24gaW5zdGVhZFwiKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IG5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzW25hbWVdID0gT2JqZWN0LmNyZWF0ZShkZXNjcmlwdG9yKTsgLy8gYXZvaWQgZGVzY3JpcHRvciBjb3JydXB0aW9uXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzW25hbWVdLnZhbHVlID0gdmFsdWVbbmFtZV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yc1tuYW1lXSA9IE9iamVjdC5jcmVhdGUoZGVzY3JpcHRvcik7IC8vIGF2b2lkIGRlc2NyaXB0b3IgY29ycnVwdGlvblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yc1tuYW1lXS52YWx1ZSA9IHZhbHVlW25hbWVdXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBkZXNjcmlwdG9ycyk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHByb3BlcnR5IGFyZ3VtZW50XCIpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShwcm90b3R5cGUsIGZsYXQgPSBmYWxzZSwgZGlzaW5oZXJpdCA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgaWYgKGZsYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihkaXNpbmhlcml0ID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9LCBwcm90b3R5cGUsIHByb3BlcnRpZXMpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoXG4gICAgICAgICAgICAgICAgICAgIGRpc2luaGVyaXQgPyBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIHByb3RvdHlwZSkgOiBwcm90b3R5cGVcbiAgICAgICAgICAgICAgICApLCBwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGRpc2luaGVyaXQob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIG9iamVjdCk7XG4gICAgfVxufVxuXG5KRmFjdG9yeU9iamVjdC5ERVNDUklQVE9SU19QUk9UT1RZUEUgPSB7IHdyaXRhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2UgfTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeU9iamVjdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmpGYWN0b3J5TG9hZGVyLm9uSW5pdChmdW5jdGlvbigpIHtcbiAgICBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycyA9IEpGYWN0b3J5T2JqZWN0LmNyZWF0ZURlc2NyaXB0b3JzKClcbn0pOyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBKRkFDVE9SWV9ERVYgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmltcG9ydCB7IEpGYWN0b3J5RXhwZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlFeHBlY3RcIjtcbmltcG9ydCB7IGhlbHBlcl9jYW1lbENhc2UgfSBmcm9tIFwiLi9qRmFjdG9yeS1oZWxwZXJzXCI7XG5pbXBvcnQgeyBKRmFjdG9yeU9iamVjdCB9IGZyb20gXCIuL0pGYWN0b3J5T2JqZWN0XCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlBYm91dFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBtb2R1bGVHZW5JZCA9ICgpID0+ICsrbW9kdWxlR2VuSWQudWlkOyBtb2R1bGVHZW5JZC51aWQgPSAwO1xuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlBYm91dCB7XG4gICAgY29uc3RydWN0b3Iob3duZXIsIGFib3V0ID0ge30pIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUFib3V0KG93bmVyKVwiLCBvd25lcikudHlwZShPYmplY3QpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUFib3V0KGFib3V0KVwiLCBhYm91dClcbiAgICAgICAgICAgICAgICAudHlwZVBsYWluT2JqZWN0KClcbiAgICAgICAgICAgICAgICAucmVzZXJ2ZWRQcm9wZXJ0eShcInVpZFwiKVxuICAgICAgICAgICAgICAgIC5yZXNlcnZlZFByb3BlcnR5KFwiZmluZ2VycHJpbnRcIik7XG4gICAgICAgICAgICBpZiAoXCJuYW1lXCIgaW4gYWJvdXQpIHtcbiAgICAgICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5QWJvdXQoYWJvdXQubmFtZSlcIiwgYWJvdXQubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgLnR5cGVTdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAubm90RW1wdHlTdHJpbmcoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5hbWU7XG4gICAgICAgIGxldCBmaW5nZXJwcmludDtcbiAgICAgICAgbGV0IHVpZCA9IG1vZHVsZUdlbklkKCk7XG5cbiAgICAgICAgaWYgKGFib3V0Lm5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBhYm91dC5uYW1lO1xuICAgICAgICAgICAgZGVsZXRlIGFib3V0Lm5hbWU7XG4gICAgICAgICAgICBmaW5nZXJwcmludCA9IFwiakZhY3RvcnlcIiArIFwiX1wiICsgaGVscGVyX2NhbWVsQ2FzZShuYW1lLnRvTG93ZXJDYXNlKCkpICsgXCJfXCIgKyB1aWRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSBhYm91dC5uYW1lO1xuICAgICAgICAgICAgbmFtZSA9IGBbJHtvd25lci5jb25zdHJ1Y3Rvci5uYW1lfSMke3VpZH1dYDtcbiAgICAgICAgICAgIGZpbmdlcnByaW50ID0gXCJqRmFjdG9yeVwiICsgXCJfXCIgKyBvd25lci5jb25zdHJ1Y3Rvci5uYW1lICsgXCJfXCIgKyB1aWQ7XG4gICAgICAgIH1cblxuICAgICAgICBKRmFjdG9yeU9iamVjdC5hc3NpZ24odGhpcywgLyoqIEBsZW5kcyBKRmFjdG9yeUFib3V0IyAqLyB7XG4gICAgICAgICAgICB1aWQsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZmluZ2VycHJpbnRcbiAgICAgICAgfSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBhYm91dCk7XG5cbiAgICAgICAgLy8gLS0tXG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUFib3V0Lm5hbWVcIiwgdGhpcy5uYW1lKVxuICAgICAgICAgICAgICAgIC5tYXRjaFJlZygvXltcXHdbXFxdI10rJC8pO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUFib3V0LmZpbmdlcnByaW50XCIsIHRoaXMuZmluZ2VycHJpbnQpXG4gICAgICAgICAgICAgICAgLm1hdGNoUmVnKC9eW1xcd10rJC8pO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBKRkFDVE9SWV9ERVYgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmltcG9ydCB7IEpGYWN0b3J5RXhwZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlFeHBlY3RcIjtcbmltcG9ydCB7IGpGYWN0b3J5RXJyb3IgfSBmcm9tIFwiLi9KRmFjdG9yeUVycm9yXCI7XG5pbXBvcnQgeyBqRmFjdG9yeVRyYWNlIH0gZnJvbSBcIi4vSkZhY3RvcnlUcmFjZVwiO1xuaW1wb3J0IHsgalF1ZXJ5LCBoZWxwZXJfaXNOYXRpdmUgfSBmcm9tIFwiLi9qRmFjdG9yeS1oZWxwZXJzXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlQcm9taXNlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByb3ZpZGVzIGF3YWl0YWJsZSwgZXhwaXJhYmxlLCBkZWJ1Z2dhYmxlIHByb21pc2UgY2hhaW5zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogRXhwZXJpbWVudGFsIERyYWZ0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gI2xpbWl0YXRpb24jIGFzeW5jIGZ1bmN0aW9ucyBhbHdheXMgdXNlIHRoZSBuYXRpdmUgUHJvbWlzZSBjb25zdHJ1Y3RvciBldmVuIGlmIG5hdGl2ZSBQcm9taXNlIGNsYXNzIGlzIG92ZXJyaWRkZW5cbi8vICNsaW1pdGF0aW9uIyBhc3luYyBmdW5jdGlvbnMgYWx3YXlzIHJldHVybnMgYSBuYXRpdmUgUHJvbWlzZSBldmVuIGlmIHJldHVybmluZyBhbiBleHRlbmRlZCBQcm9taXNlXG4vLyAjbGltaXRhdGlvbiMgYXN5bmMgZnVuY3Rpb25zIGFsd2F5cyByZXR1cm5zIGEgcGVuZGluZyBQcm9taXNlIGV2ZW4gaWYgcmV0dXJuaW5nIGEgcmVzb2x2ZWQgUHJvbWlzZVxuXG5jb25zdCBtb2R1bGVHZW5JZCA9ICgpID0+ICsrbW9kdWxlR2VuSWQudWlkOyBtb2R1bGVHZW5JZC51aWQgPSAwO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5UHJvbWlzZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeVByb21pc2UgZXh0ZW5kcyBQcm9taXNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHsgbmFtZSwgY29uZmlnLCB0cmFjZVNvdXJjZSB9LCBleGVjdXRvcikge1xuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBbbmFtZSwgY29uZmlnLCBleGVjdXRvcl0gPSBbbnVsbCwgbnVsbCwgYXJndW1lbnRzWzBdXVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2hhaW5JZCA9IG1vZHVsZUdlbklkKCk7XG4gICAgICAgIGNvbmZpZyA9IHsgLi4uSkZhY3RvcnlQcm9taXNlLkRFRkFVTFRfQ09ORklHLCAuLi5jb25maWcgfTtcbiAgICAgICAgbmFtZSA9IG5hbWUgfHwgXCJ1bm5hbWVkXCI7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJuYW1lXCIsIG5hbWUpXG4gICAgICAgICAgICAgICAgLnR5cGUoU3RyaW5nLCBOdW1iZXIpXG4gICAgICAgICAgICAgICAgLm1hdGNoUmVnKC9eW14uIF0rJC8pO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJjb25maWdcIiwgY29uZmlnKS50eXBlUGxhaW5PYmplY3QoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiZXhlY3V0b3JcIiwgZXhlY3V0b3IpLnR5cGVGdW5jdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc29sdmU7XG4gICAgICAgIGxldCByZWplY3Q7XG5cbiAgICAgICAgc3VwZXIoKF9yZXNvbHZlLCBfcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlID0gX3Jlc29sdmU7XG4gICAgICAgICAgICByZWplY3QgPSBfcmVqZWN0O1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjaGFpbiA9IG5ldyBKRmFjdG9yeVByb21pc2VDaGFpbih0aGlzLCBjaGFpbklkLCBuYW1lLCBjb25maWcpO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgICRjaGFpbjoge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGNoYWluXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJHR5cGU6IHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogXCJwcm9taXNlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAkdmFsdWU6IHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJGlzU2V0dGxlZDoge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRpc1JlamVjdGVkOiB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAkaXNGdWxmaWxsZWQ6IHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRpc0V4cGlyZWQ6IHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAkaXNBYm9ydGVkOiB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAkZGV2X25hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmFtZSArIFwiW1wiICsgY2hhaW5JZCArIFwiOjBdXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICRkZXZfcGF0aDoge1xuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBKRmFjdG9yeVByb21pc2VQYXRoKHRoaXMpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAkZGV2X3Bvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFoZWxwZXJfaXNOYXRpdmUoZXhlY3V0b3IpKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgICAgICAgICAkZGV2X3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV4ZWN1dG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpGYWN0b3J5VHJhY2UudHJhY2VyLmF0dGFjaFRyYWNlKHRoaXMsIHRyYWNlU291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRyeUF1dG9Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy4kY2hhaW4uaXNQZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2hhaW5Db21wbGV0ZShcImF1dG8tY29tcGxldGVkXCIpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSBvZiBlcnJvciBpbiBcImNvbXBsZXRlXCIgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2F0Y2ggdGhlIGV4Y2VwdGlvbiBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIGFscmVhZHkgZnVsZmlsbGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIEZ1cnRoZXJtb3JlIHRoaXMgaXNzdWUgbXVzdCBiZSBoYW5kbGVkIGJ5IHRoZSBjaGFpbiwgbm90IHRoZSBjdXJyZW50IHByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKSAvLyBwcmludCB0aGUgZXJyb3Igb3RoZXJ3aXNlIG5vdGhpbmcgaGFwcGVuc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBvblJlc29sdmUgPSB2YWx1ZSA9PiB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnb25SZXNvbHZlJyx0aGlzLiRkZXZfbmFtZSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJGlzU2V0dGxlZCkge1xuICAgICAgICAgICAgICAgIC8vIDIuMy4xLiBJZiBwcm9taXNlIGFuZCB4IHJlZmVyIHRvIHRoZSBzYW1lIG9iamVjdCwgcmVqZWN0IHByb21pc2Ugd2l0aCBhIFR5cGVFcnJvciBhcyB0aGUgcmVhc29uLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgICAgICBvblJlamVjdChuZXcgVHlwZUVycm9yKFwiQ2hhaW5pbmcgY3ljbGUgZGV0ZWN0ZWQgZm9yIHByb21pc2UgXCIgKyB0aGlzLiRkZXZfbmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHRoZW47XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgeCA9PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIDIuMy4zLjIuIElmIHJldHJpZXZpbmcgdGhlIHByb3BlcnR5IHgudGhlbiByZXN1bHRzIGluIGEgdGhyb3duIGV4Y2VwdGlvbiBlLFxuICAgICAgICAgICAgICAgICAgICAvLyByZWplY3QgcHJvbWlzZSB3aXRoIGUgYXMgdGhlIHJlYXNvbi5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW4gPSB2YWx1ZS50aGVuO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZVByb21pc2UgPSBmdW5jdGlvbih5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAyLjMuMy4zLjEuIElmL3doZW4gcmVzb2x2ZVByb21pc2UgaXMgY2FsbGVkIHdpdGggYSB2YWx1ZSB5LCBydW4gW1tSZXNvbHZlXV0ocHJvbWlzZSwgeSkuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZXNvbHZlKHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVqZWN0UHJvbWlzZSA9IGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIuMy4zLjMuMi4gSWYvd2hlbiByZWplY3RQcm9taXNlIGlzIGNhbGxlZCB3aXRoIGEgcmVhc29uIHIsIHJlamVjdCBwcm9taXNlIHdpdGggci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblJlamVjdChyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCByZXNvbHZlUHJvbWlzZSwgcmVqZWN0UHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgLy8gMi4zLjMuMy40LiBJZiBjYWxsaW5nIHRoZW4gdGhyb3dzIGFuIGV4Y2VwdGlvbiBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMi4zLjMuMy40LjEuIElmIHJlc29sdmVQcm9taXNlIG9yIHJlamVjdFByb21pc2UgaGF2ZSBiZWVuIGNhbGxlZCwgaWdub3JlIGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAyLjMuMy4zLjQuMi4gT3RoZXJ3aXNlLCByZWplY3QgcHJvbWlzZSB3aXRoIGUgYXMgdGhlIHJlYXNvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kaXNSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRpc0Z1bGZpbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiRpc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy4kY2hhaW4uZXJyb3JFeHBpcmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBvblNldHRsZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb25SZWplY3QgPSByZWFzb24gPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ29uUmVqZWN0Jyx0aGlzLiRkZXZfbmFtZSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJGlzU2V0dGxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGlzUmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuJGlzRnVsZmlsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgICAgb25TZXR0bGUocmVhc29uKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9uU2V0dGxlID0gdmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy4kdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuJGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRjaGFpbi5jaGFpbk1hcC5zZXQodGhpcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLiRjaGFpbi5jaGFpbkNvbmZpZy5jaGFpbkF1dG9Db21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiRjaGFpbi5jaGFpbk1hcC5zaXplID09PSAxICYmICF0aGlzLiRpc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlcyB0aGF0IHRyeUF1dG9Db21wbGV0ZSgpIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5ICh0aGVuKCkgY2FsbGJhY2sgaXMgYXN5bmNocm9ub3VzKVxuICAgICAgICAgICAgICAgICAgICAvLyBjYXNlIG9mIHByb21pc2UucmVzb2x2ZShwcmltaXRpdmUpLCBwcmV2ZW50cyBmb2xsb3dpbmcgdGhlbigpIGZyb20gYmVpbmcgaW1tZWRpYXRlbHkgbG9ja2VkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGhlbih0cnlBdXRvQ29tcGxldGUpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5QXV0b0NvbXBsZXRlKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IF9jaGFpbkF1dG9Db21wbGV0ZSA9IGNvbmZpZy5jaGFpbkF1dG9Db21wbGV0ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbmZpZywgXCJjaGFpbkF1dG9Db21wbGV0ZVwiLCB7XG4gICAgICAgICAgICBnZXQ6ICgpID0+IF9jaGFpbkF1dG9Db21wbGV0ZSxcbiAgICAgICAgICAgIHNldDogdmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChfY2hhaW5BdXRvQ29tcGxldGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jaGFpbkF1dG9Db21wbGV0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeUF1dG9Db21wbGV0ZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNoYWluLmNoYWluTWFwLnNldCh0aGlzLCBmYWxzZSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgX19yZXNvbHZlX186IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogb25SZXNvbHZlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX19yZWplY3RfXzoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBvblJlamVjdFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhlY3V0b3Iob25SZXNvbHZlLCBvblJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIG9uUmVqZWN0KGUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBmb3JjZVR5cGUpIHtcbiAgICAgICAgbGV0IHdyYXBwZWRGdWxmaWxsZWQ7XG4gICAgICAgIGxldCB3cmFwcGVkUmVqZWN0ZWQ7XG4gICAgICAgIGxldCBuZXdQcm9taXNlO1xuICAgICAgICBsZXQgaXNOYXRpdmUgPSBoZWxwZXJfaXNOYXRpdmUob25GdWxmaWxsZWQpICYmICFvbkZ1bGZpbGxlZC5uYW1lLnN0YXJ0c1dpdGgoXCJib3VuZCBcIik7XG5cbiAgICAgICAgaWYgKG9uRnVsZmlsbGVkICYmIHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB3cmFwcGVkRnVsZmlsbGVkID0gZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgIC8vIFwiYXdhaXRcIiBtdXN0IGFsd2F5cyBydW4gdGhlIG5hdGl2ZSBoYW5kbGVyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiYXdhaXRcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBTUEVDOiBcImF3YWl0XCIgdGhyb3dzIHRoZSBlcnJvckV4cGlyZWQgaWYgJGlzQWJvcnRlZCBpcyB0cnVlLlxuICAgICAgICAgICAgICAgICAgICAvLyBBbGxvd3MgYXN5bmMgZnVuY3Rpb24gdG8gdHJ5IGNhdGNoIHRoZSBhd2FpdGVkIGFib3J0ZWQgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAvLyBvciwgaWYgbm90IGNhdWdodCwgYnJlYWtzIGFuZCBpZ25vcmUgdGhlIHJlc3Qgb2YgdGhlIGFzeW5jIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UHJvbWlzZS4kaXNBYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25SZWplY3RlZChuZXdQcm9taXNlLiRjaGFpbi5lcnJvckV4cGlyZWQpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25GdWxmaWxsZWQocilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgZG9uJ3QgY2FsbCB0aGUgaGFuZGxlciBpZiBleHBpcmVkXG4gICAgICAgICAgICAgICAgaWYgKCFuZXdQcm9taXNlLiRpc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1Byb21pc2UuJGlzU2V0dGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvbkZ1bGZpbGxlZChyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob25SZWplY3RlZCAmJiB0eXBlb2Ygb25SZWplY3RlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB3cmFwcGVkUmVqZWN0ZWQgPSBmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1Byb21pc2UuJGlzU2V0dGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgICAgICAgICAgICAgICAgICAgZGVidWdnZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgKCFuZXdQcm9taXNlLiRpc1NldHRsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb25SZWplY3RlZChyKVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0eXBlID0gZm9yY2VUeXBlIHx8IChpc05hdGl2ZSA/IFwiYXdhaXRcIiA6IG9uRnVsZmlsbGVkID09PSB1bmRlZmluZWQgPyBcImNhdGNoXCIgOiBcInRoZW5cIik7XG4gICAgICAgIG5ld1Byb21pc2UgPSBPYmplY3QuYXNzaWduKHN1cGVyLnRoZW4od3JhcHBlZEZ1bGZpbGxlZCwgd3JhcHBlZFJlamVjdGVkKSwgdGhpcyk7XG4gICAgICAgIG1vZHVsZUdlbklkLnVpZC0tOyAvLyByZXZlcnNlIGJlY2F1c2Ugbm90IGEgbmV3IGNoYWluXG4gICAgICAgIG5ld1Byb21pc2UuJHR5cGUgPSB0eXBlO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIG5ld1Byb21pc2UuJGRldl9wb3NpdGlvbiA9IHRoaXMuJGNoYWluLmNoYWluTWFwLnNpemU7XG4gICAgICAgICAgICBsZXQgZk5hbWVzID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChvbkZ1bGZpbGxlZCAmJiBvbkZ1bGZpbGxlZC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgZk5hbWVzICs9IG9uRnVsZmlsbGVkLm5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvblJlamVjdGVkICYmIG9uUmVqZWN0ZWQubmFtZSkge1xuICAgICAgICAgICAgICAgIGZOYW1lcyArPSBcIixcIiArIG9uUmVqZWN0ZWQubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobmV3UHJvbWlzZSwge1xuICAgICAgICAgICAgICAgICRkZXZfbmFtZToge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGNoYWluLmNoYWluTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIltcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyB0aGlzLiRjaGFpbi5jaGFpbklkXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiOlwiXG4gICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMuJGRldl9wb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyBuZXdQcm9taXNlLiR0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICArIChmTmFtZXMgPyBcIihcIiArIGZOYW1lcyArIFwiKVwiIDogXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCJbXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgbmV3UHJvbWlzZS4kY2hhaW4uY2hhaW5JZFxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIjpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyBuZXdQcm9taXNlLiRkZXZfcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCJdXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICRkZXZfcGF0aDogeyB2YWx1ZTogbmV3IEpGYWN0b3J5UHJvbWlzZVBhdGgodGhpcy4kZGV2X3BhdGgsIG5ld1Byb21pc2UpIH0sXG4gICAgICAgICAgICAgICAgJGRldl9vbkZ1bGZpbGxlZDogeyB2YWx1ZTogb25GdWxmaWxsZWQgfSxcbiAgICAgICAgICAgICAgICAkZGV2X29uUmVqZWN0ZWQ6IHsgdmFsdWU6IG9uUmVqZWN0ZWQgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdQcm9taXNlLiRjaGFpbi5jaGFpbk1hcC5zZXQobmV3UHJvbWlzZSwgZmFsc2UpO1xuXG4gICAgICAgIGlmICh0aGlzLiRpc0V4cGlyZWQpIHtcbiAgICAgICAgICAgIC8vIGNhc2U6IHAwLnRoZW4oKTsgY2hhaW5BYm9ydCgpOyBwMS50aGVuKClcbiAgICAgICAgICAgIC8vID0+IHRoZSBuZXcgcHJvbWlzZSBtdXN0IGJlIGV4cGlyZWRcbiAgICAgICAgICAgIC8vIGlmIHBhcmVudCBwcm9taXNlIGlzIGp1c3QgZXhwaXJlZCwgYWJvcnQgc2lsZW50bHlcbiAgICAgICAgICAgIC8vIGlmIHBhcmVudCBwcm9taXNlIGlzIGFib3J0ZWQsIGFib3J0IGV4cGxpY2l0bHlcbiAgICAgICAgICAgIEpGYWN0b3J5UHJvbWlzZS5zZXRFeHBpcmVkKG5ld1Byb21pc2UsIHRydWUsICF0aGlzLiRpc0Fib3J0ZWQsIHRoaXMuJGNoYWluLmVycm9yRXhwaXJlZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3UHJvbWlzZVxuICAgIH1cblxuICAgICRjYXRjaEV4cGlyZWQob25FeHBpcmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4ociA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy4kY2hhaW4uY2hhaW5Sb290LiRpc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb25FeHBpcmVkKHIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgXCIkY2F0Y2hFeHBpcmVkXCIpXG4gICAgfVxuXG4gICAgc3RhdGljIHJlc29sdmUob3B0aW9uYWxBcmdzLCB2YWx1ZSkge1xuICAgICAgICAvLyByZXNvbHZlKClcbiAgICAgICAgLy8gcmVzb2x2ZShvcHRpb25hbEFyZ3MsIHZhbHVlKVxuICAgICAgICAvLyByZXNvbHZlKHZhbHVlKVxuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBbb3B0aW9uYWxBcmdzLCB2YWx1ZV0gPSBbe30sIG9wdGlvbmFsQXJnc11cbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbmFsQXJncykge1xuICAgICAgICAgICAgb3B0aW9uYWxBcmdzID0ge31cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiB0aGlzICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIFJldHVybnMgdGhlIHByb21pc2UgYXMgaXMgKG5hdGl2ZSBzcGVjKVxuICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgbm8gb3B0aW9uYWxBcmdzXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcyhvcHRpb25hbEFyZ3MsIGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgcmVqZWN0KG9wdGlvbmFsQXJncywgcmVhc29uKSB7XG4gICAgICAgIC8vIHJlamVjdCgpXG4gICAgICAgIC8vIHJlamVjdChvcHRpb25hbEFyZ3MsIHJlYXNvbilcbiAgICAgICAgLy8gcmVqZWN0KHJlYXNvbilcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgW29wdGlvbmFsQXJncywgcmVhc29uXSA9IFt7fSwgb3B0aW9uYWxBcmdzXVxuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9uYWxBcmdzKSB7XG4gICAgICAgICAgICBvcHRpb25hbEFyZ3MgPSB7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhvcHRpb25hbEFyZ3MsIGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmVqZWN0KHJlYXNvbilcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHRvUHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKVxuICAgIH1cblxuICAgIC8vIENvbXBsZXRlcyBhbiBleHBpcmVzIHRoZSB3aG9sZSBjaGFpbiBiZWZvcmUgaXRzIG5vcm1hbCBlbmRcbiAgICAvLyBTZXRzIHRoZSAkaXNBYm9ydGVkIHRvIHRydWUgb24gYWJvcnRlZCBwcm9taXNlc1xuICAgICRjaGFpbkFib3J0KHJlYXNvbiA9IFwiJGNoYWluQWJvcnQoKVwiKSB7XG4gICAgICAgIHRoaXMuJGNoYWluLmNvbXBsZXRlKHJlYXNvbiwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gTWFudWFsbHkgY29tcGxldGVzIGFuIGV4cGlyZXMgdGhlIHdob2xlIGNoYWluXG4gICAgLy8gT25seSByZXF1aXJlZCBpZiBhd2FpdGluZyBcIm15UHJvbWlzZS4kY2hhaW5cIlxuICAgIC8vIHdoZW4gdGhlIGF1dG9jb21wbGV0ZSB3YXRjaGVyIGlzIG5vdCB1c2VkXG4gICAgJGNoYWluQ29tcGxldGUocmVhc29uID0gXCIkY2hhaW5Db21wbGV0ZSgpXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuJGNoYWluLmNvbXBsZXRlKHJlYXNvbiwgZmFsc2UpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBlLiRkYXRhLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBcIlRyeWluZyB0byBjb21wbGV0ZSBhIHBlbmRpbmcgY2hhaW4uIFVzZSAkY2hhaW5BYm9ydCgpIGlmIHlvdSB3YW50IHRvIHN0b3AgaXQuXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgJGNoYWluQXV0b0NvbXBsZXRlKCkge1xuICAgICAgICB0aGlzLiRjaGFpbi5jaGFpbkNvbmZpZy5jaGFpbkF1dG9Db21wbGV0ZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIHNldEV4cGlyZWQocHJvbWlzZSwgYWJvcnQsIHNpbGVudCwgcmVhc29uKSB7XG4gICAgICAgIGlmICghcHJvbWlzZS4kaXNTZXR0bGVkKSB7XG4gICAgICAgICAgICBpZiAoYWJvcnQpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLiRpc0Fib3J0ZWQgPSAhc2lsZW50O1xuICAgICAgICAgICAgICAgIHByb21pc2UuX19yZXNvbHZlX18ocmVhc29uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBwcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IFwicHJvbWlzZSBtdXN0IGJlIGFib3J0ZWQgb3Igc2V0dGxlZCBiZWZvcmUgc2V0dGluZyBpdCB0byBleHBpcmVkLlwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvbWlzZS4kaXNFeHBpcmVkID0gdHJ1ZTtcbiAgICB9XG59XG5cbkpGYWN0b3J5UHJvbWlzZS5ERUZBVUxUX0NPTkZJRyA9IHtcbiAgICBjaGFpbkF1dG9Db21wbGV0ZTogZmFsc2Vcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlQcm9taXNlQ2hhaW5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlQcm9taXNlQ2hhaW4ge1xuXG4gICAgY29uc3RydWN0b3IoY2hhaW5Sb290LCBjaGFpbklkLCBjaGFpbk5hbWUsIGNoYWluQ29uZmlnKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIGNoYWluQ29uZmlnOiB7IHZhbHVlOiBjaGFpbkNvbmZpZyB9LFxuICAgICAgICAgICAgY2hhaW5Sb290OiB7IHZhbHVlOiBjaGFpblJvb3QgfSxcbiAgICAgICAgICAgIGNoYWluSWQ6IHsgdmFsdWU6IGNoYWluSWQgfSxcbiAgICAgICAgICAgIGNoYWluTmFtZTogeyB2YWx1ZTogY2hhaW5OYW1lIH0sXG4gICAgICAgICAgICBjaGFpbk1hcDogeyB2YWx1ZTogbmV3IE1hcCB9LFxuICAgICAgICAgICAgaXNDb21wbGV0ZWQ6IHsgdmFsdWU6IGZhbHNlLCBjb25maWd1cmFibGU6IHRydWUgfSxcbiAgICAgICAgICAgIGRhdGE6IHsgdmFsdWU6IHt9IH0sXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgICAgICAgX19kZWZlcnJlZF9fOiB7IHZhbHVlOiBqUXVlcnkuRGVmZXJyZWQoKSB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZ2V0IGlzUGVuZGluZygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jaGFpbk1hcC52YWx1ZXMoKSkuaW5jbHVkZXMoZmFsc2UpXG4gICAgfVxuXG4gICAgdGhlbihvblJlc29sdmUpIHsgLy8gPT4gXCJhd2FpdCBjaGFpblwiXG4gICAgICAgIHRoaXMuX19kZWZlcnJlZF9fLmRvbmUob25SZXNvbHZlKTtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBjb21wbGV0ZShyZWFzb24gPSBcImNoYWluLmNvbXBsZXRlKClcIiwgYWJvcnQgKSB7XG4gICAgICAgIGxldCBjaGFpblJvb3QgPSB0aGlzLmNoYWluUm9vdDtcbiAgICAgICAgaWYgKCFjaGFpblJvb3QuJGlzRXhwaXJlZCkge1xuICAgICAgICAgICAgbGV0IGVycm9yRXhwaXJlZCA9IGNoYWluUm9vdC4kY2hhaW4uZXJyb3JFeHBpcmVkID0gbmV3IGpGYWN0b3J5RXJyb3IuUFJPTUlTRV9FWFBJUkVEKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNoYWluUm9vdCxcbiAgICAgICAgICAgICAgICByZWFzb25cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgbWFwID0gdGhpcy5jaGFpbk1hcDtcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgbWFwLmtleXMoKSkge1xuICAgICAgICAgICAgICAgIEpGYWN0b3J5UHJvbWlzZS5zZXRFeHBpcmVkKGl0ZW0sIGFib3J0LCBmYWxzZSwgZXJyb3JFeHBpcmVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNDb21wbGV0ZWRcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMuX19kZWZlcnJlZF9fLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeVByb21pc2VQYXRoXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5UHJvbWlzZVBhdGggZXh0ZW5kcyBBcnJheSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgZm9yIChsZXQgaSBvZiBhcmd1bWVudHMpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKC4uLmkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHByaW50YWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwKCh2LCBpKSA9PiBpID09PSAwID8gdi4kZGV2X25hbWUgOiB2LiRkZXZfbmFtZS5zcGxpdChcIi5cIilbMV0pLmpvaW4oXCIuXCIpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7cmV0dXJuIHRoaXMucHJpbnRhYmxlfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5UHJvbWlzZVN5bmNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJvbWlzZSB0aGF0IHRyaWVzIHRvIHJlc29sdmUgc3luY2hyb25vdXNseVxuLy8gYWxsb3dpbmcgc3luY2hyb25vdXMgc3RhdGVzIGFuZCByZXN1bHRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlQcm9taXNlU3luYyBleHRlbmRzIFByb21pc2Uge1xuXG4gICAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcblxuICAgICAgICBsZXQgc3RhdGVzID0ge1xuICAgICAgICAgICAgJGlzU2V0dGxlZDogZmFsc2UsIC8vIHRydWUgPSBub3QgcGVuZGluZ1xuICAgICAgICAgICAgJGlzUmVqZWN0ZWQ6IG51bGwsIC8vIHRydWUgPSBub3QgcGVuZGluZyArIHJlamVjdGVkXG4gICAgICAgICAgICAkdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIHN1cGVyKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBsZXQgb25SZXNvbHZlID0gciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIEpGYWN0b3J5UHJvbWlzZVN5bmMucmVzb2x2ZShyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ob25SZXNvbHZlLCBvblJlamVjdClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlcy4kaXNTZXR0bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlcy4kaXNSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVzLiR2YWx1ZSA9IHI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgb25SZWplY3QgPSByID0+IHtcbiAgICAgICAgICAgICAgICAvLyBkb24ndCByZXNvbHZlIHBlbmRpbmcgcHJvbWlzZVxuICAgICAgICAgICAgICAgIC8vIHRvIGtlZXAgbmF0aXZlIHNwZWNpZmljYXRpb25cbiAgICAgICAgICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZXMuJGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlcy4kaXNSZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlcy4kdmFsdWUgPSByO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QocilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGV4ZWN1dG9yKG9uUmVzb2x2ZSwgb25SZWplY3QpXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgb25SZWplY3QoZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzdGF0ZXMpO1xuICAgICAgICBzdGF0ZXMgPSB0aGlzXG4gICAgfVxuXG4gICAgdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuXG4gICAgICAgIGlmICh0aGlzLiRpc1NldHRsZWQpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuJHZhbHVlO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiRpc1JlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbmNlbCBhbnkgdW5jYXVnaHQgcmVqZWN0ZWQgcmVzdWx0IGZyb20gdGhpcyBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlZm9yZSByZXR1cm5pbmcgdGhlIG5ldyBvbmVcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIudGhlbih1bmRlZmluZWQsICgpID0+IG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvblJlamVjdGVkICYmIHR5cGVvZiBvblJlamVjdGVkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb25SZWplY3RlZCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKRmFjdG9yeVByb21pc2VTeW5jLnJlamVjdCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbkZ1bGZpbGxlZCAmJiB0eXBlb2Ygb25GdWxmaWxsZWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvbkZ1bGZpbGxlZCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSkZhY3RvcnlQcm9taXNlU3luYy5yZWplY3QoZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEpGYWN0b3J5UHJvbWlzZVN5bmMucmVzb2x2ZSh2YWx1ZSlcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBKRmFjdG9yeVByb21pc2VTeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpGYWN0b3J5UHJvbWlzZVN5bmModmFsdWUudGhlbi5iaW5kKHZhbHVlKSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKRmFjdG9yeVByb21pc2VTeW5jKHIgPT4gcih2YWx1ZSkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGQUNUT1JZX0RFViB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgSkZhY3RvcnlFeHBlY3QgfSBmcm9tIFwiLi9KRmFjdG9yeUV4cGVjdFwiO1xuaW1wb3J0IHsgSkZhY3RvcnlQcm9taXNlU3luYyB9IGZyb20gXCIuL0pGYWN0b3J5UHJvbWlzZVwiO1xuaW1wb3J0IHsgSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyIH0gZnJvbSBcIi4vSkZhY3RvcnlGdW5jdGlvblwiO1xuaW1wb3J0IHsgakZhY3RvcnlFcnJvciB9IGZyb20gXCIuL0pGYWN0b3J5RXJyb3JcIjtcbmltcG9ydCB7IGpRdWVyeSwgaGVscGVyX2lzUGxhaW5PYmplY3QgfSBmcm9tIFwiLi9qRmFjdG9yeS1oZWxwZXJzXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlFdmVudHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gaHR0cHM6Ly9sZWFybi5qcXVlcnkuY29tL2V2ZW50cy9ldmVudC1leHRlbnNpb25zL1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlFdmVudHMge1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8galF1ZXJ5IGRvZXNuJ3QgaGFuZGxlIGFzeW5jIHRyaWdnZXIgc28gakZhY3RvcnkgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyA6XG4gICAgLy9cbiAgICAvLyAtIHRyaWdnZXJQYXJhbGxlbCgpOiB0aGUgdHJpZ2dlciBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZS5hbGwocGVuZGluZ0FycmF5KVxuICAgIC8vICAgd2hlcmUgcGVuZGluZ0FycmF5IGlzIGZpbGxlZCBieSBhbnkgYXN5bmMgcnVubmluZyBoYW5kbGVyLlxuICAgIC8vICAgTm90IHJlY29tbWVuZGVkIGJlY2F1c2UgaXQncyB0aGUgYmVzdCB3YXkgdG8gcHJvZHVjZSB1bnByZWRpY3RhYmxlIGFzeW5jIHNpZGUgZWZmZWN0c1xuICAgIC8vXG4gICAgLy8gLSB0cmlnZ2VyU2VyaWVzKCk6IGhhbmRsZXJzIGFyZSBydW4gaW4gYSBzeW5jaHJvbm91cyBvcmRlciwgd2l0aCBcImF3YWl0XCJcbiAgICAvLyAgIFRoaXMgYXZvaWRzIHVucHJlZGljdGFibGUgYXN5bmMgcmFjZSBjb25kaXRpb25cbiAgICAvL1xuICAgIC8vICBCb3RoIHJldHVybnMgYSBKRmFjdG9yeVByb21pc2VTeW5jIHRoYXQgY29udGFpbnMgdGhlIGpGYWN0b3J5X2Z1bGZpbGxlZCBmbGFnXG4gICAgLy8gIFRoaXMgZmxhZyBpcyBpbW1lZGlhdGVseSAobm90IGFzeW5jKSBzZXQgdG8gdHJ1ZSBpZiBubyBhc3luYyBoYW5kbGVyIGlzIHN0aWxsIHBlbmRpbmdcbiAgICAvL1xuICAgIC8vID0+IGhhbmRsZXJzIGFyZSB3cmFwcGVkLiBPcmlnaW5hbEhhbmRsZXJzIGFuZCB3cmFwcGVkSGFuZGxlcnMgcmVsYXRpb25zIGFyZSBzdG9yZWQgaW4gYSBXZWFrTWFwXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCAvKiogQGxlbmRzIEpGYWN0b3J5RXZlbnRzIyAqLyB7XG4gICAgICAgICAgICByZWdpc3RyeTogeyB2YWx1ZTogalF1ZXJ5KE9iamVjdC5jcmVhdGUobnVsbCkpIH0sXG4gICAgICAgICAgICBoYW5kbGVyczogeyB2YWx1ZTogbmV3IFdlYWtNYXAgfSxcbiAgICAgICAgICAgIG9uTGlzdGVuZXJVcGRhdGU6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICAgICAgICBvbk9ic2VydmVyVXBkYXRlOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uKHsgZXZlbnRzLCBoYW5kbGVyLCB0YXJnZXQsIHNlbGVjdG9yIH0pIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFdmVudHMudmFsaWRhdGVTZWxlY3RvcihldmVudHMpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy5vbih7aGFuZGxlcn0pXCIsIGhhbmRsZXIpLnR5cGVGdW5jdGlvbigpO1xuICAgICAgICAgICAgdGFyZ2V0ICYmIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlFdmVudHMub24oe3RhcmdldH0pXCIsIHRhcmdldCkudHlwZShTdHJpbmcsIGpRdWVyeSwgSFRNTEVsZW1lbnQpO1xuICAgICAgICAgICAgc2VsZWN0b3IgJiYgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy5vbih7c2VsZWN0b3J9KVwiLCB0YXJnZXQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB3cmFwcGVkSGFuZGxlciA9IHRoaXMuaGFuZGxlcnMuZ2V0KGhhbmRsZXIpO1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBkb24ndCBuZWVkIHRvIHdyYXAgRE9NIGhhbmRsZXJzXG4gICAgICAgICAgICBpZiAoIXdyYXBwZWRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoaGFuZGxlciwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGFyZ2V0KS5vbihldmVudHMsIHNlbGVjdG9yLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5KHRhcmdldCkub24oZXZlbnRzLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9uTGlzdGVuZXJVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uTGlzdGVuZXJVcGRhdGUoYXJndW1lbnRzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF3cmFwcGVkSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMuc2V0KGhhbmRsZXIsIHdyYXBwZWRIYW5kbGVyID0gZnVuY3Rpb24oZSwgeyBkYXRhLCBzdGFjayB9KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKCkgPT4gaGFuZGxlcihlLCBkYXRhKSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB3cmFwcGVkSGFuZGxlci5vcmlnaW5hbEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWdpc3RyeS5vbihldmVudHMsIHdyYXBwZWRIYW5kbGVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9uT2JzZXJ2ZXJVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uT2JzZXJ2ZXJVcGRhdGUoYXJndW1lbnRzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2ZmKHsgZXZlbnRzLCBoYW5kbGVyLCB0YXJnZXQsIHNlbGVjdG9yIH0pIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7IC8vIG9mZigpIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgSkZhY3RvcnlFdmVudHMudmFsaWRhdGVTZWxlY3RvcihldmVudHMpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgJiYgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy5vZmYoe2hhbmRsZXJ9KVwiLCBoYW5kbGVyKS50eXBlRnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB0YXJnZXQgJiYgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy5vZmYoe3RhcmdldH0pXCIsIHRhcmdldCkudHlwZShTdHJpbmcsIGpRdWVyeSwgSFRNTEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yICYmIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlFdmVudHMub2ZmKHtzZWxlY3Rvcn0pXCIsIHRhcmdldCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5KHRhcmdldCkub2ZmKGV2ZW50cywgc2VsZWN0b3IsIGhhbmRsZXIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGpRdWVyeSh0YXJnZXQpLm9mZihldmVudHMsIGhhbmRsZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqUXVlcnkoXCIqXCIpLm9mZihldmVudHMsIGhhbmRsZXIpO1xuXG4gICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXJzLmdldChoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiaGFuZGxlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBcIm5vdCByZWdpc3RlcmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlbjogaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVnaXN0cnkub2ZmKGV2ZW50cywgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub25PYnNlcnZlclVwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vbk9ic2VydmVyVXBkYXRlKGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vbkxpc3RlbmVyVXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9uTGlzdGVuZXJVcGRhdGUoYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVuIGluIHBhcmFsbGVsLiBEb24ndCBcImF3YWl0XCIgZm9yIGFzeW5jIGhhbmRsZXJzXG4gICAgICogT2J2aW91c2x5IHByb2R1Y2VzIHVucHJlZGljdGFibGUgcmFjZSBjb25kaXRpb25zXG4gICAgICovXG4gICAgdHJpZ2dlclBhcmFsbGVsKHsgZXZlbnRzLCBkYXRhLCB0YXJnZXQgfSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZVNlbGVjdG9yKGV2ZW50cyk7XG4gICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICAgICAgICAmJiBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RXZlbnRzLnRyaWdnZXJQYXJhbGxlbCh7dGFyZ2V0fSlcIiwgdGFyZ2V0KS50eXBlKFN0cmluZywgalF1ZXJ5LCBIVE1MRWxlbWVudClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICAgIGNvbnN0IHBlbmRpbmcgPSBbXTtcbiAgICAgICAgZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGFyZ2V0KS50cmlnZ2VyKGV2ZW50LCB7IGRhdGEsIHN0YWNrIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RyeS50cmlnZ2VySGFuZGxlcihldmVudCwgeyBkYXRhLCBzdGFjayB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaGFuZGxlciBvZiBzdGFjaykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGhhbmRsZXIoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlXG4gICAgICAgICAgICAgICAgJiYgIXJlc3VsdC4kaXNTZXR0bGVkIC8vIGRvbid0IG5lZWQgdG8gYXdhaXRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChyZXN1bHQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGVuZGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEpGYWN0b3J5UHJvbWlzZVN5bmMucmVzb2x2ZSgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gaW4gZGVjbGFyYXRpb24gb3JkZXIgc3luY2hyb25vdXNseS4gV2lsbCBcImF3YWl0XCIgZm9yIGFzeW5jIGhhbmRsZXJzXG4gICAgICogUHJldmVudHMgdW5wcmVkaWN0YWJsZSByYWNlIGNvbmRpdGlvbnNcbiAgICAgKi9cbiAgICB0cmlnZ2VyU2VyaWVzKHsgZXZlbnRzLCBkYXRhLCB0YXJnZXQgfSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZVNlbGVjdG9yKGV2ZW50cyk7XG4gICAgICAgICAgICB0YXJnZXQgJiYgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy50cmlnZ2VyU2VyaWVzKHt0YXJnZXR9KVwiLCB0YXJnZXQpLnR5cGUoU3RyaW5nLCBqUXVlcnksIEhUTUxFbGVtZW50KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBKRmFjdG9yeVByb21pc2VTeW5jKGFzeW5jIHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5zcGxpdChcIiBcIik7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRhcmdldCkudHJpZ2dlcihldmVudCwgeyBkYXRhLCBzdGFjayB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdHJ5LnRyaWdnZXJIYW5kbGVyKGV2ZW50LCB7IGRhdGEsIHN0YWNrIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBoYW5kbGVyIG9mIHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAmJiAhcmVzdWx0LiRpc1NldHRsZWQgLy8gZG9uJ3QgbmVlZCB0byBhd2FpdFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUV2ZW50c01hbmFnZXIgZXh0ZW5kcyBKRmFjdG9yeUV2ZW50cyB7XG4gICAgY29uc3RydWN0b3IocGFyZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIHBhcmVudDogeyB2YWx1ZTogcGFyZW50IH0sXG4gICAgICAgICAgICBhZmZpbGlhdGVSdWxlczogeyB2YWx1ZTogbmV3IEpGYWN0b3J5RnVuY3Rpb25Db21wb3NlcigpLmNvbXBvc2UoKSB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFmZmlsaWF0ZUFkZFJ1bGUoSkZhY3RvcnlFdmVudHNNYW5hZ2VyLnJ1bGVfbmFtZXNwYWNlKVxuICAgIH1cblxuICAgIGFmZmlsaWF0ZShldmVudHMgPSBcIlwiLCBuYW1lc3BhY2VzID0gXCJcIiwgb3B0aW9ucykge1xuICAgICAgICBsZXQgcGFyc2VyID0gbmV3IEpGYWN0b3J5RXZlbnRTZWxlY3RvclBhcnNlcihldmVudHMpO1xuICAgICAgICBmb3IgKGxldCBwYXJzZWRFdmVudCBvZiBwYXJzZXIuZXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmFmZmlsaWF0ZVJ1bGVzKHBhcnNlZEV2ZW50LCBuYW1lc3BhY2VzLCBvcHRpb25zKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZXIudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBhZmZpbGlhdGVBZGRSdWxlKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5hZmZpbGlhdGVSdWxlcy5jb21wb3Nlci5sYXN0KGhhbmRsZXIpXG4gICAgfVxuXG4gICAgc3RhdGljIHJ1bGVfbmFtZXNwYWNlKGNvbnRleHQsIHBhcnNlZEV2ZW50LCBuYW1lc3BhY2VzKSB7XG4gICAgICAgIG5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgZm9yIChsZXQgbmFtZXNwYWNlIG9mIG5hbWVzcGFjZXMpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSAmJiBwYXJzZWRFdmVudC5hZGROYW1lc3BhY2UobmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uKGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgICAgICAvLyBPYnNlcnZlcnM6XG4gICAgICAgIC8vIGV2ZW50cywgaGFuZGxlclxuICAgICAgICAvLyBldmVudHMsIGhhbmRsZXIsIG9wdGlvbnNcblxuICAgICAgICAvLyBET00gRXZlbnRzOlxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgaGFuZGxlclxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgaGFuZGxlciwgb3B0aW9uc1xuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXIsXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlciwgb3B0aW9uc1xuXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgaGFuZGxlclxuICAgICAgICAgICAgICAgIFtoYW5kbGVyLCB0YXJnZXRdID0gW3RhcmdldC8qLCB1bmRlZmluZWQqL107XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICBbaGFuZGxlciwgc2VsZWN0b3JdID0gW3NlbGVjdG9yLyosIHVuZGVmaW5lZCovXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMsIGhhbmRsZXIsIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgW2hhbmRsZXIsIG9wdGlvbnMsIHRhcmdldCwgc2VsZWN0b3JdID0gW3RhcmdldCwgc2VsZWN0b3IvKiwgdW5kZWZpbmVkLCB1bmRlZmluZWQqL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzNdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBoYW5kbGVyLCBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIFtvcHRpb25zLCBoYW5kbGVyLCBzZWxlY3Rvcl0gPSBbaGFuZGxlciwgc2VsZWN0b3IvKiwgdW5kZWZpbmVkKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50cyA9IHRoaXMuYWZmaWxpYXRlKGV2ZW50cywgdGhpcy5wYXJlbnQuJC5hYm91dC5maW5nZXJwcmludCwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGFyZ2V0ID09PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgc3VwZXIub24oeyBldmVudHMsIGhhbmRsZXIgfSkgOlxuICAgICAgICAgICAgc3VwZXIub24oeyBldmVudHMsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXIvKiwgb3B0aW9ucyovIH0pXG4gICAgfVxuXG4gICAgb2ZmKGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgICAgICAvLyBCb3RoOlxuICAgICAgICAvLyBldmVudHMgKGNhbiBiZSBuYW1lc3BhY2VzKVxuICAgICAgICAvLyBldmVudHMsIG9wdGlvbnNcbiAgICAgICAgLy8gb3B0aW9ucyAoY2FuIGJlIHJlbW92YWwpXG5cbiAgICAgICAgLy8gT2JzZXJ2ZXI6XG4gICAgICAgIC8vIGV2ZW50cywgaGFuZGxlclxuICAgICAgICAvLyBldmVudHMsIGhhbmRsZXIsIG9wdGlvbnNcblxuICAgICAgICAvLyBET00gRXZlbnRzOlxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgaGFuZGxlclxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgaGFuZGxlciwgb3B0aW9uc1xuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgc2VsZWN0b3JcbiAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXQsIHNlbGVjdG9yLCBoYW5kbGVyLFxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXIsIG9wdGlvbnNcblxuICAgICAgICBjb25zdCBhcmdMID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgc3dpdGNoIChhcmdMKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICBbb3B0aW9ucywgZXZlbnRzXSA9IFtldmVudHMvKiwgdW5kZWZpbmVkKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlIGV2ZW50cyAoY2FuIG5hbWVzcGFjZXMpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMsIGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgW2hhbmRsZXIsIHRhcmdldF0gPSBbdGFyZ2V0LyosIHVuZGVmaW5lZCovXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlbHBlcl9pc1BsYWluT2JqZWN0KGFyZ3VtZW50c1sxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLCBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIFtvcHRpb25zLCB0YXJnZXRdID0gW3RhcmdldC8qLCB1bmRlZmluZWQqL11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZWxzZSBldmVudHMsIHRhcmdldFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzJdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXQsIGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgW2hhbmRsZXIsIHNlbGVjdG9yXSA9IFtzZWxlY3Rvci8qLCB1bmRlZmluZWQqL107XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnRzWzFdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLCBoYW5kbGVyLCBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIFtoYW5kbGVyLCBvcHRpb25zLCB0YXJnZXQsIHNlbGVjdG9yXSA9IFt0YXJnZXQsIHNlbGVjdG9yLyosIHVuZGVmaW5lZCwgdW5kZWZpbmVkKi9dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgaGFuZGxlciwgb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICBbb3B0aW9ucywgaGFuZGxlciwgc2VsZWN0b3JdID0gW2hhbmRsZXIsIHNlbGVjdG9yLyosIHVuZGVmaW5lZCovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBldmVudHMgPSB0aGlzLmFmZmlsaWF0ZShldmVudHMsIHRoaXMucGFyZW50LiQuYWJvdXQuZmluZ2VycHJpbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChhcmdMIDwgMikge1xuICAgICAgICAgICAgc3VwZXIub2ZmKHsgZXZlbnRzIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0ID9cbiAgICAgICAgICAgICAgICBzdXBlci5vZmYoeyBldmVudHMsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXIvKiwgb3B0aW9ucyovIH0pIDpcbiAgICAgICAgICAgICAgICBzdXBlci5vZmYoeyBldmVudHMsIGhhbmRsZXIgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyaWdnZXIoZXZlbnRzLCB0YXJnZXQsIGRhdGEpIHtcbiAgICAgICAgLy8gZXZlbnRzXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0XG4gICAgICAgIC8vIGV2ZW50cywgZGF0YVxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgZGF0YVxuXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcIm9iamVjdFwiICYmICF0YXJnZXQuanF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgZGF0YVxuICAgICAgICAgICAgICAgICAgICBbZGF0YSwgdGFyZ2V0XSA9IFt0YXJnZXRdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQgP1xuICAgICAgICAgICAgc3VwZXIudHJpZ2dlclNlcmllcyh7IGV2ZW50cywgdGFyZ2V0LCBkYXRhIH0pIDpcbiAgICAgICAgICAgIHN1cGVyLnRyaWdnZXJTZXJpZXMoeyBldmVudHMsIGRhdGEgfSlcbiAgICB9XG5cbiAgICB0cmlnZ2VyUGFyYWxsZWwoZXZlbnRzLCB0YXJnZXQsIGRhdGEpIHtcbiAgICAgICAgLy8gZXZlbnRzXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0XG4gICAgICAgIC8vIGV2ZW50cywgZGF0YVxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgZGF0YVxuXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcIm9iamVjdFwiICYmICF0YXJnZXQuanF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgZGF0YVxuICAgICAgICAgICAgICAgICAgICBbZGF0YSwgdGFyZ2V0XSA9IFt0YXJnZXRdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQgP1xuICAgICAgICAgICAgc3VwZXIudHJpZ2dlclBhcmFsbGVsKHsgZXZlbnRzLCB0YXJnZXQsIGRhdGEgfSkgOlxuICAgICAgICAgICAgc3VwZXIudHJpZ2dlclBhcmFsbGVsKHsgZXZlbnRzLCBkYXRhIH0pXG4gICAgfVxuXG4gICAgLy8gI3Vub3B0aW1pemVkIGRyYWZ0I1xuICAgIC8vIEl0J3Mgbm90IGVhc3kgdG8ga2VlcCB0aGlzIGxpc3QgdXAgdG8gZGF0ZSBiZWNhdXNlOlxuICAgIC8vIC0gbGlzdGVuZXJzIGNhbiBiZSByZW1vdmVkIGJ5IGV4dGVybmFsIGRvbSBtdXRhdGlvbnNcbiAgICAvLyAtIGxpc3RlbmVycyBjYW4gYmUgZGVsZWdhdGVkXG4gICAgLy8gLSBvZmYoKSBtZXRob2QgY2FuIHJlbW92ZSBsaXN0ZW5lcnMgZ2xvYmFsbHlcbiAgICBnZXREb21MaXN0ZW5lcnMobmFtZXNwYWNlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAobGV0IGVsbSBvZiBqUXVlcnkoXCIqXCIpKSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IGpRdWVyeS5fZGF0YShlbG0sIFwiZXZlbnRzXCIpO1xuICAgICAgICAgICAgaWYgKGRhdGEpIHsvLyBkYXRhID0ge2NsaWNrOiBbe31dLCAuLi4gfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGVudHJpZXMgb2YgT2JqZWN0LnZhbHVlcyhkYXRhKSkgey8vIGVudHJpZXMgPSBbe3R5cGU6Li4ufV1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZW50cnkgb2YgZW50cmllcykgey8vIGVudHJ5ID0ge3R5cGUsIG5hbWVzcGFjZSwgaGFuZGxlciwgLi4ufVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBKRmFjdG9yeUV2ZW50U2VsZWN0b3IoZW50cnkubmFtZXNwYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZXIuaGFzTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0eXBlcyA9IHJlc3VsdC5nZXQoZWxtKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldChlbG0sIHR5cGVzID0ge30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gdHlwZXNbZW50cnkudHlwZV0gfHwgKHR5cGVzW2VudHJ5LnR5cGVdID0gW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC4uLmVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogZW50cnkuc2VsZWN0b3IgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZW50cnkuaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBlbnRyeS5uYW1lc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgLy8gI3Vub3B0aW1pemVkIGRyYWZ0I1xuICAgIGdldE9ic2VydmVycygpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IGV2ZW50cyA9IHRoaXMucmVnaXN0cnkuX2V2ZW50cztcblxuICAgICAgICBpZiAoIWV2ZW50cykge1xuICAgICAgICAgICAgbGV0IHJlZ2lzdHJ5ID0gT2JqZWN0LnZhbHVlcyh0aGlzLnJlZ2lzdHJ5KVswXTtcbiAgICAgICAgICAgIGxldCBleHBhbmRvID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocmVnaXN0cnkpLmZpbmQoayA9PiBrLmluZGV4T2YoXCJqUXVlcnlcIikgPT09IDApO1xuICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5ICYmIGV4cGFuZG8pIHtcbiAgICAgICAgICAgICAgICBldmVudHMgPSB0aGlzLnJlZ2lzdHJ5Ll9ldmVudHMgPSByZWdpc3RyeVtleHBhbmRvXS5ldmVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGV2ZW50cykpIHtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnQgPSByZXN1bHQuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGtleSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBldmVudFR5cGVFbnRyeSBvZiB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBldmVudFR5cGVFbnRyeS5oYW5kbGVyLm9yaWdpbmFsSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogZXZlbnRUeXBlRW50cnkubmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5RXZlbnRTZWxlY3RvclBhcnNlciB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3JzKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlU2VsZWN0b3Ioc2VsZWN0b3JzKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUgQXJyYXk8SkZhY3RvcnlFdmVudFNlbGVjdG9yPlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ldmVudHMgPSBzZWxlY3RvcnMuc3BsaXQoXCIgXCIpLm1hcChzZWxlY3RvciA9PiBuZXcgSkZhY3RvcnlFdmVudFNlbGVjdG9yKHNlbGVjdG9yKSlcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgbGV0IHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgZXZlbnQgb2YgdGhpcy5ldmVudHMpIHtcbiAgICAgICAgICAgIHMucHVzaChldmVudC50b1N0cmluZygpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzLmpvaW4oXCIgXCIpXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlFdmVudFNlbGVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvcikge1xuICAgICAgICBsZXQgW2V2ZW50LCAuLi5uYW1lc3BhY2VdID0gc2VsZWN0b3Iuc3BsaXQoXCIuXCIpO1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMubmFtZXNwYWNlID0gbmV3IFNldChuYW1lc3BhY2UpXG4gICAgfVxuXG4gICAgLyoqIEByZXR1cm4ge0Jvb2xlYW58U3RyaW5nfSAqL1xuICAgIGhhc05hbWVzcGFjZShuYW1lc3BhY2VzKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShuYW1lc3BhY2VzKSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlcyA9IFtuYW1lc3BhY2VzXVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IG5hbWVzcGFjZSBvZiBuYW1lc3BhY2VzKSB7XG4gICAgICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEvXltcXHc6XSskLy50ZXN0KG5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwibmFtZXNwYWNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IFwibXVzdCBiZSBhbHBoYW51bWVyaWMsIHVuZGVyc2NvcmUgYW5kIGNvbG9uIGNoYXJhY3RlcnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuOiBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmFtZXNwYWNlICYmIHRoaXMubmFtZXNwYWNlLmhhcyhuYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWVzcGFjZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGFkZE5hbWVzcGFjZShuYW1lc3BhY2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgaWYgKCEvXltcXHc6XSskLy50ZXN0KG5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX1ZBTFVFKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIm5hbWVzcGFjZVwiLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IFwibXVzdCBiZSBhbHBoYW51bWVyaWMsIHVuZGVyc2NvcmUgYW5kIGNvbG9uIGNoYXJhY3RlcnNcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IG5hbWVzcGFjZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lc3BhY2UuYWRkKG5hbWVzcGFjZSlcbiAgICB9XG5cbiAgICBkZWxldGVOYW1lc3BhY2UobmFtZXNwYWNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIGlmICghL15bXFx3Ol0rJC8udGVzdChuYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJuYW1lc3BhY2VcIixcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBcIm11c3QgYmUgYWxwaGFudW1lcmljLCB1bmRlcnNjb3JlIGFuZCBjb2xvbiBjaGFyYWN0ZXJzXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZXNwYWNlLmRlbGV0ZShuYW1lc3BhY2UpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVzcGFjZS5zaXplID8gdGhpcy5ldmVudCArIFwiLlwiICsgQXJyYXkuZnJvbSh0aGlzLm5hbWVzcGFjZS52YWx1ZXMoKSkuam9pbihcIi5cIikgOiB0aGlzLmV2ZW50O1xuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZVNlbGVjdG9yID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZVNlbGVjdG9yKHNlbGVjdG9yKVwiLCBzZWxlY3RvcilcbiAgICAgICAgICAgICAgICAubm90VW5kZWZpbmVkKClcbiAgICAgICAgICAgICAgICAudmFsaWRTcGFjZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IFtldmVudCwgbnNdIG9mIHNlbGVjdG9yLnNwbGl0KFwiIFwiKVxuICAgICAgICAgICAgLm1hcCh2ID0+IHYuc3BsaXQoXCIuXCIpKVxuICAgICAgICAgICAgLm1hcCh2ID0+IFt2LnNoaWZ0KCksIHYuam9pbihcIi5cIildKSkge1xuICAgICAgICAgICAgZXZlbnQgJiYgSkZhY3RvcnlFdmVudHMudmFsaWRhdGVFdmVudChldmVudCk7XG4gICAgICAgICAgICBucyAmJiBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZU5hbWVzcGFjZShucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9O1xuXG4gICAgSkZhY3RvcnlFdmVudHMudmFsaWRhdGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlFdmVudHMudmFsaWRhdGVFdmVudChldmVudClcIiwgZXZlbnQpXG4gICAgICAgICAgICAgICAgLm5vdFVuZGVmaW5lZCgpXG4gICAgICAgICAgICAgICAgLm5vdEVtcHR5U3RyaW5nKClcbiAgICAgICAgICAgICAgICAudmFsaWRTcGFjZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghL15bXFx3Ol0rJC8udGVzdChldmVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLklOVkFMSURfVkFMVUUoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogXCJKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZUV2ZW50KGV2ZW50KVwiLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogXCJtdXN0IGJlIGFscGhhbnVtZXJpYywgdW5kZXJzY29yZSBhbmQgY29sb24gY2hhcmFjdGVyc1wiLFxuICAgICAgICAgICAgICAgIGdpdmVuOiBldmVudFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfTtcblxuICAgIEpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlTmFtZXNwYWNlID0gZnVuY3Rpb24obmFtZXNwYWNlKSB7IC8vIGV4OiBucy5uczIubnMzXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlFdmVudHMudmFsaWRhdGVOYW1lc3BhY2UobmFtZXNwYWNlKVwiLCBuYW1lc3BhY2UpXG4gICAgICAgICAgICAgICAgLm5vdFVuZGVmaW5lZCgpXG4gICAgICAgICAgICAgICAgLm5vdEVtcHR5U3RyaW5nKClcbiAgICAgICAgICAgICAgICAudmFsaWRTcGFjZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghL15bXFx3Oi5dKyQvLnRlc3QobmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIkpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlTmFtZXNwYWNlKG5hbWVzcGFjZSlcIixcbiAgICAgICAgICAgICAgICByZWFzb246IFwibXVzdCBiZSBhbHBoYW51bWVyaWMsIHVuZGVyc2NvcmUsIGRvdCBhbmQgY29sb24gY2hhcmFjdGVyc1wiLFxuICAgICAgICAgICAgICAgIGdpdmVuOiBuYW1lc3BhY2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH07XG59IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGYWN0b3J5UHJvbWlzZSB9IGZyb20gXCIuL0pGYWN0b3J5UHJvbWlzZVwiO1xuaW1wb3J0IHsgakZhY3RvcnlFcnJvciB9IGZyb20gXCIuL0pGYWN0b3J5RXJyb3JcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUZldGNoXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUZldGNoIGV4dGVuZHMgSkZhY3RvcnlQcm9taXNlIHtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbmFsQXJncywgdXJsLCBmZXRjaE9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbmFsQXJncyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBzdXBlcihvcHRpb25hbEFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25hbEFyZ3MgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBbb3B0aW9uYWxBcmdzLCB1cmwsIGZldGNoT3B0aW9uc10gPSBbe30sIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCBmZXRjaE9wdGlvbnMpO1xuXG4gICAgICAgICAgICBzdXBlcihvcHRpb25hbEFyZ3MsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvbWlzZSA9IGZldGNoKGZldGNoUmVxdWVzdClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2hhaW4uZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiOlwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmV0Y2hPcHRpb25zLiR0eXBlVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ociA9PiB0aGlzLiRjaGFpbi5yZXNwb25zZVRleHQgPSByKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmV0Y2hPcHRpb25zLiR0eXBlSlNPTikge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ociA9PiB0aGlzLiRjaGFpbi5yZXNwb25zZUpTT04gPSByKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5SRVFVRVNUX0VSUk9SKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogcmVhc29uLm1lc3NhZ2UgfHwgcmVhc29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLiRjaGFpbi5mZXRjaFJlc3BvbnNlICYmIHRoaXMuJGNoYWluLmZldGNoUmVzcG9uc2UudXJsIHx8IHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hSZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hSZXNwb25zZTogdGhpcy4kY2hhaW4uZmV0Y2hSZXNwb25zZSB8fCBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbmFsQXJncy50cmFjZVNvdXJjZSlcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy4kY2hhaW4uZmV0Y2hPcHRpb25zID0gZmV0Y2hPcHRpb25zO1xuICAgICAgICAgICAgdGhpcy4kY2hhaW4uZmV0Y2hSZXF1ZXN0ID0gZmV0Y2hSZXF1ZXN0O1xuXG4gICAgICAgICAgICBsZXQgYWJvcnRDdHJsID0gZmV0Y2hPcHRpb25zLmFib3J0Q29udHJvbGxlciB8fCBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgICBmZXRjaE9wdGlvbnMuc2lnbmFsID0gYWJvcnRDdHJsLnNpZ25hbDtcbiAgICAgICAgICAgIHRoaXMuJGNoYWluLmZldGNoQWJvcnRDb250cm9sbGVyID0gYWJvcnRDdHJsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJGNoYWluQWJvcnQocmVhc29uID0gXCJyZXF1ZXN0IGFib3J0ZWRcIikge1xuICAgICAgICBzdXBlci4kY2hhaW5BYm9ydChyZWFzb24pO1xuICAgICAgICB0aGlzLiRjaGFpbi5mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbn0iLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgSkZBQ1RPUllfREVWLCBKRkFDVE9SWV9DTEkgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmltcG9ydCB7IEpGYWN0b3J5RXhwZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlFeHBlY3RcIjtcbmltcG9ydCB7IGpGYWN0b3J5RnVuY3Rpb25Db25kaXRpb25hbCB9IGZyb20gXCIuL0pGYWN0b3J5RnVuY3Rpb25cIjtcbmltcG9ydCB7IGhlbHBlcl9kZWZhdWx0c0RlZXAsIE5PT1AgfSBmcm9tIFwiLi9qRmFjdG9yeS1oZWxwZXJzXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlMb2dnZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQSBjb250ZXh0dWFsIGxvZ2dlciB0aGF0IHByZXBlbmRzIGEgbGFiZWwgYW5kIGFsbG93cyBydW50aW1lIGZpbHRlcmluZyB3aGlsZSBwcmVzZXJ2aW5nIHRoZSBjYWxsZXIgbGluZSBudW1iZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gbG9nZ2VyLmNyZWF0ZVN1YkxvZ2dlcihsYWJlbCkgY3JlYXRlIGEgc3ViLWxvZ2dlciBvZiBsb2dnZXI7IFwibG9nZ2VyXCIgY2FuIGJlIGEgc3ViLWxvZ2dlci5cbi8vIGxvZ2dlci5kaXNhYmxlKCkgZGlzYWJsZSBjb25zb2xlIGZvciBpdHNlbGYgYW5kIHN1Yi1sb2dnZXJzXG4vLyBsb2dnZXIuZGlzYWxsb3coJ2xvZycpIGRpc2FsbG93IGxvZ2dlci5sb2coKSBvbmx5XG4vLyBsb2dnZXIuZGlzYWxsb3coJ2xvZycsIHN1YkxvZ2dlci5sYWJlbCkgZGlzYWxsb3cgc3ViLWxvZ2dlci5sb2coKSBvbmx5LiBUaGlzIGlzIGNhbGxhYmxlIGZyb20gYW55IGxvZ2dlci9zdWItbG9nZ2VyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1cyA6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBTWU1CT0xfRU5BQkxFRCA9IFN5bWJvbCgpO1xuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlMb2dnZXIge1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlMb2dnZXIob3B0aW9ucylcIiwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAucHJvcGVydGllcyhPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhKRmFjdG9yeUxvZ2dlci5ERUZBVUxUX0NPTkZJRykpXG4gICAgICAgIH1cbiAgICAgICAgaGVscGVyX2RlZmF1bHRzRGVlcCh0aGlzLCBvcHRpb25zLCBKRmFjdG9yeUxvZ2dlci5ERUZBVUxUX0NPTkZJRyk7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uID0gakZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsKEpGYWN0b3J5TG9nZ2VyLkRFRkFVTFRfQ09ORElUSU9OKTtcbiAgICAgICAgdGhpcy5pbnN0YWxsQWNjZXNzb3IoXCJsb2dcIik7XG4gICAgICAgIHRoaXMuaW5zdGFsbEFjY2Vzc29yKFwid2FyblwiKTtcbiAgICAgICAgdGhpcy5pbnN0YWxsQWNjZXNzb3IoXCJlcnJvclwiKVxuICAgIH1cblxuICAgIGdldCBlbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tTWU1CT0xfRU5BQkxFRF0gJiYgKHRoaXMucGFyZW50TG9nZ2VyID8gdGhpcy5wYXJlbnRMb2dnZXIuZW5hYmxlZCA6IHRydWUpXG4gICAgfVxuXG4gICAgc2V0IGVuYWJsZWQodikge1xuICAgICAgICB2ID8gdGhpcy5lbmFibGUoKSA6IHRoaXMuZGlzYWJsZSgpXG4gICAgfVxuXG4gICAgZW5hYmxlKCkge1xuICAgICAgICBpZiAodGhpc1tTWU1CT0xfRU5BQkxFRF0gIT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXNbU1lNQk9MX0VOQUJMRURdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIGlmICh0aGlzW1NZTUJPTF9FTkFCTEVEXSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXNbU1lNQk9MX0VOQUJMRURdID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNhbGxvdyhuYXRpdmVOYW1lLCBsYWJlbCA9IHRoaXMubGFiZWwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlcnNbbGFiZWxdKSB7dGhpcy5maWx0ZXJzW2xhYmVsXSA9IHt9fVxuICAgICAgICB0aGlzLmZpbHRlcnNbbGFiZWxdW25hdGl2ZU5hbWVdID0gdHJ1ZVxuICAgIH1cblxuICAgIGFsbG93KG5hdGl2ZU5hbWUsIGxhYmVsID0gdGhpcy5sYWJlbCkge1xuICAgICAgICBpZiAodGhpcy5maWx0ZXJzW2xhYmVsXSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsdGVyc1tsYWJlbF1bbmF0aXZlTmFtZV1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluc3RhbGxBY2Nlc3NvcihuYXRpdmVOYW1lLCB0YXJnZXROYW1lID0gbmF0aXZlTmFtZSwgdGFyZ2V0ID0gdGhpcykge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5TG9nZ2VyKG5hdGl2ZU5hbWUpXCIsIG5hdGl2ZU5hbWUpLmVxdWFsSW4oW1wibG9nXCIsIFwid2FyblwiLCBcImVycm9yXCJdKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHtcbiAgICAgICAgICAgIFt0YXJnZXROYW1lXToge1xuICAgICAgICAgICAgICAgIGdldDogdGhpcy5hY2Nlc3Nvci5iaW5kKHRoaXMsIG5hdGl2ZU5hbWUvKiwgdGFyZ2V0Ki8pLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGFjY2Vzc29yKG5hdGl2ZU5hbWUvKiwgdGFyZ2V0Ki8pIHtcbiAgICAgICAgaWYgKCF0aGlzW1NZTUJPTF9FTkFCTEVEXSkge1xuICAgICAgICAgICAgcmV0dXJuIE5PT1A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uKG5hdGl2ZU5hbWUpICYmIHRoaXMuZm9ybWF0dGVyW25hdGl2ZU5hbWVdKHRoaXMpIHx8IE5PT1BcbiAgICB9XG5cbiAgICBjcmVhdGVTdWJMb2dnZXIobGFiZWwpIHtcbiAgICAgICAgLyoqIEB0eXBlIEpGYWN0b3J5TG9nZ2VyICovXG4gICAgICAgIGxldCBzdWIgPSBuZXcgSkZhY3RvcnlMb2dnZXIoe1xuICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5lbmFibGVkLFxuICAgICAgICAgICAgbGFiZWw6IHRoaXMubGFiZWwgKyBcIi5cIiArIGxhYmVsLFxuICAgICAgICAgICAgc3R5bGVzX2NzczogdGhpcy5zdHlsZXNfY3NzLFxuICAgICAgICAgICAgc3R5bGVzX2NsaTogdGhpcy5zdHlsZXNfY2xpLFxuICAgICAgICAgICAgY29uc29sZTogdGhpcy5jb25zb2xlLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiB0aGlzLmZvcm1hdHRlclxuICAgICAgICB9KTtcbiAgICAgICAgc3ViLnBhcmVudExvZ2dlciA9IHRoaXM7XG4gICAgICAgIHN1Yi5jb25kaXRpb24uYWRkQ29uZGl0aW9uKCgpID0+IHRoaXMuZW5hYmxlZCk7XG4gICAgICAgIHN1Yi5maWx0ZXJzID0gdGhpcy5maWx0ZXJzOyAvLyBzaGFyZWQgdG8gYWxsb3cvZGlzYWxsb3cgZnJvbSBhbnl3aGVyZVxuICAgICAgICByZXR1cm4gc3ViXG4gICAgfVxufVxuXG4vLyAjbGltaXRhdGlvbiMgVG8gcHJlc2VydmUgdGhlIGxpbmUgbnVtYmVyLCB3ZSBjYW4gb25seSB1c2UgbmF0aXZlIGZ1bmN0aW9ucywgbGlrZSBiaW5kXG4vLyAjbGltaXRhdGlvbiMgQmVjYXVzZSB3ZSB1c2UgYmluZCgpLCBvbmx5IHRoZSBzdHlsZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBjYW4gYmUgZWZmaWNpZW50bHkgZGVmaW5lZFxuXG5KRmFjdG9yeUxvZ2dlci5GT1JNQVRURVJfTkFUSVZFID0ge1xuICAgIGxvZzogbG9nZ2VyID0+IGxvZ2dlci5jb25zb2xlLmxvZy5iaW5kKGxvZ2dlci5jb25zb2xlLCBsb2dnZXIubGFiZWwgKyBcIj5cIiksXG4gICAgd2FybjogbG9nZ2VyID0+IGxvZ2dlci5jb25zb2xlLndhcm4uYmluZChsb2dnZXIuY29uc29sZSwgbG9nZ2VyLmxhYmVsICsgXCI+XCIpLFxuICAgIGVycm9yOiBsb2dnZXIgPT4gbG9nZ2VyLmNvbnNvbGUuZXJyb3IuYmluZChsb2dnZXIuY29uc29sZSwgbG9nZ2VyLmxhYmVsICsgXCI+XCIpXG59O1xuXG5KRmFjdG9yeUxvZ2dlci5GT1JNQVRURVJfQ0xJID0ge1xuICAgIGxvZzogbG9nZ2VyID0+IGxvZ2dlci5jb25zb2xlLmxvZy5iaW5kKGxvZ2dlci5jb25zb2xlLCBsb2dnZXIuc3R5bGVzX2NsaS5sYWJlbCwgbG9nZ2VyLmxhYmVsICsgXCI+XCIpLFxuICAgIHdhcm46IGxvZ2dlciA9PiBsb2dnZXIuY29uc29sZS53YXJuLmJpbmQobG9nZ2VyLmNvbnNvbGUsIGxvZ2dlci5zdHlsZXNfY2xpLmxhYmVsLCBsb2dnZXIubGFiZWwgKyBcIj5cIiksXG4gICAgZXJyb3I6IGxvZ2dlciA9PiBsb2dnZXIuY29uc29sZS5lcnJvci5iaW5kKGxvZ2dlci5jb25zb2xlLCBsb2dnZXIuc3R5bGVzX2NsaS5sYWJlbCwgbG9nZ2VyLmxhYmVsICsgXCI+XCIpXG59O1xuXG5KRmFjdG9yeUxvZ2dlci5GT1JNQVRURVJfQlJPV1NFUiA9IHtcbiAgICBsb2c6IGxvZ2dlciA9PiBsb2dnZXIuY29uc29sZS5sb2cuYmluZChsb2dnZXIuY29uc29sZSwgXCIlY1wiICsgbG9nZ2VyLmxhYmVsICsgXCI+XCIsIGxvZ2dlci5zdHlsZXNfY3NzLmxhYmVsKSxcbiAgICB3YXJuOiBsb2dnZXIgPT4gbG9nZ2VyLmNvbnNvbGUud2Fybi5iaW5kKGxvZ2dlci5jb25zb2xlLCBcIiVjXCIgKyBsb2dnZXIubGFiZWwgKyBcIj5cIiwgbG9nZ2VyLnN0eWxlc19jc3MubGFiZWwpLFxuICAgIGVycm9yOiBsb2dnZXIgPT4gbG9nZ2VyLmNvbnNvbGUuZXJyb3IuYmluZChsb2dnZXIuY29uc29sZSwgXCIlY1wiICsgbG9nZ2VyLmxhYmVsICsgXCI+XCIsIGxvZ2dlci5zdHlsZXNfY3NzLmxhYmVsKVxufTtcblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59ICovXG5KRmFjdG9yeUxvZ2dlci5ERUZBVUxUX0NPTkRJVElPTiA9IGZ1bmN0aW9uKG5hdGl2ZU5hbWUpIHtcbiAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlMb2dnZXIuY29uZGl0aW9uKG5hdGl2ZU5hbWUpXCIsIG5hdGl2ZU5hbWUpLmVxdWFsSW4oW1wibG9nXCIsIFwid2FyblwiLCBcImVycm9yXCJdKTtcbiAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUxvZ2dlci5lbmFibGVkXCIsIHRoaXMuZW5hYmxlZCkuZXF1YWwodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiAhKHRoaXMuZmlsdGVyc1t0aGlzLmxhYmVsXSAmJiB0aGlzLmZpbHRlcnNbdGhpcy5sYWJlbF1bbmF0aXZlTmFtZV0pXG59O1xuXG5KRmFjdG9yeUxvZ2dlci5ERUZBVUxUX0NPTkZJRyA9IC8qKiBAbGVuZHMgSkZhY3RvcnlMb2dnZXIjICovIHtcbiAgICBsYWJlbDogXCJcIixcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIHBhcmVudExvZ2dlcjogbnVsbCxcbiAgICBmb3JtYXR0ZXI6IEpGQUNUT1JZX0NMSSA/XG4gICAgICAgIEpGYWN0b3J5TG9nZ2VyLkZPUk1BVFRFUl9DTEkgOlxuICAgICAgICBKRmFjdG9yeUxvZ2dlci5GT1JNQVRURVJfQlJPV1NFUixcbiAgICBjb25zb2xlLFxuICAgIGZpbHRlcnM6IHtcbiAgICB9LFxuICAgIHN0eWxlc19jbGk6IHtcbiAgICAgICAgbGFiZWw6IFwiXFx4MWJbMTszMG0lc1xceDFiWzBtXCJcbiAgICB9LFxuICAgIHN0eWxlc19jc3M6IHtcbiAgICAgICAgbGFiZWw6IFwiY29sb3I6IGdyYXlcIlxuICAgIH1cbn07IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlUaW1lXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeVRpbWUgZXh0ZW5kcyBEYXRlIHtcbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9Mb2NhbGVUaW1lU3RyaW5nKCkgKyBcIiwgXCIgKyB0aGlzLmdldFVUQ01pbGxpc2Vjb25kcygpICsgXCJtcyAoXCIgKyB0aGlzLnZhbHVlT2YoKSArIFwiKVwiXG4gICAgfVxuICAgICR0b0R1cmF0aW9uU3RyaW5nKCkge1xuICAgICAgICBsZXQgaG91cnMgPSB0aGlzLmdldFVUQ0hvdXJzKCk7XG4gICAgICAgIGxldCBtaW51dGVzID0gdGhpcy5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgIGxldCBzZWNvbmRzID0gdGhpcy5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgIGxldCBtaWxsaXNlY29uZHMgPSB0aGlzLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuXG4gICAgICAgIGxldCBhID0gW107XG4gICAgICAgIGlmIChob3Vycykge1xuICAgICAgICAgICAgYS5wdXNoKGhvdXJzICsgXCJoXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbnV0ZXMpIHtcbiAgICAgICAgICAgIGEucHVzaChtaW51dGVzICsgXCJtaW5cIilcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Vjb25kcykge1xuICAgICAgICAgICAgYS5wdXNoKHNlY29uZHMgKyBcInNcIilcbiAgICAgICAgfVxuICAgICAgICBhLnB1c2gobWlsbGlzZWNvbmRzICsgXCJtc1wiKTtcbiAgICAgICAgaWYgKGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYVswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhLmpvaW4oXCIsXCIpICsgXCIgKFwiICsgdGhpcy52YWx1ZU9mKCkgKyBcIilcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5VGltZVRyYWNlIGV4dGVuZHMgRGF0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZWxhcHNlZCA9IG51bGw7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIHQxOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgdDA6IHsgdmFsdWU6IG5ldyBKRmFjdG9yeVRpbWUoKSB9XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgdGhpcy50MSA9IG5ldyBKRmFjdG9yeVRpbWUoKTtcbiAgICAgICAgdGhpcy5lbGFwc2VkID0gbmV3IEpGYWN0b3J5VGltZSh0aGlzLnQxIC0gdGhpcy50MCkuJHRvRHVyYXRpb25TdHJpbmcoKVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxhcHNlZFxuICAgIH1cbn0iLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0Q29yZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0IHsgSkZBQ1RPUllfREVWIH0gZnJvbSBcIi4vakZhY3RvcnktZW52XCI7XG5pbXBvcnQgeyBqRmFjdG9yeUNvbmZpZyB9IGZyb20gXCIuL2pGYWN0b3J5LWNvbmZpZ1wiO1xuaW1wb3J0IHsgakZhY3RvcnlFcnJvciwgSkZhY3RvcnlFcnJvciB9IGZyb20gXCIuL0pGYWN0b3J5RXJyb3JcIjtcbmltcG9ydCB7IGpGYWN0b3J5IH0gZnJvbSBcIi4vakZhY3RvcnlcIjtcbmltcG9ydCB7IEpGYWN0b3J5RXhwZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlFeHBlY3RcIjtcbmltcG9ydCB7IEpGYWN0b3J5QWJvdXQgfSBmcm9tIFwiLi9KRmFjdG9yeUFib3V0XCI7XG5pbXBvcnQgeyBKRmFjdG9yeUxvZ2dlciB9IGZyb20gXCIuL0pGYWN0b3J5TG9nZ2VyXCI7XG5pbXBvcnQgeyBKRmFjdG9yeVByb21pc2UsIEpGYWN0b3J5UHJvbWlzZVN5bmMgfSBmcm9tIFwiLi9KRmFjdG9yeVByb21pc2VcIjtcbmltcG9ydCB7IEpGYWN0b3J5RXZlbnRzTWFuYWdlciB9IGZyb20gXCIuL0pGYWN0b3J5RXZlbnRzXCI7XG5pbXBvcnQgeyBKRmFjdG9yeU9iamVjdCB9IGZyb20gXCIuL0pGYWN0b3J5T2JqZWN0XCI7XG5pbXBvcnQgeyBKRmFjdG9yeVRpbWVUcmFjZSB9IGZyb20gXCIuL0pGYWN0b3J5VGltZVwiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0IE9iamVjdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdENvcmUge1xuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBvd25lciA9IHRoaXM7XG5cbiAgICAgICAgY2xhc3MgU3ViTWFwIGV4dGVuZHMgTWFwIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpZF9hdXRvaW5jXCIsIHsgdmFsdWU6IDAsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHJlZ2lzdGVyU3luYyhrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN1YiA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICR2YWx1ZTogeyB2YWx1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAkcGhhc2VSZW1vdmU6IHsgdmFsdWU6IFRyYWl0U2VydmljZS5nZXRDb250ZXh0dWFsUmVtb3ZlUGhhc2Uob3duZXIpIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChrZXksIHN1Yik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHJlZ2lzdGVyQXN5bmMoa2V5LCB0YXNrTmFtZSwgcHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIGxldCB0YXNrID0gb3duZXIuJHRhc2sodGFza05hbWUsIHByb21pc2UuJGNoYWluKTtcblxuICAgICAgICAgICAgICAgIC8vIEVuZCBvZiBwcm9taXNlIGNoYWluIG11c3QgY29tcGxldGUgdGhlIHRhc2tcbiAgICAgICAgICAgICAgICBwcm9taXNlLiRjaGFpbi50aGVuKCgpID0+IHsgLy8gc3luY2hyb25vdXMgdGhlblxuICAgICAgICAgICAgICAgICAgICB0YXNrLiRjaGFpbkF1dG9Db21wbGV0ZSgpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBYm9ydGVkIHRhc2sgbXVzdCBhYm9ydCB0aGUgcHJvbWlzZSBpZiBzdGlsbCBydW5uaW5nXG4gICAgICAgICAgICAgICAgdGFzay4kY2hhaW4udGhlbigoKSA9PiB7Ly8gc3luY2hyb25vdXMgdGhlblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByb21pc2UuJGNoYWluLmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLiRjaGFpbkFib3J0KFwiYWJvcnRlZCBieSB0YXNrXCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIiRwaGFzZVJlbW92ZVwiLCB7IHZhbHVlOiB0YXNrLiRwaGFzZVJlbW92ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChrZXksIHByb21pc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRpZF9yZXNvbHZlKHN0cikge1xuICAgICAgICAgICAgICAgIGlmIChzdHIuaW5kZXhPZihcIj9cIikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSArK3RoaXMuaWRfYXV0b2luYztcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcPy9nLCBpZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0clxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIHtcbiAgICAgICAgICAgIFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgICAgICAgYXNzaWduOiBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUsIGRlc2NyaXB0b3IpIHtKRmFjdG9yeU9iamVjdC5hc3NpZ24odGhpcywgcHJvcGVydHksIHZhbHVlLCBkZXNjcmlwdG9yKX0sXG4gICAgICAgICAgICBjcmVhdGVTdWJNYXA6ICgpID0+IG5ldyBTdWJNYXAoKVxuICAgICAgICB9KTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCIkXCIsIHsgdmFsdWU6IE9iamVjdC5jcmVhdGUocHJvdG8pIH0pO1xuXG4gICAgICAgIC8vIHByZS1kZWZpbmUgbW9zdCBpbXBvcnRhbnQgcHJvcGVydGllc1xuICAgICAgICAvLyB0byBvcmRlciB0aGVtIGZpcnN0IGluIGRldnRvb2wgKHJlZHVjZWQgZm9ybSBvbmx5KVxuICAgICAgICB0aGlzLiQuYXNzaWduKHtcbiAgICAgICAgICAgIHRhc2tzOiBudWxsLFxuICAgICAgICAgICAgcmVxdWVzdHM6IG51bGxcbiAgICAgICAgfSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRV9XUklUQUJMRSk7XG4gICAgfVxufVxuXG5UcmFpdENvcmUuU1lNQk9MX1BSSVZBVEUgPSBTeW1ib2woXCJfXCIpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0IEFib3V0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIFRyYWl0QWJvdXQge1xuXG4gICAgdHJhaXRfY29uc3RydWN0b3IoYWJvdXQpIHtcbiAgICAgICAgSkZhY3RvcnlPYmplY3QuYXNzaWduKHRoaXMuJCwgXCJhYm91dFwiLFxuICAgICAgICAgICAgbmV3IEpGYWN0b3J5QWJvdXQodGhpcywgYWJvdXQpLCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5SRUFET05MWSlcbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgTG9nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIFRyYWl0TG9nIHtcblxuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBsZXQgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBsYWJlbDogdGhpcy4kLmFib3V0Lm5hbWVcbiAgICAgICAgfSwgakZhY3RvcnlDb25maWcuVHJhaXRMb2cgfHwge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGxvZ2dlciA9IG5ldyBKRmFjdG9yeUxvZ2dlcihjb25maWcpO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLiQsIFwibG9nZ2VyXCIsIHsgdmFsdWU6IGxvZ2dlciB9KTtcblxuICAgICAgICBsb2dnZXIuaW5zdGFsbEFjY2Vzc29yKFwibG9nXCIsICAgXCIkbG9nXCIsICAgICB0aGlzKTtcbiAgICAgICAgbG9nZ2VyLmluc3RhbGxBY2Nlc3NvcihcIndhcm5cIiwgIFwiJGxvZ1dhcm5cIiwgdGhpcyk7XG4gICAgICAgIGxvZ2dlci5pbnN0YWxsQWNjZXNzb3IoXCJlcnJvclwiLCBcIiRsb2dFcnJcIiwgIHRoaXMpO1xuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUcmFpdCBUYXNrc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdFRhc2sge1xuXG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuJC5hc3NpZ24oXCJ0YXNrc1wiLCB0aGlzLiQuY3JlYXRlU3ViTWFwKCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLkVOVU1FUkFCTEUpO1xuICAgIH1cblxuICAgICR0YXNrKGlkLCBleGVjdXRvck9yVmFsdWUpIHtcbiAgICAgICAgaWQgPSB0aGlzLiQudGFza3MuJGlkX3Jlc29sdmUoaWQpO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJHRhc2soaWQpXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiR0YXNrKGV4ZWN1dG9yT3JWYWx1ZSlcIiwgZXhlY3V0b3JPclZhbHVlKS5ub3RVbmRlZmluZWQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLiQudGFza3MuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiR0YXNrKGlkKVwiLCBnaXZlbjogaWQgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YXNrO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZXhlY3V0b3JPclZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRhc2sgID0gbmV3IEpGYWN0b3J5UHJvbWlzZSh7IG5hbWU6IGlkLCBvd25lcjogdGhpcyB9LCBleGVjdXRvck9yVmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXNrID0gSkZhY3RvcnlQcm9taXNlLnJlc29sdmUoeyBuYW1lOiBpZCwgb3duZXI6IHRoaXMgfSwgZXhlY3V0b3JPclZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhc2suJHBoYXNlUmVtb3ZlID0gVHJhaXRTZXJ2aWNlLmdldENvbnRleHR1YWxSZW1vdmVQaGFzZSh0aGlzKTtcblxuICAgICAgICBsZXQgbWV0cmljcztcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgbWV0cmljcyA9IG5ldyBKRmFjdG9yeVRpbWVUcmFjZSgpO1xuICAgICAgICAgICAgdGFzay4kdGFza01ldHJpY3MgPSB7ICRkZXZfdGltaW5nOiBtZXRyaWNzIH07XG4gICAgICAgIH1cblxuICAgICAgICB0YXNrLiRjaGFpbi50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgICAgICBtZXRyaWNzLmVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuJC50YXNrcy5nZXQoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kdGFza1JlbW92ZShpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJC50YXNrcy5zZXQoaWQsIHRhc2spO1xuICAgICAgICByZXR1cm4gdGFza1xuICAgIH1cblxuICAgICR0YXNrUmVtb3ZlKGlkLCByZWFzb24pIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkdGFza1JlbW92ZShpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIHJlYXNvbiAmJiBKRmFjdG9yeUV4cGVjdChcIiR0YXNrUmVtb3ZlKHJlYXNvbilcIiwgcmVhc29uKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC50YXNrcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX01JU1NJTkcoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiJHRhc2tSZW1vdmUoaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgICAgICAgICAgIGlmICh0aGlzLiQudGFza3MuZ2V0KGlkKS5fY2FsbGVkKSB7ZGVidWdnZXJ9XG4gICAgICAgICAgICB0aGlzLiQudGFza3MuZ2V0KGlkKS5fY2FsbGVkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy4kLnRhc2tzLmdldChpZCk7XG4gICAgICAgIC8vIGRlbGV0aW5nIGJlZm9yZSBjaGFpbkFib3J0KCkgdG8gcHJldmVudCByZW1vdmUoKSByZWNhbGxcbiAgICAgICAgdGhpcy4kLnRhc2tzLmRlbGV0ZShpZCk7XG4gICAgICAgIGVudHJ5LiRjaGFpbkFib3J0KHJlYXNvbiB8fCBcIiR0YXNrUmVtb3ZlKClcIik7XG4gICAgfVxuXG4gICAgJHRhc2tSZW1vdmVBbGwocmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkdGFza1JlbW92ZUFsbChyZW1vdmVQaGFzZSlcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGFza3MgPSB0aGlzLiQudGFza3M7XG4gICAgICAgIGlmICh0YXNrcy5zaXplKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHRhc2tdIG9mIHRhc2tzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2suJHBoYXNlUmVtb3ZlID09PSByZW1vdmVQaGFzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR0YXNrUmVtb3ZlKGtleSwgXCIkdGFza1JlbW92ZUFsbChcIiArIHJlbW92ZVBoYXNlICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHRhc2tQcm9taXNlQWxsKGF1dG9Db21wbGV0ZSA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBwZW5kaW5nID0gW107XG4gICAgICAgIGlmICh0aGlzLiQudGFza3Muc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgdGFzayBvZiB0aGlzLiQudGFza3MudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXV0b0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmVzIHRoZSBjaGFpbiBhcyBzb29uIGFzIG5vIG1vcmUgcGVuZGluZyBwcm9taXNlIGluIHRoZSBjaGFpblxuICAgICAgICAgICAgICAgICAgICB0YXNrLiRjaGFpbi5jaGFpbkNvbmZpZy5jaGFpbkF1dG9Db21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHN0aWxsIHBlbmRpbmcgP1xuICAgICAgICAgICAgICAgIGlmICh0YXNrLiRjaGFpbi5pc1BlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKHRhc2suJGNoYWluKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGVuZGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBKRmFjdG9yeVByb21pc2VTeW5jLnJlc29sdmUoKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0IEV2ZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdEV2ZW50cyB7XG5cbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgYXNzaWduUHJpdmF0ZSh0aGlzLCBcImV2ZW50c1wiLCB7XG4gICAgICAgICAgICBjdXN0b206IG5ldyBKRmFjdG9yeUV2ZW50c01hbmFnZXIodGhpcyksXG4gICAgICAgICAgICBrZXJuZWw6IG5ldyBKRmFjdG9yeUV2ZW50c01hbmFnZXIodGhpcylcbiAgICAgICAgfSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuTk9ORSk7XG5cbiAgICAgICAgbGV0IGV2ZW50TWFuYWdlciA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5jdXN0b207XG5cbiAgICAgICAgLy8gaWYgKEpGQUNUT1JZX0RFVikgeyAvLyB2ZXJ5IHNsb3c7IHJlcXVpcmVzIG9wdGltaXphdGlvblxuICAgICAgICAvLyAgICAgLy8gcmVnaXN0cnkgYXJlIGF1dG8gdXBkYXRlZCBpbiBkZXYgbW9kZSAodW5vcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24pXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBsZXQgbGlzdGVuZXJVcGRhdGUgPSAoKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy4kLmxpc3RlbmVycyA9IGV2ZW50TWFuYWdlci5nZXREb21MaXN0ZW5lcnModGhpcy4kLmFib3V0LmZpbmdlcnByaW50KTtcbiAgICAgICAgLy8gICAgIH07XG4gICAgICAgIC8vICAgICBsZXQgb2JzZXJ2ZXJVcGRhdGUgPSAoKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy4kLm9ic2VydmVycyA9IGV2ZW50TWFuYWdlci5nZXRPYnNlcnZlcnMoKTtcbiAgICAgICAgLy8gICAgIH07XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBldmVudE1hbmFnZXIub25MaXN0ZW5lclVwZGF0ZSA9IGxpc3RlbmVyVXBkYXRlO1xuICAgICAgICAvLyAgICAgZXZlbnRNYW5hZ2VyLm9uT2JzZXJ2ZXJVcGRhdGUgPSBvYnNlcnZlclVwZGF0ZTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmVyVXBkYXRlKTtcbiAgICAgICAgLy8gICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBsaXN0ZW5lclVwZGF0ZSgpO1xuICAgICAgICAvLyAgICAgb2JzZXJ2ZXJVcGRhdGUoKTtcbiAgICAgICAgLy8gfSBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMuJCwge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGV2ZW50TWFuYWdlci5nZXREb21MaXN0ZW5lcnMuYmluZChldmVudE1hbmFnZXIsIHRoaXMuJC5hYm91dC5maW5nZXJwcmludCksXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9ic2VydmVyczoge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGV2ZW50TWFuYWdlci5nZXRPYnNlcnZlcnMuYmluZChldmVudE1hbmFnZXIpLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgICRvbigvKiBldmVudHMsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXIsIG9wdGlvbnMgKi8pIHtcbiAgICAgICAgdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmN1c3RvbS5vbiguLi5hcmd1bWVudHMpXG4gICAgfVxuXG4gICAgJG9mZigvKiBldmVudHMsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXIsIG9wdGlvbnMgKi8pIHtcbiAgICAgICAgdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmN1c3RvbS5vZmYoLi4uYXJndW1lbnRzKVxuICAgIH1cblxuICAgICR0cmlnZ2VyKC8qIGV2ZW50cywgdGFyZ2V0LCBkYXRhICovKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMuY3VzdG9tLnRyaWdnZXIoLi4uYXJndW1lbnRzKVxuICAgIH1cblxuICAgICR0cmlnZ2VyUGFyYWxsZWwoLyogZXZlbnRzLCB0YXJnZXQsIGRhdGEgKi8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5jdXN0b20udHJpZ2dlclBhcmFsbGVsKC4uLmFyZ3VtZW50cylcbiAgICB9XG5cbiAgICAkbm90aWZ5KGV2ZW50cywgZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kdHJpZ2dlcihldmVudHMsIGRhdGEpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMua2VybmVsLnRyaWdnZXIoZXZlbnRzLCBkYXRhKSlcbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgU3RhdGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIFRyYWl0U3RhdGUge1xuXG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGNvbnN0IHN0YXRlUm91dGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgY29uc3Qga2VybmVsID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmtlcm5lbDtcblxuICAgICAgICBhc3NpZ25Qcml2YXRlKHRoaXMsIHsgc3RhdGVzLCBzdGF0ZVJvdXRlcyB9LCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5SRUFET05MWSk7XG5cbiAgICAgICAgSkZhY3RvcnlPYmplY3QuYXNzaWduKHRoaXMuJCwgXCJzdGF0ZXNcIiwgbmV3IFByb3h5KHN0YXRlcywge1xuICAgICAgICAgICAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbCkgPT4gdGhpcy4kc3RhdGUoa2V5LCB2YWwpLFxuICAgICAgICAgICAgZ2V0OiAodGFyZ2V0LCBrZXkpID0+IHN0YXRlc1trZXldXG4gICAgICAgIH0pLCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5SRUFET05MWSk7XG5cbiAgICAgICAga2VybmVsLm9uKFwiYmVmb3JlU3RhdGVDaGFuZ2VcIiwgKGUsIGRhdGEpID0+IHtcbiAgICAgICAgICAgIGxldCBoO1xuICAgICAgICAgICAgaWYgKHN0YXRlUm91dGVzW2RhdGEua2V5XSAmJiBzdGF0ZVJvdXRlc1tkYXRhLmtleV0uYmVmb3JlXG4gICAgICAgICAgICAgICAgJiYgKGggPSBzdGF0ZVJvdXRlc1tkYXRhLmtleV0uYmVmb3JlKGRhdGEudmFsKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kbm90aWZ5KGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBrZXJuZWwub24oXCJhZnRlclN0YXRlQ2hhbmdlXCIsIChlLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBsZXQgaDtcbiAgICAgICAgICAgIGlmIChzdGF0ZVJvdXRlc1tkYXRhLmtleV0gJiYgc3RhdGVSb3V0ZXNbZGF0YS5rZXldLmFmdGVyXG4gICAgICAgICAgICAgICAgJiYgKGggPSBzdGF0ZVJvdXRlc1tkYXRhLmtleV0uYWZ0ZXIoZGF0YS52YWwpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRub3RpZnkoaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzdGF0ZShrZXksIHZhbCwgbm90aWZ5ID0gdHJ1ZSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRzdGF0ZShrZXkpXCIsIGtleSkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkc3RhdGUobm90aWZ5KVwiLCBub3RpZnkpLnR5cGVCb29sZWFuKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEpGYWN0b3J5UHJvbWlzZVN5bmMoYXN5bmMgcmVzb2x2ZSA9PiB7XG5cbiAgICAgICAgICAgIGxldCBzdGF0ZXMgPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5zdGF0ZXM7XG4gICAgICAgICAgICBsZXQgcHJldmlvdXNWYWwgPSBzdGF0ZXNba2V5XTtcbiAgICAgICAgICAgIGxldCBwZW5kaW5nO1xuXG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gc3RhdGVzKSB8fCBwcmV2aW91c1ZhbCAhPT0gdmFsKSB7XG5cbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gbm90aWZ5ICYmIHRoaXMuJG5vdGlmeShcImJlZm9yZVN0YXRlQ2hhbmdlXCIsIHsga2V5LCB2YWwsIHByZXZpb3VzVmFsIH0pO1xuICAgICAgICAgICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZyAmJiBKRmFjdG9yeUV4cGVjdChcImJlZm9yZVN0YXRlQ2hhbmdlIHJlc3VsdFwiLCBwZW5kaW5nKS50eXBlKEpGYWN0b3J5UHJvbWlzZVN5bmMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nICYmICFwZW5kaW5nLiRpc1NldHRsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzW2tleV0gPSBwZW5kaW5nO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwZW5kaW5nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RhdGVzW2tleV1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZXNba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gbm90aWZ5ICYmIHRoaXMuJG5vdGlmeShcImFmdGVyU3RhdGVDaGFuZ2VcIiwgeyBrZXksIHZhbCwgcHJldmlvdXNWYWwgfSk7XG4gICAgICAgICAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nICYmIEpGYWN0b3J5RXhwZWN0KFwiYWZ0ZXJTdGF0ZUNoYW5nZSByZXN1bHRcIiwgcGVuZGluZykudHlwZShKRmFjdG9yeVByb21pc2VTeW5jKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZy50aGVuKHJlc29sdmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0IFNlcnZpY2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRTZXJ2aWNlIHtcblxuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUgdGhpcy4kLnNlcnZpY2VcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIEpGYWN0b3J5T2JqZWN0LmFzc2lnbih0aGlzLiQsIFwic2VydmljZVwiLCBPYmplY3QuY3JlYXRlKG51bGwpLCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5SRUFET05MWSk7XG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlID0gVHJhaXRTZXJ2aWNlLlBIQVNFLk5PTkU7XG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlUXVldWUgPSBKRmFjdG9yeVByb21pc2UucmVzb2x2ZSh7IG5hbWU6IFwicGhhc2VRdWV1ZVwiIH0sIG51bGwpO1xuICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZVRhc2sgPSBudWxsO1xuICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZU1hcCA9IHtcbiAgICAgICAgICAgIGluc3RhbGw6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIGVuYWJsZTogbmV3IFNldCgpLFxuICAgICAgICAgICAgZGlzYWJsZTogbmV3IFNldCgpLFxuICAgICAgICAgICAgdW5pbnN0YWxsOiBuZXcgU2V0KClcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTZXQgaW5pdGlhbCBzdGF0ZXMgYnV0IGRvbid0IHRyaWdnZXIgZXZlbnRzXG4gICAgICAgIHRoaXMuJHN0YXRlKFwiaW5zdGFsbGVkXCIsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuJHN0YXRlKFwiZW5hYmxlZFwiLCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgZXZlbnRzIHRvIG5vdGlmeSBiZWZvcmUvYWZ0ZXIgYSBzdGF0ZSBjaGFuZ2VcbiAgICAgICAgLy8gc3RhdGVOYW1lIDoge2JlZm9yZSA6IGV2ZW50TmFtZSwgYWZ0ZXIgOiBldmVudE5hbWV9XG5cbiAgICAgICAgLy8gU1BFQ1xuICAgICAgICAvLyBzdGF0IGlzIGNoYW5nZWQgYmVmb3JlIGNhbGxpbmcgaGFuZGxlcnMgZXZlbiBpZiBwZW5kaW5nXG5cbiAgICAgICAgYXNzaWduUHJpdmF0ZU1lbWJlcih0aGlzLCBcInN0YXRlUm91dGVzXCIsIHtcbiAgICAgICAgICAgIGluc3RhbGxlZDogeyBhZnRlcjogdmFsID0+IHZhbCA/IFwiaW5zdGFsbFwiIDogXCJ1bmluc3RhbGxcIiB9LFxuICAgICAgICAgICAgZW5hYmxlZDogeyBhZnRlcjogdmFsID0+IHZhbCA/IFwiZW5hYmxlXCIgIDogXCJkaXNhYmxlXCIgfVxuICAgICAgICB9LCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5OT05FKTtcblxuICAgICAgICBsZXQgY3VzdG9tID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmN1c3RvbTtcbiAgICAgICAgbGV0IGtlcm5lbCA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWw7XG5cbiAgICAgICAgLy8gQXR0YWNoIGEgcmVtb3ZlIHBoYXNlIG5hbWVzcGFjZXMgb24gZXZlbnRzXG4gICAgICAgIGN1c3RvbS5hZmZpbGlhdGVBZGRSdWxlKChjb250ZXh0LCBwYXJzZWRFdmVudCwgbmFtZXNwYWNlcywgb3B0aW9ucykgPT5cbiAgICAgICAgICAgIFRyYWl0U2VydmljZS5zZXRFdmVudE5hbWVzcGFjZVJlbW92ZVBoYXNlKHRoaXMsIHBhcnNlZEV2ZW50LCBvcHRpb25zKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIEF0dGFjaCBtb2R1bGUgZXZlbnQgaGFuZGxlcnNcblxuICAgICAgICAvKiogQG5hbWUgSkZhY3RvcnlDb3JlT2JqZWN0I29uSW5zdGFsbCAqL1xuICAgICAgICAvKiogQG5hbWUgSkZhY3RvcnlDb3JlT2JqZWN0I29uRW5hYmxlICovXG4gICAgICAgIC8qKiBAbmFtZSBKRmFjdG9yeUNvcmVPYmplY3Qjb25EaXNhYmxlICovXG4gICAgICAgIC8qKiBAbmFtZSBKRmFjdG9yeUNvcmVPYmplY3Qjb25Vbmluc3RhbGwgKi9cblxuICAgICAgICBsZXQgcGhhc2VSZXNvbHZlID0gaGFuZGxlciA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy4kLnRhc2tzLnNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiR0YXNrUmVtb3ZlQWxsKHRoaXMuJC5zZXJ2aWNlLnBoYXNlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHByb21pc2UgPSBKRmFjdG9yeVByb21pc2VTeW5jLnJlc29sdmUoKTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gaGFuZGxlci5jYWxsKHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLiR0YXNrUHJvbWlzZUFsbCh0cnVlKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlXG4gICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISgvKnRoaXMuJC5zZXJ2aWNlLmlzUGhhc2VLaWxsaW5nICYmKi8gZSBpbnN0YW5jZW9mIGpGYWN0b3J5RXJyb3IuUFJPTUlTRV9FWFBJUkVEKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kbG9nRXJyKFwidW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uIGluIFwiICsgdGhpcy4kLnNlcnZpY2UucGhhc2UgKyBcIjtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5lIGluc3RhbmNlb2YgSkZhY3RvcnlFcnJvciA/IGUgOiBbZV0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBrZXJuZWwub24oXCJpbnN0YWxsXCIsICgpID0+IHBoYXNlUmVzb2x2ZSh0aGlzLm9uSW5zdGFsbCkpO1xuICAgICAgICBrZXJuZWwub24oXCJlbmFibGVcIiwgKCkgPT4gcGhhc2VSZXNvbHZlKHRoaXMub25FbmFibGUpKTtcbiAgICAgICAga2VybmVsLm9uKFwiZGlzYWJsZVwiLCAoKSA9PiBwaGFzZVJlc29sdmUodGhpcy5vbkRpc2FibGUpKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHBoYXNlUmVzb2x2ZSh0aGlzLm9uVW5pbnN0YWxsKSk7XG5cbiAgICAgICAga2VybmVsLm9uKFwiZGlzYWJsZVwiLCAgICgpID0+IHRoaXMuJG9mZih7IHJlbW92YWw6IFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFIH0pKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHRoaXMuJG9mZih7IHJlbW92YWw6IFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwgfSkpO1xuICAgIH1cblxuICAgICRpbnN0YWxsKGVuYWJsZSkge1xuICAgICAgICBsZXQgcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgcCA9IG5ldyBKRmFjdG9yeVByb21pc2UoXG4gICAgICAgICAgICB7IG5hbWU6IFwiaW5zdGFsbFwiLCBjb25maWc6IHsgY2hhaW5BdXRvQ29tcGxldGU6IHRydWUgfSB9LFxuICAgICAgICAgICAgX3Jlc29sdmUgPT4gcmVzb2x2ZSA9IF9yZXNvbHZlKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy4kLnN0YXRlcy5pbnN0YWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuSU5TVEFMTDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0YXRlKFwiaW5zdGFsbGVkXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VNYXAuaW5zdGFsbC5hZGQocCk7XG4gICAgICAgIHAuJGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmluc3RhbGwuZGVsZXRlKHApO1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuTk9ORVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZVF1ZXVlID0gdGhpcy4kLnNlcnZpY2UucGhhc2VRdWV1ZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlVGFzayA9IHA7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm4gcC4kY2hhaW5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVnaXN0ZXIgdGhlIGVuYWJsZVxuICAgICAgICBpZiAoZW5hYmxlKSB7cmV0dXJuIHRoaXMuJGVuYWJsZSgpfVxuICAgICAgICByZXR1cm4gcFxuICAgIH1cblxuICAgICRlbmFibGUoKSB7XG4gICAgICAgIGxldCByZXNvbHZlO1xuICAgICAgICBjb25zdCBwID0gbmV3IEpGYWN0b3J5UHJvbWlzZShcbiAgICAgICAgICAgIHsgbmFtZTogXCJlbmFibGVcIiwgY29uZmlnOiB7IGNoYWluQXV0b0NvbXBsZXRlOiB0cnVlIH0gfSxcbiAgICAgICAgICAgIF9yZXNvbHZlID0+IHJlc29sdmUgPSBfcmVzb2x2ZSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kLnN0YXRlcy5pbnN0YWxsZWQgJiYgIXRoaXMuJC5zdGF0ZXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5FTkFCTEU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdGF0ZShcImVuYWJsZWRcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZU1hcC5lbmFibGUuYWRkKHApO1xuICAgICAgICBwLiRjaGFpbi50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlVGFzayA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZU1hcC5lbmFibGUuZGVsZXRlKHApO1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuTk9ORVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZVF1ZXVlID0gdGhpcy4kLnNlcnZpY2UucGhhc2VRdWV1ZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlVGFzayA9IHA7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm4gcC4kY2hhaW5cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwXG4gICAgfVxuXG4gICAgJGRpc2FibGUoKSB7XG4gICAgICAgIGxldCByZXNvbHZlO1xuICAgICAgICBjb25zdCBwID0gbmV3IEpGYWN0b3J5UHJvbWlzZShcbiAgICAgICAgICAgIHsgbmFtZTogXCJkaXNhYmxlXCIsIGNvbmZpZzogeyBjaGFpbkF1dG9Db21wbGV0ZTogdHJ1ZSB9IH0sXG4gICAgICAgICAgICBfcmVzb2x2ZSA9PiByZXNvbHZlID0gX3Jlc29sdmUpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJC5zdGF0ZXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RhdGUoXCJlbmFibGVkXCIsIGZhbHNlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmRpc2FibGUuYWRkKHApO1xuICAgICAgICBwLiRjaGFpbi50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlVGFzayA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZU1hcC5kaXNhYmxlLmRlbGV0ZShwKTtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlID0gVHJhaXRTZXJ2aWNlLlBIQVNFLk5PTkVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZXhwaXJlcyBhbGwgc3RhY2tlZCBlbmFibGVcbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiB0aGlzLiQuc2VydmljZS5waGFzZU1hcC5lbmFibGUuZW50cmllcygpKSB7XG4gICAgICAgICAgICBpZiAodmFsID09PSB0aGlzLiQuc2VydmljZS5waGFzZVRhc2spIHtcbiAgICAgICAgICAgICAgICBUcmFpdFNlcnZpY2UucGhhc2VLaWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsLiRjaGFpbkFib3J0KCk7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZU1hcC5lbmFibGUuZGVsZXRlKGtleSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlUXVldWUgPSB0aGlzLiQuc2VydmljZS5waGFzZVF1ZXVlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gcDtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBwLiRjaGFpblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBcbiAgICB9XG5cbiAgICAkdW5pbnN0YWxsKCkge1xuICAgICAgICBsZXQgcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgcCA9IG5ldyBKRmFjdG9yeVByb21pc2UoXG4gICAgICAgICAgICB7IG5hbWU6IFwidW5pbnN0YWxsXCIsIGNvbmZpZzogeyBjaGFpbkF1dG9Db21wbGV0ZTogdHJ1ZSB9IH0sXG4gICAgICAgICAgICBfcmVzb2x2ZSA9PiByZXNvbHZlID0gX3Jlc29sdmUpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJC5zdGF0ZXMuaW5zdGFsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlID0gVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0YXRlKFwiaW5zdGFsbGVkXCIsIGZhbHNlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLnVuaW5zdGFsbC5hZGQocCk7XG4gICAgICAgIHAuJGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLnVuaW5zdGFsbC5kZWxldGUocCk7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5OT05FXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGV4cGlyZXMgYWxsIHN0YWNrZWQgaW5zdGFsbFxuICAgICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmluc3RhbGwuZW50cmllcygpKSB7XG4gICAgICAgICAgICBpZiAodmFsID09PSB0aGlzLiQuc2VydmljZS5waGFzZVRhc2spIHtcbiAgICAgICAgICAgICAgICBUcmFpdFNlcnZpY2UucGhhc2VLaWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsLiRjaGFpbkFib3J0KCk7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZU1hcC5pbnN0YWxsLmRlbGV0ZShrZXkpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBxdWV1ZSBkaXNhYmxlIGJlZm9yZSB1bmluc3RhbGxcbiAgICAgICAgdGhpcy4kZGlzYWJsZSgpO1xuXG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlUXVldWUgPSB0aGlzLiQuc2VydmljZS5waGFzZVF1ZXVlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gcDtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBwLiRjaGFpblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBcbiAgICB9XG5cbiAgICBzdGF0aWMgcGhhc2VLaWxsKGNvbXBvbmVudCkge1xuICAgICAgICAvLyBjb21wb25lbnQuJC5zZXJ2aWNlLmlzUGhhc2VLaWxsaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNvbXBvbmVudC4kLnRhc2tzLnNpemUpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC4kdGFza1JlbW92ZUFsbChUcmFpdFNlcnZpY2UuZ2V0Q29udGV4dHVhbFJlbW92ZVBoYXNlKGNvbXBvbmVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbXBvbmVudC4kLnNlcnZpY2UucGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuTk9ORTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Q29udGV4dHVhbFJlbW92ZVBoYXNlKGpGYWN0b3J5Q29yZU9iamVjdCkge1xuICAgICAgICByZXR1cm4gVHJhaXRTZXJ2aWNlLlBIQVNFX1JFVkVSVFtqRmFjdG9yeUNvcmVPYmplY3QuJC5zZXJ2aWNlLnBoYXNlXVxuICAgIH1cblxuICAgIHN0YXRpYyBzZXRFdmVudE5hbWVzcGFjZVJlbW92ZVBoYXNlKGpGYWN0b3J5Q29yZU9iamVjdCwgcGFyc2VkRXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGN1clJlbW92ZVBoYXNlID0gcGFyc2VkRXZlbnQuaGFzTmFtZXNwYWNlKFRyYWl0U2VydmljZS5QSEFTRVMpO1xuICAgICAgICBsZXQgbmV3UmVtb3ZlUGhhc2UgPSBvcHRpb25zICYmIG9wdGlvbnMucmVtb3ZhbDtcblxuICAgICAgICBpZiAoIW5ld1JlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICBuZXdSZW1vdmVQaGFzZSA9IFRyYWl0U2VydmljZS5nZXRDb250ZXh0dWFsUmVtb3ZlUGhhc2UoakZhY3RvcnlDb3JlT2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSA6IG9uKFwidW5pbnN0YWxsXCIpIHdpdGggcmVtb3ZhbCA9IERJU0FCTEUgKHRoZSBkZWZhdWx0IHZhbHVlKVxuICAgICAgICAvLyA9PiBkaXNhYmxlKCkgaXMgYWx3YXlzIGNhbGxlZCBiZWZvcmUgdW5pbnN0YWxsKCkgY2F1c2luZyB0aGUgZXZlbnQgdG8gYmUgcmVtb3ZlZCB0b28gZWFybHlcbiAgICAgICAgaWYgKHBhcnNlZEV2ZW50LmV2ZW50ID09PSBcInVuaW5zdGFsbFwiICYmIG5ld1JlbW92ZVBoYXNlID09PSBUcmFpdFNlcnZpY2UuUEhBU0UuRElTQUJMRSkge1xuICAgICAgICAgICAgbmV3UmVtb3ZlUGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuVU5JTlNUQUxMXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VyUmVtb3ZlUGhhc2UgIT09IG5ld1JlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICBwYXJzZWRFdmVudC5kZWxldGVOYW1lc3BhY2UoY3VyUmVtb3ZlUGhhc2UpO1xuICAgICAgICAgICAgcGFyc2VkRXZlbnQuYWRkTmFtZXNwYWNlKG5ld1JlbW92ZVBoYXNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZEV2ZW50LmFkZE5hbWVzcGFjZShuZXdSZW1vdmVQaGFzZSk7XG4gICAgfVxufVxuXG5UcmFpdFNlcnZpY2UuUEhBU0UgPSB7XG4gICAgTk9ORTogXCJQSEFTRV9OT05FXCIsXG4gICAgSU5TVEFMTDogXCJQSEFTRV9JTlNUQUxMXCIsXG4gICAgRU5BQkxFOiBcIlBIQVNFX0VOQUJMRVwiLFxuICAgIERJU0FCTEU6IFwiUEhBU0VfRElTQUJMRVwiLFxuICAgIFVOSU5TVEFMTDogXCJQSEFTRV9VTklOU1RBTExcIlxufTtcblxuVHJhaXRTZXJ2aWNlLlBIQVNFX1JFVkVSVCA9IHtcbiAgICBbVHJhaXRTZXJ2aWNlLlBIQVNFLklOU1RBTExdOiBUcmFpdFNlcnZpY2UuUEhBU0UuVU5JTlNUQUxMLFxuICAgIFtUcmFpdFNlcnZpY2UuUEhBU0UuVU5JTlNUQUxMXTogVHJhaXRTZXJ2aWNlLlBIQVNFLklOU1RBTEwsXG4gICAgW1RyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFXTogVHJhaXRTZXJ2aWNlLlBIQVNFLkVOQUJMRSxcbiAgICBbVHJhaXRTZXJ2aWNlLlBIQVNFLkVOQUJMRV06IFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFLFxuICAgIFtUcmFpdFNlcnZpY2UuUEhBU0UuTk9ORV06IFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFXG59O1xuXG5UcmFpdFNlcnZpY2UuUEhBU0VTID0gT2JqZWN0LnZhbHVlcyhUcmFpdFNlcnZpY2UuUEhBU0UpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduUHJpdmF0ZShzY29wZSwgcHJvcGVydHksIHZhbHVlLCBkZXNjcmlwdG9yKSB7XG4gICAgSkZhY3RvcnlPYmplY3QuYXNzaWduKHNjb3BlLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXSwgcHJvcGVydHksIHZhbHVlLCBkZXNjcmlwdG9yKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduUHJpdmF0ZU1lbWJlcihzY29wZSwgcHJvcGVydHksIHZhbHVlLCBkZXNjcmlwdG9yKSB7XG4gICAgSkZhY3RvcnlPYmplY3QuYXNzaWduKHNjb3BlLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXVtwcm9wZXJ0eV0sIHZhbHVlLCBkZXNjcmlwdG9yKVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuakZhY3RvcnkuUEhBU0UgPSBKRmFjdG9yeU9iamVjdC5kaXNpbmhlcml0KFRyYWl0U2VydmljZS5QSEFTRSk7XG5cbmpGYWN0b3J5LlRyYWl0Q29yZSA9IFRyYWl0Q29yZTtcbmpGYWN0b3J5LlRyYWl0QWJvdXQgPSBUcmFpdEFib3V0O1xuakZhY3RvcnkuVHJhaXRMb2cgPSBUcmFpdExvZztcbmpGYWN0b3J5LlRyYWl0RXZlbnRzID0gVHJhaXRFdmVudHM7XG5qRmFjdG9yeS5UcmFpdFN0YXRlID0gVHJhaXRTdGF0ZTtcbmpGYWN0b3J5LlRyYWl0U2VydmljZSA9IFRyYWl0U2VydmljZTtcbmpGYWN0b3J5LlRyYWl0VGFzayA9IFRyYWl0VGFzazsiLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0Q29tcG9uZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0IHsgakZhY3RvcnkgfSBmcm9tIFwiLi9qRmFjdG9yeVwiO1xuaW1wb3J0IHsgSkZBQ1RPUllfREVWIH0gZnJvbSBcIi4vakZhY3RvcnktZW52XCI7XG5pbXBvcnQgeyBqRmFjdG9yeUVycm9yIH0gZnJvbSBcIi4vSkZhY3RvcnlFcnJvclwiO1xuaW1wb3J0IHsgSkZhY3RvcnlFeHBlY3QgfSBmcm9tIFwiLi9KRmFjdG9yeUV4cGVjdFwiO1xuaW1wb3J0IHsgVHJhaXRDb3JlLCBUcmFpdFNlcnZpY2UgfSBmcm9tIFwiLi9UcmFpdHNDb3JlXCI7XG5pbXBvcnQgeyBKRmFjdG9yeUZldGNoIH0gZnJvbSBcIi4vSkZhY3RvcnlGZXRjaFwiO1xuaW1wb3J0IHsgSkZhY3RvcnlQcm9taXNlIH0gZnJvbSBcIi4vSkZhY3RvcnlQcm9taXNlXCI7XG5pbXBvcnQgeyBKRmFjdG9yeU9iamVjdCB9IGZyb20gXCIuL0pGYWN0b3J5T2JqZWN0XCI7XG5pbXBvcnQgeyBqRmFjdG9yeVRyYWNlIH0gZnJvbSBcIi4vSkZhY3RvcnlUcmFjZVwiO1xuaW1wb3J0IHsgaGVscGVyX2lzUGxhaW5PYmplY3QsIGhlbHBlcl91cmxfYWJzLCBqUXVlcnkgfSBmcm9tIFwiLi9qRmFjdG9yeS1oZWxwZXJzXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgRmV0Y2hcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRGZXRjaCB7XG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IGtlcm5lbCA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWw7XG4gICAgICAgIGtlcm5lbC5vbihcImRpc2FibGVcIiwgKCkgPT4gdGhpcy4kZmV0Y2hSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUpKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHRoaXMuJGZldGNoUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcInJlcXVlc3RzXCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJGZldGNoKGlkLCB1cmwsIGZldGNoT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlkID0gdGhpcy4kLnJlcXVlc3RzLiRpZF9yZXNvbHZlKGlkKTtcblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRmZXRjaChpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJGZldGNoKHVybClcIiwgdXJsKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRmZXRjaChmZXRjaE9wdGlvbnMpXCIsIGZldGNoT3B0aW9ucykudHlwZVBsYWluT2JqZWN0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy4kLnJlcXVlc3RzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5LRVlfRFVQTElDQVRFRCh7IHRhcmdldDogXCIkZmV0Y2goaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHByb21pc2UgPSBuZXcgSkZhY3RvcnlGZXRjaCh7XG4gICAgICAgICAgICBuYW1lOiBpZCxcbiAgICAgICAgICAgIHRyYWNlU291cmNlOiBqRmFjdG9yeVRyYWNlLnRyYWNlci5jYXB0dXJlVHJhY2VTb3VyY2UoXCIkZmV0Y2hcIiksXG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICBjaGFpbkF1dG9Db21wbGV0ZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB1cmwsIGZldGNoT3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy4kLnJlcXVlc3RzLiRyZWdpc3RlckFzeW5jKGlkLCAnJGZldGNoKFwiJyArIGlkICsgJ1wiKScsIHByb21pc2UpO1xuXG4gICAgICAgIHByb21pc2UuJGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuJC5yZXF1ZXN0cy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZmV0Y2hSZW1vdmUoaWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgICRmZXRjaFRleHQoaWQsIHVybCwgZmV0Y2hPcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGZldGNoKGlkLCB1cmwsIHsgLi4uZmV0Y2hPcHRpb25zLCAkdHlwZVRleHQ6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgJGZldGNoSlNPTihpZCwgdXJsLCBmZXRjaE9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kZmV0Y2goaWQsIHVybCwgeyAuLi5mZXRjaE9wdGlvbnMsICR0eXBlSlNPTjogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAkZmV0Y2hSZW1vdmUoaWQsIHJlYXNvbikge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRmZXRjaFJlbW92ZShpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIHJlYXNvbiAmJiBKRmFjdG9yeUV4cGVjdChcIiRmZXRjaFJlbW92ZShyZWFzb24pXCIsIHJlYXNvbikudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLiQucmVxdWVzdHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiRmZXRjaFJlbW92ZShpZClcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlcixicmFjZS1zdHlsZVxuICAgICAgICAgICAgaWYgKHRoaXMuJC5yZXF1ZXN0cy5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkKSB7ZGVidWdnZXJ9XG4gICAgICAgICAgICB0aGlzLiQucmVxdWVzdHMuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMuJC5yZXF1ZXN0cy5nZXQoaWQpO1xuICAgICAgICB0aGlzLiQucmVxdWVzdHMuZGVsZXRlKGlkKTtcbiAgICAgICAgZW50cnkuJGNoYWluQWJvcnQocmVhc29uIHx8IFwiJGZldGNoUmVtb3ZlKClcIik7XG4gICAgfVxuXG4gICAgJGZldGNoUmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC5yZXF1ZXN0cztcbiAgICAgICAgaWYgKHN1YnMuc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdWJdIG9mIHN1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRwaGFzZVJlbW92ZSA9PT0gcmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZmV0Y2hSZW1vdmUoa2V5LCBcIiRmZXRjaFJlbW92ZUFsbChcIiArIHJlbW92ZVBoYXNlICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0IFRpbWVvdXRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRUaW1lb3V0IHtcbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3Qga2VybmVsID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmtlcm5lbDtcbiAgICAgICAga2VybmVsLm9uKFwiZGlzYWJsZVwiLCAoKSA9PiB0aGlzLiR0aW1lb3V0UmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFKSk7XG4gICAgICAgIGtlcm5lbC5vbihcInVuaW5zdGFsbFwiLCAoKSA9PiB0aGlzLiR0aW1lb3V0UmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcInRpbWVvdXRzXCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJHRpbWVvdXQoaWQsIGRlbGF5LCBoYW5kbGVyID0gbnVsbCwgLi4uYXJncykge1xuICAgICAgICAvLyBpZFxuICAgICAgICAvLyBpZCwgZGVsYXlcbiAgICAgICAgLy8gaWQsIGRlbGF5LCBoYW5kbGVyLCAuLi5hcmdzXG5cbiAgICAgICAgaWQgPSB0aGlzLiQudGltZW91dHMuJGlkX3Jlc29sdmUoaWQpO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaWRcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiZGVsYXlcIiwgZGVsYXkpLnR5cGVOdW1iZXIoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaGFuZGxlclwiLCBoYW5kbGVyKS50eXBlKEZ1bmN0aW9uLCBudWxsKTtcbiAgICAgICAgICAgIGlmICh0aGlzLiQudGltZW91dHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiR0aW1lb3V0KGlkKVwiLCBnaXZlbjogaWQgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0aW1lcjtcbiAgICAgICAgbGV0IHByb21pc2UgPSBuZXcgSkZhY3RvcnlQcm9taXNlKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IGlkLFxuICAgICAgICAgICAgICAgIHRyYWNlU291cmNlOiBqRmFjdG9yeVRyYWNlLnRyYWNlci5jYXB0dXJlVHJhY2VTb3VyY2UoXCIkdGltZW91dFwiKSxcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5BdXRvQ29tcGxldGU6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9taXNlLiRpc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaGFuZGxlciA/IGhhbmRsZXIoLi4uYXJncykgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcHJvbWlzZS4kY2hhaW4uZGF0YS50aW1lciA9IHRpbWVyO1xuICAgICAgICB0aGlzLiQudGltZW91dHMuJHJlZ2lzdGVyQXN5bmMoaWQsICckdGltZW91dChcIicgKyBpZCArICdcIiknLCBwcm9taXNlKTtcblxuICAgICAgICBwcm9taXNlLiRjaGFpbi50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLiQudGltZW91dHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHRpbWVvdXRSZW1vdmUoaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICAkdGltZW91dFJlbW92ZShpZCwgcmVhc29uKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJHRpbWVvdXRSZW1vdmUoaWQpXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICByZWFzb24gJiYgSkZhY3RvcnlFeHBlY3QoXCIkdGltZW91dFJlbW92ZShyZWFzb24pXCIsIHJlYXNvbikudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLiQudGltZW91dHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiR0aW1lb3V0UmVtb3ZlKGlkKVwiLFxuICAgICAgICAgICAgICAgICAgICBnaXZlbjogaWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyLGJyYWNlLXN0eWxlXG4gICAgICAgICAgICBpZiAodGhpcy4kLnRpbWVvdXRzLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC50aW1lb3V0cy5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMuJC50aW1lb3V0cy5nZXQoaWQpO1xuICAgICAgICBjbGVhclRpbWVvdXQoZW50cnkuJGNoYWluLmRhdGEudGltZXIpO1xuICAgICAgICAvLyBkZWxldGluZyBiZWZvcmUgY2hhaW5BYm9ydCgpIHRvIHByZXZlbnQgcmVtb3ZlKCkgcmVjYWxsXG4gICAgICAgIHRoaXMuJC50aW1lb3V0cy5kZWxldGUoaWQpO1xuICAgICAgICBlbnRyeS4kY2hhaW5BYm9ydChyZWFzb24gfHwgXCIkdGltZW91dFJlbW92ZSgpXCIpO1xuICAgIH1cblxuICAgICR0aW1lb3V0UmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN1YnMgPSB0aGlzLiQudGltZW91dHM7XG4gICAgICAgIGlmIChzdWJzLnNpemUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgc3ViXSBvZiBzdWJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi4kcGhhc2VSZW1vdmUgPT09IHJlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHRpbWVvdXRSZW1vdmUoa2V5LCBcIiR0aW1lb3V0UmVtb3ZlQWxsKClcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgSW50ZXJ2YWxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRJbnRlcnZhbCB7XG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IGtlcm5lbCA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWw7XG4gICAgICAgIGtlcm5lbC5vbihcImRpc2FibGVcIiwgKCkgPT4gdGhpcy4kaW50ZXJ2YWxSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUpKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHRoaXMuJGludGVydmFsUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcInRpbWVpbnRzXCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJGludGVydmFsKGlkLCBkZWxheSwgaGFuZGxlciwgLi4uYXJncykge1xuICAgICAgICBpZCA9IHRoaXMuJC50aW1laW50cy4kaWRfcmVzb2x2ZShpZCk7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaWRcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaGFuZGxlclwiLCBoYW5kbGVyKS50eXBlRnVuY3Rpb24oKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiZGVsYXlcIiwgZGVsYXkpLnR5cGVOdW1iZXIoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLiQudGltZWludHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiRpbnRlcnZhbChpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpbWVyID0gc2V0SW50ZXJ2YWwoaGFuZGxlciwgZGVsYXksIC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLiQudGltZWludHMuJHJlZ2lzdGVyU3luYyhpZCwgdGltZXIpXG4gICAgfVxuXG4gICAgJGludGVydmFsUmVtb3ZlKGlkKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJGludGVydmFsUmVtb3ZlKGlkKVwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLiQudGltZWludHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiRpbnRlcnZhbFJlbW92ZShpZClcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlcixicmFjZS1zdHlsZVxuICAgICAgICAgICAgaWYgKHRoaXMuJC50aW1laW50cy5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkKSB7ZGVidWdnZXJ9XG4gICAgICAgICAgICB0aGlzLiQudGltZWludHMuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuJC50aW1laW50cy5nZXQoaWQpLiR2YWx1ZSk7XG4gICAgICAgIHRoaXMuJC50aW1laW50cy5kZWxldGUoaWQpXG4gICAgfVxuXG4gICAgJGludGVydmFsUmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC50aW1laW50cztcbiAgICAgICAgaWYgKHN1YnMuc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdWJdIG9mIHN1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRwaGFzZVJlbW92ZSA9PT0gcmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kaW50ZXJ2YWxSZW1vdmUoa2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUcmFpdCBNdXRhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRNdXRhdGlvbiB7XG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IGtlcm5lbCA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWw7XG4gICAgICAgIGtlcm5lbC5vbihcImRpc2FibGVcIiwgKCkgPT4gdGhpcy4kbXV0YXRpb25SZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUpKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHRoaXMuJG11dGF0aW9uUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcIm11dGF0aW9uc1wiLCB0aGlzLiQuY3JlYXRlU3ViTWFwKCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLkVOVU1FUkFCTEUpO1xuICAgIH1cblxuICAgICRtdXRhdGlvbihpZCwgcGFyZW50LCBjb25maWcsIGhhbmRsZXIpIHtcbiAgICAgICAgaWQgPSB0aGlzLiQubXV0YXRpb25zLiRpZF9yZXNvbHZlKGlkKTtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJpZFwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJwYXJlbnRcIiwgcGFyZW50KS50eXBlKEhUTUxFbGVtZW50LCBEb2N1bWVudCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImNvbmZpZ1wiLCBjb25maWcpLnR5cGVQbGFpbk9iamVjdCgpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJoYW5kbGVyXCIsIGhhbmRsZXIpLnR5cGVGdW5jdGlvbigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuJC5tdXRhdGlvbnMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiRtdXRhdGlvbihpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoaGFuZGxlcik7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUocGFyZW50LCBjb25maWcpO1xuICAgICAgICB0aGlzLiQubXV0YXRpb25zLiRyZWdpc3RlclN5bmMoaWQsIG9ic2VydmVyKTtcbiAgICB9XG5cbiAgICAkbXV0YXRpb25SZW1vdmUoaWQsIHJlYXNvbikge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRtdXRhdGlvblJlbW92ZShpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIHJlYXNvbiAmJiBKRmFjdG9yeUV4cGVjdChcIiRtdXRhdGlvblJlbW92ZShyZWFzb24pXCIsIHJlYXNvbikudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLiQubXV0YXRpb25zLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5LRVlfTUlTU0lORyh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIkbXV0YXRpb25SZW1vdmUoaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXIsYnJhY2Utc3R5bGVcbiAgICAgICAgICAgIGlmICh0aGlzLiQubXV0YXRpb25zLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC5tdXRhdGlvbnMuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiQubXV0YXRpb25zLmdldChpZCkuJHZhbHVlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy4kLm11dGF0aW9ucy5kZWxldGUoaWQpXG4gICAgfVxuXG4gICAgJG11dGF0aW9uUmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC5tdXRhdGlvbnM7XG4gICAgICAgIGlmIChzdWJzLnNpemUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgc3ViXSBvZiBzdWJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi4kcGhhc2VSZW1vdmUgPT09IHJlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJG11dGF0aW9uUmVtb3ZlKGtleSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgRE9NXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIFRyYWl0RE9NIHtcbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3Qga2VybmVsID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmtlcm5lbDtcbiAgICAgICAga2VybmVsLm9uKFwiZGlzYWJsZVwiLCAoKSA9PiB0aGlzLiRkb21SZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUpKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHRoaXMuJGRvbVJlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuVU5JTlNUQUxMKSk7XG4gICAgICAgIHRoaXMuJC5hc3NpZ24oXCJkb21cIiwgdGhpcy4kLmNyZWF0ZVN1Yk1hcCgpLCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5FTlVNRVJBQkxFKTtcbiAgICB9XG5cbiAgICAkZG9tKGlkLCBqUXVlcnlBcmd1bWVudCwgYXBwZW5kVG8pIHtcbiAgICAgICAgaWQgPSB0aGlzLiQuZG9tLiRpZF9yZXNvbHZlKGlkKTtcblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImlkXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImpRdWVyeUFyZ3VtZW50XCIsIGpRdWVyeUFyZ3VtZW50KS50eXBlKFN0cmluZywgT2JqZWN0KTtcbiAgICAgICAgICAgIGFwcGVuZFRvICYmIEpGYWN0b3J5RXhwZWN0KFwiYXBwZW5kVG9cIiwgYXBwZW5kVG8pLnR5cGUoU3RyaW5nLCBPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRvbUlkO1xuICAgICAgICBpZiAoaWRbMF0gPT09IFwiI1wiKSB7XG4gICAgICAgICAgICBpZCA9IGlkLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIGRvbUlkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFViAmJiB0aGlzLiQuZG9tLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiRkb20oaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRvbSA9IGpRdWVyeShqUXVlcnlBcmd1bWVudCk7XG5cbiAgICAgICAgaWYgKGRvbVswXS50YWdOYW1lID09PSBcIlRFTVBMQVRFXCIpIHtcbiAgICAgICAgICAgIGRvbSA9IGpRdWVyeShqUXVlcnkoZG9tWzBdKS5odG1sKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbUlkKSB7XG4gICAgICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvbVswXS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiJGRvbSgjaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlbjogZG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBcImNhbm5vdCBzZXQgdGhlIGRvbSBpZDogdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIHNlbGVjdGlvbiBpc24ndCBhbiBFTEVNRU5UX05PREVcIlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbVswXS5pZCA9IGlkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgICAgIGRvbS5hcHBlbmRUbyhhcHBlbmRUbylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiQuZG9tLiRyZWdpc3RlclN5bmMoaWQsIGRvbSkuJHZhbHVlO1xuICAgIH1cblxuICAgICRkb21GZXRjaChpZCwgdXJsLCBmZXRjaE9wdGlvbnMsIGFwcGVuZFRvKSB7XG4gICAgICAgIGlmIChmZXRjaE9wdGlvbnMgJiYgIWhlbHBlcl9pc1BsYWluT2JqZWN0KGZldGNoT3B0aW9ucykpIHtcbiAgICAgICAgICAgIFtmZXRjaE9wdGlvbnMsIGFwcGVuZFRvXSA9IFt7fSwgZmV0Y2hPcHRpb25zXVxuICAgICAgICB9XG5cbiAgICAgICAgaWQgPSB0aGlzLiQuZG9tLiRpZF9yZXNvbHZlKGlkKTtcblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImlkXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcInVybFwiLCB1cmwpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIGFwcGVuZFRvICYmIEpGYWN0b3J5RXhwZWN0KFwiYXBwZW5kVG9cIiwgYXBwZW5kVG8pLnR5cGUoU3RyaW5nLCBPYmplY3QpO1xuICAgICAgICAgICAgZmV0Y2hPcHRpb25zICYmIEpGYWN0b3J5RXhwZWN0KFwiZmV0Y2hPcHRpb25zXCIsIGZldGNoT3B0aW9ucykudHlwZShPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRvbUlkO1xuICAgICAgICBpZiAoaWRbMF0gPT09IFwiI1wiKSB7XG4gICAgICAgICAgICBpZCA9IGlkLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIGRvbUlkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFViAmJiB0aGlzLiQuZG9tLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiRkb21GZXRjaChpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJvbWlzZSA9IHRoaXMuJGZldGNoVGV4dCgnJGRvbUZldGNoKFwiJyArIGlkICsgJ1wiKScsIHVybCwgZmV0Y2hPcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4ociA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGRvbSA9IGpRdWVyeShyKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9tSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tWzBdLmlkID0gaWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbS5hcHBlbmRUbyhhcHBlbmRUbylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy4kLmRvbS4kcmVnaXN0ZXJBc3luYyhpZCwgJyRkb21GZXRjaChcIicgKyBpZCArICdcIiknLCBwcm9taXNlKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICB9XG5cbiAgICAkZG9tUmVtb3ZlKGlkLCByZWFzb24pIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkZG9tUmVtb3ZlKGlkKVwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgcmVhc29uICYmIEpGYWN0b3J5RXhwZWN0KFwiJGRvbVJlbW92ZShyZWFzb24pXCIsIHJlYXNvbikudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLiQuZG9tLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5LRVlfTUlTU0lORyh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIkZG9tUmVtb3ZlKGlkKVwiLFxuICAgICAgICAgICAgICAgICAgICBnaXZlbjogaWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyLGJyYWNlLXN0eWxlXG4gICAgICAgICAgICBpZiAodGhpcy4kLmRvbS5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkKSB7ZGVidWdnZXJ9XG4gICAgICAgICAgICB0aGlzLiQuZG9tLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZW50cnkgPSB0aGlzLiQuZG9tLmdldChpZCk7XG4gICAgICAgIGxldCB2YWx1ZSA9IGVudHJ5LiR2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgalF1ZXJ5KSB7XG4gICAgICAgICAgICB2YWx1ZS5yZW1vdmUoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeSBpbnN0YW5jZW9mIEpGYWN0b3J5RmV0Y2gpIHtcbiAgICAgICAgICAgIGVudHJ5LiRjaGFpbkFib3J0KHJlYXNvbiB8fCBcIiRkb21SZW1vdmUoKVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiQuZG9tLmRlbGV0ZShpZClcbiAgICB9XG5cbiAgICAkZG9tUmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC5kb207XG4gICAgICAgIGlmIChzdWJzLnNpemUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgc3ViXSBvZiBzdWJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi4kcGhhc2VSZW1vdmUgPT09IHJlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRvbVJlbW92ZShrZXkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vICBUcmFpdCBDU1Ncbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRDU1Mge1xuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBrZXJuZWwgPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMua2VybmVsO1xuICAgICAgICBrZXJuZWwub24oXCJkaXNhYmxlXCIsICgpID0+IHRoaXMuJGNzc1JlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuRElTQUJMRSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gdGhpcy4kY3NzUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcImNzc1wiLCB0aGlzLiQuY3JlYXRlU3ViTWFwKCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLkVOVU1FUkFCTEUpO1xuICAgIH1cblxuICAgICRjc3MoaWQsIHN0eWxlQm9keSkge1xuICAgICAgICBpZCA9IHRoaXMuJC5jc3MuJGlkX3Jlc29sdmUoaWQpO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaWRcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiY3NzXCIsIHN0eWxlQm9keSkudHlwZVN0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNzc0lkO1xuICAgICAgICBpZiAoaWRbMF0gPT09IFwiI1wiKSB7XG4gICAgICAgICAgICBpZCA9IGlkLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIGNzc0lkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFViAmJiB0aGlzLiQuY3NzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiRjc3MoaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJC5jc3MuJHJlZ2lzdGVyU3luYyhpZCxcbiAgICAgICAgICAgIGpRdWVyeShcIjxzdHlsZT5cIilcbiAgICAgICAgICAgICAgICAuYXR0cihjc3NJZCA/IHsgaWQgfSA6IHt9KVxuICAgICAgICAgICAgICAgIC5odG1sKHN0eWxlQm9keSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oXCJoZWFkXCIpXG4gICAgICAgICkuJHZhbHVlO1xuICAgIH1cblxuICAgICRjc3NGZXRjaChpZCwgdXJsLCBhcHBlbmRUbyA9IFwiaGVhZFwiKSB7XG4gICAgICAgIGlkID0gdGhpcy4kLmNzcy4kaWRfcmVzb2x2ZShpZCk7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJpZFwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJ1cmxcIiwgdXJsKS50eXBlU3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3NzSWQ7XG4gICAgICAgIGlmIChpZFswXSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlkID0gaWQuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgY3NzSWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIHRoaXMuJC5jc3MuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJGNzc0ZldGNoKGlkKVwiLCBnaXZlbjogaWQgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCA9IGhlbHBlcl91cmxfYWJzKHVybCk7XG5cbiAgICAgICAgbGV0IGV4aXN0ID0galF1ZXJ5KGFwcGVuZFRvKS5maW5kKGBsaW5rW2hyZWY9XCIke3VybH1cIl1gKVswXTtcbiAgICAgICAgaWYgKGV4aXN0KSB7XG4gICAgICAgICAgICBleGlzdC5kYXRhc2V0LnVzYWdlID0gcGFyc2VJbnQoZXhpc3QuZGF0YXNldC51c2FnZSkgKyAxO1xuICAgICAgICAgICAgbGV0IGRvbSA9IGpRdWVyeShleGlzdCk7XG5cbiAgICAgICAgICAgIGxldCBwcm9taXNlID0gSkZhY3RvcnlQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7IGNoYWluQXV0b0NvbXBsZXRlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgIHRyYWNlU291cmNlOiBqRmFjdG9yeVRyYWNlLnRyYWNlci5jYXB0dXJlVHJhY2VTb3VyY2UoXCIkY3NzRmV0Y2hcIilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvbVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHByb21pc2UuJGNoYWluLmRhdGEuZG9tID0gZG9tO1xuICAgICAgICAgICAgdGhpcy4kLmNzcy4kcmVnaXN0ZXJBc3luYyhpZCwgJyRjc3NGZXRjaChcIicgKyBpZCArICdcIiknLCBwcm9taXNlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBkb207XG4gICAgICAgICAgICBsZXQgcHJvbWlzZSA9IG5ldyBKRmFjdG9yeVByb21pc2UoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7IGNoYWluQXV0b0NvbXBsZXRlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgIHRyYWNlU291cmNlOiBqRmFjdG9yeVRyYWNlLnRyYWNlci5jYXB0dXJlVHJhY2VTb3VyY2UoXCIkY3NzRmV0Y2hcIilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc29sdmUgPT4gZG9tID0galF1ZXJ5KFwiPGxpbms+XCIsXG4gICAgICAgICAgICAgICAgICAgIHsgaWQ6IGNzc0lkID8gaWQgOiBcIlwiLCByZWw6IFwic3R5bGVzaGVldFwiLCB0eXBlOiBcInRleHQvY3NzXCIsIFwiZGF0YS11c2FnZVwiOiBcIjFcIiB9KVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oYXBwZW5kVG8pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImxvYWRcIiwgKCkgPT4gcmVzb2x2ZShkb20pKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhyZWZcIiwgdXJsKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcHJvbWlzZS4kY2hhaW4uZGF0YS5kb20gPSBkb207XG4gICAgICAgICAgICB0aGlzLiQuY3NzLiRyZWdpc3RlckFzeW5jKGlkLCAnJGNzc0ZldGNoKFwiJyArIGlkICsgJ1wiKScsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgICRjc3NSZW1vdmUoaWQsIHJlYXNvbikge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRjc3NSZW1vdmUoaWQpXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICByZWFzb24gJiYgSkZhY3RvcnlFeHBlY3QoXCIkY3NzUmVtb3ZlKHJlYXNvbilcIiwgcmVhc29uKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC5jc3MuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiRjc3NSZW1vdmUoaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXIsYnJhY2Utc3R5bGVcbiAgICAgICAgICAgIGlmICh0aGlzLiQuY3NzLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC5jc3MuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMuJC5jc3MuZ2V0KGlkKTtcbiAgICAgICAgbGV0IHZhbHVlID0gZW50cnkuJGNoYWluICYmIGVudHJ5LiRjaGFpbi5kYXRhLmRvbSB8fCBlbnRyeS4kdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGpRdWVyeSkge1xuICAgICAgICAgICAgbGV0IHVzYWdlID0gcGFyc2VJbnQodmFsdWVbMF0uZGF0YXNldC51c2FnZSkgLSAxO1xuICAgICAgICAgICAgaWYgKHVzYWdlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVbMF0uZGF0YXNldC51c2FnZSA9IHVzYWdlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlLnJlbW92ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgSkZhY3RvcnlQcm9taXNlKSB7XG4gICAgICAgICAgICBlbnRyeS4kY2hhaW5BYm9ydChyZWFzb24gfHwgXCIkY3NzUmVtb3ZlKClcIilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiQuY3NzLmRlbGV0ZShpZClcbiAgICB9XG5cbiAgICAkY3NzUmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC5jc3M7XG4gICAgICAgIGlmIChzdWJzLnNpemUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgc3ViXSBvZiBzdWJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi4kcGhhc2VSZW1vdmUgPT09IHJlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNzc1JlbW92ZShrZXkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhaXRMaWJWdWUge1xuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBrZXJuZWwgPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMua2VybmVsO1xuICAgICAgICBrZXJuZWwub24oXCJkaXNhYmxlXCIsICgpID0+IHRoaXMuJHZ1ZVJlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuRElTQUJMRSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gdGhpcy4kdnVlUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcInZ1ZVwiLCB0aGlzLiQuY3JlYXRlU3ViTWFwKCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLkVOVU1FUkFCTEUpO1xuICAgIH1cblxuICAgICR2dWUoaWQsIHZ1ZSkge1xuICAgICAgICBpZCA9IHRoaXMuJC52dWUuJGlkX3Jlc29sdmUoaWQpO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaWRcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwidnVlXCIsIHZ1ZSkudHlwZShPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFViAmJiB0aGlzLiQudnVlLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiR2dWUoaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJC52dWUuJHJlZ2lzdGVyU3luYyhpZCwgdnVlKS4kdmFsdWU7XG4gICAgfVxuXG4gICAgJHZ1ZVJlbW92ZShpZCkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiR2dWVSZW1vdmUoaWQpXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC52dWUuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiR2dWVSZW1vdmUoaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXIsYnJhY2Utc3R5bGVcbiAgICAgICAgICAgIGlmICh0aGlzLiQudnVlLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC52dWUuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMuJC52dWUuZ2V0KGlkKTtcbiAgICAgICAgalF1ZXJ5KGVudHJ5LiR2YWx1ZS4kZWwpLnJlbW92ZSgpO1xuICAgICAgICBlbnRyeS4kdmFsdWUuJGRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy4kLnZ1ZS5kZWxldGUoaWQpXG4gICAgfVxuXG4gICAgJHZ1ZVJlbW92ZUFsbChyZW1vdmVQaGFzZSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcInJlbW92ZVBoYXNlXCIsIHJlbW92ZVBoYXNlKVxuICAgICAgICAgICAgICAgIC5lcXVhbEluKFRyYWl0U2VydmljZS5QSEFTRVMpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN1YnMgPSB0aGlzLiQudnVlO1xuICAgICAgICBpZiAoc3Vicy5zaXplKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHN1Yl0gb2Ygc3Vicykge1xuICAgICAgICAgICAgICAgIGlmIChzdWIuJHBoYXNlUmVtb3ZlID09PSByZW1vdmVQaGFzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR2dWVSZW1vdmUoa2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyYWl0TGliUmVhY3Qge1xuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBrZXJuZWwgPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMua2VybmVsO1xuICAgICAgICBrZXJuZWwub24oXCJkaXNhYmxlXCIsICgpID0+IHRoaXMuJHJlYWN0UmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFKSk7XG4gICAgICAgIGtlcm5lbC5vbihcInVuaW5zdGFsbFwiLCAoKSA9PiB0aGlzLiRyZWFjdFJlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuVU5JTlNUQUxMKSk7XG4gICAgICAgIHRoaXMuJC5hc3NpZ24oXCJyZWFjdFwiLCB0aGlzLiQuY3JlYXRlU3ViTWFwKCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLkVOVU1FUkFCTEUpO1xuICAgIH1cblxuICAgICRyZWFjdChpZCwgY29udGFpbmVyLCBlbGVtZW50LCAuLi5yZW5kZXJPdGhlckFyZ3VtZW50cykge1xuICAgICAgICBpZCA9IHRoaXMuJC5yZWFjdC4kaWRfcmVzb2x2ZShpZCk7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgaWYgKCFqRmFjdG9yeS5SZWFjdERPTSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImpGYWN0b3J5LlJlYWN0RE9NPVJlYWN0RE9NIG11c3QgYmUgc2V0IGJlZm9yZSB1c2luZyB0aGUgUmVhY3QgVHJhaXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImlkXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImNvbnRhaW5lclwiLCBjb250YWluZXIpLnR5cGUoSFRNTEVsZW1lbnQsIGpRdWVyeSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIHRoaXMuJC5yZWFjdC5oYXMoaWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5LRVlfRFVQTElDQVRFRCh7IHRhcmdldDogXCIkcmVhY3QoaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGFpbmVyID0galF1ZXJ5KGNvbnRhaW5lcilbMF07XG4gICAgICAgIGxldCB2aWV3ID0gakZhY3RvcnkuUmVhY3RET00ucmVuZGVyKGVsZW1lbnQsIGNvbnRhaW5lciwgLi4ucmVuZGVyT3RoZXJBcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gdGhpcy4kLnJlYWN0LiRyZWdpc3RlclN5bmMoaWQsIHsgY29udGFpbmVyLCB2aWV3IH0pLiR2YWx1ZS52aWV3O1xuICAgIH1cblxuICAgICRyZWFjdFJlbW92ZShpZCkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRyZWFjdFJlbW92ZShpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4kLnJlYWN0LmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5LRVlfTUlTU0lORyh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIkcmVhY3RSZW1vdmUoaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXIsYnJhY2Utc3R5bGVcbiAgICAgICAgICAgIGlmICh0aGlzLiQucmVhY3QuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCkge2RlYnVnZ2VyfVxuICAgICAgICAgICAgdGhpcy4kLnJlYWN0LmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLiQucmVhY3QuZ2V0KGlkKS4kdmFsdWU7XG4gICAgICAgIGxldCBlbCA9IHZhbHVlLmNvbnRhaW5lcjtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICBpZiAoIWpGYWN0b3J5LlJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZWwpKSB7XG4gICAgICAgICAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRsb2dXYXJuKFwidW5tb3VudENvbXBvbmVudEF0Tm9kZSBmYWlsZWQgdG8gdW5tb3VudFwiLCBlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgalF1ZXJ5KGVsKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiQucmVhY3QuZGVsZXRlKGlkKVxuICAgIH1cblxuICAgICRyZWFjdFJlbW92ZUFsbChyZW1vdmVQaGFzZSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcInJlbW92ZVBoYXNlXCIsIHJlbW92ZVBoYXNlKVxuICAgICAgICAgICAgICAgIC5lcXVhbEluKFRyYWl0U2VydmljZS5QSEFTRVMpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN1YnMgPSB0aGlzLiQucmVhY3Q7XG4gICAgICAgIGlmIChzdWJzLnNpemUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgc3ViXSBvZiBzdWJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi4kcGhhc2VSZW1vdmUgPT09IHJlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlYWN0UmVtb3ZlKGtleSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5qRmFjdG9yeS5UcmFpdEZldGNoID0gVHJhaXRGZXRjaDtcbmpGYWN0b3J5LlRyYWl0VGltZW91dCA9IFRyYWl0VGltZW91dDtcbmpGYWN0b3J5LlRyYWl0SW50ZXJ2YWwgPSBUcmFpdEludGVydmFsO1xuakZhY3RvcnkuVHJhaXRNdXRhdGlvbiA9IFRyYWl0TXV0YXRpb247XG5qRmFjdG9yeS5UcmFpdERPTSA9IFRyYWl0RE9NO1xuakZhY3RvcnkuVHJhaXRDU1MgPSBUcmFpdENTUztcbmpGYWN0b3J5LlRyYWl0TGliVnVlID0gVHJhaXRMaWJWdWU7XG5qRmFjdG9yeS5UcmFpdExpYlJlYWN0ID0gVHJhaXRMaWJSZWFjdDsiLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeSBidW5kbGUgaW5kZXggKHNlZSBwYWNrYWdlLmpzb24gc2NyaXB0cyB0byBjb21waWxlIHRoZSAvZGlzdClcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVXNlZCBieSB0aGUgYnVpbGQgc2NyaXB0cyB0byBjb21waWxlIG1vZHVsZXMgdGFyZ2V0aW5nIHRoZSBjb25maWd1cmF0aW9uIChwcm9kdWN0aW9uLCBkZXZlbG9wbWVudCwgZGVidWcuLi4pXG4vLyBBbG1vc3QgZXZlcnl0aGluZyBpcyBleHBvcnRlZDsgVGhlIHJlc3VsdGluZyBtb2R1bGVzIHNob3VsZCBiZSBpbXBvcnRlZCBieSBhIGJ1bmRsZXIgdGhhdCBzdXBwb3J0cyBUcmVlIFNoYWNraW5nLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCB7IGpGYWN0b3J5TG9hZGVyIH0gZnJvbSBcIi4vakZhY3RvcnktbG9hZGVyXCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL2pGYWN0b3J5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pGYWN0b3J5LWNvbmZpZ1wiO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9qRmFjdG9yeS10cmFpdHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pGYWN0b3J5LWxvYWRlclwiO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9KRmFjdG9yeUFib3V0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9KRmFjdG9yeUVycm9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9KRmFjdG9yeUV2ZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vSkZhY3RvcnlFeHBlY3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5RmV0Y2hcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5RnVuY3Rpb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5TG9nZ2VyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9KRmFjdG9yeU9iamVjdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vSkZhY3RvcnlQcm9taXNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9KRmFjdG9yeVRpbWVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5VHJhY2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5VHJhaXRzXCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL1RyYWl0c0NvcmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1RyYWl0c0NvbXBvbmVudHNcIjtcblxuaWYgKHR5cGVvZiBqRmFjdG9yeU92ZXJyaWRlID09PSBcInVuZGVmaW5lZFwiIHx8ICFqRmFjdG9yeU92ZXJyaWRlKSB7XG4gICAgakZhY3RvcnlMb2FkZXIuaW5pdCgpO1xufSJdLCJuYW1lcyI6WyJKRkFDVE9SWV9ERVYiLCJKRkFDVE9SWV9ERUJVRyIsIkpGQUNUT1JZX0NMSSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJqRmFjdG9yeUNvbmZpZyIsIlRyYWl0TG9nIiwiSkZhY3RvcnlFcnJvciIsImtleXMiLCJKRmFjdG9yeVRyYWNlIiwibGliT3B0aW9ucyIsIm9mZmxpbmUiLCJCb29sZWFuIiwiZ2xvYmFsVGhpcyIsImNocm9tZSIsImZpbHRlciIsInZhbHVlIiwibGluZU51bWJlciIsImpGYWN0b3J5RGV2IiwicmVxdWlyZUNvbXBhdGliaWxpdHkiLCJ0ZXN0IiwiaW5mbyIsImZldGNoIiwiUmVxdWVzdCIsIkFib3J0Q29udHJvbGxlciwgQWJvcnRTaWduYWwiLCJBYm9ydENvbnRyb2xsZXIiLCJzaWduYWwiLCJNdXRhdGlvbk9ic2VydmVyIiwiakZhY3RvcnlMb2FkZXIiLCJzZXEiLCJbb2JqZWN0IE9iamVjdF0iLCJ0aGlzIiwibW9kdWxlIiwiakZhY3RvcnlPdmVycmlkZSIsImhhbmRsZXIiLCJwdXNoIiwib25Jbml0IiwiY29uc29sZSIsImxvZyIsIm5hbWUiLCJlbnRyeSIsIk9iamVjdCIsImVudHJpZXMiLCJwYXNzIiwiaWdub3JlIiwid2FybiIsImpRdWVyeSIsIiQiLCJoZWxwZXJfaXNOYXRpdmUiLCJfIiwiaXNOYXRpdmUiLCJoZWxwZXJfaXNTdHJpbmciLCJpc1N0cmluZyIsImhlbHBlcl9pc051bWJlciIsImlzTnVtYmVyIiwiaGVscGVyX2lzUGxhaW5PYmplY3QiLCJpc1BsYWluT2JqZWN0IiwiaGVscGVyX2RlZmF1bHRzRGVlcCIsImRlZmF1bHRzRGVlcCIsImhlbHBlcl9sb3dlckZpcnN0IiwibG93ZXJGaXJzdCIsImhlbHBlcl9nZXQiLCJnZXQiLCJoZWxwZXJfdGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsImhlbHBlcl9jYW1lbENhc2UiLCJjYW1lbENhc2UiLCJOT09QIiwiaGVscGVyX3NldEZ1bmN0aW9uTmFtZSIsImYiLCJkZWZpbmVQcm9wZXJ0eSIsImhlbHBlcl91cmxfYWJzIiwidXJsIiwiYSIsImhyZWYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJKRmFjdG9yeVRyYWNlX05PRklMVEVSIiwibGFiZWwiLCJzdGFja1RyYWNlTGltaXQiLCJJbmZpbml0eSIsIm9taXRBYm92ZUZ1bmN0aW9uTmFtZSIsIm9taXRTZWxmIiwiX3N0YWNrVHJhY2VMaW1pdCIsIkVycm9yIiwidHJhY2VTb3VyY2UiLCJzb3VyY2UiLCJ0YXJnZXRPYmplY3QiLCJjYXB0dXJlVHJhY2VTb3VyY2UiLCJ0cmFjZSIsInRvUHJpbnRhYmxlVHJhY2UiLCJ0aGVuIiwiciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsIkpGYWN0b3J5VHJhY2VfTElCX1NUQUNLVFJBQ0UiLCJjb25maWciLCJzdXBlciIsIlN0YWNrVHJhY2UiLCJmcm9tRXJyb3IiLCJ0cmFjZUZyYW1lcyIsInNsaWNlIiwiZmluZEluZGV4IiwiZnVuY3Rpb25OYW1lIiwiZW5kc1dpdGgiLCJmb3JtYXRUcmFjZUZyYW1lcyIsImhlYWRlciIsImxpbmVQcmVmaXgiLCJ3aW5kb3ciLCJtYXAiLCJzZiIsInRvU3RyaW5nIiwiam9pbiIsImpGYWN0b3J5VHJhY2UiLCJ1c2UiLCJjb25zdHJ1Y3RvciIsInRyYWNlciIsImF0dGFjaFRyYWNlIiwibWVzc2FnZSIsImRhdGEiLCJhc3NpZ24iLCJjcmVhdGUiLCJ0b1ByaW50YWJsZSIsIiRkYXRhIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmplY3QiLCJERUZBVUxUX0tFWVMiLCJmaW5kIiwia2V5IiwidmFsIiwidGVtcGxhdGVEYXRhIiwibnYiLCJ1bmRlZmluZWQiLCJnZXRJZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJsZW5ndGgiLCJKU09OX01BWCIsInN1YnN0cmluZyIsImUiLCJTdHJpbmciLCJ0ZW1wbGF0ZU1lc3NhZ2UiLCJwYXJ0Iiwic3BsaXQiLCJwbGFjZWhvbGRlciIsIlJFX1BMQUNFSE9MREVSIiwibGFzdEluZGV4IiwiZXhlYyIsInRyaW0iLCJ0b1ByaW50YWJsZURhdGEiLCJqRmFjdG9yeUVycm9yIiwiUHJveHkiLCJzZXQiLCJ0YXJnZXQiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsIkpGYWN0b3J5RXhwZWN0IiwiSU5WQUxJRF9WQUxVRSIsIklOVkFMSURfQ0FMTCIsIlBST01JU0VfRVhQSVJFRCIsIlJFUVVFU1RfRVJST1IiLCJLRVlfRFVQTElDQVRFRCIsIktFWV9NSVNTSU5HIiwiZXJyb3IiLCJyZWFzb24iLCJnaXZlbiIsInN0YXRpY01ldGhvZHMiLCJub3RVbmRlZmluZWQiLCJub3RFbXB0eVN0cmluZyIsIm5vdEZhbHN5IiwidmFsaWRTcGFjZXMiLCJyZXBsYWNlIiwibWF0Y2hSZWciLCJyZWciLCJleHBlY3RlZCIsIm9rIiwidHlwZU51bGwiLCJ0eXBlQm9vbGVhbiIsInR5cGVTdHJpbmciLCJ0eXBlTnVtYmVyIiwidHlwZUZ1bmN0aW9uIiwidHlwZVBsYWluT2JqZWN0IiwiZXF1YWxJbiIsIkFycmF5IiwiaXNBcnJheSIsInZhbHVlcyIsImluY2x1ZGVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIndyaXRhYmxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibm90V3JpdGFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNhbGwiLCJub3RFbnVtZXJhYmxlIiwibm90Q29uZmlndXJhYmxlIiwicmVzZXJ2ZWRQcm9wZXJ0eSIsImFyZ3MiLCJKRmFjdG9yeVRyYWl0cyIsImNhbGxlckluc3RhbmNlIiwiY2FsbGVyQ29uc3RydWN0b3IiLCJvcHRpb25zIiwidHJhaXQiLCJ0cmFpdEFyZ3MiLCJjYWNoZSIsIkNBQ0hFIiwiaGFzIiwiYWRkIiwiV2Vha1NldCIsIkpGYWN0b3J5VHJhaXQiLCJleHBvcnQiLCJ0cmFpdEluc3RhbmNlIiwidHJhaXRfY29uc3RydWN0b3IiLCJhcHBseSIsImlzU3RhdGljIiwic291cmNlRGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJwcm9wZXJ0eU5hbWUiLCJwcmVmaXgiLCJnZXRQcmVmaXgiLCJnZXRUYXJnZXQiLCJwcm9wZXJ0eURlc2NyaXB0b3IiLCJwYXJzZWQiLCJwYXJzZXIiLCJkZWZhdWx0UGFyc2VyIiwiRVhDTFVERVMiLCJXZWFrTWFwIiwiSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyIiwiaGFuZGxlcnMiLCJoYW5kbGVyR3JvdXBzIiwiaGFuZGxlckdyb3VwIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsImNvbXBvc2VyIiwiY29tcG9zaXRlIiwiY29udGV4dCIsImNhbmNlbGVkIiwicGFyYW1ldGVycyIsImZyb20iLCJyZXN1bHQiLCJpdGVyYXRpb24iLCJuZXh0IiwiY29tcG9zaXRlX2l0ZXJhdG9yIiwic2NvcGUiLCJkb25lIiwiakZhY3RvcnlGdW5jdGlvbkV4cGlyYWJsZSIsIm9yaWdpbmFsSGFuZGxlciIsIkpGYWN0b3J5RnVuY3Rpb25FeHBpcmFibGUiLCJjb21wb3NlIiwiZXhwaXJlZENhbGxzIiwiZXhwaXJlZCIsImlzRXhwaXJlZCIsImV4cGlyYWJsZSIsInNldEV4cGlyZWQiLCJhZGRFeHBpcmVDb25kaXRpb24iLCJjb25kaXRpb24iLCJsYXN0IiwidHlwZSIsImJpbmQiLCJvbkV4cGlyZWQiLCJvbk5vdEV4cGlyZWQiLCJNYXhXYXJuaW5nRXhwaXJhdGlvbiIsImpGYWN0b3J5RnVuY3Rpb25Db25kaXRpb25hbCIsIkpGYWN0b3J5RnVuY3Rpb25Db25kaXRpb25hbCIsImZpcnN0IiwiY29uZGl0aW9uYWwiLCJhZGRDb25kaXRpb24iLCJoYW5kbGUiLCJqRmFjdG9yeUZ1bmN0aW9uV3JhcHBhYmxlIiwiSkZhY3RvcnlGdW5jdGlvbldyYXBwYWJsZSIsIndyYXBwYWJsZSIsImJlZm9yZUFsbCIsImp1c3RCZWZvcmUiLCJqdXN0QWZ0ZXIiLCJhZnRlckFsbCIsImpGYWN0b3J5VHJhaXRzIiwic3RhdGVzIiwiZW5hYmxlZCIsInNlcnZpY2UiLCJwaGFzZSIsIm93bmVyIiwiJGxvZ0VyciIsIkpGYWN0b3J5Q29yZU9iamVjdCIsImluamVjdCIsImpGYWN0b3J5IiwiVHJhaXRDb3JlIiwiVHJhaXRBYm91dCIsIlRyYWl0RXZlbnRzIiwiVHJhaXRTdGF0ZSIsIlRyYWl0U2VydmljZSIsIlRyYWl0VGFzayIsIkpGYWN0b3J5Q29tcG9uZW50IiwiVHJhaXRGZXRjaCIsIlRyYWl0RE9NIiwiVHJhaXRDU1MiLCJUcmFpdE11dGF0aW9uIiwiVHJhaXRUaW1lb3V0IiwiVHJhaXRJbnRlcnZhbCIsIlRyYWl0TGliVnVlIiwiVHJhaXRMaWJSZWFjdCIsInByb3BlcnRpZXMiLCJKRmFjdG9yeU9iamVjdCIsImRlc2NyaXB0b3JQcm90b3R5cGUiLCJERVNDUklQVE9SU19QUk9UT1RZUEUiLCJvIiwiTk9ORSIsIldSSVRBQkxFIiwiRU5VTUVSQUJMRSIsIkNPTkZJR1VSQUJMRSIsIkNPTkZJR1VSQUJMRV9XUklUQUJMRSIsIldSSVRBQkxFX0NPTkZJR1VSQUJMRSIsIkNPTkZJR1VSQUJMRV9FTlVNRVJBQkxFIiwiRU5VTUVSQUJMRV9DT05GSUdVUkFCTEUiLCJFTlVNRVJBQkxFX1dSSVRBQkxFIiwiV1JJVEFCTEVfRU5VTUVSQUJMRSIsIldSSVRBQkxFX0VOVU1FUkFCTEVfQ09ORklHVVJBQkxFIiwiV1JJVEFCTEVfQ09ORklHVVJBQkxFX0VOVU1FUkFCTEUiLCJFTlVNRVJBQkxFX0NPTkZJR1VSQUJMRV9XUklUQUJMRSIsIkVOVU1FUkFCTEVfV1JJVEFCTEVfQ09ORklHVVJBQkxFIiwiQ09ORklHVVJBQkxFX1dSSVRBQkxFX0VOVU1FUkFCTEUiLCJDT05GSUdVUkFCTEVfRU5VTUVSQUJMRV9XUklUQUJMRSIsIlJFQURPTkxZIiwiZGVzY3JpcHRvciIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZGVmaW5lUHJvcGVydGllcyIsImZsYXQiLCJkaXNpbmhlcml0IiwiY3JlYXRlRGVzY3JpcHRvcnMiLCJtb2R1bGVHZW5JZCIsInVpZCIsIkpGYWN0b3J5QWJvdXQiLCJhYm91dCIsImZpbmdlcnByaW50IiwidG9Mb3dlckNhc2UiLCJKRmFjdG9yeVByb21pc2UiLCJleGVjdXRvciIsImNoYWluSWQiLCJyZWplY3QiLCJERUZBVUxUX0NPTkZJRyIsIk51bWJlciIsIl9yZXNvbHZlIiwiX3JlamVjdCIsImNoYWluIiwiSkZhY3RvcnlQcm9taXNlQ2hhaW4iLCIkY2hhaW4iLCIkdHlwZSIsIiR2YWx1ZSIsIiRpc1NldHRsZWQiLCIkaXNSZWplY3RlZCIsIiRpc0Z1bGZpbGxlZCIsIiRpc0V4cGlyZWQiLCIkaXNBYm9ydGVkIiwiJGRldl9uYW1lIiwiJGRldl9wYXRoIiwiSkZhY3RvcnlQcm9taXNlUGF0aCIsIiRkZXZfcG9zaXRpb24iLCIkZGV2X3NvdXJjZSIsInRyeUF1dG9Db21wbGV0ZSIsImlzUGVuZGluZyIsIiRjaGFpbkNvbXBsZXRlIiwib25SZXNvbHZlIiwib25SZWplY3QiLCJUeXBlRXJyb3IiLCJ4IiwiY2FsbGVkIiwicmVzb2x2ZVByb21pc2UiLCJ5IiwicmVqZWN0UHJvbWlzZSIsImVycm9yRXhwaXJlZCIsIm9uU2V0dGxlIiwiY2hhaW5NYXAiLCJjaGFpbkNvbmZpZyIsImNoYWluQXV0b0NvbXBsZXRlIiwic2l6ZSIsIl9jaGFpbkF1dG9Db21wbGV0ZSIsIl9fcmVzb2x2ZV9fIiwiX19yZWplY3RfXyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImZvcmNlVHlwZSIsIndyYXBwZWRGdWxmaWxsZWQiLCJ3cmFwcGVkUmVqZWN0ZWQiLCJuZXdQcm9taXNlIiwic3RhcnRzV2l0aCIsImZOYW1lcyIsImNoYWluTmFtZSIsIiRkZXZfb25GdWxmaWxsZWQiLCIkZGV2X29uUmVqZWN0ZWQiLCJjaGFpblJvb3QiLCJvcHRpb25hbEFyZ3MiLCJjb21wbGV0ZSIsInByb21pc2UiLCJhYm9ydCIsInNpbGVudCIsIk1hcCIsImlzQ29tcGxldGVkIiwiX19kZWZlcnJlZF9fIiwiRGVmZXJyZWQiLCJpdGVtIiwiaSIsInByaW50YWJsZSIsInYiLCJKRmFjdG9yeVByb21pc2VTeW5jIiwiSkZhY3RvcnlFdmVudHMiLCJyZWdpc3RyeSIsIm9uTGlzdGVuZXJVcGRhdGUiLCJvbk9ic2VydmVyVXBkYXRlIiwiZXZlbnRzIiwic2VsZWN0b3IiLCJ2YWxpZGF0ZVNlbGVjdG9yIiwiSFRNTEVsZW1lbnQiLCJ3cmFwcGVkSGFuZGxlciIsIm9uIiwic3RhY2siLCJvZmYiLCJwZW5kaW5nIiwiZXZlbnQiLCJ0cmlnZ2VyIiwidHJpZ2dlckhhbmRsZXIiLCJhbGwiLCJhc3luYyIsIkpGYWN0b3J5RXZlbnRzTWFuYWdlciIsInBhcmVudCIsImFmZmlsaWF0ZVJ1bGVzIiwiYWZmaWxpYXRlQWRkUnVsZSIsInJ1bGVfbmFtZXNwYWNlIiwibmFtZXNwYWNlcyIsIkpGYWN0b3J5RXZlbnRTZWxlY3RvclBhcnNlciIsInBhcnNlZEV2ZW50IiwibmFtZXNwYWNlIiwiYWRkTmFtZXNwYWNlIiwiYWZmaWxpYXRlIiwiYXJnTCIsImpxdWVyeSIsInRyaWdnZXJTZXJpZXMiLCJ0cmlnZ2VyUGFyYWxsZWwiLCJlbG0iLCJfZGF0YSIsInR5cGVzIiwiSkZhY3RvcnlFdmVudFNlbGVjdG9yIiwiaGFzTmFtZXNwYWNlIiwiX2V2ZW50cyIsImV4cGFuZG8iLCJrIiwiaW5kZXhPZiIsImV2ZW50VHlwZUVudHJ5Iiwic2VsZWN0b3JzIiwicyIsIlNldCIsImRlbGV0ZSIsIm5zIiwic2hpZnQiLCJ2YWxpZGF0ZUV2ZW50IiwidmFsaWRhdGVOYW1lc3BhY2UiLCJKRmFjdG9yeUZldGNoIiwiZmV0Y2hPcHRpb25zIiwiZmV0Y2hSZXF1ZXN0IiwicmVzcG9uc2UiLCJmZXRjaFJlc3BvbnNlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsIiR0eXBlVGV4dCIsInRleHQiLCJyZXNwb25zZVRleHQiLCIkdHlwZUpTT04iLCJqc29uIiwicmVzcG9uc2VKU09OIiwiY2F0Y2giLCJhYm9ydEN0cmwiLCJhYm9ydENvbnRyb2xsZXIiLCJmZXRjaEFib3J0Q29udHJvbGxlciIsIiRjaGFpbkFib3J0IiwiU1lNQk9MX0VOQUJMRUQiLCJKRmFjdG9yeUxvZ2dlciIsIkRFRkFVTFRfQ09ORElUSU9OIiwiaW5zdGFsbEFjY2Vzc29yIiwicGFyZW50TG9nZ2VyIiwiZW5hYmxlIiwiZGlzYWJsZSIsIm5hdGl2ZU5hbWUiLCJmaWx0ZXJzIiwidGFyZ2V0TmFtZSIsImFjY2Vzc29yIiwiZm9ybWF0dGVyIiwic3ViIiwic3R5bGVzX2NzcyIsInN0eWxlc19jbGkiLCJGT1JNQVRURVJfTkFUSVZFIiwibG9nZ2VyIiwiRk9STUFUVEVSX0NMSSIsIkZPUk1BVFRFUl9CUk9XU0VSIiwiZXF1YWwiLCJKRmFjdG9yeVRpbWUiLCJEYXRlIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwidmFsdWVPZiIsImhvdXJzIiwiZ2V0VVRDSG91cnMiLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiSkZhY3RvcnlUaW1lVHJhY2UiLCJlbGFwc2VkIiwidDEiLCJ0MCIsIiR0b0R1cmF0aW9uU3RyaW5nIiwiU3ViTWFwIiwiJHBoYXNlUmVtb3ZlIiwiZ2V0Q29udGV4dHVhbFJlbW92ZVBoYXNlIiwidGFza05hbWUiLCJ0YXNrIiwiJHRhc2siLCIkY2hhaW5BdXRvQ29tcGxldGUiLCJzdHIiLCJpZCIsImlkX2F1dG9pbmMiLCJwcm90byIsIlNZTUJPTF9QUklWQVRFIiwiY3JlYXRlU3ViTWFwIiwidGFza3MiLCJyZXF1ZXN0cyIsImV4ZWN1dG9yT3JWYWx1ZSIsIiRpZF9yZXNvbHZlIiwibWV0cmljcyIsIiR0YXNrTWV0cmljcyIsIiRkZXZfdGltaW5nIiwiZW5kIiwiJHRhc2tSZW1vdmUiLCJfY2FsbGVkIiwicmVtb3ZlUGhhc2UiLCJQSEFTRVMiLCJhdXRvQ29tcGxldGUiLCJhc3NpZ25Qcml2YXRlIiwiY3VzdG9tIiwia2VybmVsIiwiZXZlbnRNYW5hZ2VyIiwibGlzdGVuZXJzIiwiZ2V0RG9tTGlzdGVuZXJzIiwib2JzZXJ2ZXJzIiwiZ2V0T2JzZXJ2ZXJzIiwiJHRyaWdnZXIiLCJzdGF0ZVJvdXRlcyIsIiRzdGF0ZSIsImgiLCJiZWZvcmUiLCIkbm90aWZ5IiwiYWZ0ZXIiLCJub3RpZnkiLCJwcmV2aW91c1ZhbCIsIlBIQVNFIiwicGhhc2VRdWV1ZSIsInBoYXNlVGFzayIsInBoYXNlTWFwIiwiaW5zdGFsbCIsInVuaW5zdGFsbCIsImFzc2lnblByaXZhdGVNZW1iZXIiLCJpbnN0YWxsZWQiLCJzZXRFdmVudE5hbWVzcGFjZVJlbW92ZVBoYXNlIiwicGhhc2VSZXNvbHZlIiwiJHRhc2tSZW1vdmVBbGwiLCIkdGFza1Byb21pc2VBbGwiLCJvbkluc3RhbGwiLCJvbkVuYWJsZSIsIm9uRGlzYWJsZSIsIm9uVW5pbnN0YWxsIiwiJG9mZiIsInJlbW92YWwiLCJESVNBQkxFIiwiVU5JTlNUQUxMIiwicCIsIklOU1RBTEwiLCIkZW5hYmxlIiwiRU5BQkxFIiwicGhhc2VLaWxsIiwiJGRpc2FibGUiLCJjb21wb25lbnQiLCJqRmFjdG9yeUNvcmVPYmplY3QiLCJQSEFTRV9SRVZFUlQiLCJjdXJSZW1vdmVQaGFzZSIsIm5ld1JlbW92ZVBoYXNlIiwiZGVsZXRlTmFtZXNwYWNlIiwiJGZldGNoUmVtb3ZlQWxsIiwiJHJlZ2lzdGVyQXN5bmMiLCIkZmV0Y2hSZW1vdmUiLCIkZmV0Y2giLCJfZGVidWdfcmVtb3ZlX2NhbGxlZCIsInN1YnMiLCIkdGltZW91dFJlbW92ZUFsbCIsImRlbGF5IiwidGltZW91dHMiLCJGdW5jdGlvbiIsInRpbWVyIiwic2V0VGltZW91dCIsIiR0aW1lb3V0UmVtb3ZlIiwiY2xlYXJUaW1lb3V0IiwiJGludGVydmFsUmVtb3ZlQWxsIiwidGltZWludHMiLCJzZXRJbnRlcnZhbCIsIiRyZWdpc3RlclN5bmMiLCJjbGVhckludGVydmFsIiwiJGludGVydmFsUmVtb3ZlIiwiJG11dGF0aW9uUmVtb3ZlQWxsIiwibXV0YXRpb25zIiwiRG9jdW1lbnQiLCJvYnNlcnZlciIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiJG11dGF0aW9uUmVtb3ZlIiwiJGRvbVJlbW92ZUFsbCIsImpRdWVyeUFyZ3VtZW50IiwiYXBwZW5kVG8iLCJkb21JZCIsImRvbSIsInRhZ05hbWUiLCJodG1sIiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwiJGZldGNoVGV4dCIsInJlbW92ZSIsIiRkb21SZW1vdmUiLCIkY3NzUmVtb3ZlQWxsIiwic3R5bGVCb2R5IiwiY3NzSWQiLCJjc3MiLCJhdHRyIiwiZXhpc3QiLCJkYXRhc2V0IiwidXNhZ2UiLCJwYXJzZUludCIsInJlbCIsImRhdGEtdXNhZ2UiLCIkY3NzUmVtb3ZlIiwiJHZ1ZVJlbW92ZUFsbCIsInZ1ZSIsIiRlbCIsIiRkZXN0cm95IiwiJHZ1ZVJlbW92ZSIsIiRyZWFjdFJlbW92ZUFsbCIsImNvbnRhaW5lciIsImVsZW1lbnQiLCJyZW5kZXJPdGhlckFyZ3VtZW50cyIsInJlYWN0IiwiUmVhY3RET00iLCJ2aWV3IiwicmVuZGVyIiwiZWwiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiJGxvZ1dhcm4iLCIkcmVhY3RSZW1vdmUiLCJpbml0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWFZLE1BQUNBLEdBQTZELEVBQzdEQyxHQUFpRSxFQUNqRUMsRUFDVSxvQkFBWkMsU0FBMkJBLFFBQVFDLFVBQVlELFFBQVFDLFNBQVNDLEtDYjlEQyxFQUFpQixDQUMxQkMsVUFBMkJMLEdEVStDLE1DVDFFTSxjQUFlLENBQ1hDLEtBQU0sQ0FBQyxlQUFnQixZQUFhLFFBQVMsT0FBUSxPQUV6REMsZUFBZ0NSLEdBQ3pCLENBQ0NPLEtBQU0sQ0FBQyxnQkFBaUIsb0JBQ3hCRSxXQUFZLENBQ1JDLFFBQVNDLFFBQVFDLFdBQVdDLFFBQzVCQyxPQUFRLFNBQVNDLEdBQ2IsT0FBT0EsRUFBTUMsY0FLN0JDLFlBQ08sQ0FDQ0MscUJBQXNCLENBQ2xCTixXQUFZLENBQ1JPLEtBQU0sSUFBTVAsV0FDWlEsS0FBTSx5RkFFVkMsTUFBTyxDQUNIRixLQUFNLElBQU1FLE1BQ1pELEtBQU0sb0VBRVZFLFFBQVMsQ0FDTEgsS0FBTSxJQUFNRyxRQUNaRixLQUFNLHNEQUVWRywrQkFBZ0MsQ0FDNUJKLEtBQU0sS0FBTSxJQUFJSyxpQkFBa0JDLE9BQ2xDTCxLQUFNLHNIQUdWTSxpQkFBa0IsQ0FDZFAsS0FBTSxJQUFNTyxpQkFDWk4sS0FBTSxrRUM5QmJPLEVBQWlCLENBQzFCQyxJQUFLLEdBQ0xDLE9BQ0ksR0FBSUMsS0FBS0YsSUFBSyxDQUNWLElBQUlBLEVB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
