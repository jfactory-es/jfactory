var e,t;e=this,t=function(e,t,s){"use strict";
/*!
     * jFactory, Copyright (c) 2019, StÃ©phane Plazis
     * https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt
     */const r="undefined"!=typeof process&&process.versions&&process.versions.node,i={TraitLog:!r||!1,JFactoryError:{keys:["$.about.name","$dev_name","$name","name","id"]},JFactoryTrace:!r&&{keys:["$dev_traceLog","$dev_traceSource"],libOptions:{offline:Boolean(globalThis.chrome),filter:function(e){return e.lineNumber}}},jFactoryDev:{requireCompatibility:{globalThis:{test:()=>globalThis,info:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},fetch:{test:()=>fetch,info:"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"},Request:{test:()=>Request,info:"https://developer.mozilla.org/docs/Web/API/Request"},"AbortController, AbortSignal":{test:()=>(new AbortController).signal,info:"https://developer.mozilla.org/docs/Web/API/AbortController, https://developer.mozilla.org/docs/Web/API/AbortSignal"},MutationObserver:{test:()=>MutationObserver,info:"https://developer.mozilla.org/docs/Web/API/MutationObserver"}}}},a={seq:[],init(){if(this.seq){let e=this.seq;delete this.seq;for(let t of e)t();delete globalThis.jFactoryOverride}},onInit(e){this.seq.push(e)}};a.onInit((function(){console.log("jFactory is running in development mode; performances will be affected");for(let[e,t]of Object.entries(i.jFactoryDev.requireCompatibility)){let s;try{s=Boolean(t.test())}catch(e){}s||console.warn(`jFactory may require the support of "${e}", ${t.info}`)}})),a.onInit((function(){!i.TraitLog&&console.warn("jFactory logs disabled")}));const n=s,o=t.isNative,l=t.isString,c=t.isNumber,h=t.isPlainObject,u=t.defaultsDeep,d=t.lowerFirst,p=t.get,m=t.template,$=t.camelCase,f=()=>{},g=(e,t)=>Object.defineProperty(t,"name",{value:e}),v=e=>(v.a.href=e,v.a.href);v.a=document.createElement("a");class b{constructor({label:e,stackTraceLimit:t,keys:s,libOptions:r}={}){this.label=e||"The stack has been printed in the console",this.stackTraceLimit=t||1/0,this.keys=s||["stackLog","stackSource"],this.libOptions=r||{}}captureTraceSource(e,t){let s;this.stackTraceLimit&&(s=Error.stackTraceLimit,Error.stackTraceLimit=this.stackTraceLimit),e||(e="captureTraceSource",t=!0);let r={source:new Error,omitAboveFunctionName:e,omitSelf:t};return this.stackTraceLimit&&(Error.stackTraceLimit=s),r}attachTrace(e,t){"object"!=typeof t&&(t=this.captureTraceSource(t||"attachTrace",!t));let s=t.source;this.toPrintableTrace(t).then(e=>s=e);let r=()=>console.log(s)||this.label;Object.defineProperty(e,this.keys[0],{enumerable:!1,configurable:!0,get:()=>r()}),Object.defineProperty(e,this.keys[1],{enumerable:!1,configurable:!0,get:()=>t})}toPrintableTrace(e){return Promise.resolve(e.source)}}class E extends b{constructor(e){super(e)}toPrintableTrace(e){return StackTrace.fromError(e.source,this.libOptions).then(t=>{if(e.omitAboveFunctionName){let s=t.findIndex(t=>t.functionName&&t.functionName.endsWith(e.omitAboveFunctionName));s>0&&(e.omitSelf&&s++,t=t.slice(s))}return t=t.filter(this.libOptions.filter),this.formatTraceFrames(t)})}formatTraceFrames(e){let t,s;return this.libOptions.offline&&window.chrome?(t="Error\n",s="\tat "):(t="",s=""),t+e.map(e=>s+e.toString()).join("\n")}}const A={};a.onInit((function(){let e=i.JFactoryTrace;if(e&&!1!==e.use){let t;t="function"==typeof e.use?e.use:"object"==typeof StackTrace?E:b,t===E&&console.warn("jFactory: Stack trace enabled; Performance will be affected"),A.tracer=new t(e)}else A.tracer={captureTraceSource:f,attachTrace:f}}));class y extends Error{constructor(e="unspecified error",t=null){t=Object.assign(Object.create(null),t),super(e=y.toPrintable(e,t)),this.$data=Object.assign(Object.create(null),t)}toString(){return this.message}*[Symbol.iterator](){yield this.message,yield this.$data}static getId(e){return e[(i.JFactoryError.keys||y.DEFAULT_KEYS).find(t=>{let s=p(e,t);return s||0===s})]}static toPrintableData(e){const t={};let s;for(let[r,i]of Object.entries(e)){switch(typeof i){case"function":i=i.name+"()";break;case"object":if(null===i){i="null";break}if(i instanceof Error){i=i.toString();break}if(void 0!==(s=y.getId(i)))i='"'+s+'"';else if(o(i.toString))try{s=JSON.stringify(i),i=s.length>y.JSON_MAX?s.substring(0,y.JSON_MAX)+"[...]":s}catch(e){i="[object "+i.constructor.name+"]"}else i=i.toString();break;case"string":i='"'+i+'"';break;default:i=String(i)}t[r]=i}return t}static toPrintable(e,t){const s=[];for(let r of e.split(";")){let e,i=y.RE_PLACEHOLDER;if(i.lastIndex=0,e=i.exec(r)){do{if(e[1]&&e[1]in t){s.push(r.trim());break}}while(null!==(e=i.exec(r)))}else s.push(r.trim())}return d(m(s.join("; "))(y.toPrintableData(t)))}}y.JSON_MAX=40,y.DEFAULT_KEYS=["name","id"],y.RE_PLACEHOLDER=/\${([^}]+)}/g;let S=new Proxy(y,{set:function(e,t,s){let{template:r}=s;if(e[t])throw new Error("already declared");return e[t]=class extends y{constructor(e,t){super(r,e),A.tracer.attachTrace(this.$data,t)}},e[t].prototype.name="Error jFactoryError."+t,!0}});function _(e,t){if(!new.target)return new _(e,t);this.label=e,this.value=t}S.INVALID_VALUE={template:"invalid value for ${target}; Reason: ${reason}; Given: ${given}"},S.INVALID_CALL={template:"invalid call ${target}; Reason: ${reason}; Owner: ${owner}"},S.PROMISE_EXPIRED={template:"expired promise ${target}; Reason: ${reason}"},S.REQUEST_ERROR={template:"error requesting ${target}; Reason: ${reason}; Owner: ${owner}"},S.KEY_DUPLICATED={template:"duplicated key for ${target}; Given: ${given}"},S.KEY_MISSING={template:"missing key for ${target}; Given: ${given}"};const R=function(e,t,s){throw new S.INVALID_VALUE({target:e,reason:s,given:t})},L={notUndefined:(e,t)=>(void 0===t&&R(e,t,"cannot be undefined"),!0),notEmptyString:(e,t)=>(""===t&&R(e,t,"cannot be empty string"),!0),notFalsy:(e,t)=>(t||R(e,t,'cannot be a falsy value (undefined, null, NaN, 0, "")'),!0),validSpaces:(e,t)=>(t.replace&&t.replace(/\s+/g," ").trim()===t||R(e,t,"invalid space delimiters"),!0),matchReg:(e,t,s)=>(s.test(t)||R(e,t,'string "'+t+'" must match '+s),!0),type(e,t,...s){let r,i=!1;for(let a of s){null===a?r="Null":"name"in a&&(r=a.name);let s=L["type"+r];if(s)try{i=s(e,t)}catch(e){}else i=t instanceof a;if(i)break}return i||R(e,t,"must be an instance of ["+s.map(e=>e.name).join(", ")+"]"),!0},typeNull:(e,t)=>(null!==t&&R(e,t,"must be null"),!0),typeBoolean:(e,t)=>(!0!==t&&!1!==t&&R(e,t,"must be a boolean"),!0),typeString:(e,t)=>(l(t)||R(e,t,"must be a string"),!0),typeNumber:(e,t)=>(c(t)||R(e,t,"must be a number"),!0),typeFunction:(e,t)=>("function"!=typeof t&&R(e,t,"must be a function"),!0),typePlainObject:(e,t)=>(h(t)||R(e,t,"must be a plain object"),!0),equal(e,t,...s){let r=!1;for(let e of s)if(r=t===e)break;return r||R(e,t,"must be one of ["+s+"]"),!0},equalIn:(e,t,s)=>(Array.isArray(s)||(s=Object.values(s)),s.includes(t)||R(e,t,"must be one from ["+s.join(", ")+"]"),!0),properties(e,t,s){for(let r of Object.getOwnPropertyNames(t))_(e+', property name "'+r+'"',r).equalIn(s);return!0},writable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable||R(e,t,"must be writable"),!0),notWritable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable&&R(e,t,"must not be writable"),!0),enumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)||R(e,t,"must be enumerable"),!0),notEnumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)&&R(e,t,"must not be enumerable"),!0),configurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable||R(e,t,"must be configurable"),!0),notConfigurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable&&R(e,t,"must not be configurable"),!0),reservedProperty:(e,t,s)=>(s in t&&R(e,t,"is a reserved property"),!0)};a.onInit((function(){Object.assign(_,L);for(const e of Object.getOwnPropertyNames(L))_.prototype[e]=function(...t){return _[e](this.label,this.value,...t),this}}));class T{constructor(e,t,s={}){this.callerInstance=e,this.callerConstructor=t,this.options=s}use(e,...t){_("JFactoryTraits(trait)",e).typeFunction();let{callerInstance:s,callerConstructor:r}=this,a=T.CACHE.get(s);if(a){if(a.has(e))return i.TraitLog&&console.warn(e.name+" already called on",s),this;a.add(e)}else T.CACHE.set(s,new WeakSet([e]));!r.JFactoryTrait&&(r.JFactoryTrait=new WeakSet),r.JFactoryTrait.has(e)||(r.JFactoryTrait.add(e),this.export(e.prototype,r.prototype),this.export(e,r,!0));let n=new e(s,...t);return n.trait_constructor&&n.trait_constructor.apply(s,t),this}export(e,t,s){let r=Object.getOwnPropertyDescriptors(e);for(let i of Object.keys(r)){let a=T.getPrefix(i);if(T.getTarget(i,t,a)){let a=r[i],n=(this.options.parser||T.defaultParser)(i,a,e,t,s);n&&(({propertyName:i,propertyDescriptor:a}=n),Object.defineProperty(t,i,a))}}}static defaultParser(e,t,s,r,a){let n=t.value;return a?null:e in r?(i.TraitLog&&console.warn(`${r.constructor.name}> skipping export of existing property "${e}"`,n),null):"object"==typeof n?(i.TraitLog&&console.warn(`${r.constructor.name}> skipping export of shared object "${e}"`,n),null):{propertyName:e,propertyDescriptor:t}}static getPrefix(e){let t=e.split("_");return t.length>1?t[0]:null}static getTarget(e,t,s){return T.EXCLUDES.includes(e)||"trait"===s?null:t}}T.CACHE=new WeakMap,T.EXCLUDES=["constructor","prototype","length","size"];class O{constructor(){this.handlers=Object.create(null)}*[Symbol.iterator](e=[]){e.length||(e=Object.keys(this.handlers)),e.length||(e=["default"]);for(let t of e)t in this.handlers&&(yield*this.handlers[t])}first(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).unshift(t),this}last(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).push(t),this}compose(...e){let t=this,s=function(){let s={canceled:!1,parameters:Array.from(arguments),result:void 0},r=t[Symbol.iterator](e),i=r.next();return O.composite_iterator(this,s,i,r)};return s.composer=t,s}static composite_iterator(e,t,s,r){let i,a;for(;!t.canceled&&!s.done;)if(i=s.value,a=e?i.call(e,t,...t.parameters):i(t,...t.parameters),s=r.next(),a instanceof Promise){if(!s.done||a.constructor===Promise)return a.then(g([i.name,"[compositeAsyncHandler]"].filter(Boolean).join(" "),(function(i){return t.result=i,O.composite_iterator(e,t,s,r)})));t.result=a}else t.result=a;return t.result}}class w{constructor(e){this.originalHandler=e,this.expiredCalls=0,this.composer=new O;let t,s=this.composer.compose("conditions"),r=this;this.isExpired=e=>t||s.call(e)||!1,this.setExpired=e=>t=e?e instanceof Error?e:new S.INVALID_CALL({target:this.originalHandler,reason:"manually expired"}):Boolean(this.expiredCalls=0),this.addExpireCondition=function(e){this.composer.last("conditions",(function(t){let s=function(s){return _("JFactoryFunctionExpirable.addExpireCondition(), result",s).type(Boolean,Error),r.setExpired(!!s&&(t.canceled=!0)&&(s instanceof Error?s:new S.INVALID_CALL({target:r.originalHandler,reason:"conditionally expired",condition:e})))},i=e.apply(this,t.parameters);return i instanceof Promise?i.then(s):s(i)}))}}compose(){let e=this,t=function(){let t=e.isExpired(this),s=e.constructor.call.bind(void 0,e,this,arguments);return t instanceof Promise?t.then(s):s(t)};return Object.assign(t,{expirable:this,isExpired:e=>this.isExpired(e),setExpired:e=>this.setExpired(e),addExpireCondition:e=>(this.addExpireCondition(e),t)})}static call(e,t,s,r){return r?e.onExpired(r):e.onNotExpired(t,s)}onExpired(e){return this.expiredCalls<w.MaxWarningExpiration&&(this.expiredCalls++,i.TraitLog&&console.warn(...new S.INVALID_CALL({...e.$data,reason:e.$data.reason+"; expiredCalls="+this.expiredCalls+(this.expiredCalls===w.MaxWarningExpiration?"; Max Warning Exceeded":"")}))),e}onNotExpired(e,t){return this.originalHandler.apply(e,t)}}function P(e){return new I(e).compose()}w.MaxWarningExpiration=10;class I{constructor(e){this.originalHandler=e,this.composer=new O,this.composer.first("original",g([e.name,"[condition]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("conditions","original");return Object.assign(e,{conditional:this,addCondition:t=>(this.addCondition(t),e)})}addCondition(e){this.composer.last("conditions",(function(t){let s=function(e){_("JFactoryFunctionConditional.addCondition(), result",e).typeBoolean(),!e&&(t.canceled=!0)},r=e.apply(this,t.parameters);return r instanceof Promise?r.then(s):s(r)}))}}function N(e){return new j(e).compose()}class j{constructor(e){this.originalHandler=e,this.composer=new O,this.composer.first("original",g([e.name,"[wrapped]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("before","original","after");return Object.assign(e,{wrappable:this,beforeAll:t=>(this.beforeAll(t),e),justBefore:t=>(this.justBefore(t),e),justAfter:t=>(this.justAfter(t),e),afterAll:t=>(this.afterAll(t),e)})}beforeAll(e){this.composer.first("before",e)}justBefore(e){this.composer.last("before",e)}justAfter(e){this.composer.first("after",e)}afterAll(e){this.composer.last("after",e)}}function F(e,t){return new T(e,t,{parser(e,t){let s=T.defaultParser(...arguments);if(s){({propertyName:e,propertyDescriptor:t}=s);let r=t.value;if("function"==typeof r)switch(r.name){case"$install":case"$uninstall":case"$enable":case"$disable":case"$state":break;default:t.value=N(r).beforeAll((function(){if(!this.$.states.enabled&&"PHASE_NONE"===this.$.service.phase){let e=new S.INVALID_CALL({owner:this,target:r,reason:"component disabled"});throw this.$logErr(...e),e}}))}return{propertyName:e,propertyDescriptor:t}}}})}class C{constructor(e){C.inject(this,C,e)}static inject(e,t,s){F(e,t).use(k.TraitCore).use(k.TraitAbout,{name:s}).use(k.TraitLog).use(k.TraitEvents).use(k.TraitState).use(k.TraitService).use(k.TraitTask)}}class M extends C{constructor(e){super(e),M.inject(this,M)}static inject(e,t){F(e,t).use(k.TraitFetch).use(k.TraitDOM).use(k.TraitCSS).use(k.TraitMutation).use(k.TraitTimeout).use(k.TraitInterval).use(k.TraitLibVue).use(k.TraitLibReact)}}const k=(e,t)=>Object.assign(new M(e),t);class D{static createDescriptors(e=D.DESCRIPTORS_PROTOTYPE){let t=D.create(e,!0,!0),s=Object.create(null);return s.NONE=t(),s.WRITABLE=t({writable:!0}),s.ENUMERABLE=t({enumerable:!0}),s.CONFIGURABLE=t({configurable:!0}),s.CONFIGURABLE_WRITABLE=s.WRITABLE_CONFIGURABLE=t({writable:!0,configurable:!0}),s.CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE=t({enumerable:!0,configurable:!0}),s.ENUMERABLE_WRITABLE=s.WRITABLE_ENUMERABLE=t({writable:!0,enumerable:!0}),s.WRITABLE_ENUMERABLE_CONFIGURABLE=s.WRITABLE_CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE_WRITABLE=s.ENUMERABLE_WRITABLE_CONFIGURABLE=s.CONFIGURABLE_WRITABLE_ENUMERABLE=s.CONFIGURABLE_ENUMERABLE_WRITABLE=t({writable:!0,enumerable:!0,configurable:!0}),s.READONLY=t({writable:!1,enumerable:!1,configurable:!1}),s}static assign(e,t,s,r){let i={};switch(typeof t){case"string":case"symbol":if(!r)throw new Error("missing descriptor argument; use Object.assign instead");(r=Object.create(r)).value=s,Object.defineProperty(e,t,r);break;case"object":if([s,r]=[t,s],!r)throw new Error("missing descriptor argument; use Object.assign instead");for(let e of Object.getOwnPropertyNames(s))i[e]=Object.create(r),i[e].value=s[e];for(let e of Object.getOwnPropertySymbols(s))i[e]=Object.create(r),i[e].value=s[e];Object.defineProperties(e,i);break;default:throw new Error("invalid property argument")}return e}static create(e,t=!1,s=!1){return function(r){return t?Object.assign(s?Object.create(null):{},e,r):Object.assign(Object.create(s?Object.assign(Object.create(null),e):e),r)}}static disinherit(e){return Object.assign(Object.create(null),e)}}D.DESCRIPTORS_PROTOTYPE={writable:!1,enumerable:!1,configurable:!1},a.onInit((function(){D.descriptors=D.createDescriptors()}));const U=()=>++U.uid;U.uid=0;class B{constructor(e,t={}){let s,r;_("JFactoryAbout(owner)",e).type(Object),_("JFactoryAbout(about)",t).typePlainObject().reservedProperty("uid").reservedProperty("fingerprint"),"name"in t&&_("JFactoryAbout(about.name)",t.name).typeString().notEmptyString();let i=U();t.name?(s=t.name,delete t.name,r="jFactory_"+$(s.toLowerCase())+"_"+i):(delete t.name,s=`[${e.constructor.name}#${i}]`,r="jFactory_"+e.constructor.name+"_"+i),D.assign(this,{uid:i,name:s,fingerprint:r},D.descriptors.ENUMERABLE),Object.assign(this,t),_("JFactoryAbout.name",this.name).matchReg(/^[\w[\]#]+$/),_("JFactoryAbout.fingerprint",this.fingerprint).matchReg(/^[\w]+$/)}}const H=()=>++H.uid;H.uid=0;class J extends Promise{constructor({name:e,config:t,traceSource:s},r){1===arguments.length&&([e,t,r]=[null,null,arguments[0]]);const i=H();let a,n;t={...J.DEFAULT_CONFIG,...t},_("name",e=e||"unnamed").type(String,Number).matchReg(/^[^. ]+$/),_("config",t).typePlainObject(),_("executor",r).typeFunction(),super((e,t)=>{a=e,n=t});const l=new V(this,i,e,t);Object.defineProperties(this,{$chain:{enumerable:!0,writable:!0,value:l},$type:{writable:!0,value:"promise"},$value:{writable:!0,value:void 0},$isSettled:{writable:!0,value:!1},$isRejected:{writable:!0,value:null},$isFulfilled:{writable:!0,value:null},$isExpired:{writable:!0,value:!1},$isAborted:{writable:!0,value:!1}}),Object.defineProperties(this,{$dev_name:{configurable:!0,value:e+"["+i+":0]"},$dev_path:{writable:!0,value:new Y(this)},$dev_position:{writable:!0,value:0}}),o(r)||Object.defineProperties(this,{$dev_source:{value:r}}),A.tracer.attachTrace(this,s);const c=()=>{if(!this.$chain.isPending)try{this.$chainComplete("auto-completed")}catch(e){console.error(e)}},h=e=>{if(!this.$isSettled){if(e===this)return void u(new TypeError("Chaining cycle detected for promise "+this.$dev_name));let t;if(null!==e&&("object"==typeof e||"function"==typeof x))try{t=e.then}catch(e){return void u(e)}if("function"==typeof t){let s=!1,r=function(e){s||(s=!0,h(e))},i=function(e){s||(s=!0,u(e))};try{t.call(e,r,i)}catch(e){s||u(e)}}else this.$isRejected=!1,this.$isFulfilled=!0,this.$isExpired&&(e=this.$chain.errorExpired),a(e),d(e)}},u=e=>{this.$isSettled||(this.$isRejected=!0,this.$isFulfilled=!1,n(e),d(e))},d=e=>{this.$value=e,this.$isSettled=!0,this.$chain.chainMap.set(this,!0),this.$chain.chainConfig.chainAutoComplete&&(1!==this.$chain.chainMap.size||this.$isExpired?c():this.then(c))};let p=t.chainAutoComplete;Object.defineProperty(t,"chainAutoComplete",{get:()=>p,set:e=>{p!==e&&(p=e,e&&c())}}),l.chainMap.set(this,!1),Object.defineProperties(this,{__resolve__:{value:h},__reject__:{value:u}});try{r(h,u)}catch(e){u(e)}}then(e,t,s){let r,i,a,n=o(e)&&!e.name.startsWith("bound ");e&&"function"==typeof e&&(r=function(s){return"await"===l?a.$isAborted?t(a.$chain.errorExpired):e(s):a.$isExpired?void 0:(a.$isSettled,e(s))}),t&&"function"==typeof t&&(i=function(e){return a.$isSettled,t(e)});let l=s||(n?"await":void 0===e?"catch":"then");a=Object.assign(super.then(r,i),this),H.uid--,a.$type=l;{a.$dev_position=this.$chain.chainMap.size;let s="";e&&e.name&&(s+=e.name),t&&t.name&&(s+=","+t.name),Object.defineProperties(a,{$dev_name:{value:this.$chain.chainName+"["+this.$chain.chainId+":"+this.$dev_position+"]."+a.$type+(s?"("+s+")":"")+"["+a.$chain.chainId+":"+a.$dev_position+"]"},$dev_path:{value:new Y(this.$dev_path,a)},$dev_onFulfilled:{value:e},$dev_onRejected:{value:t}})}return a.$chain.chainMap.set(a,!1),this.$isExpired&&J.setExpired(a,!0,!this.$isAborted,this.$chain.errorExpired),a}$catchExpired(e){return this.then(t=>this.$chain.chainRoot.$isExpired?e(t):t,void 0,"$catchExpired")}static resolve(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),t instanceof this&&1===arguments.length?t:new this(e,(function(e){e(t)}))}static reject(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),new this(e,(function(e,s){s(t)}))}$toPromise(){return Promise.resolve(this)}$chainAbort(e="$chainAbort()"){return this.$chain.complete(e,!0),this}$chainComplete(e="$chainComplete()"){try{this.$chain.complete(e,!1)}catch(e){throw e instanceof S.INVALID_CALL?new S.INVALID_CALL({target:e.$data.target,reason:"Trying to complete a pending chain. Use $chainAbort() if you want to stop it."}):e}return this}$chainAutoComplete(){return this.$chain.chainConfig.chainAutoComplete=!0,this}static setExpired(e,t,s,r){if(!e.$isSettled){if(!t)throw new S.INVALID_CALL({target:e,reason:"promise must be aborted or settled before setting it to expired."});e.$isAborted=!s,e.__resolve__(r)}e.$isExpired=!0}}J.DEFAULT_CONFIG={chainAutoComplete:!1};class V{constructor(e,t,s,r){Object.defineProperties(this,{chainConfig:{value:r},chainRoot:{value:e},chainId:{value:t},chainName:{value:s},chainMap:{value:new Map},isCompleted:{value:!1,configurable:!0},data:{value:{}},__deferred__:{value:n.Deferred()}})}get isPending(){return Array.from(this.chainMap.values()).includes(!1)}then(e){return this.__deferred__.done(e),this}complete(e="chain.complete()",t){let s=this.chainRoot;if(!s.$isExpired){let r=s.$chain.errorExpired=new S.PROMISE_EXPIRED({target:s,reason:e}),i=this.chainMap;for(let e of i.keys())J.setExpired(e,t,!1,r);Object.defineProperty(this,"isCompleted",{value:!0}),this.__deferred__.resolve()}return this}}class Y extends Array{constructor(){super();for(let e of arguments)Array.isArray(e)?this.push(...e):this.push(e)}get printable(){return this.map((e,t)=>0===t?e.$dev_name:e.$dev_name.split(".")[1]).join(".")}toString(){return this.printable}}class q extends Promise{constructor(e){let t={$isSettled:!1,$isRejected:null,$value:void 0};super((s,r)=>{let i=!1,a=e=>{e instanceof Promise?q.resolve(e).then(a,n):i||(i=!0,t.$isSettled=!0,t.$isRejected=!1,t.$value=e,s(e))},n=e=>{i||(i=!0,t.$isSettled=!0,t.$isRejected=!0,t.$value=e,r(e))};try{e(a,n)}catch(e){n(e)}}),Object.assign(this,t),t=this}then(e,t){if(this.$isSettled){let s=this.$value;try{if(this.$isRejected){if(super.then(void 0,()=>null),!t||"function"!=typeof t)return q.reject(s);s=t(s)}else e&&"function"==typeof e&&(s=e(s))}catch(e){return q.reject(e)}return q.resolve(s)}return super.then(e,t)}static resolve(e){return e instanceof q?e:new q(e instanceof Promise?e.then.bind(e):t=>t(e))}}class W{constructor(){Object.defineProperties(this,{registry:{value:n(Object.create(null))},handlers:{value:new WeakMap},onListenerUpdate:{value:null,writable:!0},onObserverUpdate:{value:null,writable:!0}})}on({events:e,handler:t,target:s,selector:r}){W.validateSelector(e),_("JFactoryEvents.on({handler})",t).typeFunction(),s&&_("JFactoryEvents.on({target})",s).type(String,n,HTMLElement),r&&_("JFactoryEvents.on({selector})",s).typeString();let i=this.handlers.get(t);s?(i||this.handlers.set(t,!0),r?n(s).on(e,r,t):n(s).on(e,t),this.onListenerUpdate&&this.onListenerUpdate(arguments)):(i||(this.handlers.set(t,i=function(e,{data:s,stack:r}){r.push(()=>t(e,s))}),i.originalHandler=t),this.registry.on(e,i),this.onObserverUpdate&&this.onObserverUpdate(arguments))}off({events:e,handler:t,target:s,selector:r}){if(void 0!==e&&(W.validateSelector(e),t&&_("JFactoryEvents.off({handler})",t).typeFunction(),s&&_("JFactoryEvents.off({target})",s).type(String,n,HTMLElement),r&&_("JFactoryEvents.off({selector})",s).typeString()),s)r?n(s).off(e,r,t):n(s).off(e,t);else{if(n("*").off(e,t),t&&!(t=this.handlers.get(t)))throw new S.INVALID_VALUE({target:"handler",reason:"not registered",given:t});this.registry.off(e,t)}this.onObserverUpdate&&this.onObserverUpdate(arguments),this.onListenerUpdate&&this.onListenerUpdate(arguments)}triggerParallel({events:e,data:t,target:s}){W.validateSelector(e),s&&_("JFactoryEvents.triggerParallel({target})",s).type(String,n,HTMLElement);const r=[],i=[];if(e=e.split(" "),s)for(let i of e)n(s).trigger(i,{data:t,stack:r});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:r});for(let e of r){let t=e();t instanceof Promise&&!t.$isSettled&&i.push(t)}return i.length?Promise.all(i):q.resolve()}triggerSeries({events:e,data:t,target:s}){return W.validateSelector(e),s&&_("JFactoryEvents.triggerSeries({target})",s).type(String,n,HTMLElement),new q(async r=>{const i=[];if(e=e.split(" "),s)for(let r of e)n(s).trigger(r,{data:t,stack:i});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:i});for(let e of i){let t=e();t instanceof Promise&&!t.$isSettled&&await t}r()})}}class G extends W{constructor(e){super(),Object.defineProperties(this,{parent:{value:e},affiliateRules:{value:(new O).compose()}}),this.affiliateAddRule(G.rule_namespace)}affiliate(e="",t="",s){let r=new K(e);for(let e of r.events)this.affiliateRules(e,t,s);return r.toString()}affiliateAddRule(e){this.affiliateRules.composer.last(e)}static rule_namespace(e,t,s){s=s.split(".");for(let e of s)e&&t.addNamespace(e)}on(e,t,s,r,i){switch(arguments.length){case 2:[r,t]=[t];break;case 3:"function"==typeof arguments[2]?[r,s]=[s]:[r,i,t,s]=[t,s];break;case 4:"object"==typeof arguments[3]&&([i,r,s]=[r,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,i),void 0===t?super.on({events:e,handler:r}):super.on({events:e,target:t,selector:s,handler:r})}off(e,t,s,r,i){const a=arguments.length;switch(a){case 1:"object"==typeof arguments[0]&&([i,e]=[e]);break;case 2:"function"==typeof arguments[1]?[r,t]=[t]:h(arguments[1])&&([i,t]=[t]);break;case 3:"function"==typeof arguments[2]?[r,s]=[s]:"function"==typeof arguments[1]&&([r,i,t,s]=[t,s]);break;case 4:"object"==typeof arguments[3]&&([i,r,s]=[r,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,i),a<2?super.off({events:e}):t?super.off({events:e,target:t,selector:s,handler:r}):super.off({events:e,handler:r})}trigger(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerSeries({events:e,target:t,data:s}):super.triggerSeries({events:e,data:s})}triggerParallel(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerParallel({events:e,target:t,data:s}):super.triggerParallel({events:e,data:s})}getDomListeners(e){let t=new Map;for(let s of n("*")){let r=n._data(s,"events");if(r)for(let i of Object.values(r))for(let r of i){let i;new z(r.namespace).hasNamespace(e)&&((i=t.get(s))||t.set(s,i={}),(i[r.type]||(i[r.type]=[])).push({selector:r.selector||null,handler:r.handler,namespace:r.namespace}))}}return t}getObservers(){let e=new Map,t=this.registry._events;if(!t){let e=Object.values(this.registry)[0],s=Object.getOwnPropertyNames(e).find(e=>0===e.indexOf("jQuery"));e&&s&&(t=this.registry._events=e[s].events)}if(t)for(let[s,r]of Object.entries(t)){let t=e.get(s);t||(t=[],e.set(s,t));for(let e of r)t.push({handler:e.handler.originalHandler,namespace:e.namespace})}return e}}class K{constructor(e){W.validateSelector(e),this.events=e.split(" ").map(e=>new z(e))}toString(){let e=[];for(let t of this.events)e.push(t.toString());return e.join(" ")}}class z{constructor(e){let[t,...s]=e.split(".");this.event=t,this.namespace=new Set(s)}hasNamespace(e){Array.isArray(e)||(e=[e]);for(let t of e){if(!/^[\w:]+$/.test(t))throw new S.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:t});if(t&&this.namespace.has(t))return t}return!1}addNamespace(e){if(!/^[\w:]+$/.test(e))throw new S.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.add(e)}deleteNamespace(e){if(!/^[\w:]+$/.test(e))throw new S.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.delete(e)}toString(){return this.namespace.size?this.event+"."+Array.from(this.namespace.values()).join("."):this.event}}W.validateSelector=function(e){_("JFactoryEvents.validateSelector(selector)",e).notUndefined().validSpaces();for(let[t,s]of e.split(" ").map(e=>e.split(".")).map(e=>[e.shift(),e.join(".")]))t&&W.validateEvent(t),s&&W.validateNamespace(s);return!0},W.validateEvent=function(e){if(_("JFactoryEvents.validateEvent(event)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:]+$/.test(e))throw new S.INVALID_VALUE({target:"JFactoryEvents.validateEvent(event)",reason:"must be alphanumeric, underscore and colon characters",given:e});return!0},W.validateNamespace=function(e){if(_("JFactoryEvents.validateNamespace(namespace)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:.]+$/.test(e))throw new S.INVALID_VALUE({target:"JFactoryEvents.validateNamespace(namespace)",reason:"must be alphanumeric, underscore, dot and colon characters",given:e});return!0};class Q extends J{constructor(e,t,s={}){if("function"==typeof e)super(e);else{"string"==typeof e&&([e,t,s]=[{},arguments[0],arguments[1]]);let r=new Request(t,s);super(e,(i,a)=>{let n=fetch(r).then(e=>{if(this.$chain.fetchResponse=e,!e.ok)throw Error(e.status+":"+e.statusText);return e});s.$typeText?n=n.then(e=>e.text()).then(e=>this.$chain.responseText=e):s.$typeJSON&&(n=n.then(e=>e.json()).then(e=>this.$chain.responseJSON=e)),n=n.catch(i=>{throw new S.REQUEST_ERROR({reason:i.message||i,target:this.$chain.fetchResponse&&this.$chain.fetchResponse.url||t,owner:this,fetchOptions:s,fetchRequest:r,fetchResponse:this.$chain.fetchResponse||null},e.traceSource)}),n.then(i,a)}),this.$chain.fetchOptions=s,this.$chain.fetchRequest=r;let i=s.abortController||new AbortController;s.signal=i.signal,this.$chain.fetchAbortController=i}}$chainAbort(e="request aborted"){return super.$chainAbort(e),this.$chain.fetchAbortController.abort(),this}}const X=Symbol();class Z{constructor(e){e&&_("JFactoryLogger(options)",e).properties(Object.getOwnPropertyNames(Z.DEFAULT_CONFIG)),u(this,e,Z.DEFAULT_CONFIG),this.condition=P(Z.DEFAULT_CONDITION),this.installAccessor("log"),this.installAccessor("warn"),this.installAccessor("error")}get enabled(){return this[X]&&(!this.parentLogger||this.parentLogger.enabled)}set enabled(e){e?this.enable():this.disable()}enable(){!0!==this[X]&&(this[X]=!0)}disable(){!1!==this[X]&&(this[X]=!1)}disallow(e,t=this.label){this.filters[t]||(this.filters[t]={}),this.filters[t][e]=!0}allow(e,t=this.label){this.filters[t]&&delete this.filters[t][e]}installAccessor(e,t=e,s=this){_("JFactoryLogger(nativeName)",e).equalIn(["log","warn","error"]),Object.defineProperties(s,{[t]:{get:this.accessor.bind(this,e),configurable:!0}})}accessor(e){return this[X]&&this.condition(e)&&this.formatter[e](this)||f}createSubLogger(e){let t=new Z({enabled:this.enabled,label:this.label+"."+e,styles_css:this.styles_css,styles_cli:this.styles_cli,console:this.console,formatter:this.formatter});return t.parentLogger=this,t.condition.addCondition(()=>this.enabled),t.filters=this.filters,t}}Z.FORMATTER_NATIVE={log:e=>e.console.log.bind(e.console,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.label+">"),error:e=>e.console.error.bind(e.console,e.label+">")},Z.FORMATTER_CLI={log:e=>e.console.log.bind(e.console,e.styles_cli.label,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.styles_cli.label,e.label+">"),error:e=>e.console.error.bind(e.console,e.styles_cli.label,e.label+">")},Z.FORMATTER_BROWSER={log:e=>e.console.log.bind(e.console,"%c"+e.label+">",e.styles_css.label),warn:e=>e.console.warn.bind(e.console,"%c"+e.label+">",e.styles_css.label),error:e=>e.console.error.bind(e.console,"%c"+e.label+">",e.styles_css.label)},Z.DEFAULT_CONDITION=function(e){return _("JFactoryLogger.condition(nativeName)",e).equalIn(["log","warn","error"]),_("JFactoryLogger.enabled",this.enabled).equal(!0),!(this.filters[this.label]&&this.filters[this.label][e])},Z.DEFAULT_CONFIG={label:"",enabled:!0,parentLogger:null,formatter:r?Z.FORMATTER_CLI:Z.FORMATTER_BROWSER,console:console,filters:{},styles_cli:{label:"[1;30m%s[0m"},styles_css:{label:"color: gray"}};class ee extends Date{toString(){return this.toLocaleTimeString()+", "+this.getUTCMilliseconds()+"ms ("+this.valueOf()+")"}$toDurationString(){let e=this.getUTCHours(),t=this.getUTCMinutes(),s=this.getUTCSeconds(),r=this.getUTCMilliseconds(),i=[];return e&&i.push(e+"h"),t&&i.push(t+"min"),s&&i.push(s+"s"),i.push(r+"ms"),1===i.length?i[0]:i.join(",")+" ("+this.valueOf()+")"}}class te extends Date{constructor(){super(),this.elapsed=null,Object.defineProperties(this,{t1:{value:null,writable:!0},t0:{value:new ee}})}end(){this.t1=new ee,this.elapsed=new ee(this.t1-this.t0).$toDurationString()}toString(){return this.elapsed}}class se{trait_constructor(){const e=this;class t extends Map{constructor(...e){super(...e),Object.defineProperty(this,"id_autoinc",{value:0,writable:!0})}$registerSync(t,s){let r=Object.defineProperties({},{$value:{value:s},$phaseRemove:{value:le.getContextualRemovePhase(e)}});return this.set(t,r),r}$registerAsync(t,s,r){let i=e.$task(s,r.$chain);return r.$chain.then(()=>{i.$chainAutoComplete()}),i.$chain.then(()=>{r.$chain.isCompleted||r.$chainAbort("aborted by task")}),Object.defineProperty(r,"$phaseRemove",{value:i.$phaseRemove}),this.set(t,r),i}$id_resolve(e){if(e.indexOf("?")>=0){let t=++this.id_autoinc;e=e.replace(/\?/g,t)}return e}}const s=Object.assign(Object.create(null),{[se.SYMBOL_PRIVATE]:Object.create(null),assign:function(e,t,s){D.assign(this,e,t,s)},createSubMap:()=>new t});Object.defineProperty(this,"$",{value:Object.create(s)}),this.$.assign({tasks:null,requests:null},D.descriptors.ENUMERABLE_WRITABLE)}}se.SYMBOL_PRIVATE=Symbol("_");class re{trait_constructor(e){D.assign(this.$,"about",new B(this,e),D.descriptors.READONLY)}}class ie{trait_constructor(){let e=Object.assign({label:this.$.about.name},i.TraitLog||{enabled:!1}),t=new Z(e);Object.defineProperty(this.$,"logger",{value:t}),t.installAccessor("log","$log",this),t.installAccessor("warn","$logWarn",this),t.installAccessor("error","$logErr",this)}}class ae{trait_constructor(){this.$.assign("tasks",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$task(e,t){if(_("$task(id)",e=this.$.tasks.$id_resolve(e)).typeString(),_("$task(executorOrValue)",t).notUndefined(),this.$.tasks.has(e))throw new S.KEY_DUPLICATED({target:"$task(id)",given:e});let s,r;return s="function"==typeof t?new J({name:e,owner:this},t):J.resolve({name:e,owner:this},t),s.$phaseRemove=le.getContextualRemovePhase(this),r=new te,s.$taskMetrics={$dev_timing:r},s.$chain.then(()=>{r.end(),this.$.tasks.get(e)&&this.$taskRemove(e)}),this.$.tasks.set(e,s),s}$taskRemove(e,t){if(_("$taskRemove(id)",e).typeString(),t&&_("$taskRemove(reason)",t).typeString(),!this.$.tasks.has(e))throw new S.KEY_MISSING({target:"$taskRemove(id)",given:e});this.$.tasks.get(e)._called,this.$.tasks.get(e)._called=!0;let s=this.$.tasks.get(e);this.$.tasks.delete(e),s.$chainAbort(t||"$taskRemove()")}$taskRemoveAll(e){_("$taskRemoveAll(removePhase)",e).equalIn(le.PHASES);let t=this.$.tasks;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$taskRemove(s,"$taskRemoveAll("+e+")")}$taskPromiseAll(e=!1){let t=[];if(this.$.tasks.size)for(let s of this.$.tasks.values())e&&(s.$chain.chainConfig.chainAutoComplete=!0),s.$chain.isPending&&t.push(s.$chain);return t.length?Promise.all(t):q.resolve()}}class ne{trait_constructor(){ce(this,"events",{custom:new G(this),kernel:new G(this)},D.descriptors.NONE);let e=this.$[se.SYMBOL_PRIVATE].events.custom;Object.defineProperties(this.$,{listeners:{get:e.getDomListeners.bind(e,this.$.about.fingerprint),enumerable:!0},observers:{get:e.getObservers.bind(e),enumerable:!0}})}$on(){this.$[se.SYMBOL_PRIVATE].events.custom.on(...arguments)}$off(){this.$[se.SYMBOL_PRIVATE].events.custom.off(...arguments)}$trigger(){return this.$[se.SYMBOL_PRIVATE].events.custom.trigger(...arguments)}$triggerParallel(){return this.$[se.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)}$notify(e,t){return this.$trigger(e,t).then(()=>this.$[se.SYMBOL_PRIVATE].events.kernel.trigger(e,t))}}class oe{trait_constructor(){const e=Object.create(null),t=Object.create(null),s=this.$[se.SYMBOL_PRIVATE].events.kernel;ce(this,{states:e,stateRoutes:t},D.descriptors.READONLY),D.assign(this.$,"states",new Proxy(e,{set:(e,t,s)=>this.$state(t,s),get:(t,s)=>e[s]}),D.descriptors.READONLY),s.on("beforeStateChange",(e,s)=>{let r;if(t[s.key]&&t[s.key].before&&(r=t[s.key].before(s.val)))return this.$notify(r)}),s.on("afterStateChange",(e,s)=>{let r;if(t[s.key]&&t[s.key].after&&(r=t[s.key].after(s.val)))return this.$notify(r)})}$state(e,t,s=!0){return _("$state(key)",e).typeString(),_("$state(notify)",s).typeBoolean(),new q(async r=>{let i,a=this.$[se.SYMBOL_PRIVATE].states,n=a[e];e in a&&n===t||(i=s&&this.$notify("beforeStateChange",{key:e,val:t,previousVal:n}),i&&_("beforeStateChange result",i).type(q),i&&!i.$isSettled&&(a[e]=i,await i),void 0===t?delete a[e]:a[e]=t,i=s&&this.$notify("afterStateChange",{key:e,val:t,previousVal:n}),i&&_("afterStateChange result",i).type(q)),i?i.then(r):r()})}}class le{trait_constructor(){D.assign(this.$,"service",Object.create(null),D.descriptors.READONLY),this.$.service.phase=le.PHASE.NONE,this.$.service.phaseQueue=J.resolve({name:"phaseQueue"},null),this.$.service.phaseTask=null,this.$.service.phaseMap={install:new Set,enable:new Set,disable:new Set,uninstall:new Set},this.$state("installed",!1,!1),this.$state("enabled",!1,!1),he(this,"stateRoutes",{installed:{after:e=>e?"install":"uninstall"},enabled:{after:e=>e?"enable":"disable"}},D.descriptors.NONE);let e=this.$[se.SYMBOL_PRIVATE].events.custom,t=this.$[se.SYMBOL_PRIVATE].events.kernel;e.affiliateAddRule((e,t,s,r)=>le.setEventNamespaceRemovePhase(this,t,r));let s=e=>{this.$.tasks.size&&this.$taskRemoveAll(this.$.service.phase);let t=q.resolve();return e&&(t=t.then(()=>e.call(this)).then(()=>this.$taskPromiseAll(!0))),t.catch(e=>{e instanceof S.PROMISE_EXPIRED||this.$logErr("unhandled promise rejection in "+this.$.service.phase+";",...e instanceof y?e:[e])})};t.on("install",()=>s(this.onInstall)),t.on("enable",()=>s(this.onEnable)),t.on("disable",()=>s(this.onDisable)),t.on("uninstall",()=>s(this.onUninstall)),t.on("disable",()=>this.$off({removal:le.PHASE.DISABLE})),t.on("uninstall",()=>this.$off({removal:le.PHASE.UNINSTALL}))}$install(e){let t;const s=new J({name:"install",config:{chainAutoComplete:!0}},e=>t=e).then(()=>{if(!this.$.states.installed)return this.$.service.phase=le.PHASE.INSTALL,this.$state("installed",!0)});return this.$.service.phaseMap.install.add(s),s.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.install.delete(s),this.$.service.phase=le.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=s,t(),s.$chain)),e?this.$enable():s}$enable(){let e;const t=new J({name:"enable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed&&!this.$.states.enabled)return this.$.service.phase=le.PHASE.ENABLE,this.$state("enabled",!0)});return this.$.service.phaseMap.enable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.enable.delete(t),this.$.service.phase=le.PHASE.NONE}),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$disable(){let e;const t=new J({name:"disable",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.enabled)return this.$.service.phase=le.PHASE.DISABLE,this.$state("enabled",!1)});this.$.service.phaseMap.disable.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.disable.delete(t),this.$.service.phase=le.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.enable.entries())t===this.$.service.phaseTask&&le.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.enable.delete(e);return this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}$uninstall(){let e;const t=new J({name:"uninstall",config:{chainAutoComplete:!0}},t=>e=t).then(()=>{if(this.$.states.installed)return this.$.service.phase=le.PHASE.UNINSTALL,this.$state("installed",!1)});this.$.service.phaseMap.uninstall.add(t),t.$chain.then(()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.uninstall.delete(t),this.$.service.phase=le.PHASE.NONE});for(let[e,t]of this.$.service.phaseMap.install.entries())t===this.$.service.phaseTask&&le.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.install.delete(e);return this.$disable(),this.$.service.phaseQueue=this.$.service.phaseQueue.then(()=>(this.$.service.phaseTask=t,e(),t.$chain)),t}static phaseKill(e){e.$.tasks.size&&e.$taskRemoveAll(le.getContextualRemovePhase(e)),e.$.service.phase=le.PHASE.NONE}static getContextualRemovePhase(e){return le.PHASE_REVERT[e.$.service.phase]}static setEventNamespaceRemovePhase(e,t,s){let r=t.hasNamespace(le.PHASES),i=s&&s.removal;i||(i=le.getContextualRemovePhase(e)),"uninstall"===t.event&&i===le.PHASE.DISABLE&&(i=le.PHASE.UNINSTALL),r!==i&&(t.deleteNamespace(r),t.addNamespace(i)),t.addNamespace(i)}}function ce(e,t,s,r){D.assign(e.$[se.SYMBOL_PRIVATE],t,s,r)}function he(e,t,s,r){D.assign(e.$[se.SYMBOL_PRIVATE][t],s,r)}le.PHASE={NONE:"PHASE_NONE",INSTALL:"PHASE_INSTALL",ENABLE:"PHASE_ENABLE",DISABLE:"PHASE_DISABLE",UNINSTALL:"PHASE_UNINSTALL"},le.PHASE_REVERT={[le.PHASE.INSTALL]:le.PHASE.UNINSTALL,[le.PHASE.UNINSTALL]:le.PHASE.INSTALL,[le.PHASE.DISABLE]:le.PHASE.ENABLE,[le.PHASE.ENABLE]:le.PHASE.DISABLE,[le.PHASE.NONE]:le.PHASE.DISABLE},le.PHASES=Object.values(le.PHASE),k.PHASE=D.disinherit(le.PHASE),k.TraitCore=se,k.TraitAbout=re,k.TraitLog=ie,k.TraitEvents=ne,k.TraitState=oe,k.TraitService=le,k.TraitTask=ae;class ue{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$fetchRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$fetchRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("requests",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$fetch(e,t,s={}){if(_("$fetch(id)",e=this.$.requests.$id_resolve(e)).typeString(),_("$fetch(url)",t).typeString(),_("$fetch(fetchOptions)",s).typePlainObject(),this.$.requests.has(e))throw new S.KEY_DUPLICATED({target:"$fetch(id)",given:e});let r=new Q({name:e,traceSource:A.tracer.captureTraceSource("$fetch"),config:{chainAutoComplete:!0}},t,s);return this.$.requests.$registerAsync(e,'$fetch("'+e+'")',r),r.$chain.then(()=>{this.$.requests.has(e)&&this.$fetchRemove(e)}),r}$fetchText(e,t,s={}){return this.$fetch(e,t,{...s,$typeText:!0})}$fetchJSON(e,t,s={}){return this.$fetch(e,t,{...s,$typeJSON:!0})}$fetchRemove(e,t){if(_("$fetchRemove(id)",e).typeString(),t&&_("$fetchRemove(reason)",t).typeString(),!this.$.requests.has(e))throw new S.KEY_MISSING({target:"$fetchRemove(id)",given:e});this.$.requests.get(e)._debug_remove_called,this.$.requests.get(e)._debug_remove_called=!0;let s=this.$.requests.get(e);this.$.requests.delete(e),s.$chainAbort(t||"$fetchRemove()")}$fetchRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.requests;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$fetchRemove(s,"$fetchRemoveAll("+e+")")}}class de{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$timeoutRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$timeoutRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("timeouts",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$timeout(e,t,s=null,...r){if(_("id",e=this.$.timeouts.$id_resolve(e)).typeString(),_("delay",t).typeNumber(),_("handler",s).type(Function,null),this.$.timeouts.has(e))throw new S.KEY_DUPLICATED({target:"$timeout(id)",given:e});let i,a=new J({name:e,traceSource:A.tracer.captureTraceSource("$timeout"),config:{chainAutoComplete:!0}},e=>{i=setTimeout(()=>{a.$isExpired||e(s?s(...r):void 0)},t)});return a.$chain.data.timer=i,this.$.timeouts.$registerAsync(e,'$timeout("'+e+'")',a),a.$chain.then(()=>{this.$.timeouts.has(e)&&this.$timeoutRemove(e)}),a}$timeoutRemove(e,t){if(_("$timeoutRemove(id)",e).typeString(),t&&_("$timeoutRemove(reason)",t).typeString(),!this.$.timeouts.has(e))throw new S.KEY_MISSING({target:"$timeoutRemove(id)",given:e});this.$.timeouts.get(e)._debug_remove_called,this.$.timeouts.get(e)._debug_remove_called=!0;let s=this.$.timeouts.get(e);clearTimeout(s.$chain.data.timer),this.$.timeouts.delete(e),s.$chainAbort(t||"$timeoutRemove()")}$timeoutRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.timeouts;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$timeoutRemove(s,"$timeoutRemoveAll()")}}class pe{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$intervalRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$intervalRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("timeints",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$interval(e,t,s,...r){if(_("id",e=this.$.timeints.$id_resolve(e)).typeString(),_("handler",s).typeFunction(),_("delay",t).typeNumber(),this.$.timeints.has(e))throw new S.KEY_DUPLICATED({target:"$interval(id)",given:e});let i=setInterval(s,t,...r);this.$.timeints.$registerSync(e,i)}$intervalRemove(e){if(_("$intervalRemove(id)",e).typeString(),!this.$.timeints.has(e))throw new S.KEY_MISSING({target:"$intervalRemove(id)",given:e});this.$.timeints.get(e)._debug_remove_called,this.$.timeints.get(e)._debug_remove_called=!0,clearInterval(this.$.timeints.get(e).$value),this.$.timeints.delete(e)}$intervalRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.timeints;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$intervalRemove(s)}}class me{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$mutationRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$mutationRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("mutations",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$mutation(e,t,s,r){if(_("id",e=this.$.mutations.$id_resolve(e)).typeString(),_("parent",t).type(HTMLElement,Document),_("config",s).typePlainObject(),_("handler",r).typeFunction(),this.$.mutations.has(e))throw new S.KEY_DUPLICATED({target:"$mutation(id)",given:e});let i=new MutationObserver(r);i.observe(t,s),this.$.mutations.$registerSync(e,i)}$mutationRemove(e,t){if(_("$mutationRemove(id)",e).typeString(),t&&_("$mutationRemove(reason)",t).typeString(),!this.$.mutations.has(e))throw new S.KEY_MISSING({target:"$mutationRemove(id)",given:e});this.$.mutations.get(e)._debug_remove_called,this.$.mutations.get(e)._debug_remove_called=!0,this.$.mutations.get(e).$value.disconnect(),this.$.mutations.delete(e)}$mutationRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.mutations;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$mutationRemove(s)}}class $e{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$domRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$domRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("dom",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$dom(e,t,s){let r;if(_("id",e=this.$.dom.$id_resolve(e)).typeString(),_("jQueryArgument",t).type(String,Object),s&&_("appendTo",s).type(String,Object),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.dom.has(e))throw new S.KEY_DUPLICATED({target:"$dom(id)",given:e});let i=n(t);if("TEMPLATE"===i[0].tagName&&(i=n(n(i[0]).html())),r){if(i[0].nodeType!==Node.ELEMENT_NODE)throw new S.INVALID_VALUE({target:"$dom(#id)",given:i,reason:"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE"});i[0].id=e}return s&&i.appendTo(s),this.$.dom.$registerSync(e,i).$value}$domFetch(e,t,s,r){let i;if(s&&!h(s)&&([s,r]=[{},s]),_("id",e=this.$.dom.$id_resolve(e)).typeString(),_("url",t).typeString(),r&&_("appendTo",r).type(String,Object),s&&_("fetchOptions",s).type(Object),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.dom.has(e))throw new S.KEY_DUPLICATED({target:"$domFetch(id)",given:e});let a=this.$fetchText('$domFetch("'+e+'")',t,s).then(t=>{let s=n(t);return i&&(s[0].id=e),r&&s.appendTo(r),s});return this.$.dom.$registerAsync(e,'$domFetch("'+e+'")',a),a}$domRemove(e,t){if(_("$domRemove(id)",e).typeString(),t&&_("$domRemove(reason)",t).typeString(),!this.$.dom.has(e))throw new S.KEY_MISSING({target:"$domRemove(id)",given:e});this.$.dom.get(e)._debug_remove_called,this.$.dom.get(e)._debug_remove_called=!0;let s=this.$.dom.get(e),r=s.$value;r instanceof n&&r.remove(),s instanceof Q&&s.$chainAbort(t||"$domRemove()"),this.$.dom.delete(e)}$domRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.dom;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$domRemove(s)}}class fe{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$cssRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$cssRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("css",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$css(e,t){let s;if(_("id",e=this.$.css.$id_resolve(e)).typeString(),_("css",t).typeString(),"#"===e[0]&&(e=e.substring(1),s=!0),this.$.css.has(e))throw new S.KEY_DUPLICATED({target:"$css(id)",given:e});return this.$.css.$registerSync(e,n("<style>").attr(s?{id:e}:{}).html(t).appendTo("head")).$value}$cssFetch(e,t,s="head"){let r;if(_("id",e=this.$.css.$id_resolve(e)).typeString(),_("url",t).typeString(),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.css.has(e))throw new S.KEY_DUPLICATED({target:"$cssFetch(id)",given:e});t=v(t);let i=n(s).find(`link[href="${t}"]`)[0];if(i){i.dataset.usage=parseInt(i.dataset.usage)+1;let t=n(i),s=J.resolve({name:e,config:{chainAutoComplete:!0},traceSource:A.tracer.captureTraceSource("$cssFetch")},t);return s.$chain.data.dom=t,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',s),s}{let i,a=new J({name:e,config:{chainAutoComplete:!0},traceSource:A.tracer.captureTraceSource("$cssFetch")},a=>i=n("<link>",{id:r?e:"",rel:"stylesheet",type:"text/css","data-usage":"1"}).appendTo(s).on("load",()=>a(i)).attr("href",t));return a.$chain.data.dom=i,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',a),a}}$cssRemove(e,t){if(_("$cssRemove(id)",e).typeString(),t&&_("$cssRemove(reason)",t).typeString(),!this.$.css.has(e))throw new S.KEY_MISSING({target:"$cssRemove(id)",given:e});this.$.css.get(e)._debug_remove_called,this.$.css.get(e)._debug_remove_called=!0;let s=this.$.css.get(e),r=s.$chain&&s.$chain.data.dom||s.$value;if(r instanceof n){let e=parseInt(r[0].dataset.usage)-1;e?r[0].dataset.usage=e:r.remove()}s instanceof J&&s.$chainAbort(t||"$cssRemove()"),this.$.css.delete(e)}$cssRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.css;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$cssRemove(s)}}class ge{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$vueRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$vueRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("vue",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$vue(e,t){if(_("id",e=this.$.vue.$id_resolve(e)).typeString(),_("vue",t).type(Object),this.$.vue.has(e))throw new S.KEY_DUPLICATED({target:"$vue(id)",given:e});return this.$.vue.$registerSync(e,t).$value}$vueRemove(e){if(_("$vueRemove(id)",e).typeString(),!this.$.vue.has(e))throw new S.KEY_MISSING({target:"$vueRemove(id)",given:e});this.$.vue.get(e)._debug_remove_called,this.$.vue.get(e)._debug_remove_called=!0;let t=this.$.vue.get(e);n(t.$value.$el).remove(),t.$value.$destroy(),this.$.vue.delete(e)}$vueRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.vue;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$vueRemove(s)}}class ve{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$reactRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$reactRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("react",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$react(e,t,s,...r){if(e=this.$.react.$id_resolve(e),!k.ReactDOM)throw new Error("jFactory.ReactDOM=ReactDOM must be set before using the React Trait");if(_("id",e).typeString(),_("container",t).type(HTMLElement,n),this.$.react.has(e))throw new S.KEY_DUPLICATED({target:"$react(id)",given:e});t=n(t)[0];let i=k.ReactDOM.render(s,t,...r);return this.$.react.$registerSync(e,{container:t,view:i}).$value.view}$reactRemove(e){if(_("$reactRemove(id)",e).typeString(),!this.$.react.has(e))throw new S.KEY_MISSING({target:"$reactRemove(id)",given:e});this.$.react.get(e)._debug_remove_called,this.$.react.get(e)._debug_remove_called=!0;let t=this.$.react.get(e).$value.container;t&&(k.ReactDOM.unmountComponentAtNode(t)||this.$logWarn("unmountComponentAtNode failed to unmount",t),n(t).remove()),this.$.react.delete(e)}$reactRemoveAll(e){_("removePhase",e).equalIn(le.PHASES);let t=this.$.react;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$reactRemove(s)}}k.TraitFetch=ue,k.TraitTimeout=de,k.TraitInterval=pe,k.TraitMutation=me,k.TraitDOM=$e,k.TraitCSS=fe,k.TraitLibVue=ge,k.TraitLibReact=ve,"undefined"!=typeof jFactoryOverride&&jFactoryOverride||a.init(),e.JFACTORY_CLI=r,e.JFACTORY_DEBUG=!1,e.JFACTORY_DEV=!0,e.JFactoryAbout=B,e.JFactoryComponent=M,e.JFactoryCoreObject=C,e.JFactoryError=y,e.JFactoryEventSelector=z,e.JFactoryEventSelectorParser=K,e.JFactoryEvents=W,e.JFactoryEventsManager=G,e.JFactoryExpect=_,e.JFactoryFetch=Q,e.JFactoryFunctionComposer=O,e.JFactoryFunctionConditional=I,e.JFactoryFunctionExpirable=w,e.JFactoryFunctionWrappable=j,e.JFactoryLogger=Z,e.JFactoryObject=D,e.JFactoryPromise=J,e.JFactoryPromiseChain=V,e.JFactoryPromisePath=Y,e.JFactoryPromiseSync=q,e.JFactoryTime=ee,e.JFactoryTimeTrace=te,e.JFactoryTrace_LIB_STACKTRACE=E,e.JFactoryTrace_NOFILTER=b,e.JFactoryTraits=T,e.TraitAbout=re,e.TraitCSS=fe,e.TraitCore=se,e.TraitDOM=$e,e.TraitEvents=ne,e.TraitFetch=ue,e.TraitInterval=pe,e.TraitLibReact=ve,e.TraitLibVue=ge,e.TraitLog=ie,e.TraitMutation=me,e.TraitService=le,e.TraitState=oe,e.TraitTask=ae,e.TraitTimeout=de,e.assignPrivate=ce,e.assignPrivateMember=he,e.jFactory=k,e.jFactoryConfig=i,e.jFactoryError=S,e.jFactoryFunctionConditional=P,e.jFactoryFunctionExpirable=function(e){return new w(e).compose()},e.jFactoryFunctionWrappable=N,e.jFactoryLoader=a,e.jFactoryTrace=A,e.jFactoryTraits=F,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("lodash"),require("jquery")):"function"==typeof define&&define.amd?define(["exports","lodash","jquery"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).jFactoryModule={},e._,e.$);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiakZhY3RvcnktZGV2ZWwudW1kLmpzIiwic291cmNlcyI6WyIuLi9zcmMvakZhY3RvcnktZW52Lm1qcyIsIi4uL3NyYy9qRmFjdG9yeS1jb25maWcubWpzIiwiLi4vc3JjL2pGYWN0b3J5LWxvYWRlci5tanMiLCIuLi9zcmMvakZhY3RvcnktaGVscGVycy5tanMiLCIuLi9zcmMvSkZhY3RvcnlUcmFjZS5tanMiLCIuLi9zcmMvSkZhY3RvcnlFcnJvci5tanMiLCIuLi9zcmMvSkZhY3RvcnlFeHBlY3QubWpzIiwiLi4vc3JjL0pGYWN0b3J5VHJhaXRzLm1qcyIsIi4uL3NyYy9KRmFjdG9yeUZ1bmN0aW9uLm1qcyIsIi4uL3NyYy9qRmFjdG9yeS10cmFpdHMubWpzIiwiLi4vc3JjL2pGYWN0b3J5Lm1qcyIsIi4uL3NyYy9KRmFjdG9yeU9iamVjdC5tanMiLCIuLi9zcmMvSkZhY3RvcnlBYm91dC5tanMiLCIuLi9zcmMvSkZhY3RvcnlQcm9taXNlLm1qcyIsIi4uL3NyYy9KRmFjdG9yeUV2ZW50cy5tanMiLCIuLi9zcmMvSkZhY3RvcnlGZXRjaC5tanMiLCIuLi9zcmMvSkZhY3RvcnlMb2dnZXIubWpzIiwiLi4vc3JjL0pGYWN0b3J5VGltZS5tanMiLCIuLi9zcmMvVHJhaXRzQ29yZS5tanMiLCIuLi9zcmMvVHJhaXRzQ29tcG9uZW50cy5tanMiLCIuLi9zcmMvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppc1xuICogaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0XG4gKi9cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeSBFbnZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBDb21waWxlLXRpbWUgaW1tdXRhYmxlIEVudjsgdXNlZCBieSBUcmVlIFNoYWtpbmcgdG8gcmVtb3ZlIHVudXNlZCBjb2RlXG5leHBvcnQgY29uc3QgSkZBQ1RPUllfREVWID0gdHlwZW9mIENPTVBJTEVSX0RFViA9PT0gXCJ1bmRlZmluZWRcIiA/IGZhbHNlIDogQ09NUElMRVJfREVWOyAvLyBEZXZlbG9wZXIgTW9kZVxuZXhwb3J0IGNvbnN0IEpGQUNUT1JZX0RFQlVHID0gdHlwZW9mIENPTVBJTEVSX0RFQlVHID09PSBcInVuZGVmaW5lZFwiID8gZmFsc2UgOiBDT01QSUxFUl9ERUJVRzsgLy8gRGVidWcgdGhlIGxpYnJhcnlcbmV4cG9ydCBjb25zdCBKRkFDVE9SWV9DTEkgPSB0eXBlb2YgQ09NUElMRVJfQ0xJID09PSBcInVuZGVmaW5lZFwiID9cbiAgICB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLnZlcnNpb25zICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSA6IENPTVBJTEVSX0NMSTsiLCJpbXBvcnQgeyBKRkFDVE9SWV9ERVYsIEpGQUNUT1JZX0NMSSwgSkZBQ1RPUllfREVCVUcgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcblxuLy8gTXV0YWJsZSBjb25maWd1cmF0aW9uXG5leHBvcnQgY29uc3QgakZhY3RvcnlDb25maWcgPSB7XG4gICAgVHJhaXRMb2c6IEpGQUNUT1JZX0RFViAmJiAhSkZBQ1RPUllfQ0xJIHx8IEpGQUNUT1JZX0RFQlVHLFxuICAgIEpGYWN0b3J5RXJyb3I6IHtcbiAgICAgICAga2V5czogW1wiJC5hYm91dC5uYW1lXCIsIFwiJGRldl9uYW1lXCIsIFwiJG5hbWVcIiwgXCJuYW1lXCIsIFwiaWRcIl1cbiAgICB9LFxuICAgIEpGYWN0b3J5VHJhY2U6IEpGQUNUT1JZX0RFViAmJiAhSkZBQ1RPUllfQ0xJXG4gICAgICAgICYmIHtcbiAgICAgICAgICAgIGtleXM6IFtcIiRkZXZfdHJhY2VMb2dcIiwgXCIkZGV2X3RyYWNlU291cmNlXCJdLFxuICAgICAgICAgICAgbGliT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIG9mZmxpbmU6IEJvb2xlYW4oZ2xvYmFsVGhpcy5jaHJvbWUpLCAvLyBsb2FkaW5nIHNvdXJjZW1hcHMgaXMgbm90IHJlcXVpcmVkIGluIGNocm9tZVxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxpbmVOdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gJiYgKHZhbHVlLmZpbGVOYW1lICsgdmFsdWUuZnVuY3Rpb25OYW1lKS50b0xvY2FsZUxvd2VyQ2FzZSgpLmluZGV4T2YoJ2pmYWN0b3J5JykgPCAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIGpGYWN0b3J5RGV2OiBKRkFDVE9SWV9ERVZcbiAgICAgICAgJiYge1xuICAgICAgICAgICAgcmVxdWlyZUNvbXBhdGliaWxpdHk6IHtcbiAgICAgICAgICAgICAgICBnbG9iYWxUaGlzOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3Q6ICgpID0+IGdsb2JhbFRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGluZm86IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvZ2xvYmFsVGhpc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmZXRjaDoge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0OiAoKSA9PiBmZXRjaCxcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRmV0Y2hfQVBJL1VzaW5nX0ZldGNoXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFJlcXVlc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogKCkgPT4gUmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvUmVxdWVzdFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIkFib3J0Q29udHJvbGxlciwgQWJvcnRTaWduYWxcIjoge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0OiAoKSA9PiBuZXcgQWJvcnRDb250cm9sbGVyKCkuc2lnbmFsLFxuICAgICAgICAgICAgICAgICAgICBpbmZvOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9BYm9ydENvbnRyb2xsZXIsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0Fib3J0U2lnbmFsXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIE11dGF0aW9uT2JzZXJ2ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogKCkgPT4gTXV0YXRpb25PYnNlcnZlcixcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvTXV0YXRpb25PYnNlcnZlclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG59IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGQUNUT1JZX0NMSSwgSkZBQ1RPUllfREVWIH0gZnJvbSBcIi4vakZhY3RvcnktZW52XCI7XG5pbXBvcnQgeyBqRmFjdG9yeUNvbmZpZyB9IGZyb20gXCIuL2pGYWN0b3J5LWNvbmZpZ1wiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGpGYWN0b3J5IExvYWRlclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY29uc3QgakZhY3RvcnlMb2FkZXIgPSB7XG4gICAgc2VxOiBbXSxcbiAgICBpbml0KCkge1xuICAgICAgICBpZiAodGhpcy5zZXEpIHtcbiAgICAgICAgICAgIGxldCBzZXEgPSB0aGlzLnNlcTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNlcTtcbiAgICAgICAgICAgIGZvciAobGV0IG1vZHVsZSBvZiBzZXEpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIGdsb2JhbFRoaXMuakZhY3RvcnlPdmVycmlkZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBvbkluaXQoaGFuZGxlcikge1xuICAgICAgICB0aGlzLnNlcS5wdXNoKGhhbmRsZXIpXG4gICAgfVxufTtcblxuZnVuY3Rpb24gakZhY3RvcnlEZXYoKSB7XG4gICAgY29uc29sZS5sb2coXCJqRmFjdG9yeSBpcyBydW5uaW5nIGluIGRldmVsb3BtZW50IG1vZGU7IHBlcmZvcm1hbmNlcyB3aWxsIGJlIGFmZmVjdGVkXCIpO1xuICAgIGZvciAobGV0IFtuYW1lLCBlbnRyeV0gb2YgT2JqZWN0LmVudHJpZXMoakZhY3RvcnlDb25maWcuakZhY3RvcnlEZXYucmVxdWlyZUNvbXBhdGliaWxpdHkpKSB7XG4gICAgICAgIGxldCBwYXNzO1xuICAgICAgICB0cnkge3Bhc3MgPSBCb29sZWFuKGVudHJ5LnRlc3QoKSl9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICAgIGlmICghcGFzcykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBqRmFjdG9yeSBtYXkgcmVxdWlyZSB0aGUgc3VwcG9ydCBvZiBcIiR7bmFtZX1cIiwgJHtlbnRyeS5pbmZvfWApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGpGYWN0b3J5SW5pdCgpIHtcbiAgICAhakZhY3RvcnlDb25maWcuVHJhaXRMb2cgJiYgKEpGQUNUT1JZX0RFViB8fCBKRkFDVE9SWV9DTEkpICYmIGNvbnNvbGUud2FybihcImpGYWN0b3J5IGxvZ3MgZGlzYWJsZWRcIik7XG59XG5cbkpGQUNUT1JZX0RFViAmJiBqRmFjdG9yeUxvYWRlci5vbkluaXQoakZhY3RvcnlEZXYpO1xuakZhY3RvcnlMb2FkZXIub25Jbml0KGpGYWN0b3J5SW5pdCk7IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeSBIZWxwZXJzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENlbnRyYWxpemUgaGVscGVycyBhbmQgZXh0ZXJuYWxzIGluIG9uZSBtb2R1bGVcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNvbnN0IGpRdWVyeSA9ICQ7XG5cbmV4cG9ydCBjb25zdCBoZWxwZXJfaXNOYXRpdmUgPSBfLmlzTmF0aXZlO1xuZXhwb3J0IGNvbnN0IGhlbHBlcl9pc1N0cmluZyA9IF8uaXNTdHJpbmc7XG5leHBvcnQgY29uc3QgaGVscGVyX2lzTnVtYmVyID0gXy5pc051bWJlcjtcbmV4cG9ydCBjb25zdCBoZWxwZXJfaXNQbGFpbk9iamVjdCA9IF8uaXNQbGFpbk9iamVjdDtcbmV4cG9ydCBjb25zdCBoZWxwZXJfZGVmYXVsdHNEZWVwID0gXy5kZWZhdWx0c0RlZXA7XG5leHBvcnQgY29uc3QgaGVscGVyX2xvd2VyRmlyc3QgPSBfLmxvd2VyRmlyc3Q7XG5leHBvcnQgY29uc3QgaGVscGVyX2dldCA9IF8uZ2V0O1xuZXhwb3J0IGNvbnN0IGhlbHBlcl90ZW1wbGF0ZSA9IF8udGVtcGxhdGU7XG5leHBvcnQgY29uc3QgaGVscGVyX2NhbWVsQ2FzZSA9IF8uY2FtZWxDYXNlO1xuXG5leHBvcnQgY29uc3QgTk9PUCA9ICgpID0+IHt9O1xuZXhwb3J0IGNvbnN0IGhlbHBlcl9zZXRGdW5jdGlvbk5hbWUgPSAobmFtZSwgZikgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IHZhbHVlOiBuYW1lIH0pO1xuZXhwb3J0IGNvbnN0IGhlbHBlcl91cmxfYWJzID0gdXJsID0+IHtoZWxwZXJfdXJsX2Ficy5hLmhyZWYgPSB1cmw7IHJldHVybiBoZWxwZXJfdXJsX2Ficy5hLmhyZWZ9O1xuaGVscGVyX3VybF9hYnMuYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpOyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBqRmFjdG9yeUNvbmZpZyB9IGZyb20gXCIuL2pGYWN0b3J5LWNvbmZpZ1wiO1xuaW1wb3J0IHsgakZhY3RvcnlMb2FkZXIgfSBmcm9tIFwiLi9qRmFjdG9yeS1sb2FkZXJcIjtcbmltcG9ydCB7IE5PT1AgfSBmcm9tIFwiLi9qRmFjdG9yeS1oZWxwZXJzXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlUcmFjZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSAjbGltaXRhdGlvbiMgRXJyb3Iuc3RhY2sgaXMgbm90IHN0YW5kYXJkaXplZFxuLy8gLSAjbGltaXRhdGlvbiMgRXJyb3Iuc3RhY2sgaXMgbm90IHNvdXJjZS1tYXBwZWRcbi8vIC0gI2xpbWl0YXRpb24jIGJ1ZyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTg0MjQ0XG4vLyAtICNsaW1pdGF0aW9uIyBTdGFja1RyYWNlLmpzIHJlc29sdmVzIHNvdXJjZW1hcHMuIFVuZm9ydHVuYXRlbHksIGl0IGRvZXNuJ3Qgd29yayB3aXRoIFwid2VicGFjazpcIiBwcm90b2NvbFxuLy8gICBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3N0YWNrdHJhY2Vqcy9zdGFja3RyYWNlLmpzL2lzc3Vlcy8yMDlcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9cbi8vIGh0dHBzOi8vd3d3LnN0YWNrdHJhY2Vqcy5jb20vXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm92b2NhaW5lL3NvdXJjZW1hcHBlZC1zdGFja3RyYWNlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5VHJhY2VfTk9GSUxURVIge1xuXG4gICAgY29uc3RydWN0b3IoeyBsYWJlbCwgc3RhY2tUcmFjZUxpbWl0LCBrZXlzLCBsaWJPcHRpb25zIH0gPSB7fSkge1xuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWwgfHwgXCJUaGUgc3RhY2sgaGFzIGJlZW4gcHJpbnRlZCBpbiB0aGUgY29uc29sZVwiO1xuICAgICAgICB0aGlzLnN0YWNrVHJhY2VMaW1pdCA9IHN0YWNrVHJhY2VMaW1pdCB8fCBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5rZXlzID0ga2V5cyB8fCBbXCJzdGFja0xvZ1wiLCBcInN0YWNrU291cmNlXCJdO1xuICAgICAgICB0aGlzLmxpYk9wdGlvbnMgPSBsaWJPcHRpb25zIHx8IHt9XG4gICAgfVxuXG4gICAgY2FwdHVyZVRyYWNlU291cmNlKG9taXRBYm92ZUZ1bmN0aW9uTmFtZSwgb21pdFNlbGYpIHtcbiAgICAgICAgbGV0IF9zdGFja1RyYWNlTGltaXQ7XG4gICAgICAgIGlmICh0aGlzLnN0YWNrVHJhY2VMaW1pdCkge1xuICAgICAgICAgICAgX3N0YWNrVHJhY2VMaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IHRoaXMuc3RhY2tUcmFjZUxpbWl0XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvbWl0QWJvdmVGdW5jdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIG9taXRBYm92ZUZ1bmN0aW9uTmFtZSA9IFwiY2FwdHVyZVRyYWNlU291cmNlXCI7XG4gICAgICAgICAgICBvbWl0U2VsZiA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBsZXQgdHJhY2VTb3VyY2UgPSB7XG4gICAgICAgICAgICBzb3VyY2U6IG5ldyBFcnJvcigpLFxuICAgICAgICAgICAgb21pdEFib3ZlRnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgb21pdFNlbGZcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuc3RhY2tUcmFjZUxpbWl0KSB7XG4gICAgICAgICAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBfc3RhY2tUcmFjZUxpbWl0XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYWNlU291cmNlXG4gICAgfVxuXG4gICAgYXR0YWNoVHJhY2UodGFyZ2V0T2JqZWN0LCB0cmFjZVNvdXJjZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRyYWNlU291cmNlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0cmFjZVNvdXJjZSA9IHRoaXMuY2FwdHVyZVRyYWNlU291cmNlKHRyYWNlU291cmNlIHx8IFwiYXR0YWNoVHJhY2VcIiwgIXRyYWNlU291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0cmFjZSA9IHRyYWNlU291cmNlLnNvdXJjZTtcbiAgICAgICAgdGhpcy50b1ByaW50YWJsZVRyYWNlKHRyYWNlU291cmNlKVxuICAgICAgICAgICAgLnRoZW4ociA9PiB0cmFjZSA9IHIpO1xuXG4gICAgICAgIGxldCBsb2cgPSAoKSA9PiBjb25zb2xlLmxvZyh0cmFjZSkgfHwgdGhpcy5sYWJlbDtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0T2JqZWN0LCB0aGlzLmtleXNbMF0gLyogdHJhY2VMb2cgKi8sIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgZnVuY3Rpb24gYm9keSB0byBpbXByb3ZlIHJlYWRhYmlsaXR5IGluIGRldnRvb2xcbiAgICAgICAgICAgIGdldDogKCkgPT4gbG9nKClcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXRPYmplY3QsIHRoaXMua2V5c1sxXSAvKiB0cmFjZVNvdXJjZSAqLywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAvLyBoaWRlIHRoZSB0cmFjZVNvdXJjZSBFcnJvciB0byBpbXByb3ZlIHJlYWRhYmlsaXR5IGluIGRldnRvb2wsIHNwZWNpYWxseSBpbiBGaXJlZm94XG4gICAgICAgICAgICBnZXQ6ICgpID0+IHRyYWNlU291cmNlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvUHJpbnRhYmxlVHJhY2UodHJhY2VTb3VyY2UpIHtcbiAgICAgICAgLy8gU1BFQzogdGhpcyBvdmVycmlkYWJsZSBtZXRob2QgcmV0dXJucyBhIHByb21pc2VcbiAgICAgICAgLy8gYmVjYXVzZSBzdGFja3RyYWNlIHBhcnNlcnMgbWF5IGJlIGFzeW5jaHJvbm91c1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRyYWNlU291cmNlLnNvdXJjZSlcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeVRyYWNlX0xJQl9TVEFDS1RSQUNFIGV4dGVuZHMgSkZhY3RvcnlUcmFjZV9OT0ZJTFRFUiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoY29uZmlnKTtcbiAgICB9XG5cbiAgICB0b1ByaW50YWJsZVRyYWNlKHRyYWNlU291cmNlKSB7XG4gICAgICAgIHJldHVybiBTdGFja1RyYWNlLmZyb21FcnJvcih0cmFjZVNvdXJjZS5zb3VyY2UsIHRoaXMubGliT3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKHRyYWNlRnJhbWVzID0+IHtcblxuICAgICAgICAgICAgICAgIGlmICh0cmFjZVNvdXJjZS5vbWl0QWJvdmVGdW5jdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNsaWNlID0gdHJhY2VGcmFtZXMuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5mdW5jdGlvbk5hbWUgJiYgdmFsdWUuZnVuY3Rpb25OYW1lLmVuZHNXaXRoKHRyYWNlU291cmNlLm9taXRBYm92ZUZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWNlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNlU291cmNlLm9taXRTZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2UrK1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VGcmFtZXMgPSB0cmFjZUZyYW1lcy5zbGljZShzbGljZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJhY2VGcmFtZXMgPSB0cmFjZUZyYW1lc1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHRoaXMubGliT3B0aW9ucy5maWx0ZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdFRyYWNlRnJhbWVzKHRyYWNlRnJhbWVzKVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9ybWF0VHJhY2VGcmFtZXModHJhY2VGcmFtZXMpIHtcbiAgICAgICAgbGV0IGhlYWRlcjtcbiAgICAgICAgbGV0IGxpbmVQcmVmaXg7XG4gICAgICAgIGlmICh0aGlzLmxpYk9wdGlvbnMub2ZmbGluZSAmJiB3aW5kb3cuY2hyb21lKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgZmFsbG93aW5nIHN5bnRheCBpcyBkZXRlY3RlZCBvbiBDaHJvbWUsXG4gICAgICAgICAgICAvLyB0aGUgY29uc29sZS5sb2coKSB3aWxsIGNvbnZlcnQgdGhlIGZpbGVOYW1lcyB1c2luZyBzb3VyY2VtYXBzXG4gICAgICAgICAgICBoZWFkZXIgPSBcIkVycm9yXFxuXCI7IC8vIG5vdGVzIHRoYXQgYW55dGhpbmcgYWZ0ZXIgXCJFcnJvclwiIGlzIHZhbGlkXG4gICAgICAgICAgICBsaW5lUHJlZml4ID0gXCJcXHRhdCBcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlYWRlciA9IFwiXCI7XG4gICAgICAgICAgICBsaW5lUHJlZml4ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVhZGVyICtcbiAgICAgICAgICAgIHRyYWNlRnJhbWVzXG4gICAgICAgICAgICAgICAgLm1hcChzZiA9PiBsaW5lUHJlZml4ICsgc2YudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKTtcbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gakZhY3RvcnlUcmFjZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY29uc3QgakZhY3RvcnlUcmFjZSA9IHt9O1xuXG5qRmFjdG9yeUxvYWRlci5vbkluaXQoZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNvbmZpZyA9IGpGYWN0b3J5Q29uZmlnLkpGYWN0b3J5VHJhY2U7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcudXNlICE9PSBmYWxzZSkge1xuICAgICAgICBsZXQgY29uc3RydWN0b3I7XG4gICAgICAgIGNvbnN0cnVjdG9yID0gdHlwZW9mIGNvbmZpZy51c2UgPT09IFwiZnVuY3Rpb25cIiA/XG4gICAgICAgICAgICBjb25maWcudXNlIDpcbiAgICAgICAgICAgIHR5cGVvZiBTdGFja1RyYWNlID09PSBcIm9iamVjdFwiID8gSkZhY3RvcnlUcmFjZV9MSUJfU1RBQ0tUUkFDRSA6IEpGYWN0b3J5VHJhY2VfTk9GSUxURVI7XG4gICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PT0gSkZhY3RvcnlUcmFjZV9MSUJfU1RBQ0tUUkFDRSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiakZhY3Rvcnk6IFN0YWNrIHRyYWNlIGVuYWJsZWQ7IFBlcmZvcm1hbmNlIHdpbGwgYmUgYWZmZWN0ZWRcIilcbiAgICAgICAgfVxuICAgICAgICBqRmFjdG9yeVRyYWNlLnRyYWNlciA9IG5ldyBjb25zdHJ1Y3Rvcihjb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGpGYWN0b3J5VHJhY2UudHJhY2VyID0ge1xuICAgICAgICAgICAgY2FwdHVyZVRyYWNlU291cmNlOiBOT09QLFxuICAgICAgICAgICAgYXR0YWNoVHJhY2U6IE5PT1BcbiAgICAgICAgfTtcbiAgICB9XG59KTsiLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgSkZBQ1RPUllfREVWIH0gZnJvbSBcIi4vakZhY3RvcnktZW52XCI7XG5pbXBvcnQgeyBqRmFjdG9yeUNvbmZpZyB9IGZyb20gXCIuL2pGYWN0b3J5LWNvbmZpZ1wiO1xuaW1wb3J0IHsgaGVscGVyX2dldCwgaGVscGVyX2lzTmF0aXZlLCBoZWxwZXJfbG93ZXJGaXJzdCwgaGVscGVyX3RlbXBsYXRlIH0gZnJvbSBcIi4vakZhY3RvcnktaGVscGVyc1wiO1xuaW1wb3J0IHsgakZhY3RvcnlUcmFjZSB9IGZyb20gXCIuL0pGYWN0b3J5VHJhY2VcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUVycm9yXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBcInVuc3BlY2lmaWVkIGVycm9yXCIsIGRhdGEgPSBudWxsKSB7XG4gICAgICAgIGRhdGEgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIGRhdGEpO1xuICAgICAgICBtZXNzYWdlID0gSkZhY3RvcnlFcnJvci50b1ByaW50YWJsZShtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuJGRhdGEgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIGRhdGEpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlXG4gICAgfVxuXG4gICAgKiBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgeWllbGQgdGhpcy5tZXNzYWdlO1xuICAgICAgICB5aWVsZCB0aGlzLiRkYXRhO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRJZChvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdFsoakZhY3RvcnlDb25maWcuSkZhY3RvcnlFcnJvci5rZXlzIHx8IEpGYWN0b3J5RXJyb3IuREVGQVVMVF9LRVlTKS5maW5kKGtleSA9PiB7XG4gICAgICAgICAgICBsZXQgdmFsID0gaGVscGVyX2dldChvYmplY3QsIGtleSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsIHx8IHZhbCA9PT0gMFxuICAgICAgICB9KV1cbiAgICB9XG5cbiAgICBzdGF0aWMgdG9QcmludGFibGVEYXRhKGRhdGEpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGVEYXRhID0ge307XG4gICAgICAgIGxldCBudjtcbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbC5uYW1lICsgXCIoKVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IFwibnVsbFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKG52ID0gSkZhY3RvcnlFcnJvci5nZXRJZCh2YWwpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSAnXCInICsgbnYgKyAnXCInXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhlbHBlcl9pc05hdGl2ZSh2YWwudG9TdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnYgPSBKU09OLnN0cmluZ2lmeSh2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBudi5sZW5ndGggPiBKRmFjdG9yeUVycm9yLkpTT05fTUFYXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG52LnN1YnN0cmluZygwLCBKRmFjdG9yeUVycm9yLkpTT05fTUFYKSArIFwiWy4uLl1cIiA6IG52O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gXCJbb2JqZWN0IFwiICsgdmFsLmNvbnN0cnVjdG9yLm5hbWUgKyBcIl1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9ICdcIicgKyB2YWwgKyAnXCInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSBTdHJpbmcodmFsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcGxhdGVEYXRhW2tleV0gPSB2YWxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcGxhdGVEYXRhXG4gICAgfVxuXG4gICAgc3RhdGljIHRvUHJpbnRhYmxlKHRlbXBsYXRlLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlTWVzc2FnZSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwYXJ0IG9mIHRlbXBsYXRlLnNwbGl0KFwiO1wiKSkge1xuICAgICAgICAgICAgbGV0IHBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgbGV0IFJFX1BMQUNFSE9MREVSID0gSkZhY3RvcnlFcnJvci5SRV9QTEFDRUhPTERFUjtcbiAgICAgICAgICAgIFJFX1BMQUNFSE9MREVSLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpZiAoKHBsYWNlaG9sZGVyID0gUkVfUExBQ0VIT0xERVIuZXhlYyhwYXJ0KSkpIHtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlclsxXSAmJiBwbGFjZWhvbGRlclsxXSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZU1lc3NhZ2UucHVzaChwYXJ0LnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoKHBsYWNlaG9sZGVyID0gUkVfUExBQ0VIT0xERVIuZXhlYyhwYXJ0KSkgIT09IG51bGwpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlTWVzc2FnZS5wdXNoKHBhcnQudHJpbSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVscGVyX2xvd2VyRmlyc3QoaGVscGVyX3RlbXBsYXRlKHRlbXBsYXRlTWVzc2FnZS5qb2luKFwiOyBcIikpKEpGYWN0b3J5RXJyb3IudG9QcmludGFibGVEYXRhKGRhdGEpKSk7XG4gICAgfVxufVxuXG5KRmFjdG9yeUVycm9yLkpTT05fTUFYID0gNDA7XG5KRmFjdG9yeUVycm9yLkRFRkFVTFRfS0VZUyA9IFtcIm5hbWVcIiwgXCJpZFwiXTtcbkpGYWN0b3J5RXJyb3IuUkVfUExBQ0VIT0xERVIgPSAvXFwkeyhbXn1dKyl9L2c7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gakZhY3RvcnlFcnJvclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgbGV0IGpGYWN0b3J5RXJyb3IgPSBuZXcgUHJveHkoSkZhY3RvcnlFcnJvciwge1xuICAgIHNldDogZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgbGV0IHsgdGVtcGxhdGUgfSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYgJiYgdGFyZ2V0W3Byb3BlcnR5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWxyZWFkeSBkZWNsYXJlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSBjbGFzcyBleHRlbmRzIEpGYWN0b3J5RXJyb3Ige1xuICAgICAgICAgICAgY29uc3RydWN0b3IoZGF0YSwgdHJhY2VTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBzdXBlcih0ZW1wbGF0ZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgakZhY3RvcnlUcmFjZS50cmFjZXIuYXR0YWNoVHJhY2UodGhpcy4kZGF0YSwgdHJhY2VTb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBDYXV0aW9uOiBDaHJvbWUgYXV0b21hdGljYWxseSByZXNvbHZlcyBzb3VyY2VtYXAgd2hlbiBsb2dnaW5nIGVycm9yc1xuICAgICAgICAvLyBidXQgb25seSBpZiB0aGUgZXJyb3IgbmFtZSBzdGFydHMgd2l0aCBcIkVycm9yXCJcbiAgICAgICAgdGFyZ2V0W3Byb3BlcnR5XS5wcm90b3R5cGUubmFtZSA9IFwiRXJyb3IgakZhY3RvcnlFcnJvci5cIiArIHByb3BlcnR5O1xuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxufSk7XG5cbmpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSA9IHsgdGVtcGxhdGU6IFwiaW52YWxpZCB2YWx1ZSBmb3IgJHt0YXJnZXR9OyBSZWFzb246ICR7cmVhc29ufTsgR2l2ZW46ICR7Z2l2ZW59XCIgfTtcbmpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMID0geyB0ZW1wbGF0ZTogXCJpbnZhbGlkIGNhbGwgJHt0YXJnZXR9OyBSZWFzb246ICR7cmVhc29ufTsgT3duZXI6ICR7b3duZXJ9XCIgfTtcbmpGYWN0b3J5RXJyb3IuUFJPTUlTRV9FWFBJUkVEID0geyB0ZW1wbGF0ZTogXCJleHBpcmVkIHByb21pc2UgJHt0YXJnZXR9OyBSZWFzb246ICR7cmVhc29ufVwiIH07XG5qRmFjdG9yeUVycm9yLlJFUVVFU1RfRVJST1IgPSB7IHRlbXBsYXRlOiBcImVycm9yIHJlcXVlc3RpbmcgJHt0YXJnZXR9OyBSZWFzb246ICR7cmVhc29ufTsgT3duZXI6ICR7b3duZXJ9XCIgfTtcbmpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQgPSB7IHRlbXBsYXRlOiBcImR1cGxpY2F0ZWQga2V5IGZvciAke3RhcmdldH07IEdpdmVuOiAke2dpdmVufVwiIH07XG5qRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HID0geyB0ZW1wbGF0ZTogXCJtaXNzaW5nIGtleSBmb3IgJHt0YXJnZXR9OyBHaXZlbjogJHtnaXZlbn1cIiB9OyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBqRmFjdG9yeUVycm9yIH0gZnJvbSBcIi4vSkZhY3RvcnlFcnJvclwiO1xuaW1wb3J0IHsgaGVscGVyX2lzTnVtYmVyLCBoZWxwZXJfaXNQbGFpbk9iamVjdCwgaGVscGVyX2lzU3RyaW5nIH0gZnJvbSBcIi4vakZhY3RvcnktaGVscGVyc1wiO1xuaW1wb3J0IHsgakZhY3RvcnlMb2FkZXIgfSBmcm9tIFwiLi9qRmFjdG9yeS1sb2FkZXJcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUV4cGVjdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBIHNtYWxsIGlucHV0L291dHB1dCB2YWxpZGF0aW9uIHRvb2xcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBBbHBoYSwgRHJhZnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEByZXR1cm4geyp8SkZhY3RvcnlFeHBlY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBKRmFjdG9yeUV4cGVjdChsYWJlbCwgdmFsdWUpIHtcbiAgICBpZiAobmV3LnRhcmdldCkge1xuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEpGYWN0b3J5RXhwZWN0KGxhYmVsLCB2YWx1ZSlcbiAgICB9XG59XG5cbmNvbnN0IGVycm9yID0gZnVuY3Rpb24gakZhY3RvcnlUaHJvdyhsYWJlbCwgdmFsdWUsIG1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX1ZBTFVFKHtcbiAgICAgICAgdGFyZ2V0OiBsYWJlbCxcbiAgICAgICAgcmVhc29uOiBtZXNzYWdlLFxuICAgICAgICBnaXZlbjogdmFsdWVcbiAgICB9KVxufTtcblxuY29uc3Qgc3RhdGljTWV0aG9kcyA9IHtcbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdFVuZGVmaW5lZFxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBub3RVbmRlZmluZWRcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBub3RVbmRlZmluZWQobGFiZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwiY2Fubm90IGJlIHVuZGVmaW5lZFwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgbm90RW1wdHlTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgbm90RW1wdHlTdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBub3RFbXB0eVN0cmluZyhsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwiY2Fubm90IGJlIGVtcHR5IHN0cmluZ1wiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgbm90RmFsc3lcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgbm90RmFsc3lcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBub3RGYWxzeShsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCAnY2Fubm90IGJlIGEgZmFsc3kgdmFsdWUgKHVuZGVmaW5lZCwgbnVsbCwgTmFOLCAwLCBcIlwiKScpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB2YWxpZFNwYWNlc1xuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB2YWxpZFNwYWNlc1xuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHZhbGlkU3BhY2VzKGxhYmVsLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlLnJlcGxhY2UgfHwgdmFsdWUucmVwbGFjZSgvXFxzKy9nLCBcIiBcIikudHJpbSgpICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcImludmFsaWQgc3BhY2UgZGVsaW1pdGVyc1wiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgbWF0Y2hSZWdcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ1xuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG1hdGNoUmVnXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgbWF0Y2hSZWcobGFiZWwsIHZhbHVlLCByZWcpIHtcbiAgICAgICAgaWYgKCFyZWcudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgJ3N0cmluZyBcIicgKyB2YWx1ZSArICdcIiBtdXN0IG1hdGNoICcgKyByZWcpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7Li4uKn0gZXhwZWN0ZWRcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgdHlwZShsYWJlbCwgdmFsdWUsIC4uLmV4cGVjdGVkKSB7XG4gICAgICAgIGxldCBuYW1lLCBvayA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBjb25zdHJ1Y3RvciBvZiBleHBlY3RlZCkge1xuICAgICAgICAgICAgaWYgKGNvbnN0cnVjdG9yID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IFwiTnVsbFwiXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwibmFtZVwiIGluIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IGNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0ZXN0ID0gc3RhdGljTWV0aG9kc1tcInR5cGVcIiArIG5hbWVdO1xuICAgICAgICAgICAgaWYgKHRlc3QpIHtcbiAgICAgICAgICAgICAgICB0cnkge29rID0gdGVzdChsYWJlbCwgdmFsdWUvKiwgZSovKX0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9rID0gdmFsdWUgaW5zdGFuY2VvZiBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9rKSBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFtcIiArIGV4cGVjdGVkLm1hcChlID0+IGUubmFtZSkuam9pbihcIiwgXCIpICsgXCJdXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlTnVsbFxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlTnVsbFxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHR5cGVOdWxsKGxhYmVsLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IGJlIG51bGxcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHR5cGVCb29sZWFuXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHR5cGVCb29sZWFuXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgdHlwZUJvb2xlYW4obGFiZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdHJ1ZSAmJiB2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IGJlIGEgYm9vbGVhblwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZVN0cmluZ1xuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlU3RyaW5nXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgdHlwZVN0cmluZyhsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFoZWxwZXJfaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBhIHN0cmluZ1wiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZU51bWJlclxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlTnVtYmVyXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgdHlwZU51bWJlcihsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFoZWxwZXJfaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBhIG51bWJlclwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZUZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHR5cGVGdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHR5cGVGdW5jdGlvbihsYWJlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBhIGZ1bmN0aW9uXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCB0eXBlUGxhaW5PYmplY3RcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgdHlwZVBsYWluT2JqZWN0XG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgdHlwZVBsYWluT2JqZWN0KGxhYmVsLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIWhlbHBlcl9pc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgYSBwbGFpbiBvYmplY3RcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGVxdWFsXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7Kn0gZXhwZWN0ZWRcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBlcXVhbFxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIGVxdWFsKGxhYmVsLCB2YWx1ZSwgLi4uZXhwZWN0ZWQpIHtcbiAgICAgICAgbGV0IG9rID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGUgb2YgZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgIGlmICgob2sgPSB2YWx1ZSA9PT0gZSkpIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgb25lIG9mIFtcIiArIGV4cGVjdGVkICsgXCJdXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZXF1YWxJblxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gZXhwZWN0ZWRcbiAgICAgKiBAcmV0dXJuIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBlcXVhbEluXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgZXF1YWxJbihsYWJlbCwgdmFsdWUsIGV4cGVjdGVkKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHtcbiAgICAgICAgICAgIGV4cGVjdGVkID0gT2JqZWN0LnZhbHVlcyhleHBlY3RlZClcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4cGVjdGVkLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3QgYmUgb25lIGZyb20gW1wiICsgZXhwZWN0ZWQuam9pbihcIiwgXCIpICsgXCJdXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBwcm9wZXJ0aWVzXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0I1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGV4cGVjdGVkXG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcHJvcGVydGllc1xuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHByb3BlcnRpZXMobGFiZWwsIHZhbHVlLCBleHBlY3RlZCkge1xuICAgICAgICBmb3IgKGxldCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKSkge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QobGFiZWwgKyAnLCBwcm9wZXJ0eSBuYW1lIFwiJyArIG5hbWUgKyAnXCInLCBuYW1lKS5lcXVhbEluKGV4cGVjdGVkKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgd3JpdGFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIHdyaXRhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgd3JpdGFibGUobGFiZWwsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpLndyaXRhYmxlKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSB3cml0YWJsZVwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgbm90V3JpdGFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdFdyaXRhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgbm90V3JpdGFibGUobGFiZWwsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkud3JpdGFibGUpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IG5vdCBiZSB3cml0YWJsZVwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZW51bWVyYWJsZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZW51bWVyYWJsZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIGVudW1lcmFibGUobGFiZWwsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IGJlIGVudW1lcmFibGVcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdEVudW1lcmFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdEVudW1lcmFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICBub3RFbnVtZXJhYmxlKGxhYmVsLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgIGVycm9yKGxhYmVsLCB2YWx1ZSwgXCJtdXN0IG5vdCBiZSBlbnVtZXJhYmxlXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBjb25maWd1cmFibGVcbiAgICAgKiBAbWVtYmVyT2YgSkZhY3RvcnlFeHBlY3QjXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEByZXR1cm4gSkZhY3RvcnlFeHBlY3RcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGNvbmZpZ3VyYWJsZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIGNvbmZpZ3VyYWJsZShsYWJlbCwgdmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkuY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICBlcnJvcihsYWJlbCwgdmFsdWUsIFwibXVzdCBiZSBjb25maWd1cmFibGVcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG5vdENvbmZpZ3VyYWJsZVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgbm90Q29uZmlndXJhYmxlXG4gICAgICogQG1lbWJlck9mIEpGYWN0b3J5RXhwZWN0XG4gICAgICovXG4gICAgbm90Q29uZmlndXJhYmxlKGxhYmVsLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcIm11c3Qgbm90IGJlIGNvbmZpZ3VyYWJsZVwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcmVzZXJ2ZWRQcm9wZXJ0eVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdCNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHJldHVybiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcmVzZXJ2ZWRQcm9wZXJ0eVxuICAgICAqIEBtZW1iZXJPZiBKRmFjdG9yeUV4cGVjdFxuICAgICAqL1xuICAgIHJlc2VydmVkUHJvcGVydHkobGFiZWwsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgZXJyb3IobGFiZWwsIHZhbHVlLCBcImlzIGEgcmVzZXJ2ZWQgcHJvcGVydHlcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn07XG5cbmpGYWN0b3J5TG9hZGVyLm9uSW5pdChmdW5jdGlvbigpIHtcbiAgICBPYmplY3QuYXNzaWduKEpGYWN0b3J5RXhwZWN0LCBzdGF0aWNNZXRob2RzKTtcbiAgICAvLyBHZW5lcmF0ZSBtZW1iZXJzIGZyb20gc3RhdGljIG1ldGhvZHNcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc3RhdGljTWV0aG9kcykpIHtcbiAgICAgICAgSkZhY3RvcnlFeHBlY3QucHJvdG90eXBlW25hbWVdID1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxTdGF0aWMoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0W25hbWVdKHRoaXMubGFiZWwsIHRoaXMudmFsdWUsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICB9XG4gICAgfVxufSk7IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGQUNUT1JZX0RFViB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgakZhY3RvcnlDb25maWcgfSBmcm9tIFwiLi9qRmFjdG9yeS1jb25maWdcIjtcbmltcG9ydCB7IEpGYWN0b3J5RXhwZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlFeHBlY3RcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeVRyYWl0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlUcmFpdHMge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SkZhY3RvcnlDb3JlT2JqZWN0fE9iamVjdH0gY2FsbGVySW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0NsYXNzfEZ1bmN0aW9ufSBjYWxsZXJDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FsbGVySW5zdGFuY2UsIGNhbGxlckNvbnN0cnVjdG9yLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtKRmFjdG9yeUNvcmVPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhbGxlckluc3RhbmNlID0gY2FsbGVySW5zdGFuY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtDbGFzc3xGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2FsbGVyQ29uc3RydWN0b3IgPSBjYWxsZXJDb25zdHJ1Y3RvcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgdXNlKHRyYWl0LCAuLi50cmFpdEFyZ3MpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeVRyYWl0cyh0cmFpdClcIiwgdHJhaXQpLnR5cGVGdW5jdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsbGVyQ29uc3RydWN0b3IgaXMgbm90IGFsd2F5cyB0aGUgY2FsbGVySW5zdGFuY2UuY29uc3RydWN0b3I6XG4gICAgICAgIC8vIFRoZSBUcmFpdCBjYW4gYmUgaW5qZWN0ZWQgaW4gYW4gaW5oZXJpdGVkIGNvbnN0cnVjdG9yIGZyb20gc3VwZXIoKSBhdCBjYWxsIHRpbWVcbiAgICAgICAgbGV0IHsgY2FsbGVySW5zdGFuY2UsIGNhbGxlckNvbnN0cnVjdG9yIH0gPSB0aGlzO1xuXG4gICAgICAgIC8vIERldGVjdCBpbXByb3BlciBkdXBsaWNhdGlvbiAoY2FuIGJlIGEgdHJhaXQgYWxyZWFkeSBjYWxsZWQgYnkgYSBzdXBlciBjbGFzcylcbiAgICAgICAgbGV0IGNhY2hlID0gSkZhY3RvcnlUcmFpdHMuQ0FDSEUuZ2V0KGNhbGxlckluc3RhbmNlKTtcblxuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgIGlmIChjYWNoZS5oYXModHJhaXQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpGYWN0b3J5Q29uZmlnLlRyYWl0TG9nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0cmFpdC5uYW1lfSBhbHJlYWR5IGNhbGxlZCBvbmAsIGNhbGxlckluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhY2hlLmFkZCh0cmFpdClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEpGYWN0b3J5VHJhaXRzLkNBQ0hFLnNldChjYWxsZXJJbnN0YW5jZSwgbmV3IFdlYWtTZXQoW3RyYWl0XSkpXG4gICAgICAgIH1cblxuICAgICAgICAhY2FsbGVyQ29uc3RydWN0b3IuSkZhY3RvcnlUcmFpdCAmJiAoY2FsbGVyQ29uc3RydWN0b3IuSkZhY3RvcnlUcmFpdCA9IG5ldyBXZWFrU2V0KTtcblxuICAgICAgICBpZiAoIWNhbGxlckNvbnN0cnVjdG9yLkpGYWN0b3J5VHJhaXQuaGFzKHRyYWl0KSkge1xuICAgICAgICAgICAgY2FsbGVyQ29uc3RydWN0b3IuSkZhY3RvcnlUcmFpdC5hZGQodHJhaXQpO1xuICAgICAgICAgICAgdGhpcy5leHBvcnQodHJhaXQucHJvdG90eXBlLCBjYWxsZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgdGhpcy5leHBvcnQodHJhaXQsIGNhbGxlckNvbnN0cnVjdG9yLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluIGEgVHJhaXQuY29uc3RydWN0b3IoY2FsbGVySW5zdGFuY2UsIC4uLmFyZ3MpIDogdGhpcyAhPSBjYWxsZXJJbnN0YW5jZVxuICAgICAgICAvLyBJbiBhIFRyYWl0LnRyYWl0X2NvbnN0cnVjdG9yKC4uLmFyZ3MpIDogdGhpcyA9PSBjYWxsZXJJbnN0YW5jZSAodHJhaXRzIGlzIGluamVjdGVkIGFuZCBhdmFpbGFibGUpXG5cbiAgICAgICAgLy8gVHJhaXRzIGFyZSBpbmplY3Rpb25zLiBUaGV5IGFyZSBub3QgZHluYW1pYyBpbmhlcml0YW5jZS5cbiAgICAgICAgLy8gU28gdGhlIFRyYWl0LmNvbnN0cnVjdG9yKCkgZG9lc24ndCBzaGFyZSB0aGUgXCJ0aGlzXCIga2V5d29yZCB3aXRoIGl0cyBjYWxsZXIuXG5cbiAgICAgICAgLy8gI2xpbWl0YXRpb24jIE5vIHdheSB0byBiaW5kIGFuIEVTNiBjbGFzcyBjb25zdHJ1Y3RvciB0byBhbiBvYmplY3RcbiAgICAgICAgLy8gPT4gSW1wbGVtZW50ZXIgY2FuIGRlZmluZSBhIFwidHJhaXRfY29uc3RydWN0b3IoKVwiIHRoYXQgaXMgYXV0b21hdGljYWxseSBib3VuZCB0byBcImNhbGxlckluc3RhbmNlXCJcbiAgICAgICAgLy8gYW5kIGNhbGxlZCBhZnRlciB0aGUgbmF0aXZlIHRyYWl0IGNvbnN0cnVjdG9yKCkuXG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICAgICAgbGV0IHRyYWl0SW5zdGFuY2UgPSBuZXcgdHJhaXQoY2FsbGVySW5zdGFuY2UsIC4uLnRyYWl0QXJncyk7XG4gICAgICAgIGlmICh0cmFpdEluc3RhbmNlLnRyYWl0X2NvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0cmFpdEluc3RhbmNlLnRyYWl0X2NvbnN0cnVjdG9yLmFwcGx5KGNhbGxlckluc3RhbmNlLCB0cmFpdEFyZ3MpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBleHBvcnQoc291cmNlLCB0YXJnZXQsIGlzU3RhdGljKSB7XG4gICAgICAgIGxldCBzb3VyY2VEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKTtcblxuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eU5hbWUgb2YgT2JqZWN0LmtleXMoc291cmNlRGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgIGxldCBwcmVmaXggPSBKRmFjdG9yeVRyYWl0cy5nZXRQcmVmaXgocHJvcGVydHlOYW1lKTtcblxuICAgICAgICAgICAgaWYgKEpGYWN0b3J5VHJhaXRzLmdldFRhcmdldChwcm9wZXJ0eU5hbWUsIHRhcmdldCwgcHJlZml4KSkge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eURlc2NyaXB0b3IgPSBzb3VyY2VEZXNjcmlwdG9yW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZCA9ICh0aGlzLm9wdGlvbnMucGFyc2VyIHx8IEpGYWN0b3J5VHJhaXRzLmRlZmF1bHRQYXJzZXIpKFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5RGVzY3JpcHRvciwgc291cmNlLCB0YXJnZXQsIGlzU3RhdGljXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICh7IHByb3BlcnR5TmFtZSwgcHJvcGVydHlEZXNjcmlwdG9yIH0gPSBwYXJzZWQpO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5RGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQYXJzZXIocHJvcGVydHlOYW1lLCBwcm9wZXJ0eURlc2NyaXB0b3IsIHNvdXJjZSwgdGFyZ2V0LCBpc1N0YXRpYykge1xuICAgICAgICBsZXQgdmFsdWUgPSBwcm9wZXJ0eURlc2NyaXB0b3IudmFsdWU7XG5cbiAgICAgICAgaWYgKGlzU3RhdGljKSB7cmV0dXJuIG51bGx9IC8vIGRvbid0IGV4cG9ydCBzdGF0aWMgbWVtYmVyc1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eU5hbWUgaW4gdGFyZ2V0KSB7IC8vIHNraXAgZXhpc3RpbmcgcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKGpGYWN0b3J5Q29uZmlnLlRyYWl0TG9nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICBgJHt0YXJnZXQuY29uc3RydWN0b3IubmFtZX0+IHNraXBwaW5nIGV4cG9ydCBvZiBleGlzdGluZyBwcm9wZXJ0eSBcIiR7cHJvcGVydHlOYW1lfVwiYCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHsgLy8gcHJldmVudCBzaGFyZWQgb2JqZWN0IGV4cG9ydGF0aW9uXG4gICAgICAgICAgICBpZiAoakZhY3RvcnlDb25maWcuVHJhaXRMb2cpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgIGAke3RhcmdldC5jb25zdHJ1Y3Rvci5uYW1lfT4gc2tpcHBpbmcgZXhwb3J0IG9mIHNoYXJlZCBvYmplY3QgXCIke3Byb3BlcnR5TmFtZX1cImAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eURlc2NyaXB0b3IgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQcmVmaXgoa2V5KSB7XG4gICAgICAgIGxldCBzcGxpdCA9IGtleS5zcGxpdChcIl9cIik7XG4gICAgICAgIHJldHVybiBzcGxpdC5sZW5ndGggPiAxID8gc3BsaXRbMF0gOiBudWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRUYXJnZXQoa2V5LCB0YXJnZXQsIHByZWZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBKRmFjdG9yeVRyYWl0cy5FWENMVURFUy5pbmNsdWRlcyhrZXkpIHx8XG4gICAgICAgICAgICBwcmVmaXggPT09IFwidHJhaXRcIlxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxufVxuXG5KRmFjdG9yeVRyYWl0cy5DQUNIRSA9IG5ldyBXZWFrTWFwO1xuSkZhY3RvcnlUcmFpdHMuRVhDTFVERVMgPSBbXCJjb25zdHJ1Y3RvclwiLCBcInByb3RvdHlwZVwiLCBcImxlbmd0aFwiLCBcInNpemVcIl07IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGQUNUT1JZX0RFViB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgakZhY3RvcnlDb25maWcgfSBmcm9tIFwiLi9qRmFjdG9yeS1jb25maWdcIjtcbmltcG9ydCB7IEpGYWN0b3J5RXhwZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlFeHBlY3RcIjtcbmltcG9ydCB7IGpGYWN0b3J5RXJyb3IgfSBmcm9tIFwiLi9KRmFjdG9yeUVycm9yXCI7XG5pbXBvcnQgeyBoZWxwZXJfc2V0RnVuY3Rpb25OYW1lIH0gZnJvbSBcIi4vakZhY3RvcnktaGVscGVyc1wiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5RnVuY3Rpb25Db21wb3NlclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG5cbiAgICAqIFtTeW1ib2wuaXRlcmF0b3JdKGhhbmRsZXJHcm91cHMgPSBbXSkge1xuXG4gICAgICAgIGlmICghaGFuZGxlckdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhhbmRsZXJHcm91cHMgPSBPYmplY3Qua2V5cyh0aGlzLmhhbmRsZXJzKVxuICAgICAgICB9XG4gICAgICAgIGlmICghaGFuZGxlckdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhhbmRsZXJHcm91cHMgPSBbXCJkZWZhdWx0XCJdXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBoYW5kbGVyR3JvdXAgb2YgaGFuZGxlckdyb3Vwcykge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJHcm91cCBpbiB0aGlzLmhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuaGFuZGxlcnNbaGFuZGxlckdyb3VwXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEByZXR1cm4ge0pGYWN0b3J5RnVuY3Rpb25Db21wb3Nlcn0gKi9cbiAgICBmaXJzdChoYW5kbGVyR3JvdXAsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIFtoYW5kbGVyR3JvdXAsIGhhbmRsZXJdID0gW1wiZGVmYXVsdFwiLCBoYW5kbGVyR3JvdXBdXG4gICAgICAgIH1cbiAgICAgICAgKHRoaXMuaGFuZGxlcnNbaGFuZGxlckdyb3VwXSB8fCAodGhpcy5oYW5kbGVyc1toYW5kbGVyR3JvdXBdID0gW10pKS51bnNoaWZ0KGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKiBAcmV0dXJuIHtKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXJ9ICovXG4gICAgbGFzdChoYW5kbGVyR3JvdXAsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIFtoYW5kbGVyR3JvdXAsIGhhbmRsZXJdID0gW1wiZGVmYXVsdFwiLCBoYW5kbGVyR3JvdXBdXG4gICAgICAgIH1cbiAgICAgICAgKHRoaXMuaGFuZGxlcnNbaGFuZGxlckdyb3VwXSB8fCAodGhpcy5oYW5kbGVyc1toYW5kbGVyR3JvdXBdID0gW10pKS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKiBAcmV0dXJuIHsoZnVuY3Rpb24oKTogKikgJiB7Y29tcG9zZXI6IEpGYWN0b3J5RnVuY3Rpb25Db21wb3Nlcn19ICovXG4gICAgY29tcG9zZSguLi5oYW5kbGVyR3JvdXBzKSB7XG4gICAgICAgIGxldCBjb21wb3NlciA9IHRoaXM7XG4gICAgICAgIGxldCBjb21wb3NpdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vICEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEgLy9cbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIHdyYXBwZWQgZnVuY3Rpb24gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgIFlvdSBzaG91bGQgQmxhY2tib3ggSkZhY3RvcnlGdW5jdGlvbi5tanMgICAgLy9cbiAgICAgICAgICAgIC8vICAgIHRvIHNpbXBsaWZ5IGRlYnVnZ2luZyAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEtLSEhISEgLy9cbiAgICAgICAgICAgIGxldCBjb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgIGNhbmNlbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgaXRlcmF0b3IgPSBjb21wb3NlcltTeW1ib2wuaXRlcmF0b3JdKGhhbmRsZXJHcm91cHMpO1xuICAgICAgICAgICAgbGV0IGl0ZXJhdGlvbiA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIHJldHVybiBKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXIuY29tcG9zaXRlX2l0ZXJhdG9yKFxuICAgICAgICAgICAgICAgIHRoaXMgLyogcHJlc2VydmUgY2FsbCBzY29wZSAqLywgY29udGV4dCwgaXRlcmF0aW9uLCBpdGVyYXRvcilcbiAgICAgICAgfTtcbiAgICAgICAgY29tcG9zaXRlLmNvbXBvc2VyID0gY29tcG9zZXI7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfVxuXG4gICAgLy8gU1BFQzogQ29tcG9zaXRlIGZ1bmN0aW9ucyByZXR1cm5zIHByb21pc2UgKm9ubHkqIGlmIGF0IGxlYXN0XG4gICAgLy8gb25lIGhhbmRsZXIgcmV0dXJucyBhIHByb21pc2UgKGFzeW5jIGZ1bmN0aW9uIG9yIHByb21pc2UgcmV0dXJuKVxuICAgIC8vIFNvIHdlIGNhbm5vdCBqdXN0IGl0ZXJhdGUgdXNpbmcgYW4gXCJhd2FpdCBmb3Igb2ZcIlxuICAgIHN0YXRpYyBjb21wb3NpdGVfaXRlcmF0b3Ioc2NvcGUsIGNvbnRleHQsIGl0ZXJhdGlvbiwgaGFuZGxlcnMpIHtcbiAgICAgICAgbGV0IGhhbmRsZXIsXG4gICAgICAgICAgICByZXN1bHQ7XG5cbiAgICAgICAgd2hpbGUgKCFjb250ZXh0LmNhbmNlbGVkICYmICFpdGVyYXRpb24uZG9uZSkge1xuICAgICAgICAgICAgaGFuZGxlciA9IGl0ZXJhdGlvbi52YWx1ZTtcbiAgICAgICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIuY2FsbChzY29wZSwgY29udGV4dCwgLi4uY29udGV4dC5wYXJhbWV0ZXJzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKGNvbnRleHQsIC4uLmNvbnRleHQucGFyYW1ldGVycylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZXJhdGlvbiA9IGhhbmRsZXJzLm5leHQoKTsgLy8gcHJlcGFyZXMgbmV4dCBpdGVyYXRpb24gdG8ga25vdyBpZiBcImRvbmVcIlxuICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0aW9uLmRvbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSBvZiBsYXN0IGhhbmRsZXIgcmV0dXJuaW5nIGEgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAvLyAjbGltaXRhdGlvbiMgbm93IHdheSB0byBkZXRlY3QgaWYgdGhlIHByb21pc2UgaXMgdGhlIHJldHVybmVkIHZhbHVlIG9yIGFuIFwiYXdhaXRcIlxuICAgICAgICAgICAgICAgICAgICAvLyAod2UgZG9uJ3Qgd2FudCB0byBjaGFuZ2UgdGhlIHZhbHVlIG9mIGNvbnRleHQucmVzdWx0IGR1cmluZyBhIHBlbmRpbmcgaGFuZGxlcilcbiAgICAgICAgICAgICAgICAgICAgLy8gPT4gbmF0aXZlIFByb21pc2UgYXJlIGFsd2F5cyBjaGFpbmVkXG4gICAgICAgICAgICAgICAgICAgICYmIHJlc3VsdC5jb25zdHJ1Y3RvciAhPT0gUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3VsdCA9IHJlc3VsdCAvLyB3ZSBjYW4gc2FmZWx5IHNldCB0aGUgbmV3IHJlc3VsdFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudGhlbihoZWxwZXJfc2V0RnVuY3Rpb25OYW1lKFxuICAgICAgICAgICAgICAgICAgICAgICAgW2hhbmRsZXIubmFtZSwgXCJbY29tcG9zaXRlQXN5bmNIYW5kbGVyXVwiXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpGYWN0b3J5RnVuY3Rpb25Db21wb3Nlci5jb21wb3NpdGVfaXRlcmF0b3Ioc2NvcGUsIGNvbnRleHQsIGl0ZXJhdGlvbiwgaGFuZGxlcnMpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3VsdCA9IHJlc3VsdFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0LnJlc3VsdFxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUZ1bmN0aW9uRXhwaXJhYmxlIC0gRXhwaXJhYmxlIEZ1bmN0aW9uIFBhdHRlcm5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZnVuY3Rpb24gakZhY3RvcnlGdW5jdGlvbkV4cGlyYWJsZShvcmlnaW5hbEhhbmRsZXIpIHtcbiAgICByZXR1cm4gbmV3IEpGYWN0b3J5RnVuY3Rpb25FeHBpcmFibGUob3JpZ2luYWxIYW5kbGVyKS5jb21wb3NlKClcbn1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5RnVuY3Rpb25FeHBpcmFibGUge1xuXG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxIYW5kbGVyID0gb3JpZ2luYWxIYW5kbGVyO1xuICAgICAgICB0aGlzLmV4cGlyZWRDYWxscyA9IDA7XG4gICAgICAgIHRoaXMuY29tcG9zZXIgPSBuZXcgSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyO1xuXG4gICAgICAgIGxldCBpc0V4cGlyZWQgPSB0aGlzLmNvbXBvc2VyLmNvbXBvc2UoXCJjb25kaXRpb25zXCIpO1xuICAgICAgICBsZXQgZXhwaXJhYmxlID0gdGhpcztcbiAgICAgICAgbGV0IGV4cGlyZWQ7XG5cbiAgICAgICAgLy8gY2Fubm90IHVzZSBhIHJlYWwgYWNjZXNzb3IgaGVyZSAoY29uZGl0aW9ucyBjYW4gYmUgc2NvcGVkLCBzbyBpc0V4cGlyZWQgdG9vKVxuICAgICAgICB0aGlzLmlzRXhwaXJlZCA9IHNjb3BlID0+IGV4cGlyZWQgfHwgaXNFeHBpcmVkLmNhbGwoc2NvcGUpIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLnNldEV4cGlyZWQgPSB2YWx1ZSA9PiBleHBpcmVkID0gdmFsdWUgP1xuICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBFcnJvciA/IHZhbHVlIDogbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMub3JpZ2luYWxIYW5kbGVyLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogXCJtYW51YWxseSBleHBpcmVkXCJcbiAgICAgICAgICAgIH0pIDogQm9vbGVhbih0aGlzLmV4cGlyZWRDYWxscyA9IDApO1xuXG4gICAgICAgIHRoaXMuYWRkRXhwaXJlQ29uZGl0aW9uID0gZnVuY3Rpb24oY29uZGl0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvc2VyLmxhc3QoXCJjb25kaXRpb25zXCIsIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RnVuY3Rpb25FeHBpcmFibGUuYWRkRXhwaXJlQ29uZGl0aW9uKCksIHJlc3VsdFwiLCByZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGUoQm9vbGVhbiwgRXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGlyYWJsZS5zZXRFeHBpcmVkKHJlc3VsdCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAoY29udGV4dC5jYW5jZWxlZCA9IHRydWUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBleHBpcmFibGUub3JpZ2luYWxIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IFwiY29uZGl0aW9uYWxseSBleHBpcmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNvbmRpdGlvbi5hcHBseSh0aGlzLCBjb250ZXh0LnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlID8gcmVzdWx0LnRoZW4oZG9uZSkgOiBkb25lKHJlc3VsdCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbXBvc2UoKSB7XG4gICAgICAgIGxldCBleHBpcmFibGUgPSB0aGlzO1xuICAgICAgICBsZXQgY29tcG9zaXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgaXNFeHBpcmVkID0gZXhwaXJhYmxlLmlzRXhwaXJlZCh0aGlzKTtcbiAgICAgICAgICAgIGxldCBjYWxsID0gZXhwaXJhYmxlLmNvbnN0cnVjdG9yLmNhbGwuYmluZCh1bmRlZmluZWQsIGV4cGlyYWJsZSwgdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBpc0V4cGlyZWQgaW5zdGFuY2VvZiBQcm9taXNlID8gaXNFeHBpcmVkLnRoZW4oY2FsbCkgOiBjYWxsKGlzRXhwaXJlZCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbXBvc2l0ZSwge1xuICAgICAgICAgICAgZXhwaXJhYmxlOiB0aGlzLFxuICAgICAgICAgICAgaXNFeHBpcmVkOiBmID0+IHRoaXMuaXNFeHBpcmVkKGYpLFxuICAgICAgICAgICAgc2V0RXhwaXJlZDogZiA9PiB0aGlzLnNldEV4cGlyZWQoZiksXG4gICAgICAgICAgICBhZGRFeHBpcmVDb25kaXRpb246IGYgPT4ge3RoaXMuYWRkRXhwaXJlQ29uZGl0aW9uKGYpOyByZXR1cm4gY29tcG9zaXRlfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2FsbChleHBpcmFibGUsIHNjb3BlLCBhcmdzLCBpc0V4cGlyZWQpIHtcbiAgICAgICAgcmV0dXJuIGlzRXhwaXJlZCA/IGV4cGlyYWJsZS5vbkV4cGlyZWQoaXNFeHBpcmVkKSA6IGV4cGlyYWJsZS5vbk5vdEV4cGlyZWQoc2NvcGUsIGFyZ3MpO1xuICAgIH1cblxuICAgIG9uRXhwaXJlZChleHBpcmVkKSB7XG4gICAgICAgIGlmICh0aGlzLmV4cGlyZWRDYWxscyA8IEpGYWN0b3J5RnVuY3Rpb25FeHBpcmFibGUuTWF4V2FybmluZ0V4cGlyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZXhwaXJlZENhbGxzKys7XG4gICAgICAgICAgICBpZiAoakZhY3RvcnlDb25maWcuVHJhaXRMb2cpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oLi4ubmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9DQUxMKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZXhwaXJlZC4kZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBleHBpcmVkLiRkYXRhLnJlYXNvblxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIjsgZXhwaXJlZENhbGxzPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMuZXhwaXJlZENhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICArICh0aGlzLmV4cGlyZWRDYWxscyA9PT0gSkZhY3RvcnlGdW5jdGlvbkV4cGlyYWJsZS5NYXhXYXJuaW5nRXhwaXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCI7IE1heCBXYXJuaW5nIEV4Y2VlZGVkXCIgOiBcIlwiKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwaXJlZFxuICAgIH1cblxuICAgIG9uTm90RXhwaXJlZChzY29wZSwgYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbEhhbmRsZXIuYXBwbHkoc2NvcGUsIGFyZ3MpXG4gICAgfVxufVxuXG5KRmFjdG9yeUZ1bmN0aW9uRXhwaXJhYmxlLk1heFdhcm5pbmdFeHBpcmF0aW9uID0gMTA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsIC0gQ29uZGl0aW9uYWwgRnVuY3Rpb24gUGF0dGVyblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBqRmFjdG9yeUZ1bmN0aW9uQ29uZGl0aW9uYWwob3JpZ2luYWxIYW5kbGVyKSB7XG4gICAgcmV0dXJuIG5ldyBKRmFjdG9yeUZ1bmN0aW9uQ29uZGl0aW9uYWwob3JpZ2luYWxIYW5kbGVyKS5jb21wb3NlKClcbn1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5RnVuY3Rpb25Db25kaXRpb25hbCB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcmlnaW5hbEhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbEhhbmRsZXIgPSBvcmlnaW5hbEhhbmRsZXI7XG4gICAgICAgIHRoaXMuY29tcG9zZXIgPSBuZXcgSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyO1xuICAgICAgICB0aGlzLmNvbXBvc2VyLmZpcnN0KFwib3JpZ2luYWxcIiwgaGVscGVyX3NldEZ1bmN0aW9uTmFtZShcbiAgICAgICAgICAgIFtvcmlnaW5hbEhhbmRsZXIubmFtZSwgXCJbY29uZGl0aW9uXVwiXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIiksXG4gICAgICAgICAgICBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSGFuZGxlci5hcHBseSh0aGlzLCBjb250ZXh0LnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjb21wb3NlKCkge1xuICAgICAgICBsZXQgY29tcG9zaXRlID0gdGhpcy5jb21wb3Nlci5jb21wb3NlKFwiY29uZGl0aW9uc1wiLCBcIm9yaWdpbmFsXCIpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihjb21wb3NpdGUsIHtcbiAgICAgICAgICAgIGNvbmRpdGlvbmFsOiB0aGlzLFxuICAgICAgICAgICAgYWRkQ29uZGl0aW9uOiBmID0+IHt0aGlzLmFkZENvbmRpdGlvbihmKTsgcmV0dXJuIGNvbXBvc2l0ZX1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWRkQ29uZGl0aW9uKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmNvbXBvc2VyLmxhc3QoXCJjb25kaXRpb25zXCIsIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGxldCBoYW5kbGUgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsLmFkZENvbmRpdGlvbigpLCByZXN1bHRcIiwgcmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnR5cGVCb29sZWFuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICFyZXN1bHQgJiYgKGNvbnRleHQuY2FuY2VsZWQgPSB0cnVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gY29uZGl0aW9uLmFwcGx5KHRoaXMsIGNvbnRleHQucGFyYW1ldGVycyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSA/IHJlc3VsdC50aGVuKGhhbmRsZSkgOiBoYW5kbGUocmVzdWx0KTtcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlGdW5jdGlvbldyYXBwYWJsZSAtIFdyYXBwYWJsZSBGdW5jdGlvbiBQYXR0ZXJuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIGpGYWN0b3J5RnVuY3Rpb25XcmFwcGFibGUob3JpZ2luYWxIYW5kbGVyKSB7XG4gICAgcmV0dXJuIG5ldyBKRmFjdG9yeUZ1bmN0aW9uV3JhcHBhYmxlKG9yaWdpbmFsSGFuZGxlcikuY29tcG9zZSgpXG59XG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUZ1bmN0aW9uV3JhcHBhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsSGFuZGxlcikge1xuICAgICAgICB0aGlzLm9yaWdpbmFsSGFuZGxlciA9IG9yaWdpbmFsSGFuZGxlcjtcbiAgICAgICAgdGhpcy5jb21wb3NlciA9IG5ldyBKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXI7XG4gICAgICAgIHRoaXMuY29tcG9zZXIuZmlyc3QoXCJvcmlnaW5hbFwiLCBoZWxwZXJfc2V0RnVuY3Rpb25OYW1lKFxuICAgICAgICAgICAgW29yaWdpbmFsSGFuZGxlci5uYW1lLCBcIlt3cmFwcGVkXVwiXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIiksXG4gICAgICAgICAgICBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSGFuZGxlci5hcHBseSh0aGlzLCBjb250ZXh0LnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjb21wb3NlKCkge1xuICAgICAgICBsZXQgY29tcG9zaXRlID0gdGhpcy5jb21wb3Nlci5jb21wb3NlKFwiYmVmb3JlXCIsIFwib3JpZ2luYWxcIiwgXCJhZnRlclwiKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY29tcG9zaXRlLCB7XG4gICAgICAgICAgICB3cmFwcGFibGU6IHRoaXMsXG4gICAgICAgICAgICBiZWZvcmVBbGw6IGYgPT4ge3RoaXMuYmVmb3JlQWxsKGYpOyByZXR1cm4gY29tcG9zaXRlfSxcbiAgICAgICAgICAgIGp1c3RCZWZvcmU6IGYgPT4ge3RoaXMuanVzdEJlZm9yZShmKTsgcmV0dXJuIGNvbXBvc2l0ZX0sXG4gICAgICAgICAgICBqdXN0QWZ0ZXI6IGYgPT4ge3RoaXMuanVzdEFmdGVyKGYpOyByZXR1cm4gY29tcG9zaXRlfSxcbiAgICAgICAgICAgIGFmdGVyQWxsOiBmID0+IHt0aGlzLmFmdGVyQWxsKGYpOyByZXR1cm4gY29tcG9zaXRlfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBiZWZvcmVBbGwoaGFuZGxlcikge1xuICAgICAgICB0aGlzLmNvbXBvc2VyLmZpcnN0KFwiYmVmb3JlXCIsIGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGp1c3RCZWZvcmUoaGFuZGxlcikge1xuICAgICAgICB0aGlzLmNvbXBvc2VyLmxhc3QoXCJiZWZvcmVcIiwgaGFuZGxlcik7XG4gICAgfVxuXG4gICAganVzdEFmdGVyKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5jb21wb3Nlci5maXJzdChcImFmdGVyXCIsIGhhbmRsZXIpO1xuICAgIH1cblxuICAgIGFmdGVyQWxsKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5jb21wb3Nlci5sYXN0KFwiYWZ0ZXJcIiwgaGFuZGxlcik7XG4gICAgfVxufSIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBqRmFjdG9yeUVycm9yIH0gZnJvbSBcIi4vSkZhY3RvcnlFcnJvclwiO1xuaW1wb3J0IHsgSkZhY3RvcnlUcmFpdHMgfSBmcm9tIFwiLi9KRmFjdG9yeVRyYWl0c1wiO1xuaW1wb3J0IHsgakZhY3RvcnlGdW5jdGlvbldyYXBwYWJsZSB9IGZyb20gXCIuL0pGYWN0b3J5RnVuY3Rpb25cIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeVRyYWl0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEJldGFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZnVuY3Rpb24gakZhY3RvcnlUcmFpdHMoY2FsbGVySW5zdGFuY2UsIGNhbGxlckNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBKRmFjdG9yeVRyYWl0cyhjYWxsZXJJbnN0YW5jZSwgY2FsbGVyQ29uc3RydWN0b3IsIHtcblxuICAgICAgICBwYXJzZXIocHJvcGVydHlOYW1lLCBwcm9wZXJ0eURlc2NyaXB0b3IvKiwgc291cmNlLCB0YXJnZXQsIGlzU3RhdGljICovKSB7XG4gICAgICAgICAgICBsZXQgcGFyc2VkID0gSkZhY3RvcnlUcmFpdHMuZGVmYXVsdFBhcnNlciguLi5hcmd1bWVudHMpO1xuXG4gICAgICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgKHsgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eURlc2NyaXB0b3IgfSA9IHBhcnNlZCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwcm9wZXJ0eURlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodmFsdWUubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRpbnN0YWxsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJHVuaW5zdGFsbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRlbmFibGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkZGlzYWJsZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRzdGF0ZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eURlc2NyaXB0b3IudmFsdWUgPSBqRmFjdG9yeUZ1bmN0aW9uV3JhcHBhYmxlKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYmVmb3JlQWxsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLiQuc3RhdGVzLmVuYWJsZWQgJiYgdGhpcy4kLnNlcnZpY2UucGhhc2UgPT09IFwiUEhBU0VfTk9ORVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGUgPSBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX0NBTEwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lcjogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBcImNvbXBvbmVudCBkaXNhYmxlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kbG9nRXJyKC4uLmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHByb3BlcnR5TmFtZSwgcHJvcGVydHlEZXNjcmlwdG9yIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IGpGYWN0b3J5VHJhaXRzIH0gZnJvbSBcIi4vakZhY3RvcnktdHJhaXRzXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJlZGVmaW5lZCBDb21wb25lbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQG1peGVzIFRyYWl0Q29yZVxuICogQG1peGVzIFRyYWl0QWJvdXRcbiAqIEBtaXhlcyBUcmFpdExvZ1xuICogQG1peGVzIFRyYWl0RXZlbnRzXG4gKiBAbWl4ZXMgVHJhaXRTdGF0ZVxuICogQG1peGVzIFRyYWl0U2VydmljZVxuICogQG1peGVzIFRyYWl0VGFza1xuICovXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlDb3JlT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIEpGYWN0b3J5Q29yZU9iamVjdC5pbmplY3QodGhpcywgSkZhY3RvcnlDb3JlT2JqZWN0LCBuYW1lKVxuICAgIH1cblxuICAgIHN0YXRpYyBpbmplY3QodGFyZ2V0LCBjb25zdHJ1Y3RvciwgbmFtZSkge1xuICAgICAgICBqRmFjdG9yeVRyYWl0cyh0YXJnZXQsIGNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdENvcmUpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0QWJvdXQsIHsgbmFtZSB9KVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdExvZylcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRFdmVudHMpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0U3RhdGUpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0U2VydmljZSlcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRUYXNrKTtcbiAgICB9XG59XG5cbi8qKlxuICogQG1peGVzIFRyYWl0RmV0Y2hcbiAqIEBtaXhlcyBUcmFpdERPTVxuICogQG1peGVzIFRyYWl0Q1NTXG4gKiBAbWl4ZXMgVHJhaXRNdXRhdGlvblxuICogQG1peGVzIFRyYWl0VGltZW91dFxuICogQG1peGVzIFRyYWl0SW50ZXJ2YWxcbiAqIEBtaXhlcyBUcmFpdExpYlZ1ZVxuICogQG1peGVzIFRyYWl0TGliUmVhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIEpGYWN0b3J5Q29tcG9uZW50IGV4dGVuZHMgSkZhY3RvcnlDb3JlT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHN1cGVyKG5hbWUpO1xuICAgICAgICBKRmFjdG9yeUNvbXBvbmVudC5pbmplY3QodGhpcywgSkZhY3RvcnlDb21wb25lbnQpXG4gICAgfVxuXG4gICAgc3RhdGljIGluamVjdCh0YXJnZXQsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGpGYWN0b3J5VHJhaXRzKHRhcmdldCwgY29uc3RydWN0b3IpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0RmV0Y2gpXG4gICAgICAgICAgICAudXNlKGpGYWN0b3J5LlRyYWl0RE9NKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdENTUylcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRNdXRhdGlvbilcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRUaW1lb3V0KVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdEludGVydmFsKVxuICAgICAgICAgICAgLnVzZShqRmFjdG9yeS5UcmFpdExpYlZ1ZSlcbiAgICAgICAgICAgIC51c2UoakZhY3RvcnkuVHJhaXRMaWJSZWFjdCk7XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGpGYWN0b3J5XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqIEByZXR1cm4ge0pGYWN0b3J5Q29tcG9uZW50fSAqL1xuZXhwb3J0IGNvbnN0IGpGYWN0b3J5ID0gKG5hbWUsIHByb3BlcnRpZXMpID0+IE9iamVjdC5hc3NpZ24obmV3IEpGYWN0b3J5Q29tcG9uZW50KG5hbWUpLCBwcm9wZXJ0aWVzKTsiLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgakZhY3RvcnlMb2FkZXIgfSBmcm9tIFwiLi9qRmFjdG9yeS1sb2FkZXJcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBqRmFjdG9yeU9iamVjdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdGF0dXM6IEFscGhhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5T2JqZWN0IHtcblxuICAgIHN0YXRpYyBjcmVhdGVEZXNjcmlwdG9ycyhkZXNjcmlwdG9yUHJvdG90eXBlID0gSkZhY3RvcnlPYmplY3QuREVTQ1JJUFRPUlNfUFJPVE9UWVBFKSB7XG4gICAgICAgIGxldCBjcmVhdGUgPSBKRmFjdG9yeU9iamVjdC5jcmVhdGUoZGVzY3JpcHRvclByb3RvdHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIGxldCBvID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICBvLk5PTkUgPSBjcmVhdGUoKTtcblxuICAgICAgICBvLldSSVRBQkxFICAgICA9IGNyZWF0ZSh7IHdyaXRhYmxlOiB0cnVlIH0pO1xuICAgICAgICBvLkVOVU1FUkFCTEUgICA9IGNyZWF0ZSh7IGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgICAgIG8uQ09ORklHVVJBQkxFID0gY3JlYXRlKHsgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIG8uQ09ORklHVVJBQkxFX1dSSVRBQkxFICAgPVxuICAgICAgICBvLldSSVRBQkxFX0NPTkZJR1VSQUJMRSAgID0gY3JlYXRlKHsgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICBvLkNPTkZJR1VSQUJMRV9FTlVNRVJBQkxFID1cbiAgICAgICAgby5FTlVNRVJBQkxFX0NPTkZJR1VSQUJMRSA9IGNyZWF0ZSh7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICBvLkVOVU1FUkFCTEVfV1JJVEFCTEUgICAgID1cbiAgICAgICAgby5XUklUQUJMRV9FTlVNRVJBQkxFICAgICA9IGNyZWF0ZSh7IHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIG8uV1JJVEFCTEVfRU5VTUVSQUJMRV9DT05GSUdVUkFCTEUgPVxuICAgICAgICBvLldSSVRBQkxFX0NPTkZJR1VSQUJMRV9FTlVNRVJBQkxFID1cbiAgICAgICAgby5FTlVNRVJBQkxFX0NPTkZJR1VSQUJMRV9XUklUQUJMRSA9XG4gICAgICAgIG8uRU5VTUVSQUJMRV9XUklUQUJMRV9DT05GSUdVUkFCTEUgPVxuICAgICAgICBvLkNPTkZJR1VSQUJMRV9XUklUQUJMRV9FTlVNRVJBQkxFID1cbiAgICAgICAgby5DT05GSUdVUkFCTEVfRU5VTUVSQUJMRV9XUklUQUJMRSA9IGNyZWF0ZSh7IHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgLy8gU2hvcnRjdXRzXG4gICAgICAgIG8uUkVBRE9OTFkgPSBjcmVhdGUoeyB3cml0YWJsZTogZmFsc2UsIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlIH0pO1xuXG4gICAgICAgIHJldHVybiBvXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhc3NpZ24ob2JqLCAnbXlQcm9wZXJ0eScsIDEyMywge3dyaXRhYmxlOmZhbHNlfSlcbiAgICAgKiBhc3NpZ24ob2JqLCB7YToxLCBiOjJ9Jywge3dyaXRhYmxlOmZhbHNlfSlcbiAgICAgKlxuICAgICAqIGRlcHJlY2F0ZWRcbiAgICAgKiBhc3NpZ24ob2JqLCAnbXlQcm9wZXJ0eScsIHt2YWx1ZTpcIm9rXCIsIHdyaXRhYmxlOmZhbHNlfSkgPT4gbm90IHN0cmljdFxuICAgICAqIGFzc2lnbihvYmosICdteVByb3BlcnR5JywgMTIzKSA9PiB1c2UgbmF0aXZlIGluc3RlYWRcbiAgICAgKiBhc3NpZ24ob2JqLCB7YToxLCBiOjJ9KSA9PiB1c2UgbmF0aXZlIGluc3RlYWRcbiAgICAgKi9cbiAgICBzdGF0aWMgYXNzaWduKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGxldCBkZXNjcmlwdG9ycyA9IHt9O1xuXG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHByb3BlcnR5KSB7XG5cbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcblxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIC8vIGFzc2lnbihvYmosICdteVByb3BlcnR5JywgMTIzLCB7d3JpdGFibGU6ZmFsc2V9KVxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgICAgICAgICAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgZGVzY3JpcHRvciBhcmd1bWVudDsgdXNlIE9iamVjdC5hc3NpZ24gaW5zdGVhZFwiKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuY3JlYXRlKGRlc2NyaXB0b3IpOyAvLyBhdm9pZCBkZXNjcmlwdG9yIGNvcnJ1cHRpb25cbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgLy8gYXNzaWduKG9iaiwge2E6MSwgYjoyfScsIHt3cml0YWJsZTpmYWxzZX0pXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgICAgICAgICBbdmFsdWUsIGRlc2NyaXB0b3JdID0gW3Byb3BlcnR5LCB2YWx1ZV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBkZXNjcmlwdG9yIGFyZ3VtZW50OyB1c2UgT2JqZWN0LmFzc2lnbiBpbnN0ZWFkXCIpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvcnNbbmFtZV0gPSBPYmplY3QuY3JlYXRlKGRlc2NyaXB0b3IpOyAvLyBhdm9pZCBkZXNjcmlwdG9yIGNvcnJ1cHRpb25cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvcnNbbmFtZV0udmFsdWUgPSB2YWx1ZVtuYW1lXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBuYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzW25hbWVdID0gT2JqZWN0LmNyZWF0ZShkZXNjcmlwdG9yKTsgLy8gYXZvaWQgZGVzY3JpcHRvciBjb3JydXB0aW9uXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzW25hbWVdLnZhbHVlID0gdmFsdWVbbmFtZV1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIGRlc2NyaXB0b3JzKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcHJvcGVydHkgYXJndW1lbnRcIilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlKHByb3RvdHlwZSwgZmxhdCA9IGZhbHNlLCBkaXNpbmhlcml0ID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAoZmxhdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRpc2luaGVyaXQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge30sIHByb3RvdHlwZSwgcHJvcGVydGllcylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgZGlzaW5oZXJpdCA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgcHJvdG90eXBlKSA6IHByb3RvdHlwZVxuICAgICAgICAgICAgICAgICksIHByb3BlcnRpZXMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZGlzaW5oZXJpdChvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgb2JqZWN0KTtcbiAgICB9XG59XG5cbkpGYWN0b3J5T2JqZWN0LkRFU0NSSVBUT1JTX1BST1RPVFlQRSA9IHsgd3JpdGFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiBmYWxzZSB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGpGYWN0b3J5T2JqZWN0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuakZhY3RvcnlMb2FkZXIub25Jbml0KGZ1bmN0aW9uKCkge1xuICAgIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzID0gSkZhY3RvcnlPYmplY3QuY3JlYXRlRGVzY3JpcHRvcnMoKVxufSk7IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGQUNUT1JZX0RFViB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgSkZhY3RvcnlFeHBlY3QgfSBmcm9tIFwiLi9KRmFjdG9yeUV4cGVjdFwiO1xuaW1wb3J0IHsgaGVscGVyX2NhbWVsQ2FzZSB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcbmltcG9ydCB7IEpGYWN0b3J5T2JqZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlPYmplY3RcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUFib3V0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vZHVsZUdlbklkID0gKCkgPT4gKyttb2R1bGVHZW5JZC51aWQ7IG1vZHVsZUdlbklkLnVpZCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUFib3V0IHtcbiAgICBjb25zdHJ1Y3Rvcihvd25lciwgYWJvdXQgPSB7fSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5QWJvdXQob3duZXIpXCIsIG93bmVyKS50eXBlKE9iamVjdCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5QWJvdXQoYWJvdXQpXCIsIGFib3V0KVxuICAgICAgICAgICAgICAgIC50eXBlUGxhaW5PYmplY3QoKVxuICAgICAgICAgICAgICAgIC5yZXNlcnZlZFByb3BlcnR5KFwidWlkXCIpXG4gICAgICAgICAgICAgICAgLnJlc2VydmVkUHJvcGVydHkoXCJmaW5nZXJwcmludFwiKTtcbiAgICAgICAgICAgIGlmIChcIm5hbWVcIiBpbiBhYm91dCkge1xuICAgICAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlBYm91dChhYm91dC5uYW1lKVwiLCBhYm91dC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAudHlwZVN0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIC5ub3RFbXB0eVN0cmluZygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbmFtZTtcbiAgICAgICAgbGV0IGZpbmdlcnByaW50O1xuICAgICAgICBsZXQgdWlkID0gbW9kdWxlR2VuSWQoKTtcblxuICAgICAgICBpZiAoYWJvdXQubmFtZSkge1xuICAgICAgICAgICAgbmFtZSA9IGFib3V0Lm5hbWU7XG4gICAgICAgICAgICBkZWxldGUgYWJvdXQubmFtZTtcbiAgICAgICAgICAgIGZpbmdlcnByaW50ID0gXCJqRmFjdG9yeVwiICsgXCJfXCIgKyBoZWxwZXJfY2FtZWxDYXNlKG5hbWUudG9Mb3dlckNhc2UoKSkgKyBcIl9cIiArIHVpZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGFib3V0Lm5hbWU7XG4gICAgICAgICAgICBuYW1lID0gYFske293bmVyLmNvbnN0cnVjdG9yLm5hbWV9IyR7dWlkfV1gO1xuICAgICAgICAgICAgZmluZ2VycHJpbnQgPSBcImpGYWN0b3J5XCIgKyBcIl9cIiArIG93bmVyLmNvbnN0cnVjdG9yLm5hbWUgKyBcIl9cIiArIHVpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIEpGYWN0b3J5T2JqZWN0LmFzc2lnbih0aGlzLCAvKiogQGxlbmRzIEpGYWN0b3J5QWJvdXQjICovIHtcbiAgICAgICAgICAgIHVpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBmaW5nZXJwcmludFxuICAgICAgICB9LCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5FTlVNRVJBQkxFKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGFib3V0KTtcblxuICAgICAgICAvLyAtLS1cblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5QWJvdXQubmFtZVwiLCB0aGlzLm5hbWUpXG4gICAgICAgICAgICAgICAgLm1hdGNoUmVnKC9eW1xcd1tcXF0jXSskLyk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5QWJvdXQuZmluZ2VycHJpbnRcIiwgdGhpcy5maW5nZXJwcmludClcbiAgICAgICAgICAgICAgICAubWF0Y2hSZWcoL15bXFx3XSskLyk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLyogakZhY3RvcnksIENvcHlyaWdodCAoYykgMjAxOSwgU3TDqXBoYW5lIFBsYXppcywgaHR0cHM6Ly9naXRodWIuY29tL2pmYWN0b3J5LWVzL2pmYWN0b3J5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cbmltcG9ydCB7IEpGQUNUT1JZX0RFViB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgSkZhY3RvcnlFeHBlY3QgfSBmcm9tIFwiLi9KRmFjdG9yeUV4cGVjdFwiO1xuaW1wb3J0IHsgakZhY3RvcnlFcnJvciB9IGZyb20gXCIuL0pGYWN0b3J5RXJyb3JcIjtcbmltcG9ydCB7IGpGYWN0b3J5VHJhY2UgfSBmcm9tIFwiLi9KRmFjdG9yeVRyYWNlXCI7XG5pbXBvcnQgeyBqUXVlcnksIGhlbHBlcl9pc05hdGl2ZSB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeVByb21pc2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJvdmlkZXMgYXdhaXRhYmxlLCBleHBpcmFibGUsIGRlYnVnZ2FibGUgcHJvbWlzZSBjaGFpbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBFeHBlcmltZW50YWwgRHJhZnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyAjbGltaXRhdGlvbiMgYXN5bmMgZnVuY3Rpb25zIGFsd2F5cyB1c2UgdGhlIG5hdGl2ZSBQcm9taXNlIGNvbnN0cnVjdG9yIGV2ZW4gaWYgbmF0aXZlIFByb21pc2UgY2xhc3MgaXMgb3ZlcnJpZGRlblxuLy8gI2xpbWl0YXRpb24jIGFzeW5jIGZ1bmN0aW9ucyBhbHdheXMgcmV0dXJucyBhIG5hdGl2ZSBQcm9taXNlIGV2ZW4gaWYgcmV0dXJuaW5nIGFuIGV4dGVuZGVkIFByb21pc2Vcbi8vICNsaW1pdGF0aW9uIyBhc3luYyBmdW5jdGlvbnMgYWx3YXlzIHJldHVybnMgYSBwZW5kaW5nIFByb21pc2UgZXZlbiBpZiByZXR1cm5pbmcgYSByZXNvbHZlZCBQcm9taXNlXG5cbmNvbnN0IG1vZHVsZUdlbklkID0gKCkgPT4gKyttb2R1bGVHZW5JZC51aWQ7IG1vZHVsZUdlbklkLnVpZCA9IDA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlQcm9taXNlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5UHJvbWlzZSBleHRlbmRzIFByb21pc2Uge1xuXG4gICAgY29uc3RydWN0b3IoeyBuYW1lLCBjb25maWcsIHRyYWNlU291cmNlIH0sIGV4ZWN1dG9yKSB7XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIFtuYW1lLCBjb25maWcsIGV4ZWN1dG9yXSA9IFtudWxsLCBudWxsLCBhcmd1bWVudHNbMF1dXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGFpbklkID0gbW9kdWxlR2VuSWQoKTtcbiAgICAgICAgY29uZmlnID0geyAuLi5KRmFjdG9yeVByb21pc2UuREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9O1xuICAgICAgICBuYW1lID0gbmFtZSB8fCBcInVubmFtZWRcIjtcblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIm5hbWVcIiwgbmFtZSlcbiAgICAgICAgICAgICAgICAudHlwZShTdHJpbmcsIE51bWJlcilcbiAgICAgICAgICAgICAgICAubWF0Y2hSZWcoL15bXi4gXSskLyk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImNvbmZpZ1wiLCBjb25maWcpLnR5cGVQbGFpbk9iamVjdCgpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJleGVjdXRvclwiLCBleGVjdXRvcikudHlwZUZ1bmN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzb2x2ZTtcbiAgICAgICAgbGV0IHJlamVjdDtcblxuICAgICAgICBzdXBlcigoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUgPSBfcmVzb2x2ZTtcbiAgICAgICAgICAgIHJlamVjdCA9IF9yZWplY3Q7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGNoYWluID0gbmV3IEpGYWN0b3J5UHJvbWlzZUNoYWluKHRoaXMsIGNoYWluSWQsIG5hbWUsIGNvbmZpZyk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgJGNoYWluOiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogY2hhaW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAkdHlwZToge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcInByb21pc2VcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICR2YWx1ZToge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAkaXNTZXR0bGVkOiB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJGlzUmVqZWN0ZWQ6IHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRpc0Z1bGZpbGxlZDoge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJGlzRXhwaXJlZDoge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRpc0Fib3J0ZWQ6IHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgICAgICRkZXZfbmFtZToge1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuYW1lICsgXCJbXCIgKyBjaGFpbklkICsgXCI6MF1cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJGRldl9wYXRoOiB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEpGYWN0b3J5UHJvbWlzZVBhdGgodGhpcylcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICRkZXZfcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWhlbHBlcl9pc05hdGl2ZShleGVjdXRvcikpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICRkZXZfc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZXhlY3V0b3JcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgakZhY3RvcnlUcmFjZS50cmFjZXIuYXR0YWNoVHJhY2UodGhpcywgdHJhY2VTb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJ5QXV0b0NvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLiRjaGFpbi5pc1BlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjaGFpbkNvbXBsZXRlKFwiYXV0by1jb21wbGV0ZWRcIik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYXNlIG9mIGVycm9yIGluIFwiY29tcGxldGVcIiBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYXRjaCB0aGUgZXhjZXB0aW9uIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgYWxyZWFkeSBmdWxmaWxsZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gRnVydGhlcm1vcmUgdGhpcyBpc3N1ZSBtdXN0IGJlIGhhbmRsZWQgYnkgdGhlIGNoYWluLCBub3QgdGhlIGN1cnJlbnQgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpIC8vIHByaW50IHRoZSBlcnJvciBvdGhlcndpc2Ugbm90aGluZyBoYXBwZW5zXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9uUmVzb2x2ZSA9IHZhbHVlID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdvblJlc29sdmUnLHRoaXMuJGRldl9uYW1lKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4kaXNTZXR0bGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gMi4zLjEuIElmIHByb21pc2UgYW5kIHggcmVmZXIgdG8gdGhlIHNhbWUgb2JqZWN0LCByZWplY3QgcHJvbWlzZSB3aXRoIGEgVHlwZUVycm9yIGFzIHRoZSByZWFzb24uXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJDaGFpbmluZyBjeWNsZSBkZXRlY3RlZCBmb3IgcHJvbWlzZSBcIiArIHRoaXMuJGRldl9uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgdGhlbjtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiB4ID09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMi4zLjMuMi4gSWYgcmV0cmlldmluZyB0aGUgcHJvcGVydHkgeC50aGVuIHJlc3VsdHMgaW4gYSB0aHJvd24gZXhjZXB0aW9uIGUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlamVjdCBwcm9taXNlIHdpdGggZSBhcyB0aGUgcmVhc29uLlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhlbiA9IHZhbHVlLnRoZW47XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNvbHZlUHJvbWlzZSA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIuMy4zLjMuMS4gSWYvd2hlbiByZXNvbHZlUHJvbWlzZSBpcyBjYWxsZWQgd2l0aCBhIHZhbHVlIHksIHJ1biBbW1Jlc29sdmVdXShwcm9taXNlLCB5KS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblJlc29sdmUoeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGxldCByZWplY3RQcm9taXNlID0gZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMi4zLjMuMy4yLiBJZi93aGVuIHJlamVjdFByb21pc2UgaXMgY2FsbGVkIHdpdGggYSByZWFzb24gciwgcmVqZWN0IHByb21pc2Ugd2l0aCByLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVqZWN0KHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIHJlc29sdmVQcm9taXNlLCByZWplY3RQcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAvLyAyLjMuMy4zLjQuIElmIGNhbGxpbmcgdGhlbiB0aHJvd3MgYW4gZXhjZXB0aW9uIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAyLjMuMy4zLjQuMS4gSWYgcmVzb2x2ZVByb21pc2Ugb3IgcmVqZWN0UHJvbWlzZSBoYXZlIGJlZW4gY2FsbGVkLCBpZ25vcmUgaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIuMy4zLjMuNC4yLiBPdGhlcndpc2UsIHJlamVjdCBwcm9taXNlIHdpdGggZSBhcyB0aGUgcmVhc29uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRpc1JlamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGlzRnVsZmlsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuJGlzRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLiRjaGFpbi5lcnJvckV4cGlyZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG9uU2V0dGxlKHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBvblJlamVjdCA9IHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnb25SZWplY3QnLHRoaXMuJGRldl9uYW1lKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4kaXNTZXR0bGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kaXNSZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy4kaXNGdWxmaWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgICAgICBvblNldHRsZShyZWFzb24pXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb25TZXR0bGUgPSB2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLiR2YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy4kaXNTZXR0bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJGNoYWluLmNoYWluTWFwLnNldCh0aGlzLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuJGNoYWluLmNoYWluQ29uZmlnLmNoYWluQXV0b0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJGNoYWluLmNoYWluTWFwLnNpemUgPT09IDEgJiYgIXRoaXMuJGlzRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmVzIHRoYXQgdHJ5QXV0b0NvbXBsZXRlKCkgd2lsbCBiZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkgKHRoZW4oKSBjYWxsYmFjayBpcyBhc3luY2hyb25vdXMpXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhc2Ugb2YgcHJvbWlzZS5yZXNvbHZlKHByaW1pdGl2ZSksIHByZXZlbnRzIGZvbGxvd2luZyB0aGVuKCkgZnJvbSBiZWluZyBpbW1lZGlhdGVseSBsb2NrZWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aGVuKHRyeUF1dG9Db21wbGV0ZSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnlBdXRvQ29tcGxldGUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgX2NoYWluQXV0b0NvbXBsZXRlID0gY29uZmlnLmNoYWluQXV0b0NvbXBsZXRlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uZmlnLCBcImNoYWluQXV0b0NvbXBsZXRlXCIsIHtcbiAgICAgICAgICAgIGdldDogKCkgPT4gX2NoYWluQXV0b0NvbXBsZXRlLFxuICAgICAgICAgICAgc2V0OiB2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKF9jaGFpbkF1dG9Db21wbGV0ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NoYWluQXV0b0NvbXBsZXRlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5QXV0b0NvbXBsZXRlKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2hhaW4uY2hhaW5NYXAuc2V0KHRoaXMsIGZhbHNlKTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgICAgICBfX3Jlc29sdmVfXzoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBvblJlc29sdmVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfX3JlamVjdF9fOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG9uUmVqZWN0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleGVjdXRvcihvblJlc29sdmUsIG9uUmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb25SZWplY3QoZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIGZvcmNlVHlwZSkge1xuICAgICAgICBsZXQgd3JhcHBlZEZ1bGZpbGxlZDtcbiAgICAgICAgbGV0IHdyYXBwZWRSZWplY3RlZDtcbiAgICAgICAgbGV0IG5ld1Byb21pc2U7XG4gICAgICAgIGxldCBpc05hdGl2ZSA9IGhlbHBlcl9pc05hdGl2ZShvbkZ1bGZpbGxlZCkgJiYgIW9uRnVsZmlsbGVkLm5hbWUuc3RhcnRzV2l0aChcImJvdW5kIFwiKTtcblxuICAgICAgICBpZiAob25GdWxmaWxsZWQgJiYgdHlwZW9mIG9uRnVsZmlsbGVkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdyYXBwZWRGdWxmaWxsZWQgPSBmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgLy8gXCJhd2FpdFwiIG11c3QgYWx3YXlzIHJ1biB0aGUgbmF0aXZlIGhhbmRsZXJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhd2FpdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNQRUM6IFwiYXdhaXRcIiB0aHJvd3MgdGhlIGVycm9yRXhwaXJlZCBpZiAkaXNBYm9ydGVkIGlzIHRydWUuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsbG93cyBhc3luYyBmdW5jdGlvbiB0byB0cnkgY2F0Y2ggdGhlIGF3YWl0ZWQgYWJvcnRlZCBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yLCBpZiBub3QgY2F1Z2h0LCBicmVha3MgYW5kIGlnbm9yZSB0aGUgcmVzdCBvZiB0aGUgYXN5bmMgZnVuY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdQcm9taXNlLiRpc0Fib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvblJlamVjdGVkKG5ld1Byb21pc2UuJGNoYWluLmVycm9yRXhwaXJlZClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvbkZ1bGZpbGxlZChyKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBkb24ndCBjYWxsIHRoZSBoYW5kbGVyIGlmIGV4cGlyZWRcbiAgICAgICAgICAgICAgICBpZiAoIW5ld1Byb21pc2UuJGlzRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UHJvbWlzZS4kaXNTZXR0bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9uRnVsZmlsbGVkKHIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvblJlamVjdGVkICYmIHR5cGVvZiBvblJlamVjdGVkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdyYXBwZWRSZWplY3RlZCA9IGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3UHJvbWlzZS4kaXNTZXR0bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiAoIW5ld1Byb21pc2UuJGlzU2V0dGxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvblJlamVjdGVkKHIpXG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHR5cGUgPSBmb3JjZVR5cGUgfHwgKGlzTmF0aXZlID8gXCJhd2FpdFwiIDogb25GdWxmaWxsZWQgPT09IHVuZGVmaW5lZCA/IFwiY2F0Y2hcIiA6IFwidGhlblwiKTtcbiAgICAgICAgbmV3UHJvbWlzZSA9IE9iamVjdC5hc3NpZ24oc3VwZXIudGhlbih3cmFwcGVkRnVsZmlsbGVkLCB3cmFwcGVkUmVqZWN0ZWQpLCB0aGlzKTtcbiAgICAgICAgbW9kdWxlR2VuSWQudWlkLS07IC8vIHJldmVyc2UgYmVjYXVzZSBub3QgYSBuZXcgY2hhaW5cbiAgICAgICAgbmV3UHJvbWlzZS4kdHlwZSA9IHR5cGU7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgbmV3UHJvbWlzZS4kZGV2X3Bvc2l0aW9uID0gdGhpcy4kY2hhaW4uY2hhaW5NYXAuc2l6ZTtcbiAgICAgICAgICAgIGxldCBmTmFtZXMgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKG9uRnVsZmlsbGVkICYmIG9uRnVsZmlsbGVkLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBmTmFtZXMgKz0gb25GdWxmaWxsZWQubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uUmVqZWN0ZWQgJiYgb25SZWplY3RlZC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgZk5hbWVzICs9IFwiLFwiICsgb25SZWplY3RlZC5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhuZXdQcm9taXNlLCB7XG4gICAgICAgICAgICAgICAgJGRldl9uYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2hhaW4uY2hhaW5OYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiW1wiXG4gICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMuJGNoYWluLmNoYWluSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCI6XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy4kZGV2X3Bvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiXVwiXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICArIG5ld1Byb21pc2UuJHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKGZOYW1lcyA/IFwiKFwiICsgZk5hbWVzICsgXCIpXCIgOiBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIltcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKyBuZXdQcm9taXNlLiRjaGFpbi5jaGFpbklkXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiOlwiXG4gICAgICAgICAgICAgICAgICAgICAgICArIG5ld1Byb21pc2UuJGRldl9wb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl1cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJGRldl9wYXRoOiB7IHZhbHVlOiBuZXcgSkZhY3RvcnlQcm9taXNlUGF0aCh0aGlzLiRkZXZfcGF0aCwgbmV3UHJvbWlzZSkgfSxcbiAgICAgICAgICAgICAgICAkZGV2X29uRnVsZmlsbGVkOiB7IHZhbHVlOiBvbkZ1bGZpbGxlZCB9LFxuICAgICAgICAgICAgICAgICRkZXZfb25SZWplY3RlZDogeyB2YWx1ZTogb25SZWplY3RlZCB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1Byb21pc2UuJGNoYWluLmNoYWluTWFwLnNldChuZXdQcm9taXNlLCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuJGlzRXhwaXJlZCkge1xuICAgICAgICAgICAgLy8gY2FzZTogcDAudGhlbigpOyBjaGFpbkFib3J0KCk7IHAxLnRoZW4oKVxuICAgICAgICAgICAgLy8gPT4gdGhlIG5ldyBwcm9taXNlIG11c3QgYmUgZXhwaXJlZFxuICAgICAgICAgICAgLy8gaWYgcGFyZW50IHByb21pc2UgaXMganVzdCBleHBpcmVkLCBhYm9ydCBzaWxlbnRseVxuICAgICAgICAgICAgLy8gaWYgcGFyZW50IHByb21pc2UgaXMgYWJvcnRlZCwgYWJvcnQgZXhwbGljaXRseVxuICAgICAgICAgICAgSkZhY3RvcnlQcm9taXNlLnNldEV4cGlyZWQobmV3UHJvbWlzZSwgdHJ1ZSwgIXRoaXMuJGlzQWJvcnRlZCwgdGhpcy4kY2hhaW4uZXJyb3JFeHBpcmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdQcm9taXNlXG4gICAgfVxuXG4gICAgJGNhdGNoRXhwaXJlZChvbkV4cGlyZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihyID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLiRjaGFpbi5jaGFpblJvb3QuJGlzRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbkV4cGlyZWQocilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdW5kZWZpbmVkLCBcIiRjYXRjaEV4cGlyZWRcIilcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVzb2x2ZShvcHRpb25hbEFyZ3MsIHZhbHVlKSB7XG4gICAgICAgIC8vIHJlc29sdmUoKVxuICAgICAgICAvLyByZXNvbHZlKG9wdGlvbmFsQXJncywgdmFsdWUpXG4gICAgICAgIC8vIHJlc29sdmUodmFsdWUpXG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIFtvcHRpb25hbEFyZ3MsIHZhbHVlXSA9IFt7fSwgb3B0aW9uYWxBcmdzXVxuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9uYWxBcmdzKSB7XG4gICAgICAgICAgICBvcHRpb25hbEFyZ3MgPSB7fVxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHRoaXMgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gUmV0dXJucyB0aGUgcHJvbWlzZSBhcyBpcyAobmF0aXZlIHNwZWMpXG4gICAgICAgICAgICAvLyBidXQgb25seSBpZiBubyBvcHRpb25hbEFyZ3NcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzKG9wdGlvbmFsQXJncywgZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZWplY3Qob3B0aW9uYWxBcmdzLCByZWFzb24pIHtcbiAgICAgICAgLy8gcmVqZWN0KClcbiAgICAgICAgLy8gcmVqZWN0KG9wdGlvbmFsQXJncywgcmVhc29uKVxuICAgICAgICAvLyByZWplY3QocmVhc29uKVxuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBbb3B0aW9uYWxBcmdzLCByZWFzb25dID0gW3t9LCBvcHRpb25hbEFyZ3NdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25hbEFyZ3MpIHtcbiAgICAgICAgICAgIG9wdGlvbmFsQXJncyA9IHt9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKG9wdGlvbmFsQXJncywgZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICByZWplY3QocmVhc29uKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAkdG9Qcm9taXNlKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpXG4gICAgfVxuXG4gICAgLy8gQ29tcGxldGVzIGFuIGV4cGlyZXMgdGhlIHdob2xlIGNoYWluIGJlZm9yZSBpdHMgbm9ybWFsIGVuZFxuICAgIC8vIFNldHMgdGhlICRpc0Fib3J0ZWQgdG8gdHJ1ZSBvbiBhYm9ydGVkIHByb21pc2VzXG4gICAgJGNoYWluQWJvcnQocmVhc29uID0gXCIkY2hhaW5BYm9ydCgpXCIpIHtcbiAgICAgICAgdGhpcy4kY2hhaW4uY29tcGxldGUocmVhc29uLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBNYW51YWxseSBjb21wbGV0ZXMgYW4gZXhwaXJlcyB0aGUgd2hvbGUgY2hhaW5cbiAgICAvLyBPbmx5IHJlcXVpcmVkIGlmIGF3YWl0aW5nIFwibXlQcm9taXNlLiRjaGFpblwiXG4gICAgLy8gd2hlbiB0aGUgYXV0b2NvbXBsZXRlIHdhdGNoZXIgaXMgbm90IHVzZWRcbiAgICAkY2hhaW5Db21wbGV0ZShyZWFzb24gPSBcIiRjaGFpbkNvbXBsZXRlKClcIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy4kY2hhaW4uY29tcGxldGUocmVhc29uLCBmYWxzZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgakZhY3RvcnlFcnJvci5JTlZBTElEX0NBTEwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX0NBTEwoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGUuJGRhdGEudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IFwiVHJ5aW5nIHRvIGNvbXBsZXRlIGEgcGVuZGluZyBjaGFpbi4gVXNlICRjaGFpbkFib3J0KCkgaWYgeW91IHdhbnQgdG8gc3RvcCBpdC5cIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAkY2hhaW5BdXRvQ29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMuJGNoYWluLmNoYWluQ29uZmlnLmNoYWluQXV0b0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0RXhwaXJlZChwcm9taXNlLCBhYm9ydCwgc2lsZW50LCByZWFzb24pIHtcbiAgICAgICAgaWYgKCFwcm9taXNlLiRpc1NldHRsZWQpIHtcbiAgICAgICAgICAgIGlmIChhYm9ydCkge1xuICAgICAgICAgICAgICAgIHByb21pc2UuJGlzQWJvcnRlZCA9ICFzaWxlbnQ7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fX3Jlc29sdmVfXyhyZWFzb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX0NBTEwoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbjogXCJwcm9taXNlIG11c3QgYmUgYWJvcnRlZCBvciBzZXR0bGVkIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGV4cGlyZWQuXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlLiRpc0V4cGlyZWQgPSB0cnVlO1xuICAgIH1cbn1cblxuSkZhY3RvcnlQcm9taXNlLkRFRkFVTFRfQ09ORklHID0ge1xuICAgIGNoYWluQXV0b0NvbXBsZXRlOiBmYWxzZVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeVByb21pc2VDaGFpblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeVByb21pc2VDaGFpbiB7XG5cbiAgICBjb25zdHJ1Y3RvcihjaGFpblJvb3QsIGNoYWluSWQsIGNoYWluTmFtZSwgY2hhaW5Db25maWcpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgY2hhaW5Db25maWc6IHsgdmFsdWU6IGNoYWluQ29uZmlnIH0sXG4gICAgICAgICAgICBjaGFpblJvb3Q6IHsgdmFsdWU6IGNoYWluUm9vdCB9LFxuICAgICAgICAgICAgY2hhaW5JZDogeyB2YWx1ZTogY2hhaW5JZCB9LFxuICAgICAgICAgICAgY2hhaW5OYW1lOiB7IHZhbHVlOiBjaGFpbk5hbWUgfSxcbiAgICAgICAgICAgIGNoYWluTWFwOiB7IHZhbHVlOiBuZXcgTWFwIH0sXG4gICAgICAgICAgICBpc0NvbXBsZXRlZDogeyB2YWx1ZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgZGF0YTogeyB2YWx1ZToge30gfSxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgICAgICAgICBfX2RlZmVycmVkX186IHsgdmFsdWU6IGpRdWVyeS5EZWZlcnJlZCgpIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXQgaXNQZW5kaW5nKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNoYWluTWFwLnZhbHVlcygpKS5pbmNsdWRlcyhmYWxzZSlcbiAgICB9XG5cbiAgICB0aGVuKG9uUmVzb2x2ZSkgeyAvLyA9PiBcImF3YWl0IGNoYWluXCJcbiAgICAgICAgdGhpcy5fX2RlZmVycmVkX18uZG9uZShvblJlc29sdmUpO1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGNvbXBsZXRlKHJlYXNvbiA9IFwiY2hhaW4uY29tcGxldGUoKVwiLCBhYm9ydCApIHtcbiAgICAgICAgbGV0IGNoYWluUm9vdCA9IHRoaXMuY2hhaW5Sb290O1xuICAgICAgICBpZiAoIWNoYWluUm9vdC4kaXNFeHBpcmVkKSB7XG4gICAgICAgICAgICBsZXQgZXJyb3JFeHBpcmVkID0gY2hhaW5Sb290LiRjaGFpbi5lcnJvckV4cGlyZWQgPSBuZXcgakZhY3RvcnlFcnJvci5QUk9NSVNFX0VYUElSRUQoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogY2hhaW5Sb290LFxuICAgICAgICAgICAgICAgIHJlYXNvblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBtYXAgPSB0aGlzLmNoYWluTWFwO1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBtYXAua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgSkZhY3RvcnlQcm9taXNlLnNldEV4cGlyZWQoaXRlbSwgYWJvcnQsIGZhbHNlLCBlcnJvckV4cGlyZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpc0NvbXBsZXRlZFwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5fX2RlZmVycmVkX18ucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5UHJvbWlzZVBhdGhcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlQcm9taXNlUGF0aCBleHRlbmRzIEFycmF5IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBmb3IgKGxldCBpIG9mIGFyZ3VtZW50cykge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goLi4uaSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKGkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgcHJpbnRhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoKHYsIGkpID0+IGkgPT09IDAgPyB2LiRkZXZfbmFtZSA6IHYuJGRldl9uYW1lLnNwbGl0KFwiLlwiKVsxXSkuam9pbihcIi5cIilcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtyZXR1cm4gdGhpcy5wcmludGFibGV9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSkZhY3RvcnlQcm9taXNlU3luY1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcm9taXNlIHRoYXQgdHJpZXMgdG8gcmVzb2x2ZSBzeW5jaHJvbm91c2x5XG4vLyBhbGxvd2luZyBzeW5jaHJvbm91cyBzdGF0ZXMgYW5kIHJlc3VsdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeVByb21pc2VTeW5jIGV4dGVuZHMgUHJvbWlzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuXG4gICAgICAgIGxldCBzdGF0ZXMgPSB7XG4gICAgICAgICAgICAkaXNTZXR0bGVkOiBmYWxzZSwgLy8gdHJ1ZSA9IG5vdCBwZW5kaW5nXG4gICAgICAgICAgICAkaXNSZWplY3RlZDogbnVsbCwgLy8gdHJ1ZSA9IG5vdCBwZW5kaW5nICsgcmVqZWN0ZWRcbiAgICAgICAgICAgICR2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgc3VwZXIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGxldCBvblJlc29sdmUgPSByID0+IHtcbiAgICAgICAgICAgICAgICBpZiAociBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgSkZhY3RvcnlQcm9taXNlU3luYy5yZXNvbHZlKHIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihvblJlc29sdmUsIG9uUmVqZWN0KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVzLiRpc1NldHRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVzLiRpc1JlamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZXMuJHZhbHVlID0gcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBvblJlamVjdCA9IHIgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGRvbid0IHJlc29sdmUgcGVuZGluZyBwcm9taXNlXG4gICAgICAgICAgICAgICAgLy8gdG8ga2VlcCBuYXRpdmUgc3BlY2lmaWNhdGlvblxuICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlcy4kaXNTZXR0bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzLiRpc1JlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzLiR2YWx1ZSA9IHI7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0b3Iob25SZXNvbHZlLCBvblJlamVjdClcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBvblJlamVjdChlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHN0YXRlcyk7XG4gICAgICAgIHN0YXRlcyA9IHRoaXNcbiAgICB9XG5cbiAgICB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuJGlzU2V0dGxlZCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy4kdmFsdWU7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJGlzUmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FuY2VsIGFueSB1bmNhdWdodCByZWplY3RlZCByZXN1bHQgZnJvbSB0aGlzIHByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVmb3JlIHJldHVybmluZyB0aGUgbmV3IG9uZVxuICAgICAgICAgICAgICAgICAgICBzdXBlci50aGVuKHVuZGVmaW5lZCwgKCkgPT4gbnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uUmVqZWN0ZWQgJiYgdHlwZW9mIG9uUmVqZWN0ZWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvblJlamVjdGVkKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpGYWN0b3J5UHJvbWlzZVN5bmMucmVqZWN0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uRnVsZmlsbGVkICYmIHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9uRnVsZmlsbGVkKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKRmFjdG9yeVByb21pc2VTeW5jLnJlamVjdChlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gSkZhY3RvcnlQcm9taXNlU3luYy5yZXNvbHZlKHZhbHVlKVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEpGYWN0b3J5UHJvbWlzZVN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSkZhY3RvcnlQcm9taXNlU3luYyh2YWx1ZS50aGVuLmJpbmQodmFsdWUpKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpGYWN0b3J5UHJvbWlzZVN5bmMociA9PiByKHZhbHVlKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgSkZBQ1RPUllfREVWIH0gZnJvbSBcIi4vakZhY3RvcnktZW52XCI7XG5pbXBvcnQgeyBKRmFjdG9yeUV4cGVjdCB9IGZyb20gXCIuL0pGYWN0b3J5RXhwZWN0XCI7XG5pbXBvcnQgeyBKRmFjdG9yeVByb21pc2VTeW5jIH0gZnJvbSBcIi4vSkZhY3RvcnlQcm9taXNlXCI7XG5pbXBvcnQgeyBKRmFjdG9yeUZ1bmN0aW9uQ29tcG9zZXIgfSBmcm9tIFwiLi9KRmFjdG9yeUZ1bmN0aW9uXCI7XG5pbXBvcnQgeyBqRmFjdG9yeUVycm9yIH0gZnJvbSBcIi4vSkZhY3RvcnlFcnJvclwiO1xuaW1wb3J0IHsgalF1ZXJ5LCBoZWxwZXJfaXNQbGFpbk9iamVjdCB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUV2ZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBodHRwczovL2xlYXJuLmpxdWVyeS5jb20vZXZlbnRzL2V2ZW50LWV4dGVuc2lvbnMvXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN0YXR1czogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUV2ZW50cyB7XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBqUXVlcnkgZG9lc24ndCBoYW5kbGUgYXN5bmMgdHJpZ2dlciBzbyBqRmFjdG9yeSBwcm92aWRlcyB0aGUgZm9sbG93aW5nIDpcbiAgICAvL1xuICAgIC8vIC0gdHJpZ2dlclBhcmFsbGVsKCk6IHRoZSB0cmlnZ2VyIGZ1bmN0aW9uIHJldHVybnMgYSBQcm9taXNlLmFsbChwZW5kaW5nQXJyYXkpXG4gICAgLy8gICB3aGVyZSBwZW5kaW5nQXJyYXkgaXMgZmlsbGVkIGJ5IGFueSBhc3luYyBydW5uaW5nIGhhbmRsZXIuXG4gICAgLy8gICBOb3QgcmVjb21tZW5kZWQgYmVjYXVzZSBpdCdzIHRoZSBiZXN0IHdheSB0byBwcm9kdWNlIHVucHJlZGljdGFibGUgYXN5bmMgc2lkZSBlZmZlY3RzXG4gICAgLy9cbiAgICAvLyAtIHRyaWdnZXJTZXJpZXMoKTogaGFuZGxlcnMgYXJlIHJ1biBpbiBhIHN5bmNocm9ub3VzIG9yZGVyLCB3aXRoIFwiYXdhaXRcIlxuICAgIC8vICAgVGhpcyBhdm9pZHMgdW5wcmVkaWN0YWJsZSBhc3luYyByYWNlIGNvbmRpdGlvblxuICAgIC8vXG4gICAgLy8gIEJvdGggcmV0dXJucyBhIEpGYWN0b3J5UHJvbWlzZVN5bmMgdGhhdCBjb250YWlucyB0aGUgakZhY3RvcnlfZnVsZmlsbGVkIGZsYWdcbiAgICAvLyAgVGhpcyBmbGFnIGlzIGltbWVkaWF0ZWx5IChub3QgYXN5bmMpIHNldCB0byB0cnVlIGlmIG5vIGFzeW5jIGhhbmRsZXIgaXMgc3RpbGwgcGVuZGluZ1xuICAgIC8vXG4gICAgLy8gPT4gaGFuZGxlcnMgYXJlIHdyYXBwZWQuIE9yaWdpbmFsSGFuZGxlcnMgYW5kIHdyYXBwZWRIYW5kbGVycyByZWxhdGlvbnMgYXJlIHN0b3JlZCBpbiBhIFdlYWtNYXBcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIC8qKiBAbGVuZHMgSkZhY3RvcnlFdmVudHMjICovIHtcbiAgICAgICAgICAgIHJlZ2lzdHJ5OiB7IHZhbHVlOiBqUXVlcnkoT2JqZWN0LmNyZWF0ZShudWxsKSkgfSxcbiAgICAgICAgICAgIGhhbmRsZXJzOiB7IHZhbHVlOiBuZXcgV2Vha01hcCB9LFxuICAgICAgICAgICAgb25MaXN0ZW5lclVwZGF0ZTogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgICAgICAgIG9uT2JzZXJ2ZXJVcGRhdGU6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb24oeyBldmVudHMsIGhhbmRsZXIsIHRhcmdldCwgc2VsZWN0b3IgfSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZVNlbGVjdG9yKGV2ZW50cyk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RXZlbnRzLm9uKHtoYW5kbGVyfSlcIiwgaGFuZGxlcikudHlwZUZ1bmN0aW9uKCk7XG4gICAgICAgICAgICB0YXJnZXQgJiYgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy5vbih7dGFyZ2V0fSlcIiwgdGFyZ2V0KS50eXBlKFN0cmluZywgalF1ZXJ5LCBIVE1MRWxlbWVudCk7XG4gICAgICAgICAgICBzZWxlY3RvciAmJiBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RXZlbnRzLm9uKHtzZWxlY3Rvcn0pXCIsIHRhcmdldCkudHlwZVN0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHdyYXBwZWRIYW5kbGVyID0gdGhpcy5oYW5kbGVycy5nZXQoaGFuZGxlcik7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vIGRvbid0IG5lZWQgdG8gd3JhcCBET00gaGFuZGxlcnNcbiAgICAgICAgICAgIGlmICghd3JhcHBlZEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJzLnNldChoYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIGpRdWVyeSh0YXJnZXQpLm9uKGV2ZW50cywgc2VsZWN0b3IsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGFyZ2V0KS5vbihldmVudHMsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub25MaXN0ZW5lclVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25MaXN0ZW5lclVwZGF0ZShhcmd1bWVudHMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXdyYXBwZWRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQoaGFuZGxlciwgd3JhcHBlZEhhbmRsZXIgPSBmdW5jdGlvbihlLCB7IGRhdGEsIHN0YWNrIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgoKSA9PiBoYW5kbGVyKGUsIGRhdGEpKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHdyYXBwZWRIYW5kbGVyLm9yaWdpbmFsSGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdHJ5Lm9uKGV2ZW50cywgd3JhcHBlZEhhbmRsZXIpO1xuICAgICAgICAgICAgaWYgKHRoaXMub25PYnNlcnZlclVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25PYnNlcnZlclVwZGF0ZShhcmd1bWVudHMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvZmYoeyBldmVudHMsIGhhbmRsZXIsIHRhcmdldCwgc2VsZWN0b3IgfSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHsgLy8gb2ZmKCkgaXMgdmFsaWRcbiAgICAgICAgICAgICAgICBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZVNlbGVjdG9yKGV2ZW50cyk7XG4gICAgICAgICAgICAgICAgaGFuZGxlciAmJiBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RXZlbnRzLm9mZih7aGFuZGxlcn0pXCIsIGhhbmRsZXIpLnR5cGVGdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldCAmJiBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RXZlbnRzLm9mZih7dGFyZ2V0fSlcIiwgdGFyZ2V0KS50eXBlKFN0cmluZywgalF1ZXJ5LCBIVE1MRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgJiYgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy5vZmYoe3NlbGVjdG9yfSlcIiwgdGFyZ2V0KS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGFyZ2V0KS5vZmYoZXZlbnRzLCBzZWxlY3RvciwgaGFuZGxlcilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5KHRhcmdldCkub2ZmKGV2ZW50cywgaGFuZGxlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGpRdWVyeShcIipcIikub2ZmKGV2ZW50cywgaGFuZGxlcik7XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IHRoaXMuaGFuZGxlcnMuZ2V0KGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX1ZBTFVFKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJoYW5kbGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IFwibm90IHJlZ2lzdGVyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuOiBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWdpc3RyeS5vZmYoZXZlbnRzLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vbk9ic2VydmVyVXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9uT2JzZXJ2ZXJVcGRhdGUoYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9uTGlzdGVuZXJVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMub25MaXN0ZW5lclVwZGF0ZShhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gaW4gcGFyYWxsZWwuIERvbid0IFwiYXdhaXRcIiBmb3IgYXN5bmMgaGFuZGxlcnNcbiAgICAgKiBPYnZpb3VzbHkgcHJvZHVjZXMgdW5wcmVkaWN0YWJsZSByYWNlIGNvbmRpdGlvbnNcbiAgICAgKi9cbiAgICB0cmlnZ2VyUGFyYWxsZWwoeyBldmVudHMsIGRhdGEsIHRhcmdldCB9KSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlU2VsZWN0b3IoZXZlbnRzKTtcbiAgICAgICAgICAgIHRhcmdldFxuICAgICAgICAgICAgICAgICYmIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlFdmVudHMudHJpZ2dlclBhcmFsbGVsKHt0YXJnZXR9KVwiLCB0YXJnZXQpLnR5cGUoU3RyaW5nLCBqUXVlcnksIEhUTUxFbGVtZW50KVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICAgICAgY29uc3QgcGVuZGluZyA9IFtdO1xuICAgICAgICBldmVudHMgPSBldmVudHMuc3BsaXQoXCIgXCIpO1xuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICAgICAgICAgIGpRdWVyeSh0YXJnZXQpLnRyaWdnZXIoZXZlbnQsIHsgZGF0YSwgc3RhY2sgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdHJ5LnRyaWdnZXJIYW5kbGVyKGV2ZW50LCB7IGRhdGEsIHN0YWNrIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBoYW5kbGVyIG9mIHN0YWNrKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gaGFuZGxlcigpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2VcbiAgICAgICAgICAgICAgICAmJiAhcmVzdWx0LiRpc1NldHRsZWQgLy8gZG9uJ3QgbmVlZCB0byBhd2FpdFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKHJlc3VsdClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwZW5kaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gSkZhY3RvcnlQcm9taXNlU3luYy5yZXNvbHZlKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1biBpbiBkZWNsYXJhdGlvbiBvcmRlciBzeW5jaHJvbm91c2x5LiBXaWxsIFwiYXdhaXRcIiBmb3IgYXN5bmMgaGFuZGxlcnNcbiAgICAgKiBQcmV2ZW50cyB1bnByZWRpY3RhYmxlIHJhY2UgY29uZGl0aW9uc1xuICAgICAqL1xuICAgIHRyaWdnZXJTZXJpZXMoeyBldmVudHMsIGRhdGEsIHRhcmdldCB9KSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlU2VsZWN0b3IoZXZlbnRzKTtcbiAgICAgICAgICAgIHRhcmdldCAmJiBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RXZlbnRzLnRyaWdnZXJTZXJpZXMoe3RhcmdldH0pXCIsIHRhcmdldCkudHlwZShTdHJpbmcsIGpRdWVyeSwgSFRNTEVsZW1lbnQpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEpGYWN0b3J5UHJvbWlzZVN5bmMoYXN5bmMgcmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkodGFyZ2V0KS50cmlnZ2VyKGV2ZW50LCB7IGRhdGEsIHN0YWNrIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0cnkudHJpZ2dlckhhbmRsZXIoZXZlbnQsIHsgZGF0YSwgc3RhY2sgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGhhbmRsZXIgb2Ygc3RhY2spIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gaGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlXG4gICAgICAgICAgICAgICAgICAgICYmICFyZXN1bHQuJGlzU2V0dGxlZCAvLyBkb24ndCBuZWVkIHRvIGF3YWl0XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5RXZlbnRzTWFuYWdlciBleHRlbmRzIEpGYWN0b3J5RXZlbnRzIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgcGFyZW50OiB7IHZhbHVlOiBwYXJlbnQgfSxcbiAgICAgICAgICAgIGFmZmlsaWF0ZVJ1bGVzOiB7IHZhbHVlOiBuZXcgSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyKCkuY29tcG9zZSgpIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWZmaWxpYXRlQWRkUnVsZShKRmFjdG9yeUV2ZW50c01hbmFnZXIucnVsZV9uYW1lc3BhY2UpXG4gICAgfVxuXG4gICAgYWZmaWxpYXRlKGV2ZW50cyA9IFwiXCIsIG5hbWVzcGFjZXMgPSBcIlwiLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBwYXJzZXIgPSBuZXcgSkZhY3RvcnlFdmVudFNlbGVjdG9yUGFyc2VyKGV2ZW50cyk7XG4gICAgICAgIGZvciAobGV0IHBhcnNlZEV2ZW50IG9mIHBhcnNlci5ldmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuYWZmaWxpYXRlUnVsZXMocGFyc2VkRXZlbnQsIG5hbWVzcGFjZXMsIG9wdGlvbnMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlci50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGFmZmlsaWF0ZUFkZFJ1bGUoaGFuZGxlcikge1xuICAgICAgICB0aGlzLmFmZmlsaWF0ZVJ1bGVzLmNvbXBvc2VyLmxhc3QoaGFuZGxlcilcbiAgICB9XG5cbiAgICBzdGF0aWMgcnVsZV9uYW1lc3BhY2UoY29udGV4dCwgcGFyc2VkRXZlbnQsIG5hbWVzcGFjZXMpIHtcbiAgICAgICAgbmFtZXNwYWNlcyA9IG5hbWVzcGFjZXMuc3BsaXQoXCIuXCIpO1xuICAgICAgICBmb3IgKGxldCBuYW1lc3BhY2Ugb2YgbmFtZXNwYWNlcykge1xuICAgICAgICAgICAgbmFtZXNwYWNlICYmIHBhcnNlZEV2ZW50LmFkZE5hbWVzcGFjZShuYW1lc3BhY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb24oZXZlbnRzLCB0YXJnZXQsIHNlbGVjdG9yLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIE9ic2VydmVyczpcbiAgICAgICAgLy8gZXZlbnRzLCBoYW5kbGVyXG4gICAgICAgIC8vIGV2ZW50cywgaGFuZGxlciwgb3B0aW9uc1xuXG4gICAgICAgIC8vIERPTSBFdmVudHM6XG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBoYW5kbGVyXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBoYW5kbGVyLCBvcHRpb25zXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlcixcbiAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXQsIHNlbGVjdG9yLCBoYW5kbGVyLCBvcHRpb25zXG5cbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgLy8gZXZlbnRzLCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgW2hhbmRsZXIsIHRhcmdldF0gPSBbdGFyZ2V0LyosIHVuZGVmaW5lZCovXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1syXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgIFtoYW5kbGVyLCBzZWxlY3Rvcl0gPSBbc2VsZWN0b3IvKiwgdW5kZWZpbmVkKi9dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgaGFuZGxlciwgb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICBbaGFuZGxlciwgb3B0aW9ucywgdGFyZ2V0LCBzZWxlY3Rvcl0gPSBbdGFyZ2V0LCBzZWxlY3Rvci8qLCB1bmRlZmluZWQsIHVuZGVmaW5lZCovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbM10gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXQsIGhhbmRsZXIsIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgW29wdGlvbnMsIGhhbmRsZXIsIHNlbGVjdG9yXSA9IFtoYW5kbGVyLCBzZWxlY3Rvci8qLCB1bmRlZmluZWQqL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnRzID0gdGhpcy5hZmZpbGlhdGUoZXZlbnRzLCB0aGlzLnBhcmVudC4kLmFib3V0LmZpbmdlcnByaW50LCBvcHRpb25zKTtcblxuICAgICAgICB0YXJnZXQgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICBzdXBlci5vbih7IGV2ZW50cywgaGFuZGxlciB9KSA6XG4gICAgICAgICAgICBzdXBlci5vbih7IGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlci8qLCBvcHRpb25zKi8gfSlcbiAgICB9XG5cbiAgICBvZmYoZXZlbnRzLCB0YXJnZXQsIHNlbGVjdG9yLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIEJvdGg6XG4gICAgICAgIC8vIGV2ZW50cyAoY2FuIGJlIG5hbWVzcGFjZXMpXG4gICAgICAgIC8vIGV2ZW50cywgb3B0aW9uc1xuICAgICAgICAvLyBvcHRpb25zIChjYW4gYmUgcmVtb3ZhbClcblxuICAgICAgICAvLyBPYnNlcnZlcjpcbiAgICAgICAgLy8gZXZlbnRzLCBoYW5kbGVyXG4gICAgICAgIC8vIGV2ZW50cywgaGFuZGxlciwgb3B0aW9uc1xuXG4gICAgICAgIC8vIERPTSBFdmVudHM6XG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBoYW5kbGVyXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBoYW5kbGVyLCBvcHRpb25zXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvclxuICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXIsXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlciwgb3B0aW9uc1xuXG4gICAgICAgIGNvbnN0IGFyZ0wgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBzd2l0Y2ggKGFyZ0wpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIFtvcHRpb25zLCBldmVudHNdID0gW2V2ZW50cy8qLCB1bmRlZmluZWQqL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVsc2UgZXZlbnRzIChjYW4gbmFtZXNwYWNlcylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICBbaGFuZGxlciwgdGFyZ2V0XSA9IFt0YXJnZXQvKiwgdW5kZWZpbmVkKi9dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVscGVyX2lzUGxhaW5PYmplY3QoYXJndW1lbnRzWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMsIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgW29wdGlvbnMsIHRhcmdldF0gPSBbdGFyZ2V0LyosIHVuZGVmaW5lZCovXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlIGV2ZW50cywgdGFyZ2V0XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMsIHRhcmdldCwgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICBbaGFuZGxlciwgc2VsZWN0b3JdID0gW3NlbGVjdG9yLyosIHVuZGVmaW5lZCovXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMsIGhhbmRsZXIsIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgW2hhbmRsZXIsIG9wdGlvbnMsIHRhcmdldCwgc2VsZWN0b3JdID0gW3RhcmdldCwgc2VsZWN0b3IvKiwgdW5kZWZpbmVkLCB1bmRlZmluZWQqL107XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXQsIHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzNdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBoYW5kbGVyLCBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIFtvcHRpb25zLCBoYW5kbGVyLCBzZWxlY3Rvcl0gPSBbaGFuZGxlciwgc2VsZWN0b3IvKiwgdW5kZWZpbmVkKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50cyA9IHRoaXMuYWZmaWxpYXRlKGV2ZW50cywgdGhpcy5wYXJlbnQuJC5hYm91dC5maW5nZXJwcmludCwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKGFyZ0wgPCAyKSB7XG4gICAgICAgICAgICBzdXBlci5vZmYoeyBldmVudHMgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQgP1xuICAgICAgICAgICAgICAgIHN1cGVyLm9mZih7IGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlci8qLCBvcHRpb25zKi8gfSkgOlxuICAgICAgICAgICAgICAgIHN1cGVyLm9mZih7IGV2ZW50cywgaGFuZGxlciB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJpZ2dlcihldmVudHMsIHRhcmdldCwgZGF0YSkge1xuICAgICAgICAvLyBldmVudHNcbiAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXRcbiAgICAgICAgLy8gZXZlbnRzLCBkYXRhXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBkYXRhXG5cbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIgJiYgIXRhcmdldC5qcXVlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLCBkYXRhXG4gICAgICAgICAgICAgICAgICAgIFtkYXRhLCB0YXJnZXRdID0gW3RhcmdldF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXRcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldCA/XG4gICAgICAgICAgICBzdXBlci50cmlnZ2VyU2VyaWVzKHsgZXZlbnRzLCB0YXJnZXQsIGRhdGEgfSkgOlxuICAgICAgICAgICAgc3VwZXIudHJpZ2dlclNlcmllcyh7IGV2ZW50cywgZGF0YSB9KVxuICAgIH1cblxuICAgIHRyaWdnZXJQYXJhbGxlbChldmVudHMsIHRhcmdldCwgZGF0YSkge1xuICAgICAgICAvLyBldmVudHNcbiAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXRcbiAgICAgICAgLy8gZXZlbnRzLCBkYXRhXG4gICAgICAgIC8vIGV2ZW50cywgdGFyZ2V0LCBkYXRhXG5cbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIgJiYgIXRhcmdldC5qcXVlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzLCBkYXRhXG4gICAgICAgICAgICAgICAgICAgIFtkYXRhLCB0YXJnZXRdID0gW3RhcmdldF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZXZlbnRzLCB0YXJnZXRcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldCA/XG4gICAgICAgICAgICBzdXBlci50cmlnZ2VyUGFyYWxsZWwoeyBldmVudHMsIHRhcmdldCwgZGF0YSB9KSA6XG4gICAgICAgICAgICBzdXBlci50cmlnZ2VyUGFyYWxsZWwoeyBldmVudHMsIGRhdGEgfSlcbiAgICB9XG5cbiAgICAvLyAjdW5vcHRpbWl6ZWQgZHJhZnQjXG4gICAgLy8gSXQncyBub3QgZWFzeSB0byBrZWVwIHRoaXMgbGlzdCB1cCB0byBkYXRlIGJlY2F1c2U6XG4gICAgLy8gLSBsaXN0ZW5lcnMgY2FuIGJlIHJlbW92ZWQgYnkgZXh0ZXJuYWwgZG9tIG11dGF0aW9uc1xuICAgIC8vIC0gbGlzdGVuZXJzIGNhbiBiZSBkZWxlZ2F0ZWRcbiAgICAvLyAtIG9mZigpIG1ldGhvZCBjYW4gcmVtb3ZlIGxpc3RlbmVycyBnbG9iYWxseVxuICAgIGdldERvbUxpc3RlbmVycyhuYW1lc3BhY2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChsZXQgZWxtIG9mIGpRdWVyeShcIipcIikpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0galF1ZXJ5Ll9kYXRhKGVsbSwgXCJldmVudHNcIik7XG4gICAgICAgICAgICBpZiAoZGF0YSkgey8vIGRhdGEgPSB7Y2xpY2s6IFt7fV0sIC4uLiB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZW50cmllcyBvZiBPYmplY3QudmFsdWVzKGRhdGEpKSB7Ly8gZW50cmllcyA9IFt7dHlwZTouLi59XVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBlbnRyeSBvZiBlbnRyaWVzKSB7Ly8gZW50cnkgPSB7dHlwZSwgbmFtZXNwYWNlLCBoYW5kbGVyLCAuLi59XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyc2VyID0gbmV3IEpGYWN0b3J5RXZlbnRTZWxlY3RvcihlbnRyeS5uYW1lc3BhY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlci5oYXNOYW1lc3BhY2UobmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHR5cGVzID0gcmVzdWx0LmdldChlbG0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGVsbSwgdHlwZXMgPSB7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSB0eXBlc1tlbnRyeS50eXBlXSB8fCAodHlwZXNbZW50cnkudHlwZV0gPSBbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi4uZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBlbnRyeS5zZWxlY3RvciB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBlbnRyeS5oYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IGVudHJ5Lm5hbWVzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG5cbiAgICAvLyAjdW5vcHRpbWl6ZWQgZHJhZnQjXG4gICAgZ2V0T2JzZXJ2ZXJzKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcCgpO1xuICAgICAgICBsZXQgZXZlbnRzID0gdGhpcy5yZWdpc3RyeS5fZXZlbnRzO1xuXG4gICAgICAgIGlmICghZXZlbnRzKSB7XG4gICAgICAgICAgICBsZXQgcmVnaXN0cnkgPSBPYmplY3QudmFsdWVzKHRoaXMucmVnaXN0cnkpWzBdO1xuICAgICAgICAgICAgbGV0IGV4cGFuZG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyZWdpc3RyeSkuZmluZChrID0+IGsuaW5kZXhPZihcImpRdWVyeVwiKSA9PT0gMCk7XG4gICAgICAgICAgICBpZiAocmVnaXN0cnkgJiYgZXhwYW5kbykge1xuICAgICAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMucmVnaXN0cnkuX2V2ZW50cyA9IHJlZ2lzdHJ5W2V4cGFuZG9dLmV2ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudHMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoZXZlbnRzKSkge1xuICAgICAgICAgICAgICAgIGxldCBldmVudCA9IHJlc3VsdC5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGV2ZW50VHlwZUVudHJ5IG9mIHZhbCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGV2ZW50VHlwZUVudHJ5LmhhbmRsZXIub3JpZ2luYWxIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBldmVudFR5cGVFbnRyeS5uYW1lc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlFdmVudFNlbGVjdG9yUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvcnMpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFdmVudHMudmFsaWRhdGVTZWxlY3RvcihzZWxlY3RvcnMpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSBBcnJheTxKRmFjdG9yeUV2ZW50U2VsZWN0b3I+XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmV2ZW50cyA9IHNlbGVjdG9ycy5zcGxpdChcIiBcIikubWFwKHNlbGVjdG9yID0+IG5ldyBKRmFjdG9yeUV2ZW50U2VsZWN0b3Ioc2VsZWN0b3IpKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBldmVudCBvZiB0aGlzLmV2ZW50cykge1xuICAgICAgICAgICAgcy5wdXNoKGV2ZW50LnRvU3RyaW5nKCkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMuam9pbihcIiBcIilcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUV2ZW50U2VsZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yKSB7XG4gICAgICAgIGxldCBbZXZlbnQsIC4uLm5hbWVzcGFjZV0gPSBzZWxlY3Rvci5zcGxpdChcIi5cIik7XG4gICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuZXcgU2V0KG5hbWVzcGFjZSlcbiAgICB9XG5cbiAgICAvKiogQHJldHVybiB7Qm9vbGVhbnxTdHJpbmd9ICovXG4gICAgaGFzTmFtZXNwYWNlKG5hbWVzcGFjZXMpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5hbWVzcGFjZXMpKSB7XG4gICAgICAgICAgICBuYW1lc3BhY2VzID0gW25hbWVzcGFjZXNdXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgbmFtZXNwYWNlIG9mIG5hbWVzcGFjZXMpIHtcbiAgICAgICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIS9eW1xcdzpdKyQvLnRlc3QobmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX1ZBTFVFKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJuYW1lc3BhY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogXCJtdXN0IGJlIGFscGhhbnVtZXJpYywgdW5kZXJzY29yZSBhbmQgY29sb24gY2hhcmFjdGVyc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IG5hbWVzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgJiYgdGhpcy5uYW1lc3BhY2UuaGFzKG5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZXNwYWNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgYWRkTmFtZXNwYWNlKG5hbWVzcGFjZSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBpZiAoIS9eW1xcdzpdKyQvLnRlc3QobmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLklOVkFMSURfVkFMVUUoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwibmFtZXNwYWNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbjogXCJtdXN0IGJlIGFscGhhbnVtZXJpYywgdW5kZXJzY29yZSBhbmQgY29sb24gY2hhcmFjdGVyc1wiLFxuICAgICAgICAgICAgICAgICAgICBnaXZlbjogbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWVzcGFjZS5hZGQobmFtZXNwYWNlKVxuICAgIH1cblxuICAgIGRlbGV0ZU5hbWVzcGFjZShuYW1lc3BhY2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgaWYgKCEvXltcXHc6XSskLy50ZXN0KG5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX1ZBTFVFKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIm5hbWVzcGFjZVwiLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IFwibXVzdCBiZSBhbHBoYW51bWVyaWMsIHVuZGVyc2NvcmUgYW5kIGNvbG9uIGNoYXJhY3RlcnNcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IG5hbWVzcGFjZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lc3BhY2UuZGVsZXRlKG5hbWVzcGFjZSlcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlLnNpemUgPyB0aGlzLmV2ZW50ICsgXCIuXCIgKyBBcnJheS5mcm9tKHRoaXMubmFtZXNwYWNlLnZhbHVlcygpKS5qb2luKFwiLlwiKSA6IHRoaXMuZXZlbnQ7XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaWYgKEpGQUNUT1JZX0RFVikge1xuICAgIEpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlU2VsZWN0b3IgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlU2VsZWN0b3Ioc2VsZWN0b3IpXCIsIHNlbGVjdG9yKVxuICAgICAgICAgICAgICAgIC5ub3RVbmRlZmluZWQoKVxuICAgICAgICAgICAgICAgIC52YWxpZFNwYWNlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgW2V2ZW50LCBuc10gb2Ygc2VsZWN0b3Iuc3BsaXQoXCIgXCIpXG4gICAgICAgICAgICAubWFwKHYgPT4gdi5zcGxpdChcIi5cIikpXG4gICAgICAgICAgICAubWFwKHYgPT4gW3Yuc2hpZnQoKSwgdi5qb2luKFwiLlwiKV0pKSB7XG4gICAgICAgICAgICBldmVudCAmJiBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIG5zICYmIEpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlTmFtZXNwYWNlKG5zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH07XG5cbiAgICBKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZUV2ZW50KGV2ZW50KVwiLCBldmVudClcbiAgICAgICAgICAgICAgICAubm90VW5kZWZpbmVkKClcbiAgICAgICAgICAgICAgICAubm90RW1wdHlTdHJpbmcoKVxuICAgICAgICAgICAgICAgIC52YWxpZFNwYWNlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEvXltcXHc6XSskLy50ZXN0KGV2ZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuSU5WQUxJRF9WQUxVRSh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIkpGYWN0b3J5RXZlbnRzLnZhbGlkYXRlRXZlbnQoZXZlbnQpXCIsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcIm11c3QgYmUgYWxwaGFudW1lcmljLCB1bmRlcnNjb3JlIGFuZCBjb2xvbiBjaGFyYWN0ZXJzXCIsXG4gICAgICAgICAgICAgICAgZ2l2ZW46IGV2ZW50XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9O1xuXG4gICAgSkZhY3RvcnlFdmVudHMudmFsaWRhdGVOYW1lc3BhY2UgPSBmdW5jdGlvbihuYW1lc3BhY2UpIHsgLy8gZXg6IG5zLm5zMi5uczNcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUV2ZW50cy52YWxpZGF0ZU5hbWVzcGFjZShuYW1lc3BhY2UpXCIsIG5hbWVzcGFjZSlcbiAgICAgICAgICAgICAgICAubm90VW5kZWZpbmVkKClcbiAgICAgICAgICAgICAgICAubm90RW1wdHlTdHJpbmcoKVxuICAgICAgICAgICAgICAgIC52YWxpZFNwYWNlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEvXltcXHc6Ll0rJC8udGVzdChuYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX1ZBTFVFKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiSkZhY3RvcnlFdmVudHMudmFsaWRhdGVOYW1lc3BhY2UobmFtZXNwYWNlKVwiLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogXCJtdXN0IGJlIGFscGhhbnVtZXJpYywgdW5kZXJzY29yZSwgZG90IGFuZCBjb2xvbiBjaGFyYWN0ZXJzXCIsXG4gICAgICAgICAgICAgICAgZ2l2ZW46IG5hbWVzcGFjZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfTtcbn0iLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuaW1wb3J0IHsgSkZhY3RvcnlQcm9taXNlIH0gZnJvbSBcIi4vSkZhY3RvcnlQcm9taXNlXCI7XG5pbXBvcnQgeyBqRmFjdG9yeUVycm9yIH0gZnJvbSBcIi4vSkZhY3RvcnlFcnJvclwiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpGYWN0b3J5RmV0Y2hcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5RmV0Y2ggZXh0ZW5kcyBKRmFjdG9yeVByb21pc2Uge1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uYWxBcmdzLCB1cmwsIGZldGNoT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uYWxBcmdzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHN1cGVyKG9wdGlvbmFsQXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbmFsQXJncyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIFtvcHRpb25hbEFyZ3MsIHVybCwgZmV0Y2hPcHRpb25zXSA9IFt7fSwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV1dXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBmZXRjaFJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIGZldGNoT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHN1cGVyKG9wdGlvbmFsQXJncywgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwcm9taXNlID0gZmV0Y2goZmV0Y2hSZXF1ZXN0KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRjaGFpbi5mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCI6XCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChmZXRjaE9wdGlvbnMuJHR5cGVUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyID0+IHRoaXMuJGNoYWluLnJlc3BvbnNlVGV4dCA9IHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmZXRjaE9wdGlvbnMuJHR5cGVKU09OKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyID0+IHRoaXMuJGNoYWluLnJlc3BvbnNlSlNPTiA9IHIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLlJFUVVFU1RfRVJST1Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiByZWFzb24ubWVzc2FnZSB8fCByZWFzb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMuJGNoYWluLmZldGNoUmVzcG9uc2UgJiYgdGhpcy4kY2hhaW4uZmV0Y2hSZXNwb25zZS51cmwgfHwgdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaFJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaFJlc3BvbnNlOiB0aGlzLiRjaGFpbi5mZXRjaFJlc3BvbnNlIHx8IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9uYWxBcmdzLnRyYWNlU291cmNlKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKHJlc29sdmUsIHJlamVjdClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRjaGFpbi5mZXRjaE9wdGlvbnMgPSBmZXRjaE9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLiRjaGFpbi5mZXRjaFJlcXVlc3QgPSBmZXRjaFJlcXVlc3Q7XG5cbiAgICAgICAgICAgIGxldCBhYm9ydEN0cmwgPSBmZXRjaE9wdGlvbnMuYWJvcnRDb250cm9sbGVyIHx8IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgIGZldGNoT3B0aW9ucy5zaWduYWwgPSBhYm9ydEN0cmwuc2lnbmFsO1xuICAgICAgICAgICAgdGhpcy4kY2hhaW4uZmV0Y2hBYm9ydENvbnRyb2xsZXIgPSBhYm9ydEN0cmw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkY2hhaW5BYm9ydChyZWFzb24gPSBcInJlcXVlc3QgYWJvcnRlZFwiKSB7XG4gICAgICAgIHN1cGVyLiRjaGFpbkFib3J0KHJlYXNvbik7XG4gICAgICAgIHRoaXMuJGNoYWluLmZldGNoQWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxufSIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG5pbXBvcnQgeyBKRkFDVE9SWV9ERVYsIEpGQUNUT1JZX0NMSSB9IGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuaW1wb3J0IHsgSkZhY3RvcnlFeHBlY3QgfSBmcm9tIFwiLi9KRmFjdG9yeUV4cGVjdFwiO1xuaW1wb3J0IHsgakZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsIH0gZnJvbSBcIi4vSkZhY3RvcnlGdW5jdGlvblwiO1xuaW1wb3J0IHsgaGVscGVyX2RlZmF1bHRzRGVlcCwgTk9PUCB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeUxvZ2dlclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBIGNvbnRleHR1YWwgbG9nZ2VyIHRoYXQgcHJlcGVuZHMgYSBsYWJlbCBhbmQgYWxsb3dzIHJ1bnRpbWUgZmlsdGVyaW5nIHdoaWxlIHByZXNlcnZpbmcgdGhlIGNhbGxlciBsaW5lIG51bWJlclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBsb2dnZXIuY3JlYXRlU3ViTG9nZ2VyKGxhYmVsKSBjcmVhdGUgYSBzdWItbG9nZ2VyIG9mIGxvZ2dlcjsgXCJsb2dnZXJcIiBjYW4gYmUgYSBzdWItbG9nZ2VyLlxuLy8gbG9nZ2VyLmRpc2FibGUoKSBkaXNhYmxlIGNvbnNvbGUgZm9yIGl0c2VsZiBhbmQgc3ViLWxvZ2dlcnNcbi8vIGxvZ2dlci5kaXNhbGxvdygnbG9nJykgZGlzYWxsb3cgbG9nZ2VyLmxvZygpIG9ubHlcbi8vIGxvZ2dlci5kaXNhbGxvdygnbG9nJywgc3ViTG9nZ2VyLmxhYmVsKSBkaXNhbGxvdyBzdWItbG9nZ2VyLmxvZygpIG9ubHkuIFRoaXMgaXMgY2FsbGFibGUgZnJvbSBhbnkgbG9nZ2VyL3N1Yi1sb2dnZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzIDogQmV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IFNZTUJPTF9FTkFCTEVEID0gU3ltYm9sKCk7XG5cbmV4cG9ydCBjbGFzcyBKRmFjdG9yeUxvZ2dlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYgJiYgb3B0aW9ucykge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUxvZ2dlcihvcHRpb25zKVwiLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIC5wcm9wZXJ0aWVzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEpGYWN0b3J5TG9nZ2VyLkRFRkFVTFRfQ09ORklHKSlcbiAgICAgICAgfVxuICAgICAgICBoZWxwZXJfZGVmYXVsdHNEZWVwKHRoaXMsIG9wdGlvbnMsIEpGYWN0b3J5TG9nZ2VyLkRFRkFVTFRfQ09ORklHKTtcbiAgICAgICAgdGhpcy5jb25kaXRpb24gPSBqRmFjdG9yeUZ1bmN0aW9uQ29uZGl0aW9uYWwoSkZhY3RvcnlMb2dnZXIuREVGQVVMVF9DT05ESVRJT04pO1xuICAgICAgICB0aGlzLmluc3RhbGxBY2Nlc3NvcihcImxvZ1wiKTtcbiAgICAgICAgdGhpcy5pbnN0YWxsQWNjZXNzb3IoXCJ3YXJuXCIpO1xuICAgICAgICB0aGlzLmluc3RhbGxBY2Nlc3NvcihcImVycm9yXCIpXG4gICAgfVxuXG4gICAgZ2V0IGVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW1NZTUJPTF9FTkFCTEVEXSAmJiAodGhpcy5wYXJlbnRMb2dnZXIgPyB0aGlzLnBhcmVudExvZ2dlci5lbmFibGVkIDogdHJ1ZSlcbiAgICB9XG5cbiAgICBzZXQgZW5hYmxlZCh2KSB7XG4gICAgICAgIHYgPyB0aGlzLmVuYWJsZSgpIDogdGhpcy5kaXNhYmxlKClcbiAgICB9XG5cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIGlmICh0aGlzW1NZTUJPTF9FTkFCTEVEXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpc1tTWU1CT0xfRU5BQkxFRF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgaWYgKHRoaXNbU1lNQk9MX0VOQUJMRURdICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpc1tTWU1CT0xfRU5BQkxFRF0gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc2FsbG93KG5hdGl2ZU5hbWUsIGxhYmVsID0gdGhpcy5sYWJlbCkge1xuICAgICAgICBpZiAoIXRoaXMuZmlsdGVyc1tsYWJlbF0pIHt0aGlzLmZpbHRlcnNbbGFiZWxdID0ge319XG4gICAgICAgIHRoaXMuZmlsdGVyc1tsYWJlbF1bbmF0aXZlTmFtZV0gPSB0cnVlXG4gICAgfVxuXG4gICAgYWxsb3cobmF0aXZlTmFtZSwgbGFiZWwgPSB0aGlzLmxhYmVsKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnNbbGFiZWxdKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJzW2xhYmVsXVtuYXRpdmVOYW1lXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5zdGFsbEFjY2Vzc29yKG5hdGl2ZU5hbWUsIHRhcmdldE5hbWUgPSBuYXRpdmVOYW1lLCB0YXJnZXQgPSB0aGlzKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiSkZhY3RvcnlMb2dnZXIobmF0aXZlTmFtZSlcIiwgbmF0aXZlTmFtZSkuZXF1YWxJbihbXCJsb2dcIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIl0pO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwge1xuICAgICAgICAgICAgW3RhcmdldE5hbWVdOiB7XG4gICAgICAgICAgICAgICAgZ2V0OiB0aGlzLmFjY2Vzc29yLmJpbmQodGhpcywgbmF0aXZlTmFtZS8qLCB0YXJnZXQqLyksXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYWNjZXNzb3IobmF0aXZlTmFtZS8qLCB0YXJnZXQqLykge1xuICAgICAgICBpZiAoIXRoaXNbU1lNQk9MX0VOQUJMRURdKSB7XG4gICAgICAgICAgICByZXR1cm4gTk9PUDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb24obmF0aXZlTmFtZSkgJiYgdGhpcy5mb3JtYXR0ZXJbbmF0aXZlTmFtZV0odGhpcykgfHwgTk9PUFxuICAgIH1cblxuICAgIGNyZWF0ZVN1YkxvZ2dlcihsYWJlbCkge1xuICAgICAgICAvKiogQHR5cGUgSkZhY3RvcnlMb2dnZXIgKi9cbiAgICAgICAgbGV0IHN1YiA9IG5ldyBKRmFjdG9yeUxvZ2dlcih7XG4gICAgICAgICAgICBlbmFibGVkOiB0aGlzLmVuYWJsZWQsXG4gICAgICAgICAgICBsYWJlbDogdGhpcy5sYWJlbCArIFwiLlwiICsgbGFiZWwsXG4gICAgICAgICAgICBzdHlsZXNfY3NzOiB0aGlzLnN0eWxlc19jc3MsXG4gICAgICAgICAgICBzdHlsZXNfY2xpOiB0aGlzLnN0eWxlc19jbGksXG4gICAgICAgICAgICBjb25zb2xlOiB0aGlzLmNvbnNvbGUsXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IHRoaXMuZm9ybWF0dGVyXG4gICAgICAgIH0pO1xuICAgICAgICBzdWIucGFyZW50TG9nZ2VyID0gdGhpcztcbiAgICAgICAgc3ViLmNvbmRpdGlvbi5hZGRDb25kaXRpb24oKCkgPT4gdGhpcy5lbmFibGVkKTtcbiAgICAgICAgc3ViLmZpbHRlcnMgPSB0aGlzLmZpbHRlcnM7IC8vIHNoYXJlZCB0byBhbGxvdy9kaXNhbGxvdyBmcm9tIGFueXdoZXJlXG4gICAgICAgIHJldHVybiBzdWJcbiAgICB9XG59XG5cbi8vICNsaW1pdGF0aW9uIyBUbyBwcmVzZXJ2ZSB0aGUgbGluZSBudW1iZXIsIHdlIGNhbiBvbmx5IHVzZSBuYXRpdmUgZnVuY3Rpb25zLCBsaWtlIGJpbmRcbi8vICNsaW1pdGF0aW9uIyBCZWNhdXNlIHdlIHVzZSBiaW5kKCksIG9ubHkgdGhlIHN0eWxlIG9mIHRoZSBmaXJzdCBlbGVtZW50IGNhbiBiZSBlZmZpY2llbnRseSBkZWZpbmVkXG5cbkpGYWN0b3J5TG9nZ2VyLkZPUk1BVFRFUl9OQVRJVkUgPSB7XG4gICAgbG9nOiBsb2dnZXIgPT4gbG9nZ2VyLmNvbnNvbGUubG9nLmJpbmQobG9nZ2VyLmNvbnNvbGUsIGxvZ2dlci5sYWJlbCArIFwiPlwiKSxcbiAgICB3YXJuOiBsb2dnZXIgPT4gbG9nZ2VyLmNvbnNvbGUud2Fybi5iaW5kKGxvZ2dlci5jb25zb2xlLCBsb2dnZXIubGFiZWwgKyBcIj5cIiksXG4gICAgZXJyb3I6IGxvZ2dlciA9PiBsb2dnZXIuY29uc29sZS5lcnJvci5iaW5kKGxvZ2dlci5jb25zb2xlLCBsb2dnZXIubGFiZWwgKyBcIj5cIilcbn07XG5cbkpGYWN0b3J5TG9nZ2VyLkZPUk1BVFRFUl9DTEkgPSB7XG4gICAgbG9nOiBsb2dnZXIgPT4gbG9nZ2VyLmNvbnNvbGUubG9nLmJpbmQobG9nZ2VyLmNvbnNvbGUsIGxvZ2dlci5zdHlsZXNfY2xpLmxhYmVsLCBsb2dnZXIubGFiZWwgKyBcIj5cIiksXG4gICAgd2FybjogbG9nZ2VyID0+IGxvZ2dlci5jb25zb2xlLndhcm4uYmluZChsb2dnZXIuY29uc29sZSwgbG9nZ2VyLnN0eWxlc19jbGkubGFiZWwsIGxvZ2dlci5sYWJlbCArIFwiPlwiKSxcbiAgICBlcnJvcjogbG9nZ2VyID0+IGxvZ2dlci5jb25zb2xlLmVycm9yLmJpbmQobG9nZ2VyLmNvbnNvbGUsIGxvZ2dlci5zdHlsZXNfY2xpLmxhYmVsLCBsb2dnZXIubGFiZWwgKyBcIj5cIilcbn07XG5cbkpGYWN0b3J5TG9nZ2VyLkZPUk1BVFRFUl9CUk9XU0VSID0ge1xuICAgIGxvZzogbG9nZ2VyID0+IGxvZ2dlci5jb25zb2xlLmxvZy5iaW5kKGxvZ2dlci5jb25zb2xlLCBcIiVjXCIgKyBsb2dnZXIubGFiZWwgKyBcIj5cIiwgbG9nZ2VyLnN0eWxlc19jc3MubGFiZWwpLFxuICAgIHdhcm46IGxvZ2dlciA9PiBsb2dnZXIuY29uc29sZS53YXJuLmJpbmQobG9nZ2VyLmNvbnNvbGUsIFwiJWNcIiArIGxvZ2dlci5sYWJlbCArIFwiPlwiLCBsb2dnZXIuc3R5bGVzX2Nzcy5sYWJlbCksXG4gICAgZXJyb3I6IGxvZ2dlciA9PiBsb2dnZXIuY29uc29sZS5lcnJvci5iaW5kKGxvZ2dlci5jb25zb2xlLCBcIiVjXCIgKyBsb2dnZXIubGFiZWwgKyBcIj5cIiwgbG9nZ2VyLnN0eWxlc19jc3MubGFiZWwpXG59O1xuXG4vKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cbkpGYWN0b3J5TG9nZ2VyLkRFRkFVTFRfQ09ORElUSU9OID0gZnVuY3Rpb24obmF0aXZlTmFtZSkge1xuICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJKRmFjdG9yeUxvZ2dlci5jb25kaXRpb24obmF0aXZlTmFtZSlcIiwgbmF0aXZlTmFtZSkuZXF1YWxJbihbXCJsb2dcIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIl0pO1xuICAgICAgICBKRmFjdG9yeUV4cGVjdChcIkpGYWN0b3J5TG9nZ2VyLmVuYWJsZWRcIiwgdGhpcy5lbmFibGVkKS5lcXVhbCh0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuICEodGhpcy5maWx0ZXJzW3RoaXMubGFiZWxdICYmIHRoaXMuZmlsdGVyc1t0aGlzLmxhYmVsXVtuYXRpdmVOYW1lXSlcbn07XG5cbkpGYWN0b3J5TG9nZ2VyLkRFRkFVTFRfQ09ORklHID0gLyoqIEBsZW5kcyBKRmFjdG9yeUxvZ2dlciMgKi8ge1xuICAgIGxhYmVsOiBcIlwiLFxuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgcGFyZW50TG9nZ2VyOiBudWxsLFxuICAgIGZvcm1hdHRlcjogSkZBQ1RPUllfQ0xJID9cbiAgICAgICAgSkZhY3RvcnlMb2dnZXIuRk9STUFUVEVSX0NMSSA6XG4gICAgICAgIEpGYWN0b3J5TG9nZ2VyLkZPUk1BVFRFUl9CUk9XU0VSLFxuICAgIGNvbnNvbGUsXG4gICAgZmlsdGVyczoge1xuICAgIH0sXG4gICAgc3R5bGVzX2NsaToge1xuICAgICAgICBsYWJlbDogXCJcXHgxYlsxOzMwbSVzXFx4MWJbMG1cIlxuICAgIH0sXG4gICAgc3R5bGVzX2Nzczoge1xuICAgICAgICBsYWJlbDogXCJjb2xvcjogZ3JheVwiXG4gICAgfVxufTsiLCIvKiBqRmFjdG9yeSwgQ29weXJpZ2h0IChjKSAyMDE5LCBTdMOpcGhhbmUgUGxhemlzLCBodHRwczovL2dpdGh1Yi5jb20vamZhY3RvcnktZXMvamZhY3RvcnkvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQgKi9cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBKRmFjdG9yeVRpbWVcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RhdHVzOiBCZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIEpGYWN0b3J5VGltZSBleHRlbmRzIERhdGUge1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0xvY2FsZVRpbWVTdHJpbmcoKSArIFwiLCBcIiArIHRoaXMuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgKyBcIm1zIChcIiArIHRoaXMudmFsdWVPZigpICsgXCIpXCJcbiAgICB9XG4gICAgJHRvRHVyYXRpb25TdHJpbmcoKSB7XG4gICAgICAgIGxldCBob3VycyA9IHRoaXMuZ2V0VVRDSG91cnMoKTtcbiAgICAgICAgbGV0IG1pbnV0ZXMgPSB0aGlzLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgICAgbGV0IHNlY29uZHMgPSB0aGlzLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgbGV0IG1pbGxpc2Vjb25kcyA9IHRoaXMuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG5cbiAgICAgICAgbGV0IGEgPSBbXTtcbiAgICAgICAgaWYgKGhvdXJzKSB7XG4gICAgICAgICAgICBhLnB1c2goaG91cnMgKyBcImhcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAobWludXRlcykge1xuICAgICAgICAgICAgYS5wdXNoKG1pbnV0ZXMgKyBcIm1pblwiKVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWNvbmRzKSB7XG4gICAgICAgICAgICBhLnB1c2goc2Vjb25kcyArIFwic1wiKVxuICAgICAgICB9XG4gICAgICAgIGEucHVzaChtaWxsaXNlY29uZHMgKyBcIm1zXCIpO1xuICAgICAgICBpZiAoYS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBhWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGEuam9pbihcIixcIikgKyBcIiAoXCIgKyB0aGlzLnZhbHVlT2YoKSArIFwiKVwiO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSkZhY3RvcnlUaW1lVHJhY2UgZXh0ZW5kcyBEYXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5lbGFwc2VkID0gbnVsbDtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgdDE6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICAgICAgICB0MDogeyB2YWx1ZTogbmV3IEpGYWN0b3J5VGltZSgpIH1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICB0aGlzLnQxID0gbmV3IEpGYWN0b3J5VGltZSgpO1xuICAgICAgICB0aGlzLmVsYXBzZWQgPSBuZXcgSkZhY3RvcnlUaW1lKHRoaXMudDEgLSB0aGlzLnQwKS4kdG9EdXJhdGlvblN0cmluZygpXG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGFwc2VkXG4gICAgfVxufSIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXRDb3JlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgeyBKRkFDVE9SWV9ERVYgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmltcG9ydCB7IGpGYWN0b3J5Q29uZmlnIH0gZnJvbSBcIi4vakZhY3RvcnktY29uZmlnXCI7XG5pbXBvcnQgeyBqRmFjdG9yeUVycm9yLCBKRmFjdG9yeUVycm9yIH0gZnJvbSBcIi4vSkZhY3RvcnlFcnJvclwiO1xuaW1wb3J0IHsgakZhY3RvcnkgfSBmcm9tIFwiLi9qRmFjdG9yeVwiO1xuaW1wb3J0IHsgSkZhY3RvcnlFeHBlY3QgfSBmcm9tIFwiLi9KRmFjdG9yeUV4cGVjdFwiO1xuaW1wb3J0IHsgSkZhY3RvcnlBYm91dCB9IGZyb20gXCIuL0pGYWN0b3J5QWJvdXRcIjtcbmltcG9ydCB7IEpGYWN0b3J5TG9nZ2VyIH0gZnJvbSBcIi4vSkZhY3RvcnlMb2dnZXJcIjtcbmltcG9ydCB7IEpGYWN0b3J5UHJvbWlzZSwgSkZhY3RvcnlQcm9taXNlU3luYyB9IGZyb20gXCIuL0pGYWN0b3J5UHJvbWlzZVwiO1xuaW1wb3J0IHsgSkZhY3RvcnlFdmVudHNNYW5hZ2VyIH0gZnJvbSBcIi4vSkZhY3RvcnlFdmVudHNcIjtcbmltcG9ydCB7IEpGYWN0b3J5T2JqZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlPYmplY3RcIjtcbmltcG9ydCB7IEpGYWN0b3J5VGltZVRyYWNlIH0gZnJvbSBcIi4vSkZhY3RvcnlUaW1lXCI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgT2JqZWN0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIFRyYWl0Q29yZSB7XG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IG93bmVyID0gdGhpcztcblxuICAgICAgICBjbGFzcyBTdWJNYXAgZXh0ZW5kcyBNYXAge1xuICAgICAgICAgICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlkX2F1dG9pbmNcIiwgeyB2YWx1ZTogMCwgd3JpdGFibGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkcmVnaXN0ZXJTeW5jKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3ViID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoe30sIHtcbiAgICAgICAgICAgICAgICAgICAgJHZhbHVlOiB7IHZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICRwaGFzZVJlbW92ZTogeyB2YWx1ZTogVHJhaXRTZXJ2aWNlLmdldENvbnRleHR1YWxSZW1vdmVQaGFzZShvd25lcikgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgc3ViKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkcmVnaXN0ZXJBc3luYyhrZXksIHRhc2tOYW1lLCBwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhc2sgPSBvd25lci4kdGFzayh0YXNrTmFtZSwgcHJvbWlzZS4kY2hhaW4pO1xuXG4gICAgICAgICAgICAgICAgLy8gRW5kIG9mIHByb21pc2UgY2hhaW4gbXVzdCBjb21wbGV0ZSB0aGUgdGFza1xuICAgICAgICAgICAgICAgIHByb21pc2UuJGNoYWluLnRoZW4oKCkgPT4geyAvLyBzeW5jaHJvbm91cyB0aGVuXG4gICAgICAgICAgICAgICAgICAgIHRhc2suJGNoYWluQXV0b0NvbXBsZXRlKClcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEFib3J0ZWQgdGFzayBtdXN0IGFib3J0IHRoZSBwcm9taXNlIGlmIHN0aWxsIHJ1bm5pbmdcbiAgICAgICAgICAgICAgICB0YXNrLiRjaGFpbi50aGVuKCgpID0+IHsvLyBzeW5jaHJvbm91cyB0aGVuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvbWlzZS4kY2hhaW4uaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UuJGNoYWluQWJvcnQoXCJhYm9ydGVkIGJ5IHRhc2tcIilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiJHBoYXNlUmVtb3ZlXCIsIHsgdmFsdWU6IHRhc2suJHBoYXNlUmVtb3ZlIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhc2tcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGlkX3Jlc29sdmUoc3RyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0ci5pbmRleE9mKFwiP1wiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpZCA9ICsrdGhpcy5pZF9hdXRvaW5jO1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFw/L2csIGlkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwge1xuICAgICAgICAgICAgW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV06IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICAgICAgICBhc3NpZ246IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSwgZGVzY3JpcHRvcikge0pGYWN0b3J5T2JqZWN0LmFzc2lnbih0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIGRlc2NyaXB0b3IpfSxcbiAgICAgICAgICAgIGNyZWF0ZVN1Yk1hcDogKCkgPT4gbmV3IFN1Yk1hcCgpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIiRcIiwgeyB2YWx1ZTogT2JqZWN0LmNyZWF0ZShwcm90bykgfSk7XG5cbiAgICAgICAgLy8gcHJlLWRlZmluZSBtb3N0IGltcG9ydGFudCBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIHRvIG9yZGVyIHRoZW0gZmlyc3QgaW4gZGV2dG9vbCAocmVkdWNlZCBmb3JtIG9ubHkpXG4gICAgICAgIHRoaXMuJC5hc3NpZ24oe1xuICAgICAgICAgICAgdGFza3M6IG51bGwsXG4gICAgICAgICAgICByZXF1ZXN0czogbnVsbFxuICAgICAgICB9LCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5FTlVNRVJBQkxFX1dSSVRBQkxFKTtcbiAgICB9XG59XG5cblRyYWl0Q29yZS5TWU1CT0xfUFJJVkFURSA9IFN5bWJvbChcIl9cIik7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgQWJvdXRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRBYm91dCB7XG5cbiAgICB0cmFpdF9jb25zdHJ1Y3RvcihhYm91dCkge1xuICAgICAgICBKRmFjdG9yeU9iamVjdC5hc3NpZ24odGhpcy4kLCBcImFib3V0XCIsXG4gICAgICAgICAgICBuZXcgSkZhY3RvcnlBYm91dCh0aGlzLCBhYm91dCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLlJFQURPTkxZKVxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUcmFpdCBMb2dcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRMb2cge1xuXG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGxldCBjb25maWcgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGxhYmVsOiB0aGlzLiQuYWJvdXQubmFtZVxuICAgICAgICB9LCBqRmFjdG9yeUNvbmZpZy5UcmFpdExvZyB8fCB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgbG9nZ2VyID0gbmV3IEpGYWN0b3J5TG9nZ2VyKGNvbmZpZyk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuJCwgXCJsb2dnZXJcIiwgeyB2YWx1ZTogbG9nZ2VyIH0pO1xuXG4gICAgICAgIGxvZ2dlci5pbnN0YWxsQWNjZXNzb3IoXCJsb2dcIiwgICBcIiRsb2dcIiwgICAgIHRoaXMpO1xuICAgICAgICBsb2dnZXIuaW5zdGFsbEFjY2Vzc29yKFwid2FyblwiLCAgXCIkbG9nV2FyblwiLCB0aGlzKTtcbiAgICAgICAgbG9nZ2VyLmluc3RhbGxBY2Nlc3NvcihcImVycm9yXCIsIFwiJGxvZ0VyclwiLCAgdGhpcyk7XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0IFRhc2tzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIFRyYWl0VGFzayB7XG5cbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcInRhc2tzXCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJHRhc2soaWQsIGV4ZWN1dG9yT3JWYWx1ZSkge1xuICAgICAgICBpZCA9IHRoaXMuJC50YXNrcy4kaWRfcmVzb2x2ZShpZCk7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkdGFzayhpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJHRhc2soZXhlY3V0b3JPclZhbHVlKVwiLCBleGVjdXRvck9yVmFsdWUpLm5vdFVuZGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuJC50YXNrcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJHRhc2soaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRhc2s7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBleGVjdXRvck9yVmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGFzayAgPSBuZXcgSkZhY3RvcnlQcm9taXNlKHsgbmFtZTogaWQsIG93bmVyOiB0aGlzIH0sIGV4ZWN1dG9yT3JWYWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhc2sgPSBKRmFjdG9yeVByb21pc2UucmVzb2x2ZSh7IG5hbWU6IGlkLCBvd25lcjogdGhpcyB9LCBleGVjdXRvck9yVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFzay4kcGhhc2VSZW1vdmUgPSBUcmFpdFNlcnZpY2UuZ2V0Q29udGV4dHVhbFJlbW92ZVBoYXNlKHRoaXMpO1xuXG4gICAgICAgIGxldCBtZXRyaWNzO1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBtZXRyaWNzID0gbmV3IEpGYWN0b3J5VGltZVRyYWNlKCk7XG4gICAgICAgICAgICB0YXNrLiR0YXNrTWV0cmljcyA9IHsgJGRldl90aW1pbmc6IG1ldHJpY3MgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhc2suJGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgICAgIG1ldHJpY3MuZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4kLnRhc2tzLmdldChpZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiR0YXNrUmVtb3ZlKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy4kLnRhc2tzLnNldChpZCwgdGFzayk7XG4gICAgICAgIHJldHVybiB0YXNrXG4gICAgfVxuXG4gICAgJHRhc2tSZW1vdmUoaWQsIHJlYXNvbikge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiR0YXNrUmVtb3ZlKGlkKVwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgcmVhc29uICYmIEpGYWN0b3J5RXhwZWN0KFwiJHRhc2tSZW1vdmUocmVhc29uKVwiLCByZWFzb24pLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4kLnRhc2tzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5LRVlfTUlTU0lORyh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIkdGFza1JlbW92ZShpZClcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAgICAgaWYgKHRoaXMuJC50YXNrcy5nZXQoaWQpLl9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC50YXNrcy5nZXQoaWQpLl9jYWxsZWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZW50cnkgPSB0aGlzLiQudGFza3MuZ2V0KGlkKTtcbiAgICAgICAgLy8gZGVsZXRpbmcgYmVmb3JlIGNoYWluQWJvcnQoKSB0byBwcmV2ZW50IHJlbW92ZSgpIHJlY2FsbFxuICAgICAgICB0aGlzLiQudGFza3MuZGVsZXRlKGlkKTtcbiAgICAgICAgZW50cnkuJGNoYWluQWJvcnQocmVhc29uIHx8IFwiJHRhc2tSZW1vdmUoKVwiKTtcbiAgICB9XG5cbiAgICAkdGFza1JlbW92ZUFsbChyZW1vdmVQaGFzZSkge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiR0YXNrUmVtb3ZlQWxsKHJlbW92ZVBoYXNlKVwiLCByZW1vdmVQaGFzZSlcbiAgICAgICAgICAgICAgICAuZXF1YWxJbihUcmFpdFNlcnZpY2UuUEhBU0VTKVxuICAgICAgICB9XG4gICAgICAgIGxldCB0YXNrcyA9IHRoaXMuJC50YXNrcztcbiAgICAgICAgaWYgKHRhc2tzLnNpemUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdGFza10gb2YgdGFza3MpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFzay4kcGhhc2VSZW1vdmUgPT09IHJlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHRhc2tSZW1vdmUoa2V5LCBcIiR0YXNrUmVtb3ZlQWxsKFwiICsgcmVtb3ZlUGhhc2UgKyBcIilcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkdGFza1Byb21pc2VBbGwoYXV0b0NvbXBsZXRlID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHBlbmRpbmcgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuJC50YXNrcy5zaXplKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB0YXNrIG9mIHRoaXMuJC50YXNrcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgIGlmIChhdXRvQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzb2x2ZXMgdGhlIGNoYWluIGFzIHNvb24gYXMgbm8gbW9yZSBwZW5kaW5nIHByb21pc2UgaW4gdGhlIGNoYWluXG4gICAgICAgICAgICAgICAgICAgIHRhc2suJGNoYWluLmNoYWluQ29uZmlnLmNoYWluQXV0b0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgcGVuZGluZyA/XG4gICAgICAgICAgICAgICAgaWYgKHRhc2suJGNoYWluLmlzUGVuZGluZykge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2godGFzay4kY2hhaW4pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwZW5kaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEpGYWN0b3J5UHJvbWlzZVN5bmMucmVzb2x2ZSgpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgRXZlbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNsYXNzIFRyYWl0RXZlbnRzIHtcblxuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBhc3NpZ25Qcml2YXRlKHRoaXMsIFwiZXZlbnRzXCIsIHtcbiAgICAgICAgICAgIGN1c3RvbTogbmV3IEpGYWN0b3J5RXZlbnRzTWFuYWdlcih0aGlzKSxcbiAgICAgICAgICAgIGtlcm5lbDogbmV3IEpGYWN0b3J5RXZlbnRzTWFuYWdlcih0aGlzKVxuICAgICAgICB9LCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5OT05FKTtcblxuICAgICAgICBsZXQgZXZlbnRNYW5hZ2VyID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmN1c3RvbTtcblxuICAgICAgICAvLyBpZiAoSkZBQ1RPUllfREVWKSB7IC8vIHZlcnkgc2xvdzsgcmVxdWlyZXMgb3B0aW1pemF0aW9uXG4gICAgICAgIC8vICAgICAvLyByZWdpc3RyeSBhcmUgYXV0byB1cGRhdGVkIGluIGRldiBtb2RlICh1bm9wdGltaXplZCBpbXBsZW1lbnRhdGlvbilcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGxldCBsaXN0ZW5lclVwZGF0ZSA9ICgpID0+IHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLiQubGlzdGVuZXJzID0gZXZlbnRNYW5hZ2VyLmdldERvbUxpc3RlbmVycyh0aGlzLiQuYWJvdXQuZmluZ2VycHJpbnQpO1xuICAgICAgICAvLyAgICAgfTtcbiAgICAgICAgLy8gICAgIGxldCBvYnNlcnZlclVwZGF0ZSA9ICgpID0+IHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLiQub2JzZXJ2ZXJzID0gZXZlbnRNYW5hZ2VyLmdldE9ic2VydmVycygpO1xuICAgICAgICAvLyAgICAgfTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGV2ZW50TWFuYWdlci5vbkxpc3RlbmVyVXBkYXRlID0gbGlzdGVuZXJVcGRhdGU7XG4gICAgICAgIC8vICAgICBldmVudE1hbmFnZXIub25PYnNlcnZlclVwZGF0ZSA9IG9ic2VydmVyVXBkYXRlO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuZXJVcGRhdGUpO1xuICAgICAgICAvLyAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGxpc3RlbmVyVXBkYXRlKCk7XG4gICAgICAgIC8vICAgICBvYnNlcnZlclVwZGF0ZSgpO1xuICAgICAgICAvLyB9IGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcy4kLCB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZXZlbnRNYW5hZ2VyLmdldERvbUxpc3RlbmVycy5iaW5kKGV2ZW50TWFuYWdlciwgdGhpcy4kLmFib3V0LmZpbmdlcnByaW50KSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZXZlbnRNYW5hZ2VyLmdldE9ic2VydmVycy5iaW5kKGV2ZW50TWFuYWdlciksXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJG9uKC8qIGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlciwgb3B0aW9ucyAqLykge1xuICAgICAgICB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMuY3VzdG9tLm9uKC4uLmFyZ3VtZW50cylcbiAgICB9XG5cbiAgICAkb2ZmKC8qIGV2ZW50cywgdGFyZ2V0LCBzZWxlY3RvciwgaGFuZGxlciwgb3B0aW9ucyAqLykge1xuICAgICAgICB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMuY3VzdG9tLm9mZiguLi5hcmd1bWVudHMpXG4gICAgfVxuXG4gICAgJHRyaWdnZXIoLyogZXZlbnRzLCB0YXJnZXQsIGRhdGEgKi8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5jdXN0b20udHJpZ2dlciguLi5hcmd1bWVudHMpXG4gICAgfVxuXG4gICAgJHRyaWdnZXJQYXJhbGxlbCgvKiBldmVudHMsIHRhcmdldCwgZGF0YSAqLykge1xuICAgICAgICByZXR1cm4gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmN1c3RvbS50cmlnZ2VyUGFyYWxsZWwoLi4uYXJndW1lbnRzKVxuICAgIH1cblxuICAgICRub3RpZnkoZXZlbnRzLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiR0cmlnZ2VyKGV2ZW50cywgZGF0YSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWwudHJpZ2dlcihldmVudHMsIGRhdGEpKVxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUcmFpdCBTdGF0ZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRTdGF0ZSB7XG5cbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3Qgc3RhdGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgY29uc3Qgc3RhdGVSb3V0ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCBrZXJuZWwgPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMua2VybmVsO1xuXG4gICAgICAgIGFzc2lnblByaXZhdGUodGhpcywgeyBzdGF0ZXMsIHN0YXRlUm91dGVzIH0sIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLlJFQURPTkxZKTtcblxuICAgICAgICBKRmFjdG9yeU9iamVjdC5hc3NpZ24odGhpcy4kLCBcInN0YXRlc1wiLCBuZXcgUHJveHkoc3RhdGVzLCB7XG4gICAgICAgICAgICBzZXQ6ICh0YXJnZXQsIGtleSwgdmFsKSA9PiB0aGlzLiRzdGF0ZShrZXksIHZhbCksXG4gICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIGtleSkgPT4gc3RhdGVzW2tleV1cbiAgICAgICAgfSksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLlJFQURPTkxZKTtcblxuICAgICAgICBrZXJuZWwub24oXCJiZWZvcmVTdGF0ZUNoYW5nZVwiLCAoZSwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgbGV0IGg7XG4gICAgICAgICAgICBpZiAoc3RhdGVSb3V0ZXNbZGF0YS5rZXldICYmIHN0YXRlUm91dGVzW2RhdGEua2V5XS5iZWZvcmVcbiAgICAgICAgICAgICAgICAmJiAoaCA9IHN0YXRlUm91dGVzW2RhdGEua2V5XS5iZWZvcmUoZGF0YS52YWwpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRub3RpZnkoaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGtlcm5lbC5vbihcImFmdGVyU3RhdGVDaGFuZ2VcIiwgKGUsIGRhdGEpID0+IHtcbiAgICAgICAgICAgIGxldCBoO1xuICAgICAgICAgICAgaWYgKHN0YXRlUm91dGVzW2RhdGEua2V5XSAmJiBzdGF0ZVJvdXRlc1tkYXRhLmtleV0uYWZ0ZXJcbiAgICAgICAgICAgICAgICAmJiAoaCA9IHN0YXRlUm91dGVzW2RhdGEua2V5XS5hZnRlcihkYXRhLnZhbCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG5vdGlmeShoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHN0YXRlKGtleSwgdmFsLCBub3RpZnkgPSB0cnVlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJHN0YXRlKGtleSlcIiwga2V5KS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRzdGF0ZShub3RpZnkpXCIsIG5vdGlmeSkudHlwZUJvb2xlYW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgSkZhY3RvcnlQcm9taXNlU3luYyhhc3luYyByZXNvbHZlID0+IHtcblxuICAgICAgICAgICAgbGV0IHN0YXRlcyA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLnN0YXRlcztcbiAgICAgICAgICAgIGxldCBwcmV2aW91c1ZhbCA9IHN0YXRlc1trZXldO1xuICAgICAgICAgICAgbGV0IHBlbmRpbmc7XG5cbiAgICAgICAgICAgIGlmICghKGtleSBpbiBzdGF0ZXMpIHx8IHByZXZpb3VzVmFsICE9PSB2YWwpIHtcblxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBub3RpZnkgJiYgdGhpcy4kbm90aWZ5KFwiYmVmb3JlU3RhdGVDaGFuZ2VcIiwgeyBrZXksIHZhbCwgcHJldmlvdXNWYWwgfSk7XG4gICAgICAgICAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nICYmIEpGYWN0b3J5RXhwZWN0KFwiYmVmb3JlU3RhdGVDaGFuZ2UgcmVzdWx0XCIsIHBlbmRpbmcpLnR5cGUoSkZhY3RvcnlQcm9taXNlU3luYyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmcgJiYgIXBlbmRpbmcuJGlzU2V0dGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZXNba2V5XSA9IHBlbmRpbmc7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHBlbmRpbmc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZXNba2V5XVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlc1trZXldID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBub3RpZnkgJiYgdGhpcy4kbm90aWZ5KFwiYWZ0ZXJTdGF0ZUNoYW5nZVwiLCB7IGtleSwgdmFsLCBwcmV2aW91c1ZhbCB9KTtcbiAgICAgICAgICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmcgJiYgSkZhY3RvcnlFeHBlY3QoXCJhZnRlclN0YXRlQ2hhbmdlIHJlc3VsdFwiLCBwZW5kaW5nKS50eXBlKEpGYWN0b3J5UHJvbWlzZVN5bmMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgU2VydmljZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdFNlcnZpY2Uge1xuXG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSB0aGlzLiQuc2VydmljZVxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgSkZhY3RvcnlPYmplY3QuYXNzaWduKHRoaXMuJCwgXCJzZXJ2aWNlXCIsIE9iamVjdC5jcmVhdGUobnVsbCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLlJFQURPTkxZKTtcbiAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuTk9ORTtcbiAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VRdWV1ZSA9IEpGYWN0b3J5UHJvbWlzZS5yZXNvbHZlKHsgbmFtZTogXCJwaGFzZVF1ZXVlXCIgfSwgbnVsbCk7XG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlVGFzayA9IG51bGw7XG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwID0ge1xuICAgICAgICAgICAgaW5zdGFsbDogbmV3IFNldCgpLFxuICAgICAgICAgICAgZW5hYmxlOiBuZXcgU2V0KCksXG4gICAgICAgICAgICBkaXNhYmxlOiBuZXcgU2V0KCksXG4gICAgICAgICAgICB1bmluc3RhbGw6IG5ldyBTZXQoKVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFNldCBpbml0aWFsIHN0YXRlcyBidXQgZG9uJ3QgdHJpZ2dlciBldmVudHNcbiAgICAgICAgdGhpcy4kc3RhdGUoXCJpbnN0YWxsZWRcIiwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgdGhpcy4kc3RhdGUoXCJlbmFibGVkXCIsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gRGVmaW5lIHRoZSBldmVudHMgdG8gbm90aWZ5IGJlZm9yZS9hZnRlciBhIHN0YXRlIGNoYW5nZVxuICAgICAgICAvLyBzdGF0ZU5hbWUgOiB7YmVmb3JlIDogZXZlbnROYW1lLCBhZnRlciA6IGV2ZW50TmFtZX1cblxuICAgICAgICAvLyBTUEVDXG4gICAgICAgIC8vIHN0YXQgaXMgY2hhbmdlZCBiZWZvcmUgY2FsbGluZyBoYW5kbGVycyBldmVuIGlmIHBlbmRpbmdcblxuICAgICAgICBhc3NpZ25Qcml2YXRlTWVtYmVyKHRoaXMsIFwic3RhdGVSb3V0ZXNcIiwge1xuICAgICAgICAgICAgaW5zdGFsbGVkOiB7IGFmdGVyOiB2YWwgPT4gdmFsID8gXCJpbnN0YWxsXCIgOiBcInVuaW5zdGFsbFwiIH0sXG4gICAgICAgICAgICBlbmFibGVkOiB7IGFmdGVyOiB2YWwgPT4gdmFsID8gXCJlbmFibGVcIiAgOiBcImRpc2FibGVcIiB9XG4gICAgICAgIH0sIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLk5PTkUpO1xuXG4gICAgICAgIGxldCBjdXN0b20gPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMuY3VzdG9tO1xuICAgICAgICBsZXQga2VybmVsID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmtlcm5lbDtcblxuICAgICAgICAvLyBBdHRhY2ggYSByZW1vdmUgcGhhc2UgbmFtZXNwYWNlcyBvbiBldmVudHNcbiAgICAgICAgY3VzdG9tLmFmZmlsaWF0ZUFkZFJ1bGUoKGNvbnRleHQsIHBhcnNlZEV2ZW50LCBuYW1lc3BhY2VzLCBvcHRpb25zKSA9PlxuICAgICAgICAgICAgVHJhaXRTZXJ2aWNlLnNldEV2ZW50TmFtZXNwYWNlUmVtb3ZlUGhhc2UodGhpcywgcGFyc2VkRXZlbnQsIG9wdGlvbnMpXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQXR0YWNoIG1vZHVsZSBldmVudCBoYW5kbGVyc1xuXG4gICAgICAgIC8qKiBAbmFtZSBKRmFjdG9yeUNvcmVPYmplY3Qjb25JbnN0YWxsICovXG4gICAgICAgIC8qKiBAbmFtZSBKRmFjdG9yeUNvcmVPYmplY3Qjb25FbmFibGUgKi9cbiAgICAgICAgLyoqIEBuYW1lIEpGYWN0b3J5Q29yZU9iamVjdCNvbkRpc2FibGUgKi9cbiAgICAgICAgLyoqIEBuYW1lIEpGYWN0b3J5Q29yZU9iamVjdCNvblVuaW5zdGFsbCAqL1xuXG4gICAgICAgIGxldCBwaGFzZVJlc29sdmUgPSBoYW5kbGVyID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLiQudGFza3Muc2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHRhc2tSZW1vdmVBbGwodGhpcy4kLnNlcnZpY2UucGhhc2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcHJvbWlzZSA9IEpGYWN0b3J5UHJvbWlzZVN5bmMucmVzb2x2ZSgpO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiBoYW5kbGVyLmNhbGwodGhpcykpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuJHRhc2tQcm9taXNlQWxsKHRydWUpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKC8qdGhpcy4kLnNlcnZpY2UuaXNQaGFzZUtpbGxpbmcgJiYqLyBlIGluc3RhbmNlb2YgakZhY3RvcnlFcnJvci5QUk9NSVNFX0VYUElSRUQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRsb2dFcnIoXCJ1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24gaW4gXCIgKyB0aGlzLiQuc2VydmljZS5waGFzZSArIFwiO1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmUgaW5zdGFuY2VvZiBKRmFjdG9yeUVycm9yID8gZSA6IFtlXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGtlcm5lbC5vbihcImluc3RhbGxcIiwgKCkgPT4gcGhhc2VSZXNvbHZlKHRoaXMub25JbnN0YWxsKSk7XG4gICAgICAgIGtlcm5lbC5vbihcImVuYWJsZVwiLCAoKSA9PiBwaGFzZVJlc29sdmUodGhpcy5vbkVuYWJsZSkpO1xuICAgICAgICBrZXJuZWwub24oXCJkaXNhYmxlXCIsICgpID0+IHBoYXNlUmVzb2x2ZSh0aGlzLm9uRGlzYWJsZSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gcGhhc2VSZXNvbHZlKHRoaXMub25Vbmluc3RhbGwpKTtcblxuICAgICAgICBrZXJuZWwub24oXCJkaXNhYmxlXCIsICAgKCkgPT4gdGhpcy4kb2ZmKHsgcmVtb3ZhbDogVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUgfSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gdGhpcy4kb2ZmKHsgcmVtb3ZhbDogVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTCB9KSk7XG4gICAgfVxuXG4gICAgJGluc3RhbGwoZW5hYmxlKSB7XG4gICAgICAgIGxldCByZXNvbHZlO1xuICAgICAgICBjb25zdCBwID0gbmV3IEpGYWN0b3J5UHJvbWlzZShcbiAgICAgICAgICAgIHsgbmFtZTogXCJpbnN0YWxsXCIsIGNvbmZpZzogeyBjaGFpbkF1dG9Db21wbGV0ZTogdHJ1ZSB9IH0sXG4gICAgICAgICAgICBfcmVzb2x2ZSA9PiByZXNvbHZlID0gX3Jlc29sdmUpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiQuc3RhdGVzLmluc3RhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5JTlNUQUxMO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RhdGUoXCJpbnN0YWxsZWRcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZU1hcC5pbnN0YWxsLmFkZChwKTtcbiAgICAgICAgcC4kY2hhaW4udGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZVRhc2sgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VNYXAuaW5zdGFsbC5kZWxldGUocCk7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5OT05FXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlUXVldWUgPSB0aGlzLiQuc2VydmljZS5waGFzZVF1ZXVlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gcDtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBwLiRjaGFpblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZWdpc3RlciB0aGUgZW5hYmxlXG4gICAgICAgIGlmIChlbmFibGUpIHtyZXR1cm4gdGhpcy4kZW5hYmxlKCl9XG4gICAgICAgIHJldHVybiBwXG4gICAgfVxuXG4gICAgJGVuYWJsZSgpIHtcbiAgICAgICAgbGV0IHJlc29sdmU7XG4gICAgICAgIGNvbnN0IHAgPSBuZXcgSkZhY3RvcnlQcm9taXNlKFxuICAgICAgICAgICAgeyBuYW1lOiBcImVuYWJsZVwiLCBjb25maWc6IHsgY2hhaW5BdXRvQ29tcGxldGU6IHRydWUgfSB9LFxuICAgICAgICAgICAgX3Jlc29sdmUgPT4gcmVzb2x2ZSA9IF9yZXNvbHZlKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiQuc3RhdGVzLmluc3RhbGxlZCAmJiAhdGhpcy4kLnN0YXRlcy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlID0gVHJhaXRTZXJ2aWNlLlBIQVNFLkVOQUJMRTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0YXRlKFwiZW5hYmxlZFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmVuYWJsZS5hZGQocCk7XG4gICAgICAgIHAuJGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmVuYWJsZS5kZWxldGUocCk7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5OT05FXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlUXVldWUgPSB0aGlzLiQuc2VydmljZS5waGFzZVF1ZXVlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gcDtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBwLiRjaGFpblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBcbiAgICB9XG5cbiAgICAkZGlzYWJsZSgpIHtcbiAgICAgICAgbGV0IHJlc29sdmU7XG4gICAgICAgIGNvbnN0IHAgPSBuZXcgSkZhY3RvcnlQcm9taXNlKFxuICAgICAgICAgICAgeyBuYW1lOiBcImRpc2FibGVcIiwgY29uZmlnOiB7IGNoYWluQXV0b0NvbXBsZXRlOiB0cnVlIH0gfSxcbiAgICAgICAgICAgIF9yZXNvbHZlID0+IHJlc29sdmUgPSBfcmVzb2x2ZSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kLnN0YXRlcy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlID0gVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdGF0ZShcImVuYWJsZWRcIiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VNYXAuZGlzYWJsZS5hZGQocCk7XG4gICAgICAgIHAuJGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VUYXNrID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmRpc2FibGUuZGVsZXRlKHApO1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuTk9ORVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBleHBpcmVzIGFsbCBzdGFja2VkIGVuYWJsZVxuICAgICAgICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmVuYWJsZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPT09IHRoaXMuJC5zZXJ2aWNlLnBoYXNlVGFzaykge1xuICAgICAgICAgICAgICAgIFRyYWl0U2VydmljZS5waGFzZUtpbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWwuJGNoYWluQWJvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmVuYWJsZS5kZWxldGUoa2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VRdWV1ZSA9IHRoaXMuJC5zZXJ2aWNlLnBoYXNlUXVldWUudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZVRhc2sgPSBwO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHAuJGNoYWluXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcFxuICAgIH1cblxuICAgICR1bmluc3RhbGwoKSB7XG4gICAgICAgIGxldCByZXNvbHZlO1xuICAgICAgICBjb25zdCBwID0gbmV3IEpGYWN0b3J5UHJvbWlzZShcbiAgICAgICAgICAgIHsgbmFtZTogXCJ1bmluc3RhbGxcIiwgY29uZmlnOiB7IGNoYWluQXV0b0NvbXBsZXRlOiB0cnVlIH0gfSxcbiAgICAgICAgICAgIF9yZXNvbHZlID0+IHJlc29sdmUgPSBfcmVzb2x2ZSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kLnN0YXRlcy5pbnN0YWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2UgPSBUcmFpdFNlcnZpY2UuUEhBU0UuVU5JTlNUQUxMO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RhdGUoXCJpbnN0YWxsZWRcIiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VNYXAudW5pbnN0YWxsLmFkZChwKTtcbiAgICAgICAgcC4kY2hhaW4udGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZVRhc2sgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VNYXAudW5pbnN0YWxsLmRlbGV0ZShwKTtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlID0gVHJhaXRTZXJ2aWNlLlBIQVNFLk5PTkVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZXhwaXJlcyBhbGwgc3RhY2tlZCBpbnN0YWxsXG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgdGhpcy4kLnNlcnZpY2UucGhhc2VNYXAuaW5zdGFsbC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPT09IHRoaXMuJC5zZXJ2aWNlLnBoYXNlVGFzaykge1xuICAgICAgICAgICAgICAgIFRyYWl0U2VydmljZS5waGFzZUtpbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWwuJGNoYWluQWJvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuJC5zZXJ2aWNlLnBoYXNlTWFwLmluc3RhbGwuZGVsZXRlKGtleSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHF1ZXVlIGRpc2FibGUgYmVmb3JlIHVuaW5zdGFsbFxuICAgICAgICB0aGlzLiRkaXNhYmxlKCk7XG5cbiAgICAgICAgdGhpcy4kLnNlcnZpY2UucGhhc2VRdWV1ZSA9IHRoaXMuJC5zZXJ2aWNlLnBoYXNlUXVldWUudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiQuc2VydmljZS5waGFzZVRhc2sgPSBwO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHAuJGNoYWluXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcFxuICAgIH1cblxuICAgIHN0YXRpYyBwaGFzZUtpbGwoY29tcG9uZW50KSB7XG4gICAgICAgIC8vIGNvbXBvbmVudC4kLnNlcnZpY2UuaXNQaGFzZUtpbGxpbmcgPSB0cnVlO1xuICAgICAgICBpZiAoY29tcG9uZW50LiQudGFza3Muc2l6ZSkge1xuICAgICAgICAgICAgY29tcG9uZW50LiR0YXNrUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5nZXRDb250ZXh0dWFsUmVtb3ZlUGhhc2UoY29tcG9uZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50LiQuc2VydmljZS5waGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5OT05FO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRDb250ZXh0dWFsUmVtb3ZlUGhhc2UoakZhY3RvcnlDb3JlT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBUcmFpdFNlcnZpY2UuUEhBU0VfUkVWRVJUW2pGYWN0b3J5Q29yZU9iamVjdC4kLnNlcnZpY2UucGhhc2VdXG4gICAgfVxuXG4gICAgc3RhdGljIHNldEV2ZW50TmFtZXNwYWNlUmVtb3ZlUGhhc2UoakZhY3RvcnlDb3JlT2JqZWN0LCBwYXJzZWRFdmVudCwgb3B0aW9ucykge1xuICAgICAgICBsZXQgY3VyUmVtb3ZlUGhhc2UgPSBwYXJzZWRFdmVudC5oYXNOYW1lc3BhY2UoVHJhaXRTZXJ2aWNlLlBIQVNFUyk7XG4gICAgICAgIGxldCBuZXdSZW1vdmVQaGFzZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5yZW1vdmFsO1xuXG4gICAgICAgIGlmICghbmV3UmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgIG5ld1JlbW92ZVBoYXNlID0gVHJhaXRTZXJ2aWNlLmdldENvbnRleHR1YWxSZW1vdmVQaGFzZShqRmFjdG9yeUNvcmVPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIDogb24oXCJ1bmluc3RhbGxcIikgd2l0aCByZW1vdmFsID0gRElTQUJMRSAodGhlIGRlZmF1bHQgdmFsdWUpXG4gICAgICAgIC8vID0+IGRpc2FibGUoKSBpcyBhbHdheXMgY2FsbGVkIGJlZm9yZSB1bmluc3RhbGwoKSBjYXVzaW5nIHRoZSBldmVudCB0byBiZSByZW1vdmVkIHRvbyBlYXJseVxuICAgICAgICBpZiAocGFyc2VkRXZlbnQuZXZlbnQgPT09IFwidW5pbnN0YWxsXCIgJiYgbmV3UmVtb3ZlUGhhc2UgPT09IFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFKSB7XG4gICAgICAgICAgICBuZXdSZW1vdmVQaGFzZSA9IFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTExcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJSZW1vdmVQaGFzZSAhPT0gbmV3UmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgIHBhcnNlZEV2ZW50LmRlbGV0ZU5hbWVzcGFjZShjdXJSZW1vdmVQaGFzZSk7XG4gICAgICAgICAgICBwYXJzZWRFdmVudC5hZGROYW1lc3BhY2UobmV3UmVtb3ZlUGhhc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkRXZlbnQuYWRkTmFtZXNwYWNlKG5ld1JlbW92ZVBoYXNlKTtcbiAgICB9XG59XG5cblRyYWl0U2VydmljZS5QSEFTRSA9IHtcbiAgICBOT05FOiBcIlBIQVNFX05PTkVcIixcbiAgICBJTlNUQUxMOiBcIlBIQVNFX0lOU1RBTExcIixcbiAgICBFTkFCTEU6IFwiUEhBU0VfRU5BQkxFXCIsXG4gICAgRElTQUJMRTogXCJQSEFTRV9ESVNBQkxFXCIsXG4gICAgVU5JTlNUQUxMOiBcIlBIQVNFX1VOSU5TVEFMTFwiXG59O1xuXG5UcmFpdFNlcnZpY2UuUEhBU0VfUkVWRVJUID0ge1xuICAgIFtUcmFpdFNlcnZpY2UuUEhBU0UuSU5TVEFMTF06IFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwsXG4gICAgW1RyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTExdOiBUcmFpdFNlcnZpY2UuUEhBU0UuSU5TVEFMTCxcbiAgICBbVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEVdOiBUcmFpdFNlcnZpY2UuUEhBU0UuRU5BQkxFLFxuICAgIFtUcmFpdFNlcnZpY2UuUEhBU0UuRU5BQkxFXTogVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUsXG4gICAgW1RyYWl0U2VydmljZS5QSEFTRS5OT05FXTogVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEVcbn07XG5cblRyYWl0U2VydmljZS5QSEFTRVMgPSBPYmplY3QudmFsdWVzKFRyYWl0U2VydmljZS5QSEFTRSk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25Qcml2YXRlKHNjb3BlLCBwcm9wZXJ0eSwgdmFsdWUsIGRlc2NyaXB0b3IpIHtcbiAgICBKRmFjdG9yeU9iamVjdC5hc3NpZ24oc2NvcGUuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLCBwcm9wZXJ0eSwgdmFsdWUsIGRlc2NyaXB0b3IpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25Qcml2YXRlTWVtYmVyKHNjb3BlLCBwcm9wZXJ0eSwgdmFsdWUsIGRlc2NyaXB0b3IpIHtcbiAgICBKRmFjdG9yeU9iamVjdC5hc3NpZ24oc2NvcGUuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdW3Byb3BlcnR5XSwgdmFsdWUsIGRlc2NyaXB0b3IpXG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5qRmFjdG9yeS5QSEFTRSA9IEpGYWN0b3J5T2JqZWN0LmRpc2luaGVyaXQoVHJhaXRTZXJ2aWNlLlBIQVNFKTtcblxuakZhY3RvcnkuVHJhaXRDb3JlID0gVHJhaXRDb3JlO1xuakZhY3RvcnkuVHJhaXRBYm91dCA9IFRyYWl0QWJvdXQ7XG5qRmFjdG9yeS5UcmFpdExvZyA9IFRyYWl0TG9nO1xuakZhY3RvcnkuVHJhaXRFdmVudHMgPSBUcmFpdEV2ZW50cztcbmpGYWN0b3J5LlRyYWl0U3RhdGUgPSBUcmFpdFN0YXRlO1xuakZhY3RvcnkuVHJhaXRTZXJ2aWNlID0gVHJhaXRTZXJ2aWNlO1xuakZhY3RvcnkuVHJhaXRUYXNrID0gVHJhaXRUYXNrOyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXRDb21wb25lbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgeyBqRmFjdG9yeSB9IGZyb20gXCIuL2pGYWN0b3J5XCI7XG5pbXBvcnQgeyBKRkFDVE9SWV9ERVYgfSBmcm9tIFwiLi9qRmFjdG9yeS1lbnZcIjtcbmltcG9ydCB7IGpGYWN0b3J5RXJyb3IgfSBmcm9tIFwiLi9KRmFjdG9yeUVycm9yXCI7XG5pbXBvcnQgeyBKRmFjdG9yeUV4cGVjdCB9IGZyb20gXCIuL0pGYWN0b3J5RXhwZWN0XCI7XG5pbXBvcnQgeyBUcmFpdENvcmUsIFRyYWl0U2VydmljZSB9IGZyb20gXCIuL1RyYWl0c0NvcmVcIjtcbmltcG9ydCB7IEpGYWN0b3J5RmV0Y2ggfSBmcm9tIFwiLi9KRmFjdG9yeUZldGNoXCI7XG5pbXBvcnQgeyBKRmFjdG9yeVByb21pc2UgfSBmcm9tIFwiLi9KRmFjdG9yeVByb21pc2VcIjtcbmltcG9ydCB7IEpGYWN0b3J5T2JqZWN0IH0gZnJvbSBcIi4vSkZhY3RvcnlPYmplY3RcIjtcbmltcG9ydCB7IGpGYWN0b3J5VHJhY2UgfSBmcm9tIFwiLi9KRmFjdG9yeVRyYWNlXCI7XG5pbXBvcnQgeyBoZWxwZXJfaXNQbGFpbk9iamVjdCwgaGVscGVyX3VybF9hYnMsIGpRdWVyeSB9IGZyb20gXCIuL2pGYWN0b3J5LWhlbHBlcnNcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUcmFpdCBGZXRjaFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdEZldGNoIHtcbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3Qga2VybmVsID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmtlcm5lbDtcbiAgICAgICAga2VybmVsLm9uKFwiZGlzYWJsZVwiLCAoKSA9PiB0aGlzLiRmZXRjaFJlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuRElTQUJMRSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gdGhpcy4kZmV0Y2hSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTCkpO1xuICAgICAgICB0aGlzLiQuYXNzaWduKFwicmVxdWVzdHNcIiwgdGhpcy4kLmNyZWF0ZVN1Yk1hcCgpLCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5FTlVNRVJBQkxFKTtcbiAgICB9XG5cbiAgICAkZmV0Y2goaWQsIHVybCwgZmV0Y2hPcHRpb25zID0ge30pIHtcbiAgICAgICAgaWQgPSB0aGlzLiQucmVxdWVzdHMuJGlkX3Jlc29sdmUoaWQpO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJGZldGNoKGlkKVwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkZmV0Y2godXJsKVwiLCB1cmwpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJGZldGNoKGZldGNoT3B0aW9ucylcIiwgZmV0Y2hPcHRpb25zKS50eXBlUGxhaW5PYmplY3QoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLiQucmVxdWVzdHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiRmZXRjaChpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJvbWlzZSA9IG5ldyBKRmFjdG9yeUZldGNoKHtcbiAgICAgICAgICAgIG5hbWU6IGlkLFxuICAgICAgICAgICAgdHJhY2VTb3VyY2U6IGpGYWN0b3J5VHJhY2UudHJhY2VyLmNhcHR1cmVUcmFjZVNvdXJjZShcIiRmZXRjaFwiKSxcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGNoYWluQXV0b0NvbXBsZXRlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHVybCwgZmV0Y2hPcHRpb25zKTtcblxuICAgICAgICB0aGlzLiQucmVxdWVzdHMuJHJlZ2lzdGVyQXN5bmMoaWQsICckZmV0Y2goXCInICsgaWQgKyAnXCIpJywgcHJvbWlzZSk7XG5cbiAgICAgICAgcHJvbWlzZS4kY2hhaW4udGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy4kLnJlcXVlc3RzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRmZXRjaFJlbW92ZShpZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgJGZldGNoVGV4dChpZCwgdXJsLCBmZXRjaE9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kZmV0Y2goaWQsIHVybCwgeyAuLi5mZXRjaE9wdGlvbnMsICR0eXBlVGV4dDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAkZmV0Y2hKU09OKGlkLCB1cmwsIGZldGNoT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRmZXRjaChpZCwgdXJsLCB7IC4uLmZldGNoT3B0aW9ucywgJHR5cGVKU09OOiB0cnVlIH0pO1xuICAgIH1cblxuICAgICRmZXRjaFJlbW92ZShpZCwgcmVhc29uKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJGZldGNoUmVtb3ZlKGlkKVwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgcmVhc29uICYmIEpGYWN0b3J5RXhwZWN0KFwiJGZldGNoUmVtb3ZlKHJlYXNvbilcIiwgcmVhc29uKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC5yZXF1ZXN0cy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX01JU1NJTkcoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiJGZldGNoUmVtb3ZlKGlkKVwiLFxuICAgICAgICAgICAgICAgICAgICBnaXZlbjogaWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyLGJyYWNlLXN0eWxlXG4gICAgICAgICAgICBpZiAodGhpcy4kLnJlcXVlc3RzLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC5yZXF1ZXN0cy5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy4kLnJlcXVlc3RzLmdldChpZCk7XG4gICAgICAgIHRoaXMuJC5yZXF1ZXN0cy5kZWxldGUoaWQpO1xuICAgICAgICBlbnRyeS4kY2hhaW5BYm9ydChyZWFzb24gfHwgXCIkZmV0Y2hSZW1vdmUoKVwiKTtcbiAgICB9XG5cbiAgICAkZmV0Y2hSZW1vdmVBbGwocmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJyZW1vdmVQaGFzZVwiLCByZW1vdmVQaGFzZSlcbiAgICAgICAgICAgICAgICAuZXF1YWxJbihUcmFpdFNlcnZpY2UuUEhBU0VTKVxuICAgICAgICB9XG4gICAgICAgIGxldCBzdWJzID0gdGhpcy4kLnJlcXVlc3RzO1xuICAgICAgICBpZiAoc3Vicy5zaXplKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHN1Yl0gb2Ygc3Vicykge1xuICAgICAgICAgICAgICAgIGlmIChzdWIuJHBoYXNlUmVtb3ZlID09PSByZW1vdmVQaGFzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmZXRjaFJlbW92ZShrZXksIFwiJGZldGNoUmVtb3ZlQWxsKFwiICsgcmVtb3ZlUGhhc2UgKyBcIilcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVHJhaXQgVGltZW91dFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdFRpbWVvdXQge1xuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBrZXJuZWwgPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMua2VybmVsO1xuICAgICAgICBrZXJuZWwub24oXCJkaXNhYmxlXCIsICgpID0+IHRoaXMuJHRpbWVvdXRSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUpKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHRoaXMuJHRpbWVvdXRSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTCkpO1xuICAgICAgICB0aGlzLiQuYXNzaWduKFwidGltZW91dHNcIiwgdGhpcy4kLmNyZWF0ZVN1Yk1hcCgpLCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5FTlVNRVJBQkxFKTtcbiAgICB9XG5cbiAgICAkdGltZW91dChpZCwgZGVsYXksIGhhbmRsZXIgPSBudWxsLCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIGlkXG4gICAgICAgIC8vIGlkLCBkZWxheVxuICAgICAgICAvLyBpZCwgZGVsYXksIGhhbmRsZXIsIC4uLmFyZ3NcblxuICAgICAgICBpZCA9IHRoaXMuJC50aW1lb3V0cy4kaWRfcmVzb2x2ZShpZCk7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJpZFwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJkZWxheVwiLCBkZWxheSkudHlwZU51bWJlcigpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJoYW5kbGVyXCIsIGhhbmRsZXIpLnR5cGUoRnVuY3Rpb24sIG51bGwpO1xuICAgICAgICAgICAgaWYgKHRoaXMuJC50aW1lb3V0cy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJHRpbWVvdXQoaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRpbWVyO1xuICAgICAgICBsZXQgcHJvbWlzZSA9IG5ldyBKRmFjdG9yeVByb21pc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogaWQsXG4gICAgICAgICAgICAgICAgdHJhY2VTb3VyY2U6IGpGYWN0b3J5VHJhY2UudHJhY2VyLmNhcHR1cmVUcmFjZVNvdXJjZShcIiR0aW1lb3V0XCIpLFxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBjaGFpbkF1dG9Db21wbGV0ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXByb21pc2UuJGlzRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShoYW5kbGVyID8gaGFuZGxlciguLi5hcmdzKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBkZWxheSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBwcm9taXNlLiRjaGFpbi5kYXRhLnRpbWVyID0gdGltZXI7XG4gICAgICAgIHRoaXMuJC50aW1lb3V0cy4kcmVnaXN0ZXJBc3luYyhpZCwgJyR0aW1lb3V0KFwiJyArIGlkICsgJ1wiKScsIHByb21pc2UpO1xuXG4gICAgICAgIHByb21pc2UuJGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuJC50aW1lb3V0cy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kdGltZW91dFJlbW92ZShpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgICR0aW1lb3V0UmVtb3ZlKGlkLCByZWFzb24pIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkdGltZW91dFJlbW92ZShpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIHJlYXNvbiAmJiBKRmFjdG9yeUV4cGVjdChcIiR0aW1lb3V0UmVtb3ZlKHJlYXNvbilcIiwgcmVhc29uKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC50aW1lb3V0cy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX01JU1NJTkcoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiJHRpbWVvdXRSZW1vdmUoaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXIsYnJhY2Utc3R5bGVcbiAgICAgICAgICAgIGlmICh0aGlzLiQudGltZW91dHMuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCkge2RlYnVnZ2VyfVxuICAgICAgICAgICAgdGhpcy4kLnRpbWVvdXRzLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy4kLnRpbWVvdXRzLmdldChpZCk7XG4gICAgICAgIGNsZWFyVGltZW91dChlbnRyeS4kY2hhaW4uZGF0YS50aW1lcik7XG4gICAgICAgIC8vIGRlbGV0aW5nIGJlZm9yZSBjaGFpbkFib3J0KCkgdG8gcHJldmVudCByZW1vdmUoKSByZWNhbGxcbiAgICAgICAgdGhpcy4kLnRpbWVvdXRzLmRlbGV0ZShpZCk7XG4gICAgICAgIGVudHJ5LiRjaGFpbkFib3J0KHJlYXNvbiB8fCBcIiR0aW1lb3V0UmVtb3ZlKClcIik7XG4gICAgfVxuXG4gICAgJHRpbWVvdXRSZW1vdmVBbGwocmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJyZW1vdmVQaGFzZVwiLCByZW1vdmVQaGFzZSlcbiAgICAgICAgICAgICAgICAuZXF1YWxJbihUcmFpdFNlcnZpY2UuUEhBU0VTKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC50aW1lb3V0cztcbiAgICAgICAgaWYgKHN1YnMuc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdWJdIG9mIHN1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRwaGFzZVJlbW92ZSA9PT0gcmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdGltZW91dFJlbW92ZShrZXksIFwiJHRpbWVvdXRSZW1vdmVBbGwoKVwiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUcmFpdCBJbnRlcnZhbFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdEludGVydmFsIHtcbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3Qga2VybmVsID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmtlcm5lbDtcbiAgICAgICAga2VybmVsLm9uKFwiZGlzYWJsZVwiLCAoKSA9PiB0aGlzLiRpbnRlcnZhbFJlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuRElTQUJMRSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gdGhpcy4kaW50ZXJ2YWxSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTCkpO1xuICAgICAgICB0aGlzLiQuYXNzaWduKFwidGltZWludHNcIiwgdGhpcy4kLmNyZWF0ZVN1Yk1hcCgpLCBKRmFjdG9yeU9iamVjdC5kZXNjcmlwdG9ycy5FTlVNRVJBQkxFKTtcbiAgICB9XG5cbiAgICAkaW50ZXJ2YWwoaWQsIGRlbGF5LCBoYW5kbGVyLCAuLi5hcmdzKSB7XG4gICAgICAgIGlkID0gdGhpcy4kLnRpbWVpbnRzLiRpZF9yZXNvbHZlKGlkKTtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJpZFwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJoYW5kbGVyXCIsIGhhbmRsZXIpLnR5cGVGdW5jdGlvbigpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJkZWxheVwiLCBkZWxheSkudHlwZU51bWJlcigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuJC50aW1laW50cy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJGludGVydmFsKGlkKVwiLCBnaXZlbjogaWQgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdGltZXIgPSBzZXRJbnRlcnZhbChoYW5kbGVyLCBkZWxheSwgLi4uYXJncyk7XG4gICAgICAgIHRoaXMuJC50aW1laW50cy4kcmVnaXN0ZXJTeW5jKGlkLCB0aW1lcilcbiAgICB9XG5cbiAgICAkaW50ZXJ2YWxSZW1vdmUoaWQpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCIkaW50ZXJ2YWxSZW1vdmUoaWQpXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC50aW1laW50cy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX01JU1NJTkcoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiJGludGVydmFsUmVtb3ZlKGlkKVwiLFxuICAgICAgICAgICAgICAgICAgICBnaXZlbjogaWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyLGJyYWNlLXN0eWxlXG4gICAgICAgICAgICBpZiAodGhpcy4kLnRpbWVpbnRzLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC50aW1laW50cy5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy4kLnRpbWVpbnRzLmdldChpZCkuJHZhbHVlKTtcbiAgICAgICAgdGhpcy4kLnRpbWVpbnRzLmRlbGV0ZShpZClcbiAgICB9XG5cbiAgICAkaW50ZXJ2YWxSZW1vdmVBbGwocmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJyZW1vdmVQaGFzZVwiLCByZW1vdmVQaGFzZSlcbiAgICAgICAgICAgICAgICAuZXF1YWxJbihUcmFpdFNlcnZpY2UuUEhBU0VTKVxuICAgICAgICB9XG4gICAgICAgIGxldCBzdWJzID0gdGhpcy4kLnRpbWVpbnRzO1xuICAgICAgICBpZiAoc3Vicy5zaXplKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHN1Yl0gb2Ygc3Vicykge1xuICAgICAgICAgICAgICAgIGlmIChzdWIuJHBoYXNlUmVtb3ZlID09PSByZW1vdmVQaGFzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRpbnRlcnZhbFJlbW92ZShrZXkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRyYWl0IE11dGF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdE11dGF0aW9uIHtcbiAgICB0cmFpdF9jb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3Qga2VybmVsID0gdGhpcy4kW1RyYWl0Q29yZS5TWU1CT0xfUFJJVkFURV0uZXZlbnRzLmtlcm5lbDtcbiAgICAgICAga2VybmVsLm9uKFwiZGlzYWJsZVwiLCAoKSA9PiB0aGlzLiRtdXRhdGlvblJlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuRElTQUJMRSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gdGhpcy4kbXV0YXRpb25SZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTCkpO1xuICAgICAgICB0aGlzLiQuYXNzaWduKFwibXV0YXRpb25zXCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJG11dGF0aW9uKGlkLCBwYXJlbnQsIGNvbmZpZywgaGFuZGxlcikge1xuICAgICAgICBpZCA9IHRoaXMuJC5tdXRhdGlvbnMuJGlkX3Jlc29sdmUoaWQpO1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImlkXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcInBhcmVudFwiLCBwYXJlbnQpLnR5cGUoSFRNTEVsZW1lbnQsIERvY3VtZW50KTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiY29uZmlnXCIsIGNvbmZpZykudHlwZVBsYWluT2JqZWN0KCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImhhbmRsZXJcIiwgaGFuZGxlcikudHlwZUZ1bmN0aW9uKCk7XG4gICAgICAgICAgICBpZiAodGhpcy4kLm11dGF0aW9ucy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJG11dGF0aW9uKGlkKVwiLCBnaXZlbjogaWQgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihoYW5kbGVyKTtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShwYXJlbnQsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuJC5tdXRhdGlvbnMuJHJlZ2lzdGVyU3luYyhpZCwgb2JzZXJ2ZXIpO1xuICAgIH1cblxuICAgICRtdXRhdGlvblJlbW92ZShpZCwgcmVhc29uKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJG11dGF0aW9uUmVtb3ZlKGlkKVwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgcmVhc29uICYmIEpGYWN0b3J5RXhwZWN0KFwiJG11dGF0aW9uUmVtb3ZlKHJlYXNvbilcIiwgcmVhc29uKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC5tdXRhdGlvbnMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiRtdXRhdGlvblJlbW92ZShpZClcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlcixicmFjZS1zdHlsZVxuICAgICAgICAgICAgaWYgKHRoaXMuJC5tdXRhdGlvbnMuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCkge2RlYnVnZ2VyfVxuICAgICAgICAgICAgdGhpcy4kLm11dGF0aW9ucy5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuJC5tdXRhdGlvbnMuZ2V0KGlkKS4kdmFsdWUuZGlzY29ubmVjdCgpO1xuICAgICAgICB0aGlzLiQubXV0YXRpb25zLmRlbGV0ZShpZClcbiAgICB9XG5cbiAgICAkbXV0YXRpb25SZW1vdmVBbGwocmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJyZW1vdmVQaGFzZVwiLCByZW1vdmVQaGFzZSlcbiAgICAgICAgICAgICAgICAuZXF1YWxJbihUcmFpdFNlcnZpY2UuUEhBU0VTKVxuICAgICAgICB9XG4gICAgICAgIGxldCBzdWJzID0gdGhpcy4kLm11dGF0aW9ucztcbiAgICAgICAgaWYgKHN1YnMuc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdWJdIG9mIHN1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRwaGFzZVJlbW92ZSA9PT0gcmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbXV0YXRpb25SZW1vdmUoa2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUcmFpdCBET01cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgVHJhaXRET00ge1xuICAgIHRyYWl0X2NvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBrZXJuZWwgPSB0aGlzLiRbVHJhaXRDb3JlLlNZTUJPTF9QUklWQVRFXS5ldmVudHMua2VybmVsO1xuICAgICAgICBrZXJuZWwub24oXCJkaXNhYmxlXCIsICgpID0+IHRoaXMuJGRvbVJlbW92ZUFsbChUcmFpdFNlcnZpY2UuUEhBU0UuRElTQUJMRSkpO1xuICAgICAgICBrZXJuZWwub24oXCJ1bmluc3RhbGxcIiwgKCkgPT4gdGhpcy4kZG9tUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcImRvbVwiLCB0aGlzLiQuY3JlYXRlU3ViTWFwKCksIEpGYWN0b3J5T2JqZWN0LmRlc2NyaXB0b3JzLkVOVU1FUkFCTEUpO1xuICAgIH1cblxuICAgICRkb20oaWQsIGpRdWVyeUFyZ3VtZW50LCBhcHBlbmRUbykge1xuICAgICAgICBpZCA9IHRoaXMuJC5kb20uJGlkX3Jlc29sdmUoaWQpO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaWRcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwialF1ZXJ5QXJndW1lbnRcIiwgalF1ZXJ5QXJndW1lbnQpLnR5cGUoU3RyaW5nLCBPYmplY3QpO1xuICAgICAgICAgICAgYXBwZW5kVG8gJiYgSkZhY3RvcnlFeHBlY3QoXCJhcHBlbmRUb1wiLCBhcHBlbmRUbykudHlwZShTdHJpbmcsIE9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZG9tSWQ7XG4gICAgICAgIGlmIChpZFswXSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlkID0gaWQuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgZG9tSWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIHRoaXMuJC5kb20uaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJGRvbShpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZG9tID0galF1ZXJ5KGpRdWVyeUFyZ3VtZW50KTtcblxuICAgICAgICBpZiAoZG9tWzBdLnRhZ05hbWUgPT09IFwiVEVNUExBVEVcIikge1xuICAgICAgICAgICAgZG9tID0galF1ZXJ5KGpRdWVyeShkb21bMF0pLmh0bWwoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9tSWQpIHtcbiAgICAgICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgICAgICBpZiAoZG9tWzBdLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5JTlZBTElEX1ZBTFVFKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIkZG9tKCNpZClcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuOiBkb20sXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IFwiY2Fubm90IHNldCB0aGUgZG9tIGlkOiB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgc2VsZWN0aW9uIGlzbid0IGFuIEVMRU1FTlRfTk9ERVwiXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tWzBdLmlkID0gaWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICAgICAgZG9tLmFwcGVuZFRvKGFwcGVuZFRvKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJC5kb20uJHJlZ2lzdGVyU3luYyhpZCwgZG9tKS4kdmFsdWU7XG4gICAgfVxuXG4gICAgJGRvbUZldGNoKGlkLCB1cmwsIGZldGNoT3B0aW9ucywgYXBwZW5kVG8pIHtcbiAgICAgICAgaWYgKGZldGNoT3B0aW9ucyAmJiAhaGVscGVyX2lzUGxhaW5PYmplY3QoZmV0Y2hPcHRpb25zKSkge1xuICAgICAgICAgICAgW2ZldGNoT3B0aW9ucywgYXBwZW5kVG9dID0gW3t9LCBmZXRjaE9wdGlvbnNdXG4gICAgICAgIH1cblxuICAgICAgICBpZCA9IHRoaXMuJC5kb20uJGlkX3Jlc29sdmUoaWQpO1xuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaWRcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwidXJsXCIsIHVybCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgYXBwZW5kVG8gJiYgSkZhY3RvcnlFeHBlY3QoXCJhcHBlbmRUb1wiLCBhcHBlbmRUbykudHlwZShTdHJpbmcsIE9iamVjdCk7XG4gICAgICAgICAgICBmZXRjaE9wdGlvbnMgJiYgSkZhY3RvcnlFeHBlY3QoXCJmZXRjaE9wdGlvbnNcIiwgZmV0Y2hPcHRpb25zKS50eXBlKE9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZG9tSWQ7XG4gICAgICAgIGlmIChpZFswXSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlkID0gaWQuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgZG9tSWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIHRoaXMuJC5kb20uaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJGRvbUZldGNoKGlkKVwiLCBnaXZlbjogaWQgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcm9taXNlID0gdGhpcy4kZmV0Y2hUZXh0KCckZG9tRmV0Y2goXCInICsgaWQgKyAnXCIpJywgdXJsLCBmZXRjaE9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihyID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0galF1ZXJ5KHIpO1xuICAgICAgICAgICAgICAgIGlmIChkb21JZCkge1xuICAgICAgICAgICAgICAgICAgICBkb21bMF0uaWQgPSBpZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tLmFwcGVuZFRvKGFwcGVuZFRvKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZG9tXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiQuZG9tLiRyZWdpc3RlckFzeW5jKGlkLCAnJGRvbUZldGNoKFwiJyArIGlkICsgJ1wiKScsIHByb21pc2UpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZVxuICAgIH1cblxuICAgICRkb21SZW1vdmUoaWQsIHJlYXNvbikge1xuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcIiRkb21SZW1vdmUoaWQpXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICByZWFzb24gJiYgSkZhY3RvcnlFeHBlY3QoXCIkZG9tUmVtb3ZlKHJlYXNvbilcIiwgcmVhc29uKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJC5kb20uaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiRkb21SZW1vdmUoaWQpXCIsXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXIsYnJhY2Utc3R5bGVcbiAgICAgICAgICAgIGlmICh0aGlzLiQuZG9tLmdldChpZCkuX2RlYnVnX3JlbW92ZV9jYWxsZWQpIHtkZWJ1Z2dlcn1cbiAgICAgICAgICAgIHRoaXMuJC5kb20uZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMuJC5kb20uZ2V0KGlkKTtcbiAgICAgICAgbGV0IHZhbHVlID0gZW50cnkuJHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBqUXVlcnkpIHtcbiAgICAgICAgICAgIHZhbHVlLnJlbW92ZSgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgSkZhY3RvcnlGZXRjaCkge1xuICAgICAgICAgICAgZW50cnkuJGNoYWluQWJvcnQocmVhc29uIHx8IFwiJGRvbVJlbW92ZSgpXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJC5kb20uZGVsZXRlKGlkKVxuICAgIH1cblxuICAgICRkb21SZW1vdmVBbGwocmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJyZW1vdmVQaGFzZVwiLCByZW1vdmVQaGFzZSlcbiAgICAgICAgICAgICAgICAuZXF1YWxJbihUcmFpdFNlcnZpY2UuUEhBU0VTKVxuICAgICAgICB9XG4gICAgICAgIGxldCBzdWJzID0gdGhpcy4kLmRvbTtcbiAgICAgICAgaWYgKHN1YnMuc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdWJdIG9mIHN1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRwaGFzZVJlbW92ZSA9PT0gcmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZG9tUmVtb3ZlKGtleSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gIFRyYWl0IENTU1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzcyBUcmFpdENTUyB7XG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IGtlcm5lbCA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWw7XG4gICAgICAgIGtlcm5lbC5vbihcImRpc2FibGVcIiwgKCkgPT4gdGhpcy4kY3NzUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFKSk7XG4gICAgICAgIGtlcm5lbC5vbihcInVuaW5zdGFsbFwiLCAoKSA9PiB0aGlzLiRjc3NSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTCkpO1xuICAgICAgICB0aGlzLiQuYXNzaWduKFwiY3NzXCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJGNzcyhpZCwgc3R5bGVCb2R5KSB7XG4gICAgICAgIGlkID0gdGhpcy4kLmNzcy4kaWRfcmVzb2x2ZShpZCk7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJpZFwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJjc3NcIiwgc3R5bGVCb2R5KS50eXBlU3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3NzSWQ7XG4gICAgICAgIGlmIChpZFswXSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlkID0gaWQuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgY3NzSWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIHRoaXMuJC5jc3MuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJGNzcyhpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4kLmNzcy4kcmVnaXN0ZXJTeW5jKGlkLFxuICAgICAgICAgICAgalF1ZXJ5KFwiPHN0eWxlPlwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKGNzc0lkID8geyBpZCB9IDoge30pXG4gICAgICAgICAgICAgICAgLmh0bWwoc3R5bGVCb2R5KVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhcImhlYWRcIilcbiAgICAgICAgKS4kdmFsdWU7XG4gICAgfVxuXG4gICAgJGNzc0ZldGNoKGlkLCB1cmwsIGFwcGVuZFRvID0gXCJoZWFkXCIpIHtcbiAgICAgICAgaWQgPSB0aGlzLiQuY3NzLiRpZF9yZXNvbHZlKGlkKTtcblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcImlkXCIsIGlkKS50eXBlU3RyaW5nKCk7XG4gICAgICAgICAgICBKRmFjdG9yeUV4cGVjdChcInVybFwiLCB1cmwpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjc3NJZDtcbiAgICAgICAgaWYgKGlkWzBdID09PSBcIiNcIikge1xuICAgICAgICAgICAgaWQgPSBpZC5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICBjc3NJZCA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYgJiYgdGhpcy4kLmNzcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakZhY3RvcnlFcnJvci5LRVlfRFVQTElDQVRFRCh7IHRhcmdldDogXCIkY3NzRmV0Y2goaWQpXCIsIGdpdmVuOiBpZCB9KVxuICAgICAgICB9XG5cbiAgICAgICAgdXJsID0gaGVscGVyX3VybF9hYnModXJsKTtcblxuICAgICAgICBsZXQgZXhpc3QgPSBqUXVlcnkoYXBwZW5kVG8pLmZpbmQoYGxpbmtbaHJlZj1cIiR7dXJsfVwiXWApWzBdO1xuICAgICAgICBpZiAoZXhpc3QpIHtcbiAgICAgICAgICAgIGV4aXN0LmRhdGFzZXQudXNhZ2UgPSBwYXJzZUludChleGlzdC5kYXRhc2V0LnVzYWdlKSArIDE7XG4gICAgICAgICAgICBsZXQgZG9tID0galF1ZXJ5KGV4aXN0KTtcblxuICAgICAgICAgICAgbGV0IHByb21pc2UgPSBKRmFjdG9yeVByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlkLFxuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHsgY2hhaW5BdXRvQ29tcGxldGU6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2VTb3VyY2U6IGpGYWN0b3J5VHJhY2UudHJhY2VyLmNhcHR1cmVUcmFjZVNvdXJjZShcIiRjc3NGZXRjaFwiKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG9tXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcHJvbWlzZS4kY2hhaW4uZGF0YS5kb20gPSBkb207XG4gICAgICAgICAgICB0aGlzLiQuY3NzLiRyZWdpc3RlckFzeW5jKGlkLCAnJGNzc0ZldGNoKFwiJyArIGlkICsgJ1wiKScsIHByb21pc2UpO1xuXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGRvbTtcbiAgICAgICAgICAgIGxldCBwcm9taXNlID0gbmV3IEpGYWN0b3J5UHJvbWlzZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlkLFxuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHsgY2hhaW5BdXRvQ29tcGxldGU6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2VTb3VyY2U6IGpGYWN0b3J5VHJhY2UudHJhY2VyLmNhcHR1cmVUcmFjZVNvdXJjZShcIiRjc3NGZXRjaFwiKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSA9PiBkb20gPSBqUXVlcnkoXCI8bGluaz5cIixcbiAgICAgICAgICAgICAgICAgICAgeyBpZDogY3NzSWQgPyBpZCA6IFwiXCIsIHJlbDogXCJzdHlsZXNoZWV0XCIsIHR5cGU6IFwidGV4dC9jc3NcIiwgXCJkYXRhLXVzYWdlXCI6IFwiMVwiIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhhcHBlbmRUbylcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibG9hZFwiLCAoKSA9PiByZXNvbHZlKGRvbSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaHJlZlwiLCB1cmwpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBwcm9taXNlLiRjaGFpbi5kYXRhLmRvbSA9IGRvbTtcbiAgICAgICAgICAgIHRoaXMuJC5jc3MuJHJlZ2lzdGVyQXN5bmMoaWQsICckY3NzRmV0Y2goXCInICsgaWQgKyAnXCIpJywgcHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJGNzc1JlbW92ZShpZCwgcmVhc29uKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJGNzc1JlbW92ZShpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIHJlYXNvbiAmJiBKRmFjdG9yeUV4cGVjdChcIiRjc3NSZW1vdmUocmVhc29uKVwiLCByZWFzb24pLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4kLmNzcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX01JU1NJTkcoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiJGNzc1JlbW92ZShpZClcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlcixicmFjZS1zdHlsZVxuICAgICAgICAgICAgaWYgKHRoaXMuJC5jc3MuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCkge2RlYnVnZ2VyfVxuICAgICAgICAgICAgdGhpcy4kLmNzcy5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy4kLmNzcy5nZXQoaWQpO1xuICAgICAgICBsZXQgdmFsdWUgPSBlbnRyeS4kY2hhaW4gJiYgZW50cnkuJGNoYWluLmRhdGEuZG9tIHx8IGVudHJ5LiR2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgalF1ZXJ5KSB7XG4gICAgICAgICAgICBsZXQgdXNhZ2UgPSBwYXJzZUludCh2YWx1ZVswXS5kYXRhc2V0LnVzYWdlKSAtIDE7XG4gICAgICAgICAgICBpZiAodXNhZ2UpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVswXS5kYXRhc2V0LnVzYWdlID0gdXNhZ2VcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUucmVtb3ZlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiBKRmFjdG9yeVByb21pc2UpIHtcbiAgICAgICAgICAgIGVudHJ5LiRjaGFpbkFib3J0KHJlYXNvbiB8fCBcIiRjc3NSZW1vdmUoKVwiKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuJC5jc3MuZGVsZXRlKGlkKVxuICAgIH1cblxuICAgICRjc3NSZW1vdmVBbGwocmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJyZW1vdmVQaGFzZVwiLCByZW1vdmVQaGFzZSlcbiAgICAgICAgICAgICAgICAuZXF1YWxJbihUcmFpdFNlcnZpY2UuUEhBU0VTKVxuICAgICAgICB9XG4gICAgICAgIGxldCBzdWJzID0gdGhpcy4kLmNzcztcbiAgICAgICAgaWYgKHN1YnMuc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdWJdIG9mIHN1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRwaGFzZVJlbW92ZSA9PT0gcmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3NzUmVtb3ZlKGtleSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFpdExpYlZ1ZSB7XG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IGtlcm5lbCA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWw7XG4gICAgICAgIGtlcm5lbC5vbihcImRpc2FibGVcIiwgKCkgPT4gdGhpcy4kdnVlUmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5ESVNBQkxFKSk7XG4gICAgICAgIGtlcm5lbC5vbihcInVuaW5zdGFsbFwiLCAoKSA9PiB0aGlzLiR2dWVSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLlVOSU5TVEFMTCkpO1xuICAgICAgICB0aGlzLiQuYXNzaWduKFwidnVlXCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJHZ1ZShpZCwgdnVlKSB7XG4gICAgICAgIGlkID0gdGhpcy4kLnZ1ZS4kaWRfcmVzb2x2ZShpZCk7XG5cbiAgICAgICAgaWYgKEpGQUNUT1JZX0RFVikge1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJpZFwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgSkZhY3RvcnlFeHBlY3QoXCJ2dWVcIiwgdnVlKS50eXBlKE9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWICYmIHRoaXMuJC52dWUuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX0RVUExJQ0FURUQoeyB0YXJnZXQ6IFwiJHZ1ZShpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4kLnZ1ZS4kcmVnaXN0ZXJTeW5jKGlkLCB2dWUpLiR2YWx1ZTtcbiAgICB9XG5cbiAgICAkdnVlUmVtb3ZlKGlkKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJHZ1ZVJlbW92ZShpZClcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4kLnZ1ZS5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpGYWN0b3J5RXJyb3IuS0VZX01JU1NJTkcoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiJHZ1ZVJlbW92ZShpZClcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlcixicmFjZS1zdHlsZVxuICAgICAgICAgICAgaWYgKHRoaXMuJC52dWUuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCkge2RlYnVnZ2VyfVxuICAgICAgICAgICAgdGhpcy4kLnZ1ZS5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy4kLnZ1ZS5nZXQoaWQpO1xuICAgICAgICBqUXVlcnkoZW50cnkuJHZhbHVlLiRlbCkucmVtb3ZlKCk7XG4gICAgICAgIGVudHJ5LiR2YWx1ZS4kZGVzdHJveSgpO1xuICAgICAgICB0aGlzLiQudnVlLmRlbGV0ZShpZClcbiAgICB9XG5cbiAgICAkdnVlUmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC52dWU7XG4gICAgICAgIGlmIChzdWJzLnNpemUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgc3ViXSBvZiBzdWJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi4kcGhhc2VSZW1vdmUgPT09IHJlbW92ZVBoYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHZ1ZVJlbW92ZShrZXkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhaXRMaWJSZWFjdCB7XG4gICAgdHJhaXRfY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IGtlcm5lbCA9IHRoaXMuJFtUcmFpdENvcmUuU1lNQk9MX1BSSVZBVEVdLmV2ZW50cy5rZXJuZWw7XG4gICAgICAgIGtlcm5lbC5vbihcImRpc2FibGVcIiwgKCkgPT4gdGhpcy4kcmVhY3RSZW1vdmVBbGwoVHJhaXRTZXJ2aWNlLlBIQVNFLkRJU0FCTEUpKTtcbiAgICAgICAga2VybmVsLm9uKFwidW5pbnN0YWxsXCIsICgpID0+IHRoaXMuJHJlYWN0UmVtb3ZlQWxsKFRyYWl0U2VydmljZS5QSEFTRS5VTklOU1RBTEwpKTtcbiAgICAgICAgdGhpcy4kLmFzc2lnbihcInJlYWN0XCIsIHRoaXMuJC5jcmVhdGVTdWJNYXAoKSwgSkZhY3RvcnlPYmplY3QuZGVzY3JpcHRvcnMuRU5VTUVSQUJMRSk7XG4gICAgfVxuXG4gICAgJHJlYWN0KGlkLCBjb250YWluZXIsIGVsZW1lbnQsIC4uLnJlbmRlck90aGVyQXJndW1lbnRzKSB7XG4gICAgICAgIGlkID0gdGhpcy4kLnJlYWN0LiRpZF9yZXNvbHZlKGlkKTtcblxuICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICBpZiAoIWpGYWN0b3J5LlJlYWN0RE9NKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiakZhY3RvcnkuUmVhY3RET009UmVhY3RET00gbXVzdCBiZSBzZXQgYmVmb3JlIHVzaW5nIHRoZSBSZWFjdCBUcmFpdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiaWRcIiwgaWQpLnR5cGVTdHJpbmcoKTtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiY29udGFpbmVyXCIsIGNvbnRhaW5lcikudHlwZShIVE1MRWxlbWVudCwgalF1ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYgJiYgdGhpcy4kLnJlYWN0LmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9EVVBMSUNBVEVEKHsgdGFyZ2V0OiBcIiRyZWFjdChpZClcIiwgZ2l2ZW46IGlkIH0pXG4gICAgICAgIH1cblxuICAgICAgICBjb250YWluZXIgPSBqUXVlcnkoY29udGFpbmVyKVswXTtcbiAgICAgICAgbGV0IHZpZXcgPSBqRmFjdG9yeS5SZWFjdERPTS5yZW5kZXIoZWxlbWVudCwgY29udGFpbmVyLCAuLi5yZW5kZXJPdGhlckFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzLiQucmVhY3QuJHJlZ2lzdGVyU3luYyhpZCwgeyBjb250YWluZXIsIHZpZXcgfSkuJHZhbHVlLnZpZXc7XG4gICAgfVxuXG4gICAgJHJlYWN0UmVtb3ZlKGlkKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwiJHJlYWN0UmVtb3ZlKGlkKVwiLCBpZCkudHlwZVN0cmluZygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLiQucmVhY3QuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqRmFjdG9yeUVycm9yLktFWV9NSVNTSU5HKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiRyZWFjdFJlbW92ZShpZClcIixcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW46IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlcixicmFjZS1zdHlsZVxuICAgICAgICAgICAgaWYgKHRoaXMuJC5yZWFjdC5nZXQoaWQpLl9kZWJ1Z19yZW1vdmVfY2FsbGVkKSB7ZGVidWdnZXJ9XG4gICAgICAgICAgICB0aGlzLiQucmVhY3QuZ2V0KGlkKS5fZGVidWdfcmVtb3ZlX2NhbGxlZCA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuJC5yZWFjdC5nZXQoaWQpLiR2YWx1ZTtcbiAgICAgICAgbGV0IGVsID0gdmFsdWUuY29udGFpbmVyO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgIGlmICghakZhY3RvcnkuUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZShlbCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoSkZBQ1RPUllfREVWKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGxvZ1dhcm4oXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIGZhaWxlZCB0byB1bm1vdW50XCIsIGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqUXVlcnkoZWwpLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJC5yZWFjdC5kZWxldGUoaWQpXG4gICAgfVxuXG4gICAgJHJlYWN0UmVtb3ZlQWxsKHJlbW92ZVBoYXNlKSB7XG4gICAgICAgIGlmIChKRkFDVE9SWV9ERVYpIHtcbiAgICAgICAgICAgIEpGYWN0b3J5RXhwZWN0KFwicmVtb3ZlUGhhc2VcIiwgcmVtb3ZlUGhhc2UpXG4gICAgICAgICAgICAgICAgLmVxdWFsSW4oVHJhaXRTZXJ2aWNlLlBIQVNFUylcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IHRoaXMuJC5yZWFjdDtcbiAgICAgICAgaWYgKHN1YnMuc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBzdWJdIG9mIHN1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRwaGFzZVJlbW92ZSA9PT0gcmVtb3ZlUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmVhY3RSZW1vdmUoa2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmpGYWN0b3J5LlRyYWl0RmV0Y2ggPSBUcmFpdEZldGNoO1xuakZhY3RvcnkuVHJhaXRUaW1lb3V0ID0gVHJhaXRUaW1lb3V0O1xuakZhY3RvcnkuVHJhaXRJbnRlcnZhbCA9IFRyYWl0SW50ZXJ2YWw7XG5qRmFjdG9yeS5UcmFpdE11dGF0aW9uID0gVHJhaXRNdXRhdGlvbjtcbmpGYWN0b3J5LlRyYWl0RE9NID0gVHJhaXRET007XG5qRmFjdG9yeS5UcmFpdENTUyA9IFRyYWl0Q1NTO1xuakZhY3RvcnkuVHJhaXRMaWJWdWUgPSBUcmFpdExpYlZ1ZTtcbmpGYWN0b3J5LlRyYWl0TGliUmVhY3QgPSBUcmFpdExpYlJlYWN0OyIsIi8qIGpGYWN0b3J5LCBDb3B5cmlnaHQgKGMpIDIwMTksIFN0w6lwaGFuZSBQbGF6aXMsIGh0dHBzOi8vZ2l0aHViLmNvbS9qZmFjdG9yeS1lcy9qZmFjdG9yeS9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCAqL1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGpGYWN0b3J5IGJ1bmRsZSBpbmRleCAoc2VlIHBhY2thZ2UuanNvbiBzY3JpcHRzIHRvIGNvbXBpbGUgdGhlIC9kaXN0KVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBVc2VkIGJ5IHRoZSBidWlsZCBzY3JpcHRzIHRvIGNvbXBpbGUgbW9kdWxlcyB0YXJnZXRpbmcgdGhlIGNvbmZpZ3VyYXRpb24gKHByb2R1Y3Rpb24sIGRldmVsb3BtZW50LCBkZWJ1Zy4uLilcbi8vIEFsbW9zdCBldmVyeXRoaW5nIGlzIGV4cG9ydGVkOyBUaGUgcmVzdWx0aW5nIG1vZHVsZXMgc2hvdWxkIGJlIGltcG9ydGVkIGJ5IGEgYnVuZGxlciB0aGF0IHN1cHBvcnRzIFRyZWUgU2hhY2tpbmcuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0IHsgakZhY3RvcnlMb2FkZXIgfSBmcm9tIFwiLi9qRmFjdG9yeS1sb2FkZXJcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vakZhY3RvcnlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pGYWN0b3J5LWVudlwiO1xuZXhwb3J0ICogZnJvbSBcIi4vakZhY3RvcnktY29uZmlnXCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL2pGYWN0b3J5LXRyYWl0c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vakZhY3RvcnktbG9hZGVyXCI7XG5cbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5QWJvdXRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5RXJyb3JcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5RXZlbnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9KRmFjdG9yeUV4cGVjdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vSkZhY3RvcnlGZXRjaFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vSkZhY3RvcnlGdW5jdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vSkZhY3RvcnlMb2dnZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5T2JqZWN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9KRmFjdG9yeVByb21pc2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0pGYWN0b3J5VGltZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vSkZhY3RvcnlUcmFjZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vSkZhY3RvcnlUcmFpdHNcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vVHJhaXRzQ29yZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vVHJhaXRzQ29tcG9uZW50c1wiO1xuXG5pZiAodHlwZW9mIGpGYWN0b3J5T3ZlcnJpZGUgPT09IFwidW5kZWZpbmVkXCIgfHwgIWpGYWN0b3J5T3ZlcnJpZGUpIHtcbiAgICBqRmFjdG9yeUxvYWRlci5pbml0KCk7XG59Il0sIm5hbWVzIjpbIkpGQUNUT1JZX0NMSSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJqRmFjdG9yeUNvbmZpZyIsIlRyYWl0TG9nIiwiSkZhY3RvcnlFcnJvciIsImtleXMiLCJKRmFjdG9yeVRyYWNlIiwibGliT3B0aW9ucyIsIm9mZmxpbmUiLCJCb29sZWFuIiwiZ2xvYmFsVGhpcyIsImNocm9tZSIsImZpbHRlciIsInZhbHVlIiwibGluZU51bWJlciIsImpGYWN0b3J5RGV2IiwicmVxdWlyZUNvbXBhdGliaWxpdHkiLCJ0ZXN0IiwiaW5mbyIsImZldGNoIiwiUmVxdWVzdCIsIkFib3J0Q29udHJvbGxlciwgQWJvcnRTaWduYWwiLCJBYm9ydENvbnRyb2xsZXIiLCJzaWduYWwiLCJNdXRhdGlvbk9ic2VydmVyIiwiakZhY3RvcnlMb2FkZXIiLCJzZXEiLCJbb2JqZWN0IE9iamVjdF0iLCJ0aGlzIiwibW9kdWxlIiwiakZhY3RvcnlPdmVycmlkZSIsImhhbmRsZXIiLCJwdXNoIiwib25Jbml0IiwiY29uc29sZSIsImxvZyIsIm5hbWUiLCJlbnRyeSIsIk9iamVjdCIsImVudHJpZXMiLCJwYXNzIiwiaWdub3JlIiwid2FybiIsImpRdWVyeSIsIiQiLCJoZWxwZXJfaXNOYXRpdmUiLCJfIiwiaXNOYXRpdmUiLCJoZWxwZXJfaXNTdHJpbmciLCJpc1N0cmluZyIsImhlbHBlcl9pc051bWJlciIsImlzTnVtYmVyIiwiaGVscGVyX2lzUGxhaW5PYmplY3QiLCJpc1BsYWluT2JqZWN0IiwiaGVscGVyX2RlZmF1bHRzRGVlcCIsImRlZmF1bHRzRGVlcCIsImhlbHBlcl9sb3dlckZpcnN0IiwibG93ZXJGaXJzdCIsImhlbHBlcl9nZXQiLCJnZXQiLCJoZWxwZXJfdGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsImhlbHBlcl9jYW1lbENhc2UiLCJjYW1lbENhc2UiLCJOT09QIiwiaGVscGVyX3NldEZ1bmN0aW9uTmFtZSIsImYiLCJkZWZpbmVQcm9wZXJ0eSIsImhlbHBlcl91cmxfYWJzIiwidXJsIiwiYSIsImhyZWYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJKRmFjdG9yeVRyYWNlX05PRklMVEVSIiwibGFiZWwiLCJzdGFja1RyYWNlTGltaXQiLCJJbmZpbml0eSIsIm9taXRBYm92ZUZ1bmN0aW9uTmFtZSIsIm9taXRTZWxmIiwiX3N0YWNrVHJhY2VMaW1pdCIsIkVycm9yIiwidHJhY2VTb3VyY2UiLCJzb3VyY2UiLCJ0YXJnZXRPYmplY3QiLCJjYXB0dXJlVHJhY2VTb3VyY2UiLCJ0cmFjZSIsInRvUHJpbnRhYmxlVHJhY2UiLCJ0aGVuIiwiciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsIkpGYWN0b3J5VHJhY2VfTElCX1NUQUNLVFJBQ0UiLCJjb25maWciLCJzdXBlciIsIlN0YWNrVHJhY2UiLCJmcm9tRXJyb3IiLCJ0cmFjZUZyYW1lcyIsInNsaWNlIiwiZmluZEluZGV4IiwiZnVuY3Rpb25OYW1lIiwiZW5kc1dpdGgiLCJmb3JtYXRUcmFjZUZyYW1lcyIsImhlYWRlciIsImxpbmVQcmVmaXgiLCJ3aW5kb3ciLCJtYXAiLCJzZiIsInRvU3RyaW5nIiwiam9pbiIsImpGYWN0b3J5VHJhY2UiLCJ1c2UiLCJjb25zdHJ1Y3RvciIsInRyYWNlciIsImF0dGFjaFRyYWNlIiwibWVzc2FnZSIsImRhdGEiLCJhc3NpZ24iLCJjcmVhdGUiLCJ0b1ByaW50YWJsZSIsIiRkYXRhIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmplY3QiLCJERUZBVUxUX0tFWVMiLCJmaW5kIiwia2V5IiwidmFsIiwidGVtcGxhdGVEYXRhIiwibnYiLCJ1bmRlZmluZWQiLCJnZXRJZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJsZW5ndGgiLCJKU09OX01BWCIsInN1YnN0cmluZyIsImUiLCJTdHJpbmciLCJ0ZW1wbGF0ZU1lc3NhZ2UiLCJwYXJ0Iiwic3BsaXQiLCJwbGFjZWhvbGRlciIsIlJFX1BMQUNFSE9MREVSIiwibGFzdEluZGV4IiwiZXhlYyIsInRyaW0iLCJ0b1ByaW50YWJsZURhdGEiLCJqRmFjdG9yeUVycm9yIiwiUHJveHkiLCJzZXQiLCJ0YXJnZXQiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsIkpGYWN0b3J5RXhwZWN0IiwiSU5WQUxJRF9WQUxVRSIsIklOVkFMSURfQ0FMTCIsIlBST01JU0VfRVhQSVJFRCIsIlJFUVVFU1RfRVJST1IiLCJLRVlfRFVQTElDQVRFRCIsIktFWV9NSVNTSU5HIiwiZXJyb3IiLCJyZWFzb24iLCJnaXZlbiIsInN0YXRpY01ldGhvZHMiLCJub3RVbmRlZmluZWQiLCJub3RFbXB0eVN0cmluZyIsIm5vdEZhbHN5IiwidmFsaWRTcGFjZXMiLCJyZXBsYWNlIiwibWF0Y2hSZWciLCJyZWciLCJleHBlY3RlZCIsIm9rIiwidHlwZU51bGwiLCJ0eXBlQm9vbGVhbiIsInR5cGVTdHJpbmciLCJ0eXBlTnVtYmVyIiwidHlwZUZ1bmN0aW9uIiwidHlwZVBsYWluT2JqZWN0IiwiZXF1YWxJbiIsIkFycmF5IiwiaXNBcnJheSIsInZhbHVlcyIsImluY2x1ZGVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIndyaXRhYmxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibm90V3JpdGFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNhbGwiLCJub3RFbnVtZXJhYmxlIiwibm90Q29uZmlndXJhYmxlIiwicmVzZXJ2ZWRQcm9wZXJ0eSIsImFyZ3MiLCJKRmFjdG9yeVRyYWl0cyIsImNhbGxlckluc3RhbmNlIiwiY2FsbGVyQ29uc3RydWN0b3IiLCJvcHRpb25zIiwidHJhaXQiLCJ0cmFpdEFyZ3MiLCJjYWNoZSIsIkNBQ0hFIiwiaGFzIiwiYWRkIiwiV2Vha1NldCIsIkpGYWN0b3J5VHJhaXQiLCJleHBvcnQiLCJ0cmFpdEluc3RhbmNlIiwidHJhaXRfY29uc3RydWN0b3IiLCJhcHBseSIsImlzU3RhdGljIiwic291cmNlRGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJwcm9wZXJ0eU5hbWUiLCJwcmVmaXgiLCJnZXRQcmVmaXgiLCJnZXRUYXJnZXQiLCJwcm9wZXJ0eURlc2NyaXB0b3IiLCJwYXJzZWQiLCJwYXJzZXIiLCJkZWZhdWx0UGFyc2VyIiwiRVhDTFVERVMiLCJXZWFrTWFwIiwiSkZhY3RvcnlGdW5jdGlvbkNvbXBvc2VyIiwiaGFuZGxlcnMiLCJoYW5kbGVyR3JvdXBzIiwiaGFuZGxlckdyb3VwIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsImNvbXBvc2VyIiwiY29tcG9zaXRlIiwiY29udGV4dCIsImNhbmNlbGVkIiwicGFyYW1ldGVycyIsImZyb20iLCJyZXN1bHQiLCJpdGVyYXRpb24iLCJuZXh0IiwiY29tcG9zaXRlX2l0ZXJhdG9yIiwic2NvcGUiLCJkb25lIiwiSkZhY3RvcnlGdW5jdGlvbkV4cGlyYWJsZSIsIm9yaWdpbmFsSGFuZGxlciIsImV4cGlyZWRDYWxscyIsImV4cGlyZWQiLCJpc0V4cGlyZWQiLCJjb21wb3NlIiwiZXhwaXJhYmxlIiwic2V0RXhwaXJlZCIsImFkZEV4cGlyZUNvbmRpdGlvbiIsImNvbmRpdGlvbiIsImxhc3QiLCJ0eXBlIiwiYmluZCIsIm9uRXhwaXJlZCIsIm9uTm90RXhwaXJlZCIsIk1heFdhcm5pbmdFeHBpcmF0aW9uIiwiakZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsIiwiSkZhY3RvcnlGdW5jdGlvbkNvbmRpdGlvbmFsIiwiZmlyc3QiLCJjb25kaXRpb25hbCIsImFkZENvbmRpdGlvbiIsImhhbmRsZSIsImpGYWN0b3J5RnVuY3Rpb25XcmFwcGFibGUiLCJKRmFjdG9yeUZ1bmN0aW9uV3JhcHBhYmxlIiwid3JhcHBhYmxlIiwiYmVmb3JlQWxsIiwianVzdEJlZm9yZSIsImp1c3RBZnRlciIsImFmdGVyQWxsIiwiakZhY3RvcnlUcmFpdHMiLCJzdGF0ZXMiLCJlbmFibGVkIiwic2VydmljZSIsInBoYXNlIiwib3duZXIiLCIkbG9nRXJyIiwiSkZhY3RvcnlDb3JlT2JqZWN0IiwiaW5qZWN0IiwiakZhY3RvcnkiLCJUcmFpdENvcmUiLCJUcmFpdEFib3V0IiwiVHJhaXRFdmVudHMiLCJUcmFpdFN0YXRlIiwiVHJhaXRTZXJ2aWNlIiwiVHJhaXRUYXNrIiwiSkZhY3RvcnlDb21wb25lbnQiLCJUcmFpdEZldGNoIiwiVHJhaXRET00iLCJUcmFpdENTUyIsIlRyYWl0TXV0YXRpb24iLCJUcmFpdFRpbWVvdXQiLCJUcmFpdEludGVydmFsIiwiVHJhaXRMaWJWdWUiLCJUcmFpdExpYlJlYWN0IiwicHJvcGVydGllcyIsIkpGYWN0b3J5T2JqZWN0IiwiZGVzY3JpcHRvclByb3RvdHlwZSIsIkRFU0NSSVBUT1JTX1BST1RPVFlQRSIsIm8iLCJOT05FIiwiV1JJVEFCTEUiLCJFTlVNRVJBQkxFIiwiQ09ORklHVVJBQkxFIiwiQ09ORklHVVJBQkxFX1dSSVRBQkxFIiwiV1JJVEFCTEVfQ09ORklHVVJBQkxFIiwiQ09ORklHVVJBQkxFX0VOVU1FUkFCTEUiLCJFTlVNRVJBQkxFX0NPTkZJR1VSQUJMRSIsIkVOVU1FUkFCTEVfV1JJVEFCTEUiLCJXUklUQUJMRV9FTlVNRVJBQkxFIiwiV1JJVEFCTEVfRU5VTUVSQUJMRV9DT05GSUdVUkFCTEUiLCJXUklUQUJMRV9DT05GSUdVUkFCTEVfRU5VTUVSQUJMRSIsIkVOVU1FUkFCTEVfQ09ORklHVVJBQkxFX1dSSVRBQkxFIiwiRU5VTUVSQUJMRV9XUklUQUJMRV9DT05GSUdVUkFCTEUiLCJDT05GSUdVUkFCTEVfV1JJVEFCTEVfRU5VTUVSQUJMRSIsIkNPTkZJR1VSQUJMRV9FTlVNRVJBQkxFX1dSSVRBQkxFIiwiUkVBRE9OTFkiLCJkZXNjcmlwdG9yIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZmxhdCIsImRpc2luaGVyaXQiLCJjcmVhdGVEZXNjcmlwdG9ycyIsIm1vZHVsZUdlbklkIiwidWlkIiwiSkZhY3RvcnlBYm91dCIsImFib3V0IiwiZmluZ2VycHJpbnQiLCJ0b0xvd2VyQ2FzZSIsIkpGYWN0b3J5UHJvbWlzZSIsImV4ZWN1dG9yIiwiY2hhaW5JZCIsInJlamVjdCIsIkRFRkFVTFRfQ09ORklHIiwiTnVtYmVyIiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiY2hhaW4iLCJKRmFjdG9yeVByb21pc2VDaGFpbiIsIiRjaGFpbiIsIiR0eXBlIiwiJHZhbHVlIiwiJGlzU2V0dGxlZCIsIiRpc1JlamVjdGVkIiwiJGlzRnVsZmlsbGVkIiwiJGlzRXhwaXJlZCIsIiRpc0Fib3J0ZWQiLCIkZGV2X25hbWUiLCIkZGV2X3BhdGgiLCJKRmFjdG9yeVByb21pc2VQYXRoIiwiJGRldl9wb3NpdGlvbiIsIiRkZXZfc291cmNlIiwidHJ5QXV0b0NvbXBsZXRlIiwiaXNQZW5kaW5nIiwiJGNoYWluQ29tcGxldGUiLCJvblJlc29sdmUiLCJvblJlamVjdCIsIlR5cGVFcnJvciIsIngiLCJjYWxsZWQiLCJyZXNvbHZlUHJvbWlzZSIsInkiLCJyZWplY3RQcm9taXNlIiwiZXJyb3JFeHBpcmVkIiwib25TZXR0bGUiLCJjaGFpbk1hcCIsImNoYWluQ29uZmlnIiwiY2hhaW5BdXRvQ29tcGxldGUiLCJzaXplIiwiX2NoYWluQXV0b0NvbXBsZXRlIiwiX19yZXNvbHZlX18iLCJfX3JlamVjdF9fIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZm9yY2VUeXBlIiwid3JhcHBlZEZ1bGZpbGxlZCIsIndyYXBwZWRSZWplY3RlZCIsIm5ld1Byb21pc2UiLCJzdGFydHNXaXRoIiwiZk5hbWVzIiwiY2hhaW5OYW1lIiwiJGRldl9vbkZ1bGZpbGxlZCIsIiRkZXZfb25SZWplY3RlZCIsImNoYWluUm9vdCIsIm9wdGlvbmFsQXJncyIsImNvbXBsZXRlIiwicHJvbWlzZSIsImFib3J0Iiwic2lsZW50IiwiTWFwIiwiaXNDb21wbGV0ZWQiLCJfX2RlZmVycmVkX18iLCJEZWZlcnJlZCIsIml0ZW0iLCJpIiwicHJpbnRhYmxlIiwidiIsIkpGYWN0b3J5UHJvbWlzZVN5bmMiLCJKRmFjdG9yeUV2ZW50cyIsInJlZ2lzdHJ5Iiwib25MaXN0ZW5lclVwZGF0ZSIsIm9uT2JzZXJ2ZXJVcGRhdGUiLCJldmVudHMiLCJzZWxlY3RvciIsInZhbGlkYXRlU2VsZWN0b3IiLCJIVE1MRWxlbWVudCIsIndyYXBwZWRIYW5kbGVyIiwib24iLCJzdGFjayIsIm9mZiIsInBlbmRpbmciLCJldmVudCIsInRyaWdnZXIiLCJ0cmlnZ2VySGFuZGxlciIsImFsbCIsImFzeW5jIiwiSkZhY3RvcnlFdmVudHNNYW5hZ2VyIiwicGFyZW50IiwiYWZmaWxpYXRlUnVsZXMiLCJhZmZpbGlhdGVBZGRSdWxlIiwicnVsZV9uYW1lc3BhY2UiLCJuYW1lc3BhY2VzIiwiSkZhY3RvcnlFdmVudFNlbGVjdG9yUGFyc2VyIiwicGFyc2VkRXZlbnQiLCJuYW1lc3BhY2UiLCJhZGROYW1lc3BhY2UiLCJhZmZpbGlhdGUiLCJhcmdMIiwianF1ZXJ5IiwidHJpZ2dlclNlcmllcyIsInRyaWdnZXJQYXJhbGxlbCIsImVsbSIsIl9kYXRhIiwidHlwZXMiLCJKRmFjdG9yeUV2ZW50U2VsZWN0b3IiLCJoYXNOYW1lc3BhY2UiLCJfZXZlbnRzIiwiZXhwYW5kbyIsImsiLCJpbmRleE9mIiwiZXZlbnRUeXBlRW50cnkiLCJzZWxlY3RvcnMiLCJzIiwiU2V0IiwiZGVsZXRlIiwibnMiLCJzaGlmdCIsInZhbGlkYXRlRXZlbnQiLCJ2YWxpZGF0ZU5hbWVzcGFjZSIsIkpGYWN0b3J5RmV0Y2giLCJmZXRjaE9wdGlvbnMiLCJmZXRjaFJlcXVlc3QiLCJyZXNwb25zZSIsImZldGNoUmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiJHR5cGVUZXh0IiwidGV4dCIsInJlc3BvbnNlVGV4dCIsIiR0eXBlSlNPTiIsImpzb24iLCJyZXNwb25zZUpTT04iLCJjYXRjaCIsImFib3J0Q3RybCIsImFib3J0Q29udHJvbGxlciIsImZldGNoQWJvcnRDb250cm9sbGVyIiwiJGNoYWluQWJvcnQiLCJTWU1CT0xfRU5BQkxFRCIsIkpGYWN0b3J5TG9nZ2VyIiwiREVGQVVMVF9DT05ESVRJT04iLCJpbnN0YWxsQWNjZXNzb3IiLCJwYXJlbnRMb2dnZXIiLCJlbmFibGUiLCJkaXNhYmxlIiwibmF0aXZlTmFtZSIsImZpbHRlcnMiLCJ0YXJnZXROYW1lIiwiYWNjZXNzb3IiLCJmb3JtYXR0ZXIiLCJzdWIiLCJzdHlsZXNfY3NzIiwic3R5bGVzX2NsaSIsIkZPUk1BVFRFUl9OQVRJVkUiLCJsb2dnZXIiLCJGT1JNQVRURVJfQ0xJIiwiRk9STUFUVEVSX0JST1dTRVIiLCJlcXVhbCIsIkpGYWN0b3J5VGltZSIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJnZXRVVENNaWxsaXNlY29uZHMiLCJ2YWx1ZU9mIiwiaG91cnMiLCJnZXRVVENIb3VycyIsIm1pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwic2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJKRmFjdG9yeVRpbWVUcmFjZSIsImVsYXBzZWQiLCJ0MSIsInQwIiwiJHRvRHVyYXRpb25TdHJpbmciLCJTdWJNYXAiLCIkcGhhc2VSZW1vdmUiLCJnZXRDb250ZXh0dWFsUmVtb3ZlUGhhc2UiLCJ0YXNrTmFtZSIsInRhc2siLCIkdGFzayIsIiRjaGFpbkF1dG9Db21wbGV0ZSIsInN0ciIsImlkIiwiaWRfYXV0b2luYyIsInByb3RvIiwiU1lNQk9MX1BSSVZBVEUiLCJjcmVhdGVTdWJNYXAiLCJ0YXNrcyIsInJlcXVlc3RzIiwiZXhlY3V0b3JPclZhbHVlIiwiJGlkX3Jlc29sdmUiLCJtZXRyaWNzIiwiJHRhc2tNZXRyaWNzIiwiJGRldl90aW1pbmciLCJlbmQiLCIkdGFza1JlbW92ZSIsIl9jYWxsZWQiLCJyZW1vdmVQaGFzZSIsIlBIQVNFUyIsImF1dG9Db21wbGV0ZSIsImFzc2lnblByaXZhdGUiLCJjdXN0b20iLCJrZXJuZWwiLCJldmVudE1hbmFnZXIiLCJsaXN0ZW5lcnMiLCJnZXREb21MaXN0ZW5lcnMiLCJvYnNlcnZlcnMiLCJnZXRPYnNlcnZlcnMiLCIkdHJpZ2dlciIsInN0YXRlUm91dGVzIiwiJHN0YXRlIiwiaCIsImJlZm9yZSIsIiRub3RpZnkiLCJhZnRlciIsIm5vdGlmeSIsInByZXZpb3VzVmFsIiwiUEhBU0UiLCJwaGFzZVF1ZXVlIiwicGhhc2VUYXNrIiwicGhhc2VNYXAiLCJpbnN0YWxsIiwidW5pbnN0YWxsIiwiYXNzaWduUHJpdmF0ZU1lbWJlciIsImluc3RhbGxlZCIsInNldEV2ZW50TmFtZXNwYWNlUmVtb3ZlUGhhc2UiLCJwaGFzZVJlc29sdmUiLCIkdGFza1JlbW92ZUFsbCIsIiR0YXNrUHJvbWlzZUFsbCIsIm9uSW5zdGFsbCIsIm9uRW5hYmxlIiwib25EaXNhYmxlIiwib25Vbmluc3RhbGwiLCIkb2ZmIiwicmVtb3ZhbCIsIkRJU0FCTEUiLCJVTklOU1RBTEwiLCJwIiwiSU5TVEFMTCIsIiRlbmFibGUiLCJFTkFCTEUiLCJwaGFzZUtpbGwiLCIkZGlzYWJsZSIsImNvbXBvbmVudCIsImpGYWN0b3J5Q29yZU9iamVjdCIsIlBIQVNFX1JFVkVSVCIsImN1clJlbW92ZVBoYXNlIiwibmV3UmVtb3ZlUGhhc2UiLCJkZWxldGVOYW1lc3BhY2UiLCIkZmV0Y2hSZW1vdmVBbGwiLCIkcmVnaXN0ZXJBc3luYyIsIiRmZXRjaFJlbW92ZSIsIiRmZXRjaCIsIl9kZWJ1Z19yZW1vdmVfY2FsbGVkIiwic3VicyIsIiR0aW1lb3V0UmVtb3ZlQWxsIiwiZGVsYXkiLCJ0aW1lb3V0cyIsIkZ1bmN0aW9uIiwidGltZXIiLCJzZXRUaW1lb3V0IiwiJHRpbWVvdXRSZW1vdmUiLCJjbGVhclRpbWVvdXQiLCIkaW50ZXJ2YWxSZW1vdmVBbGwiLCJ0aW1laW50cyIsInNldEludGVydmFsIiwiJHJlZ2lzdGVyU3luYyIsImNsZWFySW50ZXJ2YWwiLCIkaW50ZXJ2YWxSZW1vdmUiLCIkbXV0YXRpb25SZW1vdmVBbGwiLCJtdXRhdGlvbnMiLCJEb2N1bWVudCIsIm9ic2VydmVyIiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCIkbXV0YXRpb25SZW1vdmUiLCIkZG9tUmVtb3ZlQWxsIiwialF1ZXJ5QXJndW1lbnQiLCJhcHBlbmRUbyIsImRvbUlkIiwiZG9tIiwidGFnTmFtZSIsImh0bWwiLCJub2RlVHlwZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCIkZmV0Y2hUZXh0IiwicmVtb3ZlIiwiJGRvbVJlbW92ZSIsIiRjc3NSZW1vdmVBbGwiLCJzdHlsZUJvZHkiLCJjc3NJZCIsImNzcyIsImF0dHIiLCJleGlzdCIsImRhdGFzZXQiLCJ1c2FnZSIsInBhcnNlSW50IiwicmVsIiwiZGF0YS11c2FnZSIsIiRjc3NSZW1vdmUiLCIkdnVlUmVtb3ZlQWxsIiwidnVlIiwiJGVsIiwiJGRlc3Ryb3kiLCIkdnVlUmVtb3ZlIiwiJHJlYWN0UmVtb3ZlQWxsIiwiY29udGFpbmVyIiwiZWxlbWVudCIsInJlbmRlck90aGVyQXJndW1lbnRzIiwicmVhY3QiLCJSZWFjdERPTSIsInZpZXciLCJyZW5kZXIiLCJlbCIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCIkbG9nV2FybiIsIiRyZWFjdFJlbW92ZSIsImluaXQiXSwibWFwcGluZ3MiOiI7Ozs7YUFZYUEsRUFDVSxvQkFBWkMsU0FBMkJBLFFBQVFDLFVBQVlELFFBQVFDLFNBQVNDLEtDVjlEQyxFQUFpQixDQUMxQkMsVUFBMkJMLElETytDLEVDTjFFTSxjQUFlLENBQ1hDLEtBQU0sQ0FBQyxlQUFnQixZQUFhLFFBQVMsT0FBUSxPQUV6REMsZUFBZ0NSLEdBQ3pCLENBQ0NPLEtBQU0sQ0FBQyxnQkFBaUIsb0JBQ3hCRSxXQUFZLENBQ1JDLFFBQVNDLFFBQVFDLFdBQVdDLFFBQzVCQyxPQUFRLFNBQVNDLEdBQ2IsT0FBT0EsRUFBTUMsY0FLN0JDLFlBQ08sQ0FDQ0MscUJBQXNCLENBQ2xCTixXQUFZLENBQ1JPLEtBQU0sSUFBTVAsV0FDWlEsS0FBTSx5RkFFVkMsTUFBTyxDQUNIRixLQUFNLElBQU1FLE1BQ1pELEtBQU0sb0VBRVZFLFFBQVMsQ0FDTEgsS0FBTSxJQUFNRyxRQUNaRixLQUFNLHNEQUVWRywrQkFBZ0MsQ0FDNUJKLEtBQU0sS0FBTSxJQUFJSyxpQkFBa0JDLE9BQ2xDTCxLQUFNLHNIQUdWTSxpQkFBa0IsQ0FDZFAsS0FBTSxJQUFNTyxpQkFDWk4sS0FBTSxrRUM5QmJPLEVBQWlCLENBQzFCQyxJQUFLLEdBQ0xDLE9BQ0ksR0FBSUMsS0FBS0YsSUFBSyxDQUNWLElBQUlBLEVBQU1FLEtBQUtGLFdBQ1JFLEtBQUtGLElBQ1osSUFBSyxJQUFJRyxLQUFVSCxFQUNmRyxXQUVHbkIsV0FBV29CLG1CQUcxQkgsT0FBT0ksR0FDSEgsS0FBS0YsSUFBSU0sS0FBS0QsS0FtQk5OLEVBQWVRLFFBZi9CLFdBQ0lDLFFBQVFDLElBQUksMEVBQ1osSUFBSyxJQUFLQyxF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
