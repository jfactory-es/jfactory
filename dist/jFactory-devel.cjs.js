"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("lodash"),t=require("jquery");
/*!
 * jFactory, Copyright (c) 2019, StÃ©phane Plazis
 * https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt
 */
const s="undefined"!=typeof process&&process.versions&&process.versions.node,r={TraitLog:!s||!1,JFactoryError:{keys:["$.about.name","$dev_name","$name","name","id"]},JFactoryTrace:!s&&{keys:["$dev_traceLog","$dev_traceSource"],libOptions:{offline:Boolean(globalThis.chrome),filter:function(e){return e.lineNumber}}},jFactoryDev:{requireCompatibility:{globalThis:{test:()=>globalThis,info:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},fetch:{test:()=>fetch,info:"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"},Request:{test:()=>Request,info:"https://developer.mozilla.org/docs/Web/API/Request"},"AbortController, AbortSignal":{test:()=>(new AbortController).signal,info:"https://developer.mozilla.org/docs/Web/API/AbortController, https://developer.mozilla.org/docs/Web/API/AbortSignal"},MutationObserver:{test:()=>MutationObserver,info:"https://developer.mozilla.org/docs/Web/API/MutationObserver"}}}},i={seq:[],init(){if(this.seq){let e=this.seq;delete this.seq;for(let t of e)t();delete globalThis.jFactoryOverride}},onInit(e){this.seq.push(e)}};function a(){console.log("jFactory is running in development mode.\nPerformances will be affected.");for(let[e,t]of Object.entries(r.jFactoryDev.requireCompatibility)){let s;try{s=Boolean(t.test())}catch(e){}s||console.warn(`jFactory may require the support of "${e}", ${t.info}`)}}function n(){!r.TraitLog&&console.warn("jFactory: LOGS REMOVED")}i.onInit(a),i.onInit(n);const o=t,l=e.isNative,c=e.isString,h=e.isNumber,u=e.isPlainObject,p=e.defaultsDeep,d=e.lowerFirst,m=e.get,f=e.template,$=e.camelCase,g=()=>{},v=(e,t)=>Object.defineProperty(t,"name",{value:e});class b{constructor({label:e,stackTraceLimit:t,keys:s,libOptions:r}={}){this.label=e||"The stack has been printed in the console",this.stackTraceLimit=t||1/0,this.keys=s||["stackLog","stackSource"],this.libOptions=r||{}}captureTraceSource(e,t){let s;this.stackTraceLimit&&(s=Error.stackTraceLimit,Error.stackTraceLimit=this.stackTraceLimit),e||(e="captureTraceSource",t=!0);let r={source:new Error,omitAboveFunctionName:e,omitSelf:t};return this.stackTraceLimit&&(Error.stackTraceLimit=s),r}attachTrace(e,t){"object"!=typeof t&&(t=this.captureTraceSource(t||"attachTrace",!t));let s=t.source;this.toPrintableTrace(t).then(e=>s=e);let r=()=>console.log(s)||this.label;Object.defineProperty(e,this.keys[0],{enumerable:!1,configurable:!0,get:()=>r()}),Object.defineProperty(e,this.keys[1],{enumerable:!1,configurable:!0,get:()=>t})}toPrintableTrace(e){return Promise.resolve(e.source)}}class E extends b{constructor(e){super(e)}toPrintableTrace(e){return StackTrace.fromError(e.source,this.libOptions).then(t=>{if(e.omitAboveFunctionName){let s=t.findIndex(t=>t.functionName&&t.functionName.endsWith(e.omitAboveFunctionName));s>0&&(e.omitSelf&&s++,t=t.slice(s))}return t=t.filter(this.libOptions.filter),this.formatTraceFrames(t)})}formatTraceFrames(e){let t,s;return this.libOptions.offline&&window.chrome?(t="Error\n",s="\tat "):(t="",s=""),t+e.map(e=>s+e.toString()).join("\n")}}const y={};i.onInit((function(){let e=r.JFactoryTrace;if(e&&!1!==e.use){let t;t="function"==typeof e.use?e.use:"object"==typeof StackTrace?E:b,t===E&&console.warn("jFactory: Stack trace enabled; Performance will be affected"),y.tracer=new t(e)}else y.tracer={captureTraceSource:g,attachTrace:g}}));class A extends Error{constructor(e="unspecified error",t=null){t=Object.assign(Object.create(null),t),super(e=A.toPrintable(e,t)),this.$data=Object.assign(Object.create(null),t)}toString(){return this.message}*[Symbol.iterator](){yield this.message,yield this.$data}static getId(e){return e[(r.JFactoryError.keys||A.DEFAULT_KEYS).find(t=>{let s=m(e,t);return s||0===s})]}static toPrintableData(e){const t={};let s;for(let[r,i]of Object.entries(e)){switch(typeof i){case"function":i=i.name+"()";break;case"object":if(null===i){i="null";break}if(i instanceof Error){i=i.toString();break}if(void 0!==(s=A.getId(i)))i='"'+s+'"';else if(l(i.toString))try{s=JSON.stringify(i),i=s.length>A.JSON_MAX?s.substring(0,A.JSON_MAX)+"[...]":s}catch(e){i="[object "+i.constructor.name+"]"}else i=i.toString();break;case"string":i='"'+i+'"';break;default:i=String(i)}t[r]=i}return t}static toPrintable(e,t){const s=[];for(let r of e.split(";")){let e,i=A.RE_PLACEHOLDER;if(i.lastIndex=0,e=i.exec(r)){do{if(e[1]&&e[1]in t){s.push(r.trim());break}}while(null!==(e=i.exec(r)))}else s.push(r.trim())}return d(f(s.join("; "))(A.toPrintableData(t)))}}A.JSON_MAX=40,A.DEFAULT_KEYS=["name","id"],A.RE_PLACEHOLDER=/\${([^}]+)}/g;let S=new Proxy(A,{set:function(e,t,s){let{template:r}=s;if(e[t])throw new Error("already declared");return e[t]=class extends A{constructor(e,t){super(r,e),y.tracer.attachTrace(this.$data,t)}},e[t].prototype.name="Error jFactoryError."+t,!0}});function R(e,t){if(!new.target)return new R(e,t);this.label=e,this.value=t}S.INVALID_VALUE={template:"invalid value for ${target}; Reason: ${reason}; Given: ${given}"},S.INVALID_CALL={template:"invalid call ${target}; Reason: ${reason}; Owner: ${owner}"},S.PROMISE_EXPIRED={template:"expired promise ${target}; Reason: ${reason}"},S.REQUEST_ERROR={template:"error requesting ${target}; Reason: ${reason}; Owner: ${owner}"},S.KEY_DUPLICATED={template:"duplicated key for ${target}; Given: ${given}"},S.KEY_MISSING={template:"missing key for ${target}; Given: ${given}"};const _=function(e,t,s){throw new S.INVALID_VALUE({target:e,reason:s,given:t})},L={notUndefined:(e,t)=>(void 0===t&&_(e,t,"cannot be undefined"),!0),notEmptyString:(e,t)=>(""===t&&_(e,t,"cannot be empty string"),!0),notFalsy:(e,t)=>(t||_(e,t,'cannot be a falsy value (undefined, null, NaN, 0, "")'),!0),validSpaces:(e,t)=>(t.replace&&t.replace(/\s+/g," ").trim()===t||_(e,t,"invalid space delimiters"),!0),matchReg:(e,t,s)=>(s.test(t)||_(e,t,'string "'+t+'" must match '+s),!0),type(e,t,...s){let r,i=!1;for(let a of s){null===a?r="Null":"name"in a&&(r=a.name);let s=L["type"+r];if(s)try{i=s(e,t)}catch(e){}else i=t instanceof a;if(i)break}return i||_(e,t,"must be an instance of ["+s.map(e=>e.name).join(", ")+"]"),!0},typeNull:(e,t)=>(null!==t&&_(e,t,"must be null"),!0),typeBoolean:(e,t)=>(!0!==t&&!1!==t&&_(e,t,"must be a boolean"),!0),typeString:(e,t)=>(c(t)||_(e,t,"must be a string"),!0),typeNumber:(e,t)=>(h(t)||_(e,t,"must be a number"),!0),typeFunction:(e,t)=>("function"!=typeof t&&_(e,t,"must be a function"),!0),typePlainObject:(e,t)=>(u(t)||_(e,t,"must be a plain object"),!0),equal(e,t,...s){let r=!1;for(let e of s)if(r=t===e)break;return r||_(e,t,"must be one of ["+s+"]"),!0},equalIn:(e,t,s)=>(Array.isArray(s)||(s=Object.values(s)),s.includes(t)||_(e,t,"must be one from ["+s.join(", ")+"]"),!0),properties(e,t,s){for(let r of Object.getOwnPropertyNames(t))R(e+', property name "'+r+'"',r).equalIn(s);return!0},writable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable||_(e,t,"must be writable"),!0),notWritable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable&&_(e,t,"must not be writable"),!0),enumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)||_(e,t,"must be enumerable"),!0),notEnumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)&&_(e,t,"must not be enumerable"),!0),configurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable||_(e,t,"must be configurable"),!0),notConfigurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable&&_(e,t,"must not be configurable"),!0),reservedProperty:(e,t,s)=>(s in t&&_(e,t,"is a reserved property"),!0)};i.onInit((function(){Object.assign(R,L);for(const e of Object.getOwnPropertyNames(L))R.prototype[e]=function(...t){return R[e](this.label,this.value,...t),this}}));class T{constructor(e,t,s={}){this.callerInstance=e,this.callerConstructor=t,this.options=s}use(e,...t){R("JFactoryTraits(trait)",e).typeFunction();let{callerInstance:s,callerConstructor:i}=this,a=T.CACHE.get(s);if(a){if(a.has(e))return r.TraitLog&&console.warn(`${e.name} already called on`,s),this;a.add(e)}else T.CACHE.set(s,new WeakSet([e]));!i.JFactoryTrait&&(i.JFactoryTrait=new WeakSet),i.JFactoryTrait.has(e)||(i.JFactoryTrait.add(e),this.export(e.prototype,i.prototype),this.export(e,i,!0));let n=new e(s,...t);return n.trait_constructor&&n.trait_constructor.apply(s,t),this}export(e,t,s){let r=Object.getOwnPropertyDescriptors(e);for(let i of Object.keys(r)){let a=T.getPrefix(i);if(T.getTarget(i,t,a)){let a=r[i],n=(this.options.parser||T.defaultParser)(i,a,e,t,s);n&&(({propertyName:i,propertyDescriptor:a}=n),Object.defineProperty(t,i,a))}}}static defaultParser(e,t,s,i,a){let n=t.value;return a?null:e in i?(r.TraitLog&&console.warn(`${i.constructor.name}> skipping export of existing property "${e}"`,n),null):"object"==typeof n?(r.TraitLog&&console.warn(`${i.constructor.name}> skipping export of shared object "${e}"`,n),null):{propertyName:e,propertyDescriptor:t}}static getPrefix(e){let t=e.split("_");return t.length>1?t[0]:null}static getTarget(e,t,s){return T.EXCLUDES.includes(e)||"trait"===s?null:t}}T.CACHE=new WeakMap,T.EXCLUDES=["constructor","prototype","length","size"];class O{constructor(){this.handlers=Object.create(null)}*[Symbol.iterator](e=[]){e.length||(e=Object.keys(this.handlers)),e.length||(e=["default"]);for(let t of e)t in this.handlers&&(yield*this.handlers[t])}first(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).unshift(t),this}last(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).push(t),this}compose(...e){let t=this,s=function(){let s={canceled:!1,parameters:Array.from(arguments),result:void 0},r=t[Symbol.iterator](e),i=r.next();return O.composite_iterator(this,s,i,r)};return s.composer=t,s}static composite_iterator(e,t,s,r){let i,a;for(;!t.canceled&&!s.done;)if(i=s.value,a=e?i.call(e,t,...t.parameters):i(t,...t.parameters),s=r.next(),a instanceof Promise){if(!s.done||a.constructor===Promise)return a.then(v([i.name,"compositeAsyncHandler"].filter(Boolean).join(" "),(function(i){return t.result=i,O.composite_iterator(e,t,s,r)})));t.result=a}else t.result=a;return t.result}}class P{constructor(e){this.originalHandler=e,this.expiredCalls=0,this.composer=new O;let t,s=this.composer.compose("conditions"),r=this;this.isExpired=e=>t||s.call(e)||!1,this.setExpired=e=>t=e?e instanceof Error?e:new S.INVALID_CALL({target:this.originalHandler,reason:"manually expired"}):Boolean(this.expiredCalls=0),this.addExpireCondition=function(e){this.composer.last("conditions",(function(t){let s=function(s){return R("JFactoryFunctionExpirable.addExpireCondition(), result",s).type(Boolean,Error),r.setExpired(!!s&&((t.canceled=!0)&&(s instanceof Error?s:new S.INVALID_CALL({target:r.originalHandler,reason:"conditionally expired",condition:e}))))},i=e.apply(this,t.parameters);return i instanceof Promise?i.then(s):s(i)}))}}compose(){let e=this,t=function(){let t=e.isExpired(this),s=e.constructor.call.bind(void 0,e,this,arguments);return t instanceof Promise?t.then(s):s(t)};return Object.assign(t,{expirable:this,isExpired:e=>this.isExpired(e),setExpired:e=>this.setExpired(e),addExpireCondition:e=>(this.addExpireCondition(e),t)})}static call(e,t,s,r){return r?e.onExpired(r):e.onNotExpired(t,s)}onExpired(e){return this.expiredCalls<P.MaxWarningExpiration&&(this.expiredCalls++,r.TraitLog&&console.warn(...new S.INVALID_CALL({...e.$data,reason:e.$data.reason+"; expiredCalls="+this.expiredCalls+(this.expiredCalls===P.MaxWarningExpiration?"; Max Warning Exceeded":"")}))),e}onNotExpired(e,t){return this.originalHandler.apply(e,t)}}function w(e){return new I(e).compose()}P.MaxWarningExpiration=10;class I{constructor(e){this.originalHandler=e,this.composer=new O,this.composer.first("original",v([e.name,"condition"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("conditions","original");return Object.assign(e,{conditional:this,addCondition:t=>(this.addCondition(t),e)})}addCondition(e){this.composer.last("conditions",(function(t){let s=function(e){R("JFactoryFunctionConditional.addCondition(), result",e).typeBoolean(),!e&&(t.canceled=!0)},r=e.apply(this,t.parameters);return r instanceof Promise?r.then(s):s(r)}))}}function N(e){return new j(e).compose()}class j{constructor(e){this.originalHandler=e,this.composer=new O,this.composer.first("original",v([e.name,"wrapped"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("before","original","after");return Object.assign(e,{wrappable:this,beforeAll:t=>(this.beforeAll(t),e),justBefore:t=>(this.justBefore(t),e),justAfter:t=>(this.justAfter(t),e),afterAll:t=>(this.afterAll(t),e)})}beforeAll(e){this.composer.first("before",e)}justBefore(e){this.composer.last("before",e)}justAfter(e){this.composer.first("after",e)}afterAll(e){this.composer.last("after",e)}}function F(e,t){return new T(e,t,{parser(e,t){let s=T.defaultParser(...arguments);if(s){({propertyName:e,propertyDescriptor:t}=s);let r=t.value;if("function"==typeof r)switch(r.name){case"$install":case"$uninstall":case"$enable":case"$disable":case"$state":break;default:t.value=N(r).beforeAll((function(){if(!this.$.states.enabled&&"PHASE_NONE"===this.$.service.phase){let e=new S.INVALID_CALL({owner:this,target:r,reason:"component disabled"});throw this.$logErr(...e),e}}))}return{propertyName:e,propertyDescriptor:t}}}})}class C{constructor(e){C.inject(this,C,e)}static inject(e,t,s){F(e,t).use(k.TraitCore).use(k.TraitAbout,{name:s}).use(k.TraitLog).use(k.TraitEvents).use(k.TraitState).use(k.TraitService).use(k.TraitTask)}}class M extends C{constructor(e){super(e),M.inject(this,M)}static inject(e,t){F(e,t).use(k.TraitFetch).use(k.TraitDOM).use(k.TraitCSS).use(k.TraitMutation).use(k.TraitTimeout).use(k.TraitInterval).use(k.TraitLibVue).use(k.TraitLibReact)}}const k=(e,t)=>Object.assign(new M(e),t);class D{static createDescriptors(e=D.DESCRIPTORS_PROTOTYPE){let t=D.create(e,!0,!0),s=Object.create(null);return s.NONE=t(),s.WRITABLE=t({writable:!0}),s.ENUMERABLE=t({enumerable:!0}),s.CONFIGURABLE=t({configurable:!0}),s.CONFIGURABLE_WRITABLE=s.WRITABLE_CONFIGURABLE=t({writable:!0,configurable:!0}),s.CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE=t({enumerable:!0,configurable:!0}),s.ENUMERABLE_WRITABLE=s.WRITABLE_ENUMERABLE=t({writable:!0,enumerable:!0}),s.WRITABLE_ENUMERABLE_CONFIGURABLE=s.WRITABLE_CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE_WRITABLE=s.ENUMERABLE_WRITABLE_CONFIGURABLE=s.CONFIGURABLE_WRITABLE_ENUMERABLE=s.CONFIGURABLE_ENUMERABLE_WRITABLE=t({writable:!0,enumerable:!0,configurable:!0}),s.READONLY=t({writable:!1,enumerable:!1,configurable:!1}),s}static assign(e,t,s,r){let i={};switch(typeof t){case"string":case"symbol":if(!r)throw new Error("missing descriptor argument; use Object.assign instead");(r=Object.create(r)).value=s,Object.defineProperty(e,t,r);break;case"object":if([s,r]=[t,s],!r)throw new Error("missing descriptor argument; use Object.assign instead");for(let e of Object.getOwnPropertyNames(s))i[e]=Object.create(r),i[e].value=s[e];for(let e of Object.getOwnPropertySymbols(s))i[e]=Object.create(r),i[e].value=s[e];Object.defineProperties(e,i);break;default:throw new Error("invalid property argument")}return e}static create(e,t=!1,s=!1){return function(r){return t?Object.assign(s?Object.create(null):{},e,r):Object.assign(Object.create(s?Object.assign(Object.create(null),e):e),r)}}static disinherit(e){return Object.assign(Object.create(null),e)}}D.DESCRIPTORS_PROTOTYPE={writable:!1,enumerable:!1,configurable:!1},i.onInit((function(){D.descriptors=D.createDescriptors()}));const B=()=>++B.uid;B.uid=0;class U{constructor(e,t={}){let s,r;R("JFactoryAbout(owner)",e).type(Object),R("JFactoryAbout(about)",t).typePlainObject().reservedProperty("uid").reservedProperty("fingerprint"),"name"in t&&R("JFactoryAbout(about.name)",t.name).typeString().notEmptyString();let i=B();t.name?(s=t.name,delete t.name,r="jFactory_"+$(s.toLowerCase())+"_"+i):(delete t.name,s=`[${e.constructor.name}#${i}]`,r="jFactory_"+e.constructor.name+"_"+i),D.assign(this,{uid:i,name:s,fingerprint:r},D.descriptors.ENUMERABLE),Object.assign(this,t),R("JFactoryAbout.name",this.name).matchReg(/^[\w[\]#]+$/),R("JFactoryAbout.fingerprint",this.fingerprint).matchReg(/^[\w]+$/)}}const H=()=>++H.uid;H.uid=0;class J extends Promise{constructor({name:e,config:t,traceSource:s},r){1===arguments.length&&([e,t,r]=[null,null,arguments[0]]);const i=H();let a,n;t={...J.DEFAULT_CONFIG,...t},R("name",e=e||"unnamed").type(String,Number).matchReg(/^[^. ]+$/),R("config",t).typePlainObject(),R("executor",r).typeFunction(),super((e,t)=>{a=e,n=t});const o=new Y(this,i,e,t);Object.defineProperties(this,{$chain:{enumerable:!0,writable:!0,value:o},$type:{writable:!0,value:"promise"},$value:{writable:!0,value:void 0},$isSettled:{writable:!0,value:!1},$isRejected:{writable:!0,value:null},$isFulfilled:{writable:!0,value:null},$isExpired:{writable:!0,value:!1}}),Object.defineProperties(this,{$dev_name:{configurable:!0,value:e+"["+i+":0]"},$dev_path:{writable:!0,value:new V(this)},$dev_position:{writable:!0,value:0}}),l(r)||Object.defineProperties(this,{$dev_source:{value:r}}),y.tracer.attachTrace(this,s);const c=()=>{if(!this.$chain.isPending)try{this.$chainComplete("config.chainAutoComplete = true")}catch(e){console.error(e)}},h=e=>{if(!this.$isSettled){if(e===this)return void u(new TypeError("Chaining cycle detected for promise "+this.$dev_name));let t;if(null!==e&&("object"==typeof e||"function"==typeof x))try{t=e.then}catch(e){return void u(e)}if("function"==typeof t){let s=!1,r=function(e){s||(s=!0,h(e))},i=function(e){s||(s=!0,u(e))};try{t.call(e,r,i)}catch(e){s||u(e)}}else this.$isRejected=!1,this.$isFulfilled=!0,this.$isExpired&&(e=this.$chain.errorExpired),a(e),p(e)}},u=e=>{this.$isSettled||(this.$isRejected=!0,this.$isFulfilled=!1,n(e),p(e))},p=e=>{this.$value=e,this.$isSettled=!0,this.$chain.chainMap.set(this,!0),this.$chain.chainConfig.chainAutoComplete&&(1!==this.$chain.chainMap.size||this.$isExpired?c():this.then(c))};let d=t.chainAutoComplete;Object.defineProperty(t,"chainAutoComplete",{get:()=>d,set:e=>{d!==e&&(d=e,e&&c())}}),o.chainMap.set(this,!1),Object.defineProperties(this,{__resolve__:{value:h},__reject__:{value:u}});try{r(h,u)}catch(e){u(e)}}then(e,t,s){let r,i,a,n=l(e)&&!e.name.startsWith("bound ");e&&"function"==typeof e&&(r=function(s){return"await"===o&&!0===a.$isExpired&&a.$chain.errorExpired===s?t(s):a.$isSettled?void 0:e(s)}),t&&"function"==typeof t&&(i=function(e){if(!a.$isSettled)return t(e)});let o=s||(n?"await":void 0===e?"catch":"then");a=Object.assign(super.then(r,i),this),H.uid--,a.$type=o;{a.$dev_position=this.$chain.chainMap.size;let s="";e&&e.name&&(s+=e.name),t&&t.name&&(s+=","+t.name),Object.defineProperties(a,{$dev_name:{value:this.$chain.chainName+"["+this.$chain.chainId+":"+this.$dev_position+"]."+a.$type+(s?"("+s+")":"")+"["+a.$chain.chainId+":"+a.$dev_position+"]"},$dev_path:{value:new V(this.$dev_path,a)},$dev_onFulfilled:{value:e},$dev_onRejected:{value:t}})}return a.$chain.chainMap.set(a,!1),this.$isExpired&&J.forceExpire(a,this.$chain.errorExpired),a}$catchExpired(e){return this.then(t=>this.$chain.chainRoot.$isExpired?e(t):t,void 0,"$catchExpired")}static resolve(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),t instanceof this&&1===arguments.length?t:new this(e,(function(e){e(t)}))}static reject(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),new this(e,(function(e,s){s(t)}))}$toPromise(){return Promise.resolve(this)}$chainAbort(e="$chainAbort()"){return this.$chain.complete(e),this}$chainComplete(e="$chainComplete()"){return this.$chain.complete(e),this}$chainAutoComplete(){return this.$chain.chainConfig.chainAutoComplete=!0,this}static forceExpire(e,t){e.$isExpired=!0,e.$isSettled||"await"!==e.$type&&"$catchExpired"!==e.$type&&e.__resolve__(t)}}J.DEFAULT_CONFIG={chainAutoComplete:!1};class Y{constructor(e,t,s,r){Object.defineProperties(this,{chainConfig:{value:r},chainRoot:{value:e},chainId:{value:t},chainName:{value:s},chainMap:{value:new Map},isCompleted:{value:!1,configurable:!0},data:{value:{}},__deferred__:{value:o.Deferred()}})}get isPending(){return Array.from(this.chainMap.values()).includes(!1)}then(e){return this.__deferred__.done(e),this}complete(e="chain.complete()"){let t=this.chainRoot;if(!t.$isExpired){let s=t.$chain.errorExpired=new S.PROMISE_EXPIRED({target:t,reason:e}),r=this.chainMap;for(let e of r.keys())J.forceExpire(e,s);Object.defineProperty(this,"isCompleted",{value:!0}),this.__deferred__.resolve()}return this}}class V extends Array{constructor(){super();for(let e of arguments)Array.isArray(e)?this.push(...e):this.push(e)}get printable(){return this.map((e,t)=>0===t?e.$dev_name:e.$dev_name.split(".")[1]).join(".")}toString(){return this.printable}}class q extends Promise{constructor(e){let t={$isSettled:!1,$isRejected:null,$value:void 0};super((s,r)=>{let i=!1,a=e=>{e instanceof Promise?q.resolve(e).then(a,n):i||(i=!0,t.$isSettled=!0,t.$isRejected=!1,t.$value=e,s(e))},n=e=>{i||(i=!0,t.$isSettled=!0,t.$isRejected=!0,t.$value=e,r(e))};try{e(a,n)}catch(e){n(e)}}),Object.assign(this,t),t=this}then(e,t){if(this.$isSettled){let s=this.$value;try{if(this.$isRejected){if(super.then(void 0,()=>null),!t||"function"!=typeof t)return q.reject(s);s=t(s)}else e&&"function"==typeof e&&(s=e(s))}catch(e){return q.reject(e)}return q.resolve(s)}return super.then(e,t)}static resolve(e){return e instanceof q?e:new q(e instanceof Promise?e.then.bind(e):t=>t(e))}}class K{constructor(){Object.defineProperties(this,{registry:{value:o(Object.create(null))},handlers:{value:new WeakMap},onListenerUpdate:{value:null,writable:!0},onObserverUpdate:{value:null,writable:!0}})}on({events:e,handler:t,target:s,selector:r}){K.validateSelector(e),R("JFactoryEvents.on({handler})",t).typeFunction(),s&&R("JFactoryEvents.on({target})",s).type(String,o,HTMLElement),r&&R("JFactoryEvents.on({selector})",s).typeString();let i=this.handlers.get(t);s?(i||this.handlers.set(t,!0),r?o(s).on(e,r,t):o(s).on(e,t),this.onListenerUpdate&&this.onListenerUpdate(arguments)):(i||(this.handlers.set(t,i=function(e,{data:s,stack:r}){r.push(()=>t(e,s))}),i.originalHandler=t),this.registry.on(e,i),this.onObserverUpdate&&this.onObserverUpdate(arguments))}off({events:e,handler:t,target:s,selector:r}){if(void 0!==e&&(K.validateSelector(e),t&&R("JFactoryEvents.off({handler})",t).typeFunction(),s&&R("JFactoryEvents.off({target})",s).type(String,o,HTMLElement),r&&R("JFactoryEvents.off({selector})",s).typeString()),s)r?o(s).off(e,r,t):o(s).off(e,t);else{if(o("*").off(e,t),t&&!(t=this.handlers.get(t)))throw new S.INVALID_VALUE({target:"handler",reason:"not registered",given:t});this.registry.off(e,t)}this.onObserverUpdate&&this.onObserverUpdate(arguments),this.onListenerUpdate&&this.onListenerUpdate(arguments)}triggerParallel({events:e,data:t,target:s}){K.validateSelector(e),s&&R("JFactoryEvents.triggerParallel({target})",s).type(String,o,HTMLElement);const r=[],i=[];if(e=e.split(" "),s)for(let i of e)o(s).trigger(i,{data:t,stack:r});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:r});for(let e of r){let t=e();t instanceof Promise&&!t.$isSettled&&i.push(t)}return i.length?Promise.all(i):q.resolve()}triggerSeries({events:e,data:t,target:s}){return K.validateSelector(e),s&&R("JFactoryEvents.triggerSeries({target})",s).type(String,o,HTMLElement),new q(async r=>{const i=[];if(e=e.split(" "),s)for(let r of e)o(s).trigger(r,{data:t,stack:i});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:i});for(let e of i){let t=e();t instanceof Promise&&!t.$isSettled&&await t}r()})}}class W extends K{constructor(e){super(),Object.defineProperties(this,{parent:{value:e},affiliateRules:{value:(new O).compose()}}),this.affiliateAddRule(W.rule_namespace)}affiliate(e="",t="",s){let r=new G(e);for(let e of r.events)this.affiliateRules(e,t,s);return r.toString()}affiliateAddRule(e){this.affiliateRules.composer.last(e)}static rule_namespace(e,t,s){s=s.split(".");for(let e of s)e&&t.addNamespace(e)}on(e,t,s,r,i){switch(arguments.length){case 2:[r,t]=[t];break;case 3:"function"==typeof arguments[2]?[r,s]=[s]:[r,i,t,s]=[t,s];break;case 4:"object"==typeof arguments[3]&&([i,r,s]=[r,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,i),void 0===t?super.on({events:e,handler:r}):super.on({events:e,target:t,selector:s,handler:r})}off(e,t,s,r,i){const a=arguments.length;switch(a){case 1:"object"==typeof arguments[0]&&([i,e]=[e]);break;case 2:"function"==typeof arguments[1]?[r,t]=[t]:u(arguments[1])&&([i,t]=[t]);break;case 3:"function"==typeof arguments[2]?[r,s]=[s]:"function"==typeof arguments[1]&&([r,i,t,s]=[t,s]);break;case 4:"object"==typeof arguments[3]&&([i,r,s]=[r,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,i),a<2?super.off({events:e}):t?super.off({events:e,target:t,selector:s,handler:r}):super.off({events:e,handler:r})}trigger(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerSeries({events:e,target:t,data:s}):super.triggerSeries({events:e,data:s})}triggerParallel(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerParallel({events:e,target:t,data:s}):super.triggerParallel({events:e,data:s})}getDomListeners(e){let t=new Map;for(let s of o("*")){let r=o._data(s,"events");if(r)for(let i of Object.values(r))for(let r of i){let i;if(new z(r.namespace).hasNamespace(e)){(i=t.get(s))||t.set(s,i={}),(i[r.type]||(i[r.type]=[])).push({selector:r.selector||null,handler:r.handler,namespace:r.namespace})}}}return t}getObservers(){let e=new Map,t=this.registry._events;if(!t){let e=Object.values(this.registry)[0],s=Object.getOwnPropertyNames(e).find(e=>0===e.indexOf("jQuery"));e&&s&&(t=this.registry._events=e[s].events)}if(t)for(let[s,r]of Object.entries(t)){let t=e.get(s);t||(t=[],e.set(s,t));for(let e of r)t.push({handler:e.handler.originalHandler,namespace:e.namespace})}return e}}class G{constructor(e){K.validateSelector(e),this.events=e.split(" ").map(e=>new z(e))}toString(){let e=[];for(let t of this.events)e.push(t.toString());return e.join(" ")}}class z{constructor(e){let[t,...s]=e.split(".");this.event=t,this.namespace=new Set(s)}hasNamespace(e){Array.isArray(e)||(e=[e]);for(let t of e){if(!/^[\w:]+$/.test(t))throw new S.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:t});if(t&&this.namespace.has(t))return t}return!1}addNamespace(e){if(!/^[\w:]+$/.test(e))throw new S.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.add(e)}deleteNamespace(e){if(!/^[\w:]+$/.test(e))throw new S.INVALID_VALUE({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.delete(e)}toString(){return this.namespace.size?this.event+"."+Array.from(this.namespace.values()).join("."):this.event}}K.validateSelector=function(e){R("JFactoryEvents.validateSelector(selector)",e).notUndefined().validSpaces();for(let[t,s]of e.split(" ").map(e=>e.split(".")).map(e=>[e.shift(),e.join(".")]))t&&K.validateEvent(t),s&&K.validateNamespace(s);return!0},K.validateEvent=function(e){if(R("JFactoryEvents.validateEvent(event)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:]+$/.test(e))throw new S.INVALID_VALUE({target:"JFactoryEvents.validateEvent(event)",reason:"must be alphanumeric, underscore and colon characters",given:e});return!0},K.validateNamespace=function(e){if(R("JFactoryEvents.validateNamespace(namespace)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:.]+$/.test(e))throw new S.INVALID_VALUE({target:"JFactoryEvents.validateNamespace(namespace)",reason:"must be alphanumeric, underscore, dot and colon characters",given:e});return!0};class Q extends J{constructor(e,t,s={}){if("function"==typeof e)super(e);else{"string"==typeof e&&([e,t,s]=[{},arguments[0],arguments[1]]);let r=new Request(t,s);super(e,(i,a)=>{let n=fetch(r).then(e=>{if(this.$chain.fetchResponse=e,!e.ok)throw Error(e.status+":"+e.statusText);return e});s.$typeText?n=n.then(e=>e.text()).then(e=>this.$chain.responseText=e):s.$typeJSON&&(n=n.then(e=>e.json()).then(e=>this.$chain.responseJSON=e)),n=n.catch(i=>{throw new S.REQUEST_ERROR({reason:i.message||i,target:this.$chain.fetchResponse&&this.$chain.fetchResponse.url||t,owner:this,fetchOptions:s,fetchRequest:r,fetchResponse:this.$chain.fetchResponse||null},e.traceSource)}),n.then(i,a)}),this.$chain.fetchOptions=s,this.$chain.fetchRequest=r;let i=s.abortController||new AbortController;s.signal=i.signal,this.$chain.fetchAbortController=i}}$chainAbort(e="request aborted"){return super.$chainAbort(e),this.$chain.fetchAbortController.abort(),this}}const X=Symbol();class Z{constructor(e){e&&R("JFactoryLogger(options)",e).properties(Object.getOwnPropertyNames(Z.DEFAULT_CONFIG)),p(this,e,Z.DEFAULT_CONFIG),this.condition=w(Z.DEFAULT_CONDITION),this.installAccessor("log"),this.installAccessor("warn"),this.installAccessor("error")}get enabled(){return this[X]&&(!this.parentLogger||this.parentLogger.enabled)}set enabled(e){e?this.enable():this.disable()}enable(){!0!==this[X]&&(this[X]=!0)}disable(){!1!==this[X]&&(this[X]=!1)}disallow(e,t=this.label){this.filters[t]||(this.filters[t]={}),this.filters[t][e]=!0}allow(e,t=this.label){this.filters[t]&&delete this.filters[t][e]}installAccessor(e,t=e,s=this){R("JFactoryLogger(nativeName)",e).equalIn(["log","warn","error"]),Object.defineProperties(s,{[t]:{get:this.accessor.bind(this,e),configurable:!0}})}accessor(e){return this[X]&&this.condition(e)&&this.formatter[e](this)||g}createSubLogger(e){let t=new Z({enabled:this.enabled,label:this.label+"."+e,styles_css:this.styles_css,styles_cli:this.styles_cli,console:this.console,formatter:this.formatter});return t.parentLogger=this,t.condition.addCondition(()=>this.enabled),t.filters=this.filters,t}}Z.FORMATTER_NATIVE={log:e=>e.console.log.bind(e.console,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.label+">"),error:e=>e.console.error.bind(e.console,e.label+">")},Z.FORMATTER_CLI={log:e=>e.console.log.bind(e.console,e.styles_cli.label,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.styles_cli.label,e.label+">"),error:e=>e.console.error.bind(e.console,e.styles_cli.label,e.label+">")},Z.FORMATTER_BROWSER={log:e=>e.console.log.bind(e.console,"%c"+e.label+">",e.styles_css.label),warn:e=>e.console.warn.bind(e.console,"%c"+e.label+">",e.styles_css.label),error:e=>e.console.error.bind(e.console,"%c"+e.label+">",e.styles_css.label)},Z.DEFAULT_CONDITION=function(e){return R("JFactoryLogger.condition(nativeName)",e).equalIn(["log","warn","error"]),R("JFactoryLogger.enabled",this.enabled).equal(!0),!(this.filters[this.label]&&this.filters[this.label][e])},Z.DEFAULT_CONFIG={label:"",enabled:!0,parentLogger:null,formatter:s?Z.FORMATTER_CLI:Z.FORMATTER_BROWSER,console:console,filters:{},styles_cli:{label:"[1;30m%s[0m"},styles_css:{label:"color: gray"}};class ee extends Date{toString(){return this.toLocaleTimeString()+", "+this.getUTCMilliseconds()+"ms ("+this.valueOf()+")"}$toDurationString(){let e=this.getUTCHours(),t=this.getUTCMinutes(),s=this.getUTCSeconds(),r=this.getUTCMilliseconds(),i=[];return e&&i.push(e+"h"),t&&i.push(t+"min"),s&&i.push(s+"s"),i.push(r+"ms"),1===i.length?i[0]:i.join(",")+" ("+this.valueOf()+")"}}class te extends Date{constructor(){super(),this.elapsed=null,Object.defineProperties(this,{t1:{value:null,writable:!0},t0:{value:new ee}})}end(){this.t1=new ee,this.elapsed=new ee(this.t1-this.t0).$toDurationString()}toString(){return this.elapsed}}class se{trait_constructor(){const e=this;class t extends Map{$registerSync(t,s){let r=Object.defineProperties({},{$value:{value:s},$phaseRemove:{value:le.getContextualRemovePhase(e)}});return this.set(t,r),r}$registerAsync(t,s,r){let i=e.$task(s,r.$chain);return r.$chain.then(()=>{i.$chainComplete("task completed")}),i.$chain.then(()=>{r.$chain.isCompleted||r.$chainAbort("aborted by task")}),Object.defineProperty(r,"$phaseRemove",{value:i.$phaseRemove}),this.set(t,r),i}}const s=Object.assign(Object.create(null),{[se.SYMBOL_PRIVATE]:Object.create(null),assign:function(e,t,s){D.assign(this,e,t,s)},createSubMap:()=>new t});Object.defineProperty(this,"$",{value:Object.create(s)}),this.$.assign({tasks:null,requests:null},D.descriptors.ENUMERABLE_WRITABLE)}}se.SYMBOL_PRIVATE=Symbol("_");class re{trait_constructor(e){D.assign(this.$,"about",new U(this,e),D.descriptors.READONLY)}}class ie{trait_constructor(){let e=Object.assign({label:this.$.about.name},r.TraitLog||{enabled:!1}),t=new Z(e);Object.defineProperty(this.$,"logger",{value:t}),t.installAccessor("log","$log",this),t.installAccessor("warn","$logWarn",this),t.installAccessor("error","$logErr",this)}}class ae{trait_constructor(){this.$.assign("tasks",new Map,D.descriptors.ENUMERABLE)}$task(e,t){if(R("$task(id)",e).typeString(),R("$task(executorOrValue)",t).notUndefined(),this.$.tasks.has(e))throw new S.KEY_DUPLICATED({target:"$task(id)",given:e});let s,r;return s="function"==typeof t?new J({name:e,owner:this},t):J.resolve({name:e,owner:this},t),s.$phaseRemove=le.getContextualRemovePhase(this),r=new te,s.$taskMetrics={$dev_timing:r},s.$chain.then(()=>{r.end(),this.$.tasks.get(e)&&this.$taskRemove(e)}),this.$.tasks.set(e,s),s}$taskRemove(e,t){if(R("$taskRemove(id)",e).typeString(),t&&R("$taskRemove(reason)",t).typeString(),!this.$.tasks.has(e))throw new S.KEY_MISSING({target:"$taskRemove(id)",given:e});this.$.tasks.get(e)._called,this.$.tasks.get(e)._called=!0;let s=this.$.tasks.get(e);this.$.tasks.delete(e),s.$chainAbort(t||"$taskRemove()")}$taskRemoveAll(e){R("$taskRemoveAll(removePhase)",e).equalIn(le.PHASES);let t=this.$.tasks;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$taskRemove(s,"$taskRemoveAll("+e+")")}$taskPromiseAll(e=!1){let t=[];if(this.$.tasks.size)for(let s of this.$.tasks.values())e&&(s.$chain.chainConfig.chainAutoComplete=!0),s.$chain.isPending&&t.push(s.$chain);return t.length?Promise.all(t):q.resolve()}}class ne{trait_constructor(){ce(this,"events",{custom:new W(this),kernel:new W(this)},D.descriptors.NONE);let e=this.$[se.SYMBOL_PRIVATE].events.custom;Object.defineProperties(this.$,{listeners:{get:e.getDomListeners.bind(e,this.$.about.fingerprint),enumerable:!0},observers:{get:e.getObservers.bind(e),enumerable:!0}})}$on(){this.$[se.SYMBOL_PRIVATE].events.custom.on(...arguments)}$off(){this.$[se.SYMBOL_PRIVATE].events.custom.off(...arguments)}$trigger(){return this.$[se.SYMBOL_PRIVATE].events.custom.trigger(...arguments)}$triggerParallel(){return this.$[se.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)}$notify(e,t){return this.$trigger(e,t).then(()=>this.$[se.SYMBOL_PRIVATE].events.kernel.trigger(e,t))}}class oe{trait_constructor(){const e=Object.create(null),t=Object.create(null),s=this.$[se.SYMBOL_PRIVATE].events.kernel;ce(this,{states:e,stateRoutes:t},D.descriptors.READONLY),D.assign(this.$,"states",new Proxy(e,{set:(e,t,s)=>this.$state(t,s),get:(t,s)=>e[s]}),D.descriptors.READONLY),s.on("beforeStateChange",(e,s)=>{let r;if(t[s.key]&&t[s.key].before&&(r=t[s.key].before(s.val)))return this.$notify(r)}),s.on("afterStateChange",(e,s)=>{let r;if(t[s.key]&&t[s.key].after&&(r=t[s.key].after(s.val)))return this.$notify(r)})}$state(e,t,s=!0){return R("$state(key)",e).typeString(),R("$state(notify)",s).typeBoolean(),new q(async r=>{let i,a=this.$[se.SYMBOL_PRIVATE].states,n=a[e];e in a&&n===t||(i=s&&this.$notify("beforeStateChange",{key:e,val:t,previousVal:n}),i&&R("beforeStateChange result",i).type(q),i&&!i.$isSettled&&(a[e]=i,await i),void 0===t?delete a[e]:a[e]=t,i=s&&this.$notify("afterStateChange",{key:e,val:t,previousVal:n}),i&&R("afterStateChange result",i).type(q)),i?i.then(r):r()})}}class le{trait_constructor(){D.assign(this.$,"service",Object.create(null),D.descriptors.READONLY),this.$.service.phase=le.PHASE.NONE,this.$.service.phaseQueue=q.resolve(),this.$state("installed",!1,!1),this.$state("enabled",!1,!1),he(this,"stateRoutes",{installed:{after:e=>e?"install":"uninstall"},enabled:{after:e=>e?"enable":"disable"}},D.descriptors.NONE);let e=this.$[se.SYMBOL_PRIVATE].events.custom,t=this.$[se.SYMBOL_PRIVATE].events.kernel;e.affiliateAddRule((e,t,s,r)=>le.setEventNamespaceRemovePhase(this,t,r));let s=e=>{this.$.tasks.size&&this.$taskRemoveAll(this.$.service.phase);let t=q.resolve();return e&&(t=t.then(()=>e.call(this)).then(()=>this.$taskPromiseAll(!0))),t.catch(e=>{this.$.service.isPhaseKilling&&e instanceof S.PROMISE_EXPIRED||this.$logErr("unhandled promise rejection in "+this.$.service.phase+";",...e instanceof A?e:[e])})};t.on("install",()=>s(this.onInstall)),t.on("enable",()=>s(this.onEnable)),t.on("disable",()=>s(this.onDisable)),t.on("uninstall",()=>s(this.onUninstall)),t.on("disable",()=>this.$off({removal:le.PHASE.DISABLE})),t.on("uninstall",()=>this.$off({removal:le.PHASE.UNINSTALL}))}$install(e){return this.$.service.phaseQueue.$isSettled?(this.$.service.isPhaseKilling,this.$.service.phaseQueue=q.resolve().then(()=>{if(!this.$.states.installed)return this.$.service.phase=le.PHASE.INSTALL,this.$state("installed",!0)}).then(()=>{if(e&&this.$.states.installed&&!this.$.states.enabled)return this.$.service.phase=le.PHASE.ENABLE,this.$state("enabled",!0)}).then(()=>{this.$.service.phase=le.PHASE.NONE})):this.$.service.phaseQueue.then(()=>this.$install())}$enable(){return this.$.service.phaseQueue.$isSettled?(this.$.service.isPhaseKilling,this.$.service.phaseQueue=q.resolve().then(()=>{if(this.$.states.installed&&!this.$.states.enabled)return this.$.service.phase=le.PHASE.ENABLE,this.$state("enabled",!0)}).then(()=>{this.$.service.phase=le.PHASE.NONE})):this.$.service.phaseQueue.then(()=>this.$enable())}$disable(){return this.$.service.phaseQueue.$isSettled?(this.$.service.isPhaseKilling,this.$.service.phaseQueue=q.resolve().then(()=>{if(this.$.states.enabled)return this.$.service.phase=le.PHASE.DISABLE,this.$state("enabled",!1)}).then(()=>{this.$.service.phase=le.PHASE.NONE})):le.phaseKill(this).then(()=>this.$disable())}$uninstall(){return this.$.service.phaseQueue.$isSettled?(this.$.service.isPhaseKilling,this.$.service.phaseQueue=q.resolve().then(()=>{if(this.$.states.enabled)return this.$disable()}).then(()=>{if(this.$.states.installed)return this.$.service.phase=le.PHASE.UNINSTALL,this.$state("installed",!1)}).then(()=>{this.$.service.phase=le.PHASE.NONE})):le.phaseKill(this).then(()=>this.$uninstall())}static phaseKill(e){return new Promise(t=>{e.$.service.phaseQueue.$isSettled?(e.$.service.isPhaseKilling=!1,t()):(e.$.service.isPhaseKilling=!0,e.$.tasks.size&&e.$taskRemoveAll(le.getContextualRemovePhase(e),!0),setTimeout(()=>t(le.phaseKill(e)),50))})}static getContextualRemovePhase(e){return le.PHASE_REVERT[e.$.service.phase]}static setEventNamespaceRemovePhase(e,t,s){let r=t.hasNamespace(le.PHASES),i=s&&s.removal;i||(i=le.getContextualRemovePhase(e)),"uninstall"===t.event&&i===le.PHASE.DISABLE&&(i=le.PHASE.UNINSTALL),r!==i&&(t.deleteNamespace(r),t.addNamespace(i)),t.addNamespace(i)}}function ce(e,t,s,r){D.assign(e.$[se.SYMBOL_PRIVATE],t,s,r)}function he(e,t,s,r){D.assign(e.$[se.SYMBOL_PRIVATE][t],s,r)}le.PHASE={NONE:"PHASE_NONE",INSTALL:"PHASE_INSTALL",ENABLE:"PHASE_ENABLE",DISABLE:"PHASE_DISABLE",UNINSTALL:"PHASE_UNINSTALL"},le.PHASE_REVERT={[le.PHASE.INSTALL]:le.PHASE.UNINSTALL,[le.PHASE.UNINSTALL]:le.PHASE.INSTALL,[le.PHASE.DISABLE]:le.PHASE.ENABLE,[le.PHASE.ENABLE]:le.PHASE.DISABLE,[le.PHASE.NONE]:le.PHASE.DISABLE},le.PHASES=Object.values(le.PHASE),k.PHASE=D.disinherit(le.PHASE),k.TraitCore=se,k.TraitAbout=re,k.TraitLog=ie,k.TraitEvents=ne,k.TraitState=oe,k.TraitService=le,k.TraitTask=ae;class ue{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$fetchRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$fetchRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("requests",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$fetch(e,t,s={}){if(R("$fetch(id)",e).typeString(),R("$fetch(url)",t).typeString(),R("$fetch(fetchOptions)",s).typePlainObject(),this.$.requests.has(e))throw new S.KEY_DUPLICATED({target:"$fetch(id)",given:e});let r=new Q({name:e,traceSource:y.tracer.captureTraceSource("$fetch"),config:{chainAutoComplete:!0}},t,s);return this.$.requests.$registerAsync(e,'$fetch("'+e+'")',r),r.$chain.then(()=>{this.$.requests.has(e)&&this.$fetchRemove(e)}),r}$fetchText(e,t,s={}){return this.$fetch(e,t,{...s,$typeText:!0})}$fetchJSON(e,t,s={}){return this.$fetch(e,t,{...s,$typeJSON:!0})}$fetchRemove(e,t){if(R("$fetchRemove(id)",e).typeString(),t&&R("$fetchRemove(reason)",t).typeString(),!this.$.requests.has(e))throw new S.KEY_MISSING({target:"$fetchRemove(id)",given:e});this.$.requests.get(e)._debug_remove_called,this.$.requests.get(e)._debug_remove_called=!0;let s=this.$.requests.get(e);this.$.requests.delete(e),s.$chainAbort(t||"$fetchRemove()")}$fetchRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.requests;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$fetchRemove(s,"$fetchRemoveAll("+e+")")}}class pe{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$timeoutRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$timeoutRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("timeouts",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$timeout(e,t,s=null,...r){if(R("id",e).typeString(),R("delay",t).typeNumber(),R("handler",s).type(Function,null),this.$.timeouts.has(e))throw new S.KEY_DUPLICATED({target:"$timeout(id)",given:e});let i,a=new J({name:e,traceSource:y.tracer.captureTraceSource("$timeout"),config:{chainAutoComplete:!0}},e=>{i=setTimeout(()=>{a.$isExpired||e(s?s(...r):void 0)},t)});return this.$.timeouts.$registerAsync(e,'$timeout("'+e+'")',a),a.$chain.data.timer=i,a.$chain.then(()=>{this.$.timeouts.has(e)&&this.$timeoutRemove(e)}),a}$timeoutRemove(e,t){if(R("$timeoutRemove(id)",e).typeString(),t&&R("$timeoutRemove(reason)",t).typeString(),!this.$.timeouts.has(e))throw new S.KEY_MISSING({target:"$timeoutRemove(id)",given:e});this.$.timeouts.get(e)._debug_remove_called,this.$.timeouts.get(e)._debug_remove_called=!0;let s=this.$.timeouts.get(e);clearTimeout(s.$chain.data.timer),this.$.timeouts.delete(e),s.$chainAbort(t||"$timeoutRemove()")}$timeoutRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.timeouts;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$timeoutRemove(s,"$timeoutRemoveAll()")}}class de{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$intervalRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$intervalRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("timeints",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$interval(e,t,s,...r){if(R("id",e).typeString(),R("handler",s).typeFunction(),R("delay",t).typeNumber(),this.$.timeints.has(e))throw new S.KEY_DUPLICATED({target:"$interval(id)",given:e});let i=setInterval(s,t,...r);this.$.timeints.$registerSync(e,i)}$intervalRemove(e){if(R("$intervalRemove(id)",e).typeString(),!this.$.timeints.has(e))throw new S.KEY_MISSING({target:"$intervalRemove(id)",given:e});this.$.timeints.get(e)._debug_remove_called,this.$.timeints.get(e)._debug_remove_called=!0,clearInterval(this.$.timeints.get(e).$value),this.$.timeints.delete(e)}$intervalRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.timeints;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$intervalRemove(s)}}class me{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$mutationRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$mutationRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("mutations",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$mutation(e,t,s,r){if(R("id",e).typeString(),R("parent",t).type(HTMLElement,Document),R("config",s).typePlainObject(),R("handler",r).typeFunction(),this.$.mutations.has(e))throw new S.KEY_DUPLICATED({target:"$mutation(id)",given:e});let i=new MutationObserver(r);i.observe(t,s),this.$.mutations.$registerSync(e,i)}$mutationRemove(e,t){if(R("$mutationRemove(id)",e).typeString(),t&&R("$mutationRemove(reason)",t).typeString(),!this.$.mutations.has(e))throw new S.KEY_MISSING({target:"$mutationRemove(id)",given:e});this.$.mutations.get(e)._debug_remove_called,this.$.mutations.get(e)._debug_remove_called=!0,this.$.mutations.get(e).$value.disconnect(),this.$.mutations.delete(e)}$mutationRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.mutations;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$mutationRemove(s)}}class fe{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$domRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$domRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("dom",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$dom(e,t,s){let r;if(R("id",e).typeString(),R("jQueryArgument",t).type(String,Object),s&&R("appendTo",s).type(String,Object),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.dom.has(e))throw new S.KEY_DUPLICATED({target:"$dom(id)",given:e});let i=o(t);return"TEMPLATE"===i[0].tagName&&(i=o(document.importNode(i[0].content,!0).children)),r&&(i[0].id=e),s&&i.appendTo(s),this.$.dom.$registerSync(e,i).$value}$domFetch(e,t,s,r){let i;if(s&&!u(s)&&([s,r]=[{},s]),R("id",e).typeString(),R("url",t).typeString(),r&&R("appendTo",r).type(String,Object),s&&R("fetchOptions",s).type(Object),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.dom.has(e))throw new S.KEY_DUPLICATED({target:"$domFetch(id)",given:e});let a=this.$fetchText('$domFetch("'+e+'")',t,s).then(t=>{let s=o(t);return i&&(s[0].id=e),r&&s.appendTo(r),s});return this.$.dom.$registerAsync(e,'$domFetch("'+e+'")',a),a}$domRemove(e,t){if(R("$domRemove(id)",e).typeString(),t&&R("$domRemove(reason)",t).typeString(),!this.$.dom.has(e))throw new S.KEY_MISSING({target:"$domRemove(id)",given:e});this.$.dom.get(e)._debug_remove_called,this.$.dom.get(e)._debug_remove_called=!0;let s=this.$.dom.get(e),r=s.$value;r instanceof o&&r.remove(),s instanceof Q&&s.$chainAbort(t||"$domRemove()"),this.$.dom.delete(e)}$domRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.dom;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$domRemove(s)}}class $e{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$cssRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$cssRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("css",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$css(e,t){let s;if(R("id",e).typeString(),R("css",t).typeString(),"#"===e[0]&&(e=e.substring(1),s=!0),this.$.css.has(e))throw new S.KEY_DUPLICATED({target:"$css(id)",given:e});return this.$.css.$registerSync(e,o("<style>").attr(s?{id:e}:{}).addClass("jFactory-css").html(t).appendTo("head")).$value}$cssFetch(e,t,s="head"){let r,i;if(R("id",e).typeString(),R("url",t).typeString(),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.css.has(e))throw new S.KEY_DUPLICATED({target:"$cssFetch(id)",given:e});let a=new J({name:e,config:{chainAutoComplete:!0},traceSource:y.tracer.captureTraceSource("$cssFetch")},a=>i=o("<link>",{id:r?e:"",rel:"stylesheet",type:"text/css"}).addClass("jFactory-css").appendTo(s).on("load",()=>{a(i)}).attr("href",t));return a.$chain.data.dom=i,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',a),a}$cssRemove(e,t){if(R("$cssRemove(id)",e).typeString(),t&&R("$cssRemove(reason)",t).typeString(),!this.$.css.has(e))throw new S.KEY_MISSING({target:"$cssRemove(id)",given:e});this.$.css.get(e)._debug_remove_called,this.$.css.get(e)._debug_remove_called=!0;let s=this.$.css.get(e),r=s.$value||s.$chain&&s.$chain.data.dom;r instanceof o&&r.remove(),s instanceof J&&s.$chainAbort(t||"$cssRemove()"),this.$.css.delete(e)}$cssRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.css;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$cssRemove(s)}}class ge{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$vueRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$vueRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("vue",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$vue(e,t){if(R("id",e).typeString(),R("vue",t).type(Object),this.$.vue.has(e))throw new S.KEY_DUPLICATED({target:"$vue(id)",given:e});return this.$.vue.$registerSync(e,t).$value}$vueRemove(e){if(R("$vueRemove(id)",e).typeString(),!this.$.vue.has(e))throw new S.KEY_MISSING({target:"$vueRemove(id)",given:e});this.$.vue.get(e)._debug_remove_called,this.$.vue.get(e)._debug_remove_called=!0;let t=this.$.vue.get(e);o(t.$value.$el).remove(),t.$value.$destroy(),this.$.vue.delete(e)}$vueRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.vue;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$vueRemove(s)}}class ve{trait_constructor(){const e=this.$[se.SYMBOL_PRIVATE].events.kernel;e.on("disable",()=>this.$reactRemoveAll(le.PHASE.DISABLE)),e.on("uninstall",()=>this.$reactRemoveAll(le.PHASE.UNINSTALL)),this.$.assign("react",this.$.createSubMap(),D.descriptors.ENUMERABLE)}$react(e,t,s,...r){if(!k.ReactDOM)throw new Error("jFactory.ReactDOM=ReactDOM must be set before using the React Trait");if(R("id",e).typeString(),R("container",t).type(HTMLElement,o),this.$.react.has(e))throw new S.KEY_DUPLICATED({target:"$react(id)",given:e});t=o(t)[0];let i=k.ReactDOM.render(s,t,...r);return this.$.react.$registerSync(e,{container:t,view:i}).$value.view}$reactRemove(e){if(R("$reactRemove(id)",e).typeString(),!this.$.react.has(e))throw new S.KEY_MISSING({target:"$reactRemove(id)",given:e});this.$.react.get(e)._debug_remove_called,this.$.react.get(e)._debug_remove_called=!0;let t=this.$.react.get(e).$value.container;t&&(k.ReactDOM.unmountComponentAtNode(t)||this.$logWarn("unmountComponentAtNode failed to unmount",t),o(t).remove()),this.$.react.delete(e)}$reactRemoveAll(e){R("removePhase",e).equalIn(le.PHASES);let t=this.$.react;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$reactRemove(s)}}k.TraitFetch=ue,k.TraitTimeout=pe,k.TraitInterval=de,k.TraitMutation=me,k.TraitDOM=fe,k.TraitCSS=$e,k.TraitLibVue=ge,k.TraitLibReact=ve,"undefined"!=typeof jFactoryOverride&&jFactoryOverride||i.init(),exports.JFACTORY_CLI=s,exports.JFACTORY_DEBUG=!1,exports.JFACTORY_DEV=!0,exports.JFactoryAbout=U,exports.JFactoryComponent=M,exports.JFactoryCoreObject=C,exports.JFactoryError=A,exports.JFactoryEventSelector=z,exports.JFactoryEventSelectorParser=G,exports.JFactoryEvents=K,exports.JFactoryEventsManager=W,exports.JFactoryExpect=R,exports.JFactoryFetch=Q,exports.JFactoryFunctionComposer=O,exports.JFactoryFunctionConditional=I,exports.JFactoryFunctionExpirable=P,exports.JFactoryFunctionWrappable=j,exports.JFactoryLogger=Z,exports.JFactoryObject=D,exports.JFactoryPromise=J,exports.JFactoryPromiseChain=Y,exports.JFactoryPromisePath=V,exports.JFactoryPromiseSync=q,exports.JFactoryTime=ee,exports.JFactoryTimeTrace=te,exports.JFactoryTrace_LIB_STACKTRACE=E,exports.JFactoryTrace_NOFILTER=b,exports.JFactoryTraits=T,exports.TraitAbout=re,exports.TraitCSS=$e,exports.TraitCore=se,exports.TraitDOM=fe,exports.TraitEvents=ne,exports.TraitFetch=ue,exports.TraitInterval=de,exports.TraitLibReact=ve,exports.TraitLibVue=ge,exports.TraitLog=ie,exports.TraitMutation=me,exports.TraitService=le,exports.TraitState=oe,exports.TraitTask=ae,exports.TraitTimeout=pe,exports.assignPrivate=ce,exports.assignPrivateMember=he,exports.jFactory=k,exports.jFactoryConfig=r,exports.jFactoryDev=a,exports.jFactoryError=S,exports.jFactoryFunctionConditional=w,exports.jFactoryFunctionExpirable=function(e){return new P(e).compose()},exports.jFactoryFunctionWrappable=N,exports.jFactoryInit=n,exports.jFactoryLoader=i,exports.jFactoryTrace=y,exports.jFactoryTraits=F;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
