/*!
 * jFactory v1.7.2
 * https://github.com/jfactory-es/jfactory
 *
 * Copyright (c) 2019, StÃ©phane Plazis
 * https://github.com/jfactory-es/jfactory/blob/master/LICENSE.txt
 */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("lodash"),t=require("jquery");const s="undefined"!=typeof process&&process.versions&&process.versions.node,r={enabled:!s||false},i={keys:["$.about.name","$dev_name","$name","name","id"]},a=!s&&{keys:["$dev_traceLog","$dev_traceSource"],libOptions:{offline:Boolean(globalThis.chrome),filter:function(e){return e.lineNumber}}},n=t,o=e.isNative,l=e.isString,c=e.isNumber,h=e.isPlainObject,u=e.defaultsDeep,p=e.lowerFirst,d=e.get,m=e.template,$=e.camelCase,f=()=>{},g=(e,t)=>Object.defineProperty(t,"name",{value:e}),v=document.createElement("a"),b=e=>(v.href=e,v.href);let E=[];function y(){if(E){for(let e of E)e();E=null,delete globalThis.jFactoryOverride}}function A(e){E.push(e)}class S{constructor({label:e,stackTraceLimit:t,keys:s,libOptions:r}={}){this.label=e||"The stack has been printed in the console",this.stackTraceLimit=t||1/0,this.keys=s||["stackLog","stackSource"],this.libOptions=r||{}}captureTraceSource(e,t){let s;this.stackTraceLimit&&(s=Error.stackTraceLimit,Error.stackTraceLimit=this.stackTraceLimit),e||(e="captureTraceSource",t=!0);let r={source:new Error,omitAboveFunctionName:e,omitSelf:t};return this.stackTraceLimit&&(Error.stackTraceLimit=s),r}attachTrace(e,t){"object"!=typeof t&&(t=this.captureTraceSource(t||"attachTrace",!t));let s=t.source;this.toPrintableTrace(t).then((e=>s=e));let r=()=>console.log(s)||this.label;Object.defineProperty(e,this.keys[0],{enumerable:!1,configurable:!0,get:()=>r()}),Object.defineProperty(e,this.keys[1],{enumerable:!1,configurable:!0,get:()=>t})}toPrintableTrace(e){return Promise.resolve(e.source)}}class R extends S{constructor(e){super(e)}toPrintableTrace(e){return StackTrace.fromError(e.source,this.libOptions).then((t=>{if(e.omitAboveFunctionName){let s=t.findIndex((t=>t.functionName&&t.functionName.endsWith(e.omitAboveFunctionName)));s>0&&(e.omitSelf&&s++,t=t.slice(s))}return t=t.filter(this.libOptions.filter),this.formatTraceFrames(t)}))}formatTraceFrames(e){let t,s;return this.libOptions.offline&&window.chrome?(t="Error\n",s="\tat "):(t="",s=""),t+e.map((e=>s+e.toString())).join("\n")}}const _={};A((function(){let e=a;if(e&&!1!==e.use){let t;t="function"==typeof e.use?e.use:"object"==typeof StackTrace?R:S,t===R&&console.warn("jFactory: Stack trace enabled; Performance will be affected"),_.tracer=new t(e)}else _.tracer={captureTraceSource:f,attachTrace:f}}));class O extends Error{constructor(e="unspecified error",t=null){t=Object.assign(Object.create(null),t),super(e=O.toPrintable(e,t)),this.$data=Object.assign(Object.create(null),t)}toString(){return this.message}*[Symbol.iterator](){yield this.message,yield this.$data}static getId(e){return e[(i.keys||O.DEFAULT_KEYS).find((t=>{let s=d(e,t);return s||0===s}))]}static toPrintableData(e){const t={};let s;for(let[r,i]of Object.entries(e)){switch(typeof i){case"function":i=i.name+"()";break;case"object":if(null===i){i="null";break}if(i instanceof Error){i=i.toString();break}if(void 0!==(s=O.getId(i)))i='"'+s+'"';else if(o(i.toString))try{s=JSON.stringify(i),i=s.length>O.JSON_MAX?s.substring(0,O.JSON_MAX)+"[...]":s}catch(e){i="[object "+i.constructor.name+"]"}else i=i.toString();break;case"string":i='"'+i+'"';break;default:i=String(i)}t[r]=i}return t}static toPrintable(e,t){const s=[];for(let r of e.split(";")){let e,i=O.RE_PLACEHOLDER;if(i.lastIndex=0,e=i.exec(r)){do{if(e[1]&&e[1]in t){s.push(r.trim());break}}while(null!==(e=i.exec(r)))}else s.push(r.trim())}return p(m(s.join("; "))(O.toPrintableData(t)))}static factory(e,t){let s=class extends O{constructor(e,s){super(t,e),_.tracer.attachTrace(this.$data,s)}};return s.prototype.name="Error JFACTORY_ERR_"+e,s}}O.JSON_MAX=40,O.DEFAULT_KEYS=["name","id"],O.RE_PLACEHOLDER=/\${([^}]+)}/g;const T=O.factory,w=T("INVALID_VALUE","invalid value for ${target}; Reason: ${reason}; Given: ${given}"),P=T("INVALID_CALL","invalid call ${target}; Reason: ${reason}; Owner: ${owner}"),L=T("PROMISE_EXPIRED","expired promise ${target}; Reason: ${reason}"),N=T("REQUEST_ERROR","error requesting ${target}; Reason: ${reason}; Owner: ${owner}"),j=T("KEY_DUPLICATED","duplicated key for ${target}; Given: ${given}"),F=T("KEY_MISSING","missing key for ${target}; Given: ${given}");function C(e,t){if(!new.target)return new C(e,t);this.label=e,this.value=t}const I=function(e,t,s){throw new w({target:e,reason:s,given:t})},M={notUndefined:(e,t)=>(void 0===t&&I(e,t,"cannot be undefined"),!0),notEmptyString:(e,t)=>(""===t&&I(e,t,"cannot be empty string"),!0),notFalsy:(e,t)=>(t||I(e,t,'cannot be a falsy value (undefined, null, NaN, 0, "")'),!0),validSpaces:(e,t)=>(t.replace&&t.replace(/\s+/g," ").trim()===t||I(e,t,"invalid space delimiters"),!0),matchReg:(e,t,s)=>(s.test(t)||I(e,t,'string "'+t+'" must match '+s),!0),type(e,t,...s){let r,i=!1;for(let a of s){null===a?r="Null":"name"in a&&(r=a.name);let s=M["type"+r];if(s)try{i=s(e,t)}catch(e){}else i=t instanceof a;if(i)break}return i||I(e,t,"must be an instance of ["+s.map((e=>e.name)).join(", ")+"]"),!0},typeNull:(e,t)=>(null!==t&&I(e,t,"must be null"),!0),typeBoolean:(e,t)=>(!0!==t&&!1!==t&&I(e,t,"must be a boolean"),!0),typeString:(e,t)=>(l(t)||I(e,t,"must be a string"),!0),typeNumber:(e,t)=>(c(t)||I(e,t,"must be a number"),!0),typeFunction:(e,t)=>("function"!=typeof t&&I(e,t,"must be a function"),!0),typePlainObject:(e,t)=>(h(t)||I(e,t,"must be a plain object"),!0),equal(e,t,...s){let r=!1;for(let e of s)if(r=t===e)break;return r||I(e,t,"must be one of ["+s+"]"),!0},equalIn:(e,t,s)=>(Array.isArray(s)||(s=Object.values(s)),s.includes(t)||I(e,t,"must be one from ["+s.join(", ")+"]"),!0),properties(e,t,s){for(let r of Object.getOwnPropertyNames(t))C(e+', property name "'+r+'"',r).equalIn(s);return!0},writable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable||I(e,t,"must be writable"),!0),notWritable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).writable&&I(e,t,"must not be writable"),!0),enumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)||I(e,t,"must be enumerable"),!0),notEnumerable:(e,t,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)&&I(e,t,"must not be enumerable"),!0),configurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable||I(e,t,"must be configurable"),!0),notConfigurable:(e,t,s)=>(Object.getOwnPropertyDescriptor(t,s).configurable&&I(e,t,"must not be configurable"),!0),reservedProperty:(e,t,s)=>(s in t&&I(e,t,"is a reserved property"),!0)};A((function(){Object.assign(C,M);for(const e of Object.getOwnPropertyNames(M))C.prototype[e]=function(...t){return C[e](this.label,this.value,...t),this}}));class k{constructor(e,t,s={}){this.callerInstance=e,this.callerConstructor=t,this.options=s}use(e,...t){C("JFactoryTraits(trait)",e).typeFunction();let{callerInstance:s,callerConstructor:i}=this,a=k.CACHE.get(s);if(a){if(a.has(e))return r.enabled&&console.warn(`${e.name} already called on`,s),this;a.add(e)}else k.CACHE.set(s,new WeakSet([e]));!i.JFactoryTrait&&(i.JFactoryTrait=new WeakSet),i.JFactoryTrait.has(e)||(i.JFactoryTrait.add(e),this.export(e.prototype,i.prototype),this.export(e,i,!0));let n=new e(s,...t);return n.trait_constructor&&n.trait_constructor.apply(s,t),this}export(e,t,s){let r=Object.getOwnPropertyDescriptors(e);for(let i of Object.keys(r)){let a=k.getPrefix(i);if(k.getTarget(i,t,a)){let a=r[i],n=(this.options.parser||k.defaultParser)(i,a,e,t,s);n&&(({propertyName:i,propertyDescriptor:a}=n),Object.defineProperty(t,i,a))}}}static defaultParser(e,t,s,i,a){let n=t.value;return a?null:e in i?(r.enabled&&console.warn(`${i.constructor.name}> skipping export of existing property "${e}"`,n),null):"object"==typeof n?(r.enabled&&console.warn(`${i.constructor.name}> skipping export of shared object "${e}"`,n),null):{propertyName:e,propertyDescriptor:t}}static getPrefix(e){let t=e.split("_");return t.length>1?t[0]:null}static getTarget(e,t,s){return k.EXCLUDES.includes(e)||"trait"===s?null:t}}k.CACHE=new WeakMap,k.EXCLUDES=["constructor","prototype","length","size"];class B{constructor(){this.handlers=Object.create(null)}*[Symbol.iterator](e=[]){e.length||(e=Object.keys(this.handlers)),e.length||(e=["default"]);for(let t of e)t in this.handlers&&(yield*this.handlers[t])}first(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).unshift(t),this}last(e,t){return 1===arguments.length&&([e,t]=["default",e]),(this.handlers[e]||(this.handlers[e]=[])).push(t),this}compose(...e){let t=this,s=function(){let s={canceled:!1,parameters:Array.from(arguments),result:void 0},r=t[Symbol.iterator](e),i=r.next();return B.composite_iterator(this,s,i,r)};return s.composer=t,s}static composite_iterator(e,t,s,r){let i,a;for(;!t.canceled&&!s.done;)if(i=s.value,a=e?i.call(e,t,...t.parameters):i(t,...t.parameters),s=r.next(),a instanceof Promise){if(!s.done||a.constructor===Promise)return a.then(g([i.name,"[compositeAsyncHandler]"].filter(Boolean).join(" "),(function(i){return t.result=i,B.composite_iterator(e,t,s,r)})));t.result=a}else t.result=a;return t.result}}class U{constructor(e){this.originalHandler=e,this.expiredCalls=0,this.composer=new B;let t,s=this.composer.compose("conditions"),r=this;this.isExpired=e=>t||s.call(e)||!1,this.setExpired=e=>t=e?e instanceof Error?e:new P({target:this.originalHandler,reason:"manually expired"}):Boolean(this.expiredCalls=0),this.addExpireCondition=function(e){this.composer.last("conditions",(function(t){let s=function(s){return C("JFactoryFunctionExpirable.addExpireCondition(), result",s).type(Boolean,Error),r.setExpired(!!s&&((t.canceled=!0)&&(s instanceof Error?s:new P({target:r.originalHandler,reason:"conditionally expired",condition:e}))))},i=e.apply(this,t.parameters);return i instanceof Promise?i.then(s):s(i)}))}}compose(){let e=this,t=function(){let t=e.isExpired(this),s=e.constructor.call.bind(void 0,e,this,arguments);return t instanceof Promise?t.then(s):s(t)};return Object.assign(t,{expirable:this,isExpired:e=>this.isExpired(e),setExpired:e=>this.setExpired(e),addExpireCondition:e=>(this.addExpireCondition(e),t)})}static call(e,t,s,r){return r?e.onExpired(r):e.onNotExpired(t,s)}onExpired(e){return this.expiredCalls<U.MaxWarningExpiration&&(this.expiredCalls++,r.enabled&&console.warn(...new P({...e.$data,reason:e.$data.reason+"; expiredCalls="+this.expiredCalls+(this.expiredCalls===U.MaxWarningExpiration?"; Max Warning Exceeded":"")}))),e}onNotExpired(e,t){return this.originalHandler.apply(e,t)}}function H(e){return new D(e).compose()}U.MaxWarningExpiration=10;class D{constructor(e){this.originalHandler=e,this.composer=new B,this.composer.first("original",g([e.name,"[condition]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("conditions","original");return Object.assign(e,{conditional:this,addCondition:t=>(this.addCondition(t),e)})}addCondition(e){this.composer.last("conditions",(function(t){let s=function(e){C("JFactoryFunctionConditional.addCondition(), result",e).typeBoolean(),!e&&(t.canceled=!0)},r=e.apply(this,t.parameters);return r instanceof Promise?r.then(s):s(r)}))}}function J(e){return new Y(e).compose()}class Y{constructor(e){this.originalHandler=e,this.composer=new B,this.composer.first("original",g([e.name,"[wrapped]"].filter(Boolean).join(" "),(function(t){return e.apply(this,t.parameters)})))}compose(){let e=this.composer.compose("before","original","after");return Object.assign(e,{wrappable:this,beforeAll:t=>(this.beforeAll(t),e),justBefore:t=>(this.justBefore(t),e),justAfter:t=>(this.justAfter(t),e),afterAll:t=>(this.afterAll(t),e)})}beforeAll(e){this.composer.first("before",e)}justBefore(e){this.composer.last("before",e)}justAfter(e){this.composer.first("after",e)}afterAll(e){this.composer.last("after",e)}}function q(e,t){return new k(e,t,{parser(e,t){let s=k.defaultParser(...arguments);if(s){({propertyName:e,propertyDescriptor:t}=s);let r=t.value;if("function"==typeof r)switch(r.name){case"$install":case"$uninstall":case"$enable":case"$disable":case"$state":break;default:t.value=J(r).beforeAll((function(){if(!this.$.states.enabled&&"PHASE_NONE"===this.$.service.phase){let e=new P({owner:this,target:r,reason:"component disabled"});throw this.$logErr(...e),e}}))}return{propertyName:e,propertyDescriptor:t}}}})}class V{constructor(e){V.inject(this,V,e)}static inject(e,t,s){q(e,t).use(G.TraitCore).use(G.TraitAbout,{name:s}).use(G.TraitLog).use(G.TraitEvents).use(G.TraitState).use(G.TraitService).use(G.TraitTask)}}class W extends V{constructor(e){super(e),W.inject(this,W)}static inject(e,t){q(e,t).use(G.TraitFetch).use(G.TraitDOM).use(G.TraitCSS).use(G.TraitMutation).use(G.TraitTimeout).use(G.TraitInterval).use(G.TraitLibVue).use(G.TraitLibReact)}}const G=(e,t)=>Object.assign(new W(e),t),z={name:"globalThis",test:()=>globalThis,info:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},Q={name:"fetch",test:()=>fetch,info:"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"},K={name:"Request",test:()=>Request,info:"https://developer.mozilla.org/docs/Web/API/Request"},X={name:"AbortController/AbortSignal",test:()=>(new AbortController).signal,info:"https://developer.mozilla.org/docs/Web/API/AbortController, https://developer.mozilla.org/docs/Web/API/AbortSignal"},Z={name:"MutationObserver",test:()=>MutationObserver,info:"https://developer.mozilla.org/docs/Web/API/MutationObserver"};let ee={};function te(...e){for(let t of e)ee[t.name]=t}function se(){for(let[e,t]of Object.entries(ee)){let s;try{s=Boolean(t.test())}catch(e){}s||console.warn(`jFactory may require the support of "${e}", ${t.info}`)}ee=null}function re(){console.log("jFactory is running in development mode; performances will be affected"),!r.enabled&&console.warn("jFactory logs disabled"),y(),se()}te(z);class ie{static createDescriptors(e=ie.DESCRIPTORS_PROTOTYPE){let t=ie.create(e,!0,!0),s=Object.create(null);return s.NONE=t(),s.WRITABLE=t({writable:!0}),s.ENUMERABLE=t({enumerable:!0}),s.CONFIGURABLE=t({configurable:!0}),s.CONFIGURABLE_WRITABLE=s.WRITABLE_CONFIGURABLE=t({writable:!0,configurable:!0}),s.CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE=t({enumerable:!0,configurable:!0}),s.ENUMERABLE_WRITABLE=s.WRITABLE_ENUMERABLE=t({writable:!0,enumerable:!0}),s.WRITABLE_ENUMERABLE_CONFIGURABLE=s.WRITABLE_CONFIGURABLE_ENUMERABLE=s.ENUMERABLE_CONFIGURABLE_WRITABLE=s.ENUMERABLE_WRITABLE_CONFIGURABLE=s.CONFIGURABLE_WRITABLE_ENUMERABLE=s.CONFIGURABLE_ENUMERABLE_WRITABLE=t({writable:!0,enumerable:!0,configurable:!0}),s.READONLY=t({writable:!1,enumerable:!1,configurable:!1}),s}static assign(e,t,s,r){let i={};switch(typeof t){case"string":case"symbol":if(!r)throw new Error("missing descriptor argument; use Object.assign instead");(r=Object.create(r)).value=s,Object.defineProperty(e,t,r);break;case"object":if([s,r]=[t,s],!r)throw new Error("missing descriptor argument; use Object.assign instead");for(let e of Object.getOwnPropertyNames(s))i[e]=Object.create(r),i[e].value=s[e];for(let e of Object.getOwnPropertySymbols(s))i[e]=Object.create(r),i[e].value=s[e];Object.defineProperties(e,i);break;default:throw new Error("invalid property argument")}return e}static create(e,t=!1,s=!1){return function(r){return t?Object.assign(s?Object.create(null):{},e,r):Object.assign(Object.create(s?Object.assign(Object.create(null),e):e),r)}}static disinherit(e){return Object.assign(Object.create(null),e)}}ie.DESCRIPTORS_PROTOTYPE={writable:!1,enumerable:!1,configurable:!1},A((function(){ie.descriptors=ie.createDescriptors()}));const ae=()=>++ae.uid;ae.uid=0;class ne{constructor(e,t={}){let s,r;C("JFactoryAbout(owner)",e).type(Object),C("JFactoryAbout(about)",t).typePlainObject().reservedProperty("uid").reservedProperty("fingerprint"),"name"in t&&C("JFactoryAbout(about.name)",t.name).typeString().notEmptyString();let i=ae();t.name?(s=t.name,delete t.name,r="jFactory_"+$(s.toLowerCase())+"_"+i):(delete t.name,s=`[${e.constructor.name}#${i}]`,r="jFactory_"+e.constructor.name+"_"+i),ie.assign(this,{uid:i,name:s,fingerprint:r},ie.descriptors.ENUMERABLE),Object.assign(this,t),C("JFactoryAbout.name",this.name).matchReg(/^[\w[\]#]+$/),C("JFactoryAbout.fingerprint",this.fingerprint).matchReg(/^[\w]+$/)}}const oe=()=>++oe.uid;oe.uid=0;class le extends Promise{constructor({name:e,config:t,traceSource:s},r){1===arguments.length&&([e,t,r]=[null,null,arguments[0]]);const i=oe();let a,n;t={...le.DEFAULT_CONFIG,...t},C("name",e=e||"unnamed").type(String,Number).matchReg(/^[^. ]+$/),C("config",t).typePlainObject(),C("executor",r).typeFunction(),super(((e,t)=>{a=e,n=t}));const l=new ce(this,i,e,t);Object.defineProperties(this,{$chain:{enumerable:!0,writable:!0,value:l},$type:{writable:!0,value:"promise"},$value:{writable:!0,value:void 0},$isSettled:{writable:!0,value:!1},$isRejected:{writable:!0,value:null},$isFulfilled:{writable:!0,value:null},$isExpired:{writable:!0,value:!1},$isAborted:{writable:!0,value:!1}}),Object.defineProperties(this,{$dev_name:{configurable:!0,value:e+"["+i+":0]"},$dev_path:{writable:!0,value:new he(this)},$dev_position:{writable:!0,value:0}}),o(r)||Object.defineProperties(this,{$dev_source:{value:r}}),_.tracer.attachTrace(this,s);const c=()=>{if(!this.$chain.isPending)try{this.$chainComplete("auto-completed")}catch(e){console.error(e)}},h=e=>{if(!this.$isSettled){if(e===this)return void u(new TypeError("Chaining cycle detected for promise "+this.$dev_name));let t;if(null!==e&&("object"==typeof e||"function"==typeof x))try{t=e.then}catch(e){return void u(e)}if("function"==typeof t){let s=!1,r=function(e){s||(s=!0,h(e))},i=function(e){s||(s=!0,u(e))};try{t.call(e,r,i)}catch(e){s||u(e)}}else this.$isRejected=!1,this.$isFulfilled=!0,this.$isExpired&&(e=this.$chain.errorExpired),a(e),p(e)}},u=e=>{this.$isSettled||(this.$isRejected=!0,this.$isFulfilled=!1,n(e),p(e))},p=e=>{this.$value=e,this.$isSettled=!0,this.$chain.chainMap.set(this,!0),this.$chain.chainConfig.chainAutoComplete&&(1!==this.$chain.chainMap.size||this.$isExpired?c():this.then(c))};let d=t.chainAutoComplete;Object.defineProperty(t,"chainAutoComplete",{get:()=>d,set:e=>{d!==e&&(d=e,e&&c())}}),l.chainMap.set(this,!1),Object.defineProperties(this,{__resolve__:{value:h},__reject__:{value:u}});try{r(h,u)}catch(e){u(e)}}then(e,t,s){let r,i,a,n=o(e)&&!e.name.startsWith("bound ");e&&"function"==typeof e&&(r=function(s){return"await"===l?a.$isAborted?t(a.$chain.errorExpired):e(s):a.$isExpired?void 0:(a.$isSettled,e(s))}),t&&"function"==typeof t&&(i=function(e){return a.$isSettled,t(e)});let l=s||(n?"await":void 0===e?"catch":"then");a=Object.assign(super.then(r,i),this),oe.uid--,a.$type=l;{a.$dev_position=this.$chain.chainMap.size;let s="";e&&e.name&&(s+=e.name),t&&t.name&&(s+=","+t.name),Object.defineProperties(a,{$dev_name:{value:this.$chain.chainName+"["+this.$chain.chainId+":"+this.$dev_position+"]."+a.$type+(s?"("+s+")":"")+"["+a.$chain.chainId+":"+a.$dev_position+"]"},$dev_path:{value:new he(this.$dev_path,a)},$dev_onFulfilled:{value:e},$dev_onRejected:{value:t}})}return a.$chain.chainMap.set(a,!1),this.$isExpired&&le.setExpired(a,!0,!this.$isAborted,this.$chain.errorExpired),a}$catchExpired(e){return this.then((t=>this.$chain.chainRoot.$isExpired?e(t):t),void 0,"$catchExpired")}static resolve(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),t instanceof this&&1===arguments.length?t:new this(e,(function(e){e(t)}))}static reject(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),new this(e,(function(e,s){s(t)}))}$toPromise(){return Promise.resolve(this)}$chainAbort(e="$chainAbort()"){return this.$chain.complete(e,!0),this}$chainComplete(e="$chainComplete()"){try{this.$chain.complete(e,!1)}catch(e){throw e instanceof P?new P({target:e.$data.target,reason:"Trying to complete a pending chain. Use $chainAbort() if you want to stop it."}):e}return this}$chainAutoComplete(){return this.$chain.chainConfig.chainAutoComplete=!0,this}static setExpired(e,t,s,r){if(!e.$isSettled){if(!t)throw new P({target:e,reason:"promise must be aborted or settled before setting it to expired."});e.$isAborted=!s,e.__resolve__(r)}e.$isExpired=!0}}le.DEFAULT_CONFIG={chainAutoComplete:!1};class ce{constructor(e,t,s,r){Object.defineProperties(this,{chainConfig:{value:r},chainRoot:{value:e},chainId:{value:t},chainName:{value:s},chainMap:{value:new Map},isCompleted:{value:!1,configurable:!0},data:{value:{}},__deferred__:{value:n.Deferred()}})}get isPending(){return Array.from(this.chainMap.values()).includes(!1)}then(e){return this.__deferred__.done(e),this}complete(e="chain.complete()",t){let s=this.chainRoot;if(!s.$isExpired){let r=s.$chain.errorExpired=new L({target:s,reason:e}),i=this.chainMap;for(let e of i.keys())le.setExpired(e,t,!1,r);Object.defineProperty(this,"isCompleted",{value:!0}),this.__deferred__.resolve()}return this}}class he extends Array{constructor(){super();for(let e of arguments)Array.isArray(e)?this.push(...e):this.push(e)}get printable(){return this.map(((e,t)=>0===t?e.$dev_name:e.$dev_name.split(".")[1])).join(".")}toString(){return this.printable}}class ue extends Promise{constructor(e){let t={$isSettled:!1,$isRejected:null,$value:void 0};super(((s,r)=>{let i=!1,a=e=>{e instanceof Promise?ue.resolve(e).then(a,n):i||(i=!0,t.$isSettled=!0,t.$isRejected=!1,t.$value=e,s(e))},n=e=>{i||(i=!0,t.$isSettled=!0,t.$isRejected=!0,t.$value=e,r(e))};try{e(a,n)}catch(e){n(e)}})),Object.assign(this,t),t=this}then(e,t){if(this.$isSettled){let s=this.$value;try{if(this.$isRejected){if(super.then(void 0,(()=>null)),!t||"function"!=typeof t)return ue.reject(s);s=t(s)}else e&&"function"==typeof e&&(s=e(s))}catch(e){return ue.reject(e)}return ue.resolve(s)}return super.then(e,t)}static resolve(e){return e instanceof ue?e:new ue(e instanceof Promise?e.then.bind(e):t=>t(e))}}te(Q,K,X);class pe{constructor(){Object.defineProperties(this,{registry:{value:n(Object.create(null))},handlers:{value:new WeakMap},onListenerUpdate:{value:null,writable:!0},onObserverUpdate:{value:null,writable:!0}})}on({events:e,handler:t,target:s,selector:r}){pe.validateSelector(e),C("JFactoryEvents.on({handler})",t).typeFunction(),s&&C("JFactoryEvents.on({target})",s).type(String,n,HTMLElement),r&&C("JFactoryEvents.on({selector})",s).typeString();let i=this.handlers.get(t);s?(i||this.handlers.set(t,!0),r?n(s).on(e,r,t):n(s).on(e,t),this.onListenerUpdate&&this.onListenerUpdate(arguments)):(i||(this.handlers.set(t,i=function(e,{data:s,stack:r}){r.push((()=>t(e,s)))}),i.originalHandler=t),this.registry.on(e,i),this.onObserverUpdate&&this.onObserverUpdate(arguments))}off({events:e,handler:t,target:s,selector:r}){if(void 0!==e&&(pe.validateSelector(e),t&&C("JFactoryEvents.off({handler})",t).typeFunction(),s&&C("JFactoryEvents.off({target})",s).type(String,n,HTMLElement),r&&C("JFactoryEvents.off({selector})",s).typeString()),s)r?n(s).off(e,r,t):n(s).off(e,t);else{if(n("*").off(e,t),t&&!(t=this.handlers.get(t)))throw new w({target:"handler",reason:"not registered",given:t});this.registry.off(e,t)}this.onObserverUpdate&&this.onObserverUpdate(arguments),this.onListenerUpdate&&this.onListenerUpdate(arguments)}triggerParallel({events:e,data:t,target:s}){pe.validateSelector(e),s&&C("JFactoryEvents.triggerParallel({target})",s).type(String,n,HTMLElement);const r=[],i=[];if(e=e.split(" "),s)for(let i of e)n(s).trigger(i,{data:t,stack:r});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:r});for(let e of r){let t=e();t instanceof Promise&&!t.$isSettled&&i.push(t)}return i.length?Promise.all(i):ue.resolve()}triggerSeries({events:e,data:t,target:s}){return pe.validateSelector(e),s&&C("JFactoryEvents.triggerSeries({target})",s).type(String,n,HTMLElement),new ue((async r=>{const i=[];if(e=e.split(" "),s)for(let r of e)n(s).trigger(r,{data:t,stack:i});else for(let s of e)this.registry.triggerHandler(s,{data:t,stack:i});for(let e of i){let t=e();t instanceof Promise&&!t.$isSettled&&await t}r()}))}}class de extends pe{constructor(e){super(),Object.defineProperties(this,{parent:{value:e},affiliateRules:{value:(new B).compose()}}),this.affiliateAddRule(de.rule_namespace)}affiliate(e="",t="",s){let r=new me(e);for(let e of r.events)this.affiliateRules(e,t,s);return r.toString()}affiliateAddRule(e){this.affiliateRules.composer.last(e)}static rule_namespace(e,t,s){s=s.split(".");for(let e of s)e&&t.addNamespace(e)}on(e,t,s,r,i){switch(arguments.length){case 2:[r,t]=[t];break;case 3:"function"==typeof arguments[2]?[r,s]=[s]:[r,i,t,s]=[t,s];break;case 4:"object"==typeof arguments[3]&&([i,r,s]=[r,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,i),void 0===t?super.on({events:e,handler:r}):super.on({events:e,target:t,selector:s,handler:r})}off(e,t,s,r,i){const a=arguments.length;switch(a){case 1:"object"==typeof arguments[0]&&([i,e]=[e]);break;case 2:"function"==typeof arguments[1]?[r,t]=[t]:h(arguments[1])&&([i,t]=[t]);break;case 3:"function"==typeof arguments[2]?[r,s]=[s]:"function"==typeof arguments[1]&&([r,i,t,s]=[t,s]);break;case 4:"object"==typeof arguments[3]&&([i,r,s]=[r,s])}e=this.affiliate(e,this.parent.$.about.fingerprint,i),a<2?super.off({events:e}):t?super.off({events:e,target:t,selector:s,handler:r}):super.off({events:e,handler:r})}trigger(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerSeries({events:e,target:t,data:s}):super.triggerSeries({events:e,data:s})}triggerParallel(e,t,s){switch(arguments.length){case 2:"object"!=typeof t||t.jquery||([s,t]=[t])}return t?super.triggerParallel({events:e,target:t,data:s}):super.triggerParallel({events:e,data:s})}getDomListeners(e){let t=new Map;for(let s of n("*")){let r=n._data(s,"events");if(r)for(let i of Object.values(r))for(let r of i){let i;if(new $e(r.namespace).hasNamespace(e)){(i=t.get(s))||t.set(s,i={}),(i[r.type]||(i[r.type]=[])).push({selector:r.selector||null,handler:r.handler,namespace:r.namespace})}}}return t}getObservers(){let e=new Map,t=this.registry._events;if(!t){let e=Object.values(this.registry)[0],s=Object.getOwnPropertyNames(e).find((e=>0===e.indexOf("jQuery")));e&&s&&(t=this.registry._events=e[s].events)}if(t)for(let[s,r]of Object.entries(t)){let t=e.get(s);t||(t=[],e.set(s,t));for(let e of r)t.push({handler:e.handler.originalHandler,namespace:e.namespace})}return e}}class me{constructor(e){pe.validateSelector(e),this.events=e.split(" ").map((e=>new $e(e)))}toString(){let e=[];for(let t of this.events)e.push(t.toString());return e.join(" ")}}class $e{constructor(e){let[t,...s]=e.split(".");this.event=t,this.namespace=new Set(s)}hasNamespace(e){Array.isArray(e)||(e=[e]);for(let t of e){if(!/^[\w:]+$/.test(t))throw new w({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:t});if(t&&this.namespace.has(t))return t}return!1}addNamespace(e){if(!/^[\w:]+$/.test(e))throw new w({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.add(e)}deleteNamespace(e){if(!/^[\w:]+$/.test(e))throw new w({target:"namespace",reason:"must be alphanumeric, underscore and colon characters",given:e});this.namespace.delete(e)}toString(){return this.namespace.size?this.event+"."+Array.from(this.namespace.values()).join("."):this.event}}pe.validateSelector=function(e){C("JFactoryEvents.validateSelector(selector)",e).notUndefined().validSpaces();for(let[t,s]of e.split(" ").map((e=>e.split("."))).map((e=>[e.shift(),e.join(".")])))t&&pe.validateEvent(t),s&&pe.validateNamespace(s);return!0},pe.validateEvent=function(e){if(C("JFactoryEvents.validateEvent(event)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:]+$/.test(e))throw new w({target:"JFactoryEvents.validateEvent(event)",reason:"must be alphanumeric, underscore and colon characters",given:e});return!0},pe.validateNamespace=function(e){if(C("JFactoryEvents.validateNamespace(namespace)",e).notUndefined().notEmptyString().validSpaces(),!/^[\w:.]+$/.test(e))throw new w({target:"JFactoryEvents.validateNamespace(namespace)",reason:"must be alphanumeric, underscore, dot and colon characters",given:e});return!0};class fe extends le{constructor(e,t,s={}){if("function"==typeof e)super(e);else{"string"==typeof e&&([e,t,s]=[{},arguments[0],arguments[1]]);let r=new Request(t,s);super(e,((i,a)=>{let n=fetch(r).then((e=>{if(this.$chain.fetchResponse=e,!e.ok)throw Error(e.status+":"+e.statusText);return e}));s.$typeText?n=n.then((e=>e.text())).then((e=>this.$chain.responseText=e)):s.$typeJSON&&(n=n.then((e=>e.json())).then((e=>this.$chain.responseJSON=e))),n=n.catch((i=>{throw new N({reason:i.message||i,target:this.$chain.fetchResponse&&this.$chain.fetchResponse.url||t,owner:this,fetchOptions:s,fetchRequest:r,fetchResponse:this.$chain.fetchResponse||null},e.traceSource)})),n.then(i,a)})),this.$chain.fetchOptions=s,this.$chain.fetchRequest=r;let i=s.abortController||new AbortController;s.signal=i.signal,this.$chain.fetchAbortController=i}}$chainAbort(e="request aborted"){return super.$chainAbort(e),this.$chain.fetchAbortController.abort(),this}}const ge=Symbol();class ve{constructor(e){e&&C("JFactoryLogger(options)",e).properties(Object.getOwnPropertyNames(ve.DEFAULT_CONFIG)),u(this,e,ve.DEFAULT_CONFIG),this.condition=H(ve.DEFAULT_CONDITION),this.installAccessor("log"),this.installAccessor("warn"),this.installAccessor("error")}get enabled(){return this[ge]&&(!this.parentLogger||this.parentLogger.enabled)}set enabled(e){e?this.enable():this.disable()}enable(){!0!==this[ge]&&(this[ge]=!0)}disable(){!1!==this[ge]&&(this[ge]=!1)}disallow(e,t=this.label){this.filters[t]||(this.filters[t]={}),this.filters[t][e]=!0}allow(e,t=this.label){this.filters[t]&&delete this.filters[t][e]}installAccessor(e,t=e,s=this){C("JFactoryLogger(nativeName)",e).equalIn(["log","warn","error"]),Object.defineProperties(s,{[t]:{get:this.accessor.bind(this,e),configurable:!0}})}accessor(e){return this[ge]&&this.condition(e)&&this.formatter[e](this)||f}createSubLogger(e){let t=new ve({enabled:this.enabled,label:this.label+"."+e,styles_css:this.styles_css,styles_cli:this.styles_cli,console:this.console,formatter:this.formatter});return t.parentLogger=this,t.condition.addCondition((()=>this.enabled)),t.filters=this.filters,t}}ve.FORMATTER_NATIVE={log:e=>e.console.log.bind(e.console,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.label+">"),error:e=>e.console.error.bind(e.console,e.label+">")},ve.FORMATTER_CLI={log:e=>e.console.log.bind(e.console,e.styles_cli.label,e.label+">"),warn:e=>e.console.warn.bind(e.console,e.styles_cli.label,e.label+">"),error:e=>e.console.error.bind(e.console,e.styles_cli.label,e.label+">")},ve.FORMATTER_BROWSER={log:e=>e.console.log.bind(e.console,"%c"+e.label+">",e.styles_css.label),warn:e=>e.console.warn.bind(e.console,"%c"+e.label+">",e.styles_css.label),error:e=>e.console.error.bind(e.console,"%c"+e.label+">",e.styles_css.label)},ve.DEFAULT_CONDITION=function(e){return C("JFactoryLogger.condition(nativeName)",e).equalIn(["log","warn","error"]),C("JFactoryLogger.enabled",this.enabled).equal(!0),!(this.filters[this.label]&&this.filters[this.label][e])},ve.DEFAULT_CONFIG={label:"",enabled:!0,parentLogger:null,formatter:s?ve.FORMATTER_CLI:ve.FORMATTER_BROWSER,console:console,filters:{},styles_cli:{label:"[1;30m%s[0m"},styles_css:{label:"color: gray"}};class be extends Date{toString(){return this.toLocaleTimeString()+", "+this.getUTCMilliseconds()+"ms ("+this.valueOf()+")"}$toDurationString(){let e=this.getUTCHours(),t=this.getUTCMinutes(),s=this.getUTCSeconds(),r=this.getUTCMilliseconds(),i=[];return e&&i.push(e+"h"),t&&i.push(t+"min"),s&&i.push(s+"s"),i.push(r+"ms"),1===i.length?i[0]:i.join(",")+" ("+this.valueOf()+")"}}class Ee extends Date{constructor(){super(),this.elapsed=null,Object.defineProperties(this,{t1:{value:null,writable:!0},t0:{value:new be}})}end(){this.t1=new be,this.elapsed=new be(this.t1-this.t0).$toDurationString()}toString(){return this.elapsed}}class ye{trait_constructor(){const e=this;class t extends Map{constructor(...e){super(...e),Object.defineProperty(this,"id_autoinc",{value:0,writable:!0})}$registerSync(t,s){let r=Object.defineProperties({},{$value:{value:s},$phaseRemove:{value:Te.getContextualRemovePhase(e)}});return this.set(t,r),r}$registerAsync(t,s,r){let i=e.$task(s,r.$chain);return r.$chain.then((()=>{i.$chainAutoComplete()})),i.$chain.then((()=>{r.$chain.isCompleted||r.$chainAbort("aborted by task")})),Object.defineProperty(r,"$phaseRemove",{value:i.$phaseRemove}),this.set(t,r),i}$id_resolve(e){if(e.indexOf("?")>=0){let t=++this.id_autoinc;e=e.replace(/\?/g,t)}return e}}const s=Object.assign(Object.create(null),{[ye.SYMBOL_PRIVATE]:Object.create(null),assign:function(e,t,s){ie.assign(this,e,t,s)},createSubMap:()=>new t});Object.defineProperty(this,"$",{value:Object.create(s)}),this.$.assign({tasks:null,requests:null},ie.descriptors.ENUMERABLE_WRITABLE)}}ye.SYMBOL_PRIVATE=Symbol("_");class Ae{trait_constructor(e){ie.assign(this.$,"about",new ne(this,e),ie.descriptors.READONLY)}}class Se{trait_constructor(){let e=Object.assign({label:this.$.about.name},r.enabled||{enabled:!1}),t=new ve(e);Object.defineProperty(this.$,"logger",{value:t}),t.installAccessor("log","$log",this),t.installAccessor("warn","$logWarn",this),t.installAccessor("error","$logErr",this)}}class Re{trait_constructor(){this.$.assign("tasks",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$task(e,t){if(C("$task(id)",e=this.$.tasks.$id_resolve(e)).typeString(),C("$task(executorOrValue)",t).notUndefined(),this.$.tasks.has(e))throw new j({target:"$task(id)",given:e});let s,r;return s="function"==typeof t?new le({name:e,owner:this},t):le.resolve({name:e,owner:this},t),s.$phaseRemove=Te.getContextualRemovePhase(this),r=new Ee,s.$taskMetrics={$dev_timing:r},s.$chain.then((()=>{r.end(),this.$.tasks.get(e)&&this.$taskRemove(e)})),this.$.tasks.set(e,s),s}$taskRemove(e,t){if(C("$taskRemove(id)",e).typeString(),t&&C("$taskRemove(reason)",t).typeString(),!this.$.tasks.has(e))throw new F({target:"$taskRemove(id)",given:e});this.$.tasks.get(e)._called,this.$.tasks.get(e)._called=!0;let s=this.$.tasks.get(e);this.$.tasks.delete(e),s.$chainAbort(t||"$taskRemove()")}$taskRemoveAll(e){C("$taskRemoveAll(removePhase)",e).equalIn(Te.PHASES);let t=this.$.tasks;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$taskRemove(s,"$taskRemoveAll("+e+")")}$taskPromiseAll(e=!1){let t=[];if(this.$.tasks.size)for(let s of this.$.tasks.values())e&&(s.$chain.chainConfig.chainAutoComplete=!0),s.$chain.isPending&&t.push(s.$chain);return t.length?Promise.all(t):ue.resolve()}}class _e{trait_constructor(){we(this,"events",{custom:new de(this),kernel:new de(this)},ie.descriptors.NONE);let e=this.$[ye.SYMBOL_PRIVATE].events.custom;Object.defineProperties(this.$,{listeners:{get:e.getDomListeners.bind(e,this.$.about.fingerprint),enumerable:!0},observers:{get:e.getObservers.bind(e),enumerable:!0}})}$on(){this.$[ye.SYMBOL_PRIVATE].events.custom.on(...arguments)}$off(){this.$[ye.SYMBOL_PRIVATE].events.custom.off(...arguments)}$trigger(){return this.$[ye.SYMBOL_PRIVATE].events.custom.trigger(...arguments)}$triggerParallel(){return this.$[ye.SYMBOL_PRIVATE].events.custom.triggerParallel(...arguments)}$notify(e,t){return this.$trigger(e,t).then((()=>this.$[ye.SYMBOL_PRIVATE].events.kernel.trigger(e,t)))}}class Oe{trait_constructor(){const e=Object.create(null),t=Object.create(null),s=this.$[ye.SYMBOL_PRIVATE].events.kernel;we(this,{states:e,stateRoutes:t},ie.descriptors.READONLY),ie.assign(this.$,"states",new Proxy(e,{set:(e,t,s)=>this.$state(t,s),get:(t,s)=>e[s]}),ie.descriptors.READONLY),s.on("beforeStateChange",((e,s)=>{let r;if(t[s.key]&&t[s.key].before&&(r=t[s.key].before(s.val)))return this.$notify(r)})),s.on("afterStateChange",((e,s)=>{let r;if(t[s.key]&&t[s.key].after&&(r=t[s.key].after(s.val)))return this.$notify(r)}))}$state(e,t,s=!0){return C("$state(key)",e).typeString(),C("$state(notify)",s).typeBoolean(),new ue((async r=>{let i,a=this.$[ye.SYMBOL_PRIVATE].states,n=a[e];e in a&&n===t||(i=s&&this.$notify("beforeStateChange",{key:e,val:t,previousVal:n}),i&&C("beforeStateChange result",i).type(ue),i&&!i.$isSettled&&(a[e]=i,await i),void 0===t?delete a[e]:a[e]=t,i=s&&this.$notify("afterStateChange",{key:e,val:t,previousVal:n}),i&&C("afterStateChange result",i).type(ue)),i?i.then(r):r()}))}}class Te{trait_constructor(){ie.assign(this.$,"service",Object.create(null),ie.descriptors.READONLY),this.$.service.phase=Te.PHASE.NONE,this.$.service.phaseQueue=le.resolve({name:"phaseQueue"},null),this.$.service.phaseTask=null,this.$.service.phaseMap={install:new Set,enable:new Set,disable:new Set,uninstall:new Set},this.$state("installed",!1,!1),this.$state("enabled",!1,!1),Pe(this,"stateRoutes",{installed:{after:e=>e?"install":"uninstall"},enabled:{after:e=>e?"enable":"disable"}},ie.descriptors.NONE);let e=this.$[ye.SYMBOL_PRIVATE].events.custom,t=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.affiliateAddRule(((e,t,s,r)=>Te.setEventNamespaceRemovePhase(this,t,r)));let s=e=>{this.$.tasks.size&&this.$taskRemoveAll(this.$.service.phase);let t=ue.resolve();return e&&(t=t.then((()=>e.call(this))).then((()=>this.$taskPromiseAll(!0)))),t.catch((e=>{e instanceof L||this.$logErr("unhandled promise rejection in "+this.$.service.phase+";",...e instanceof O?e:[e])}))};t.on("install",(()=>s(this.onInstall))),t.on("enable",(()=>s(this.onEnable))),t.on("disable",(()=>s(this.onDisable))),t.on("uninstall",(()=>s(this.onUninstall))),t.on("disable",(()=>this.$off({removal:Te.PHASE.DISABLE}))),t.on("uninstall",(()=>this.$off({removal:Te.PHASE.UNINSTALL})))}$install(e){let t;const s=new le({name:"install",config:{chainAutoComplete:!0}},(e=>t=e)).then((()=>{if(!this.$.states.installed)return this.$.service.phase=Te.PHASE.INSTALL,this.$state("installed",!0)}));return this.$.service.phaseMap.install.add(s),s.$chain.then((()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.install.delete(s),this.$.service.phase=Te.PHASE.NONE})),this.$.service.phaseQueue=this.$.service.phaseQueue.then((()=>(this.$.service.phaseTask=s,t(),s.$chain))),e?this.$enable():s}$enable(){let e;const t=new le({name:"enable",config:{chainAutoComplete:!0}},(t=>e=t)).then((()=>{if(this.$.states.installed&&!this.$.states.enabled)return this.$.service.phase=Te.PHASE.ENABLE,this.$state("enabled",!0)}));return this.$.service.phaseMap.enable.add(t),t.$chain.then((()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.enable.delete(t),this.$.service.phase=Te.PHASE.NONE})),this.$.service.phaseQueue=this.$.service.phaseQueue.then((()=>(this.$.service.phaseTask=t,e(),t.$chain))),t}$disable(){let e;const t=new le({name:"disable",config:{chainAutoComplete:!0}},(t=>e=t)).then((()=>{if(this.$.states.enabled)return this.$.service.phase=Te.PHASE.DISABLE,this.$state("enabled",!1)}));this.$.service.phaseMap.disable.add(t),t.$chain.then((()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.disable.delete(t),this.$.service.phase=Te.PHASE.NONE}));for(let[e,t]of this.$.service.phaseMap.enable.entries())t===this.$.service.phaseTask&&Te.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.enable.delete(e);return this.$.service.phaseQueue=this.$.service.phaseQueue.then((()=>(this.$.service.phaseTask=t,e(),t.$chain))),t}$uninstall(){let e;const t=new le({name:"uninstall",config:{chainAutoComplete:!0}},(t=>e=t)).then((()=>{if(this.$.states.installed)return this.$.service.phase=Te.PHASE.UNINSTALL,this.$state("installed",!1)}));this.$.service.phaseMap.uninstall.add(t),t.$chain.then((()=>{this.$.service.phaseTask=null,this.$.service.phaseMap.uninstall.delete(t),this.$.service.phase=Te.PHASE.NONE}));for(let[e,t]of this.$.service.phaseMap.install.entries())t===this.$.service.phaseTask&&Te.phaseKill(this),t.$chainAbort(),this.$.service.phaseMap.install.delete(e);return this.$disable(),this.$.service.phaseQueue=this.$.service.phaseQueue.then((()=>(this.$.service.phaseTask=t,e(),t.$chain))),t}static phaseKill(e){e.$.tasks.size&&e.$taskRemoveAll(Te.getContextualRemovePhase(e)),e.$.service.phase=Te.PHASE.NONE}static getContextualRemovePhase(e){return Te.PHASE_REVERT[e.$.service.phase]}static setEventNamespaceRemovePhase(e,t,s){let r=t.hasNamespace(Te.PHASES),i=s&&s.removal;i||(i=Te.getContextualRemovePhase(e)),"uninstall"===t.event&&i===Te.PHASE.DISABLE&&(i=Te.PHASE.UNINSTALL),r!==i&&(t.deleteNamespace(r),t.addNamespace(i)),t.addNamespace(i)}}function we(e,t,s,r){ie.assign(e.$[ye.SYMBOL_PRIVATE],t,s,r)}function Pe(e,t,s,r){ie.assign(e.$[ye.SYMBOL_PRIVATE][t],s,r)}Te.PHASE={NONE:"PHASE_NONE",INSTALL:"PHASE_INSTALL",ENABLE:"PHASE_ENABLE",DISABLE:"PHASE_DISABLE",UNINSTALL:"PHASE_UNINSTALL"},Te.PHASE_REVERT={[Te.PHASE.INSTALL]:Te.PHASE.UNINSTALL,[Te.PHASE.UNINSTALL]:Te.PHASE.INSTALL,[Te.PHASE.DISABLE]:Te.PHASE.ENABLE,[Te.PHASE.ENABLE]:Te.PHASE.DISABLE,[Te.PHASE.NONE]:Te.PHASE.DISABLE},Te.PHASES=Object.values(Te.PHASE),G.PHASE=ie.disinherit(Te.PHASE),G.TraitCore=ye,G.TraitAbout=Ae,G.TraitLog=Se,G.TraitEvents=_e,G.TraitState=Oe,G.TraitService=Te,G.TraitTask=Re;class Le{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$fetchRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$fetchRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("requests",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$fetch(e,t,s={}){if(C("$fetch(id)",e=this.$.requests.$id_resolve(e)).typeString(),C("$fetch(url)",t).typeString(),C("$fetch(fetchOptions)",s).typePlainObject(),this.$.requests.has(e))throw new j({target:"$fetch(id)",given:e});let r=new fe({name:e,traceSource:_.tracer.captureTraceSource("$fetch"),config:{chainAutoComplete:!0}},t,s);return this.$.requests.$registerAsync(e,'$fetch("'+e+'")',r),r.$chain.then((()=>{this.$.requests.has(e)&&this.$fetchRemove(e)})),r}$fetchText(e,t,s={}){return this.$fetch(e,t,{...s,$typeText:!0})}$fetchJSON(e,t,s={}){return this.$fetch(e,t,{...s,$typeJSON:!0})}$fetchRemove(e,t){if(C("$fetchRemove(id)",e).typeString(),t&&C("$fetchRemove(reason)",t).typeString(),!this.$.requests.has(e))throw new F({target:"$fetchRemove(id)",given:e});this.$.requests.get(e)._debug_remove_called,this.$.requests.get(e)._debug_remove_called=!0;let s=this.$.requests.get(e);this.$.requests.delete(e),s.$chainAbort(t||"$fetchRemove()")}$fetchRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.requests;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$fetchRemove(s,"$fetchRemoveAll("+e+")")}}class xe{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$timeoutRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$timeoutRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("timeouts",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$timeout(e,t,s=null,...r){if(C("id",e=this.$.timeouts.$id_resolve(e)).typeString(),C("delay",t).typeNumber(),C("handler",s).type(Function,null),this.$.timeouts.has(e))throw new j({target:"$timeout(id)",given:e});let i,a=new le({name:e,traceSource:_.tracer.captureTraceSource("$timeout"),config:{chainAutoComplete:!0}},(e=>{i=setTimeout((()=>{a.$isExpired||e(s?s(...r):void 0)}),t)}));return a.$chain.data.timer=i,this.$.timeouts.$registerAsync(e,'$timeout("'+e+'")',a),a.$chain.then((()=>{this.$.timeouts.has(e)&&this.$timeoutRemove(e)})),a}$timeoutRemove(e,t){if(C("$timeoutRemove(id)",e).typeString(),t&&C("$timeoutRemove(reason)",t).typeString(),!this.$.timeouts.has(e))throw new F({target:"$timeoutRemove(id)",given:e});this.$.timeouts.get(e)._debug_remove_called,this.$.timeouts.get(e)._debug_remove_called=!0;let s=this.$.timeouts.get(e);clearTimeout(s.$chain.data.timer),this.$.timeouts.delete(e),s.$chainAbort(t||"$timeoutRemove()")}$timeoutRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.timeouts;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$timeoutRemove(s,"$timeoutRemoveAll()")}}class Ne{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$intervalRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$intervalRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("timeints",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$interval(e,t,s,...r){if(C("id",e=this.$.timeints.$id_resolve(e)).typeString(),C("handler",s).typeFunction(),C("delay",t).typeNumber(),this.$.timeints.has(e))throw new j({target:"$interval(id)",given:e});let i=setInterval(s,t,...r);this.$.timeints.$registerSync(e,i)}$intervalRemove(e){if(C("$intervalRemove(id)",e).typeString(),!this.$.timeints.has(e))throw new F({target:"$intervalRemove(id)",given:e});this.$.timeints.get(e)._debug_remove_called,this.$.timeints.get(e)._debug_remove_called=!0,clearInterval(this.$.timeints.get(e).$value),this.$.timeints.delete(e)}$intervalRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.timeints;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$intervalRemove(s)}}te(Z);class je{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$mutationRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$mutationRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("mutations",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$mutation(e,t,s,r){if(C("id",e=this.$.mutations.$id_resolve(e)).typeString(),C("parent",t).type(HTMLElement,Document),C("config",s).typePlainObject(),C("handler",r).typeFunction(),this.$.mutations.has(e))throw new j({target:"$mutation(id)",given:e});let i=new MutationObserver(r);i.observe(t,s),this.$.mutations.$registerSync(e,i)}$mutationRemove(e,t){if(C("$mutationRemove(id)",e).typeString(),t&&C("$mutationRemove(reason)",t).typeString(),!this.$.mutations.has(e))throw new F({target:"$mutationRemove(id)",given:e});this.$.mutations.get(e)._debug_remove_called,this.$.mutations.get(e)._debug_remove_called=!0,this.$.mutations.get(e).$value.disconnect(),this.$.mutations.delete(e)}$mutationRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.mutations;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$mutationRemove(s)}}class Fe{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$domRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$domRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("dom",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$dom(e,t,s){let r;if(C("id",e=this.$.dom.$id_resolve(e)).typeString(),C("jQueryArgument",t).type(String,Object),s&&C("appendTo",s).type(String,Object),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.dom.has(e))throw new j({target:"$dom(id)",given:e});let i=n(t);if("TEMPLATE"===i[0].tagName&&(i=n(n(i[0]).html())),r){if(i[0].nodeType!==Node.ELEMENT_NODE)throw new w({target:"$dom(#id)",given:i,reason:"cannot set the dom id: the first element of the selection isn't an ELEMENT_NODE"});i[0].id=e}return s&&i.appendTo(s),this.$.dom.$registerSync(e,i).$value}$domFetch(e,t,s,r){let i;if(s&&!h(s)&&([s,r]=[{},s]),C("id",e=this.$.dom.$id_resolve(e)).typeString(),C("url",t).typeString(),r&&C("appendTo",r).type(String,Object),s&&C("fetchOptions",s).type(Object),"#"===e[0]&&(e=e.substring(1),i=!0),this.$.dom.has(e))throw new j({target:"$domFetch(id)",given:e});let a=this.$fetchText('$domFetch("'+e+'")',t,s).then((t=>{let s=n(t);return i&&(s[0].id=e),r&&s.appendTo(r),s}));return this.$.dom.$registerAsync(e,'$domFetch("'+e+'")',a),a}$domRemove(e,t){if(C("$domRemove(id)",e).typeString(),t&&C("$domRemove(reason)",t).typeString(),!this.$.dom.has(e))throw new F({target:"$domRemove(id)",given:e});this.$.dom.get(e)._debug_remove_called,this.$.dom.get(e)._debug_remove_called=!0;let s=this.$.dom.get(e),r=s.$value;r instanceof n&&r.remove(),s instanceof fe&&s.$chainAbort(t||"$domRemove()"),this.$.dom.delete(e)}$domRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.dom;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$domRemove(s)}}class Ce{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$cssRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$cssRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("css",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$css(e,t){let s;if(C("id",e=this.$.css.$id_resolve(e)).typeString(),C("css",t).typeString(),"#"===e[0]&&(e=e.substring(1),s=!0),this.$.css.has(e))throw new j({target:"$css(id)",given:e});return this.$.css.$registerSync(e,n("<style>").attr(s?{id:e}:{}).html(t).appendTo("head")).$value}$cssFetch(e,t,s="head"){let r;if(C("id",e=this.$.css.$id_resolve(e)).typeString(),C("url",t).typeString(),"#"===e[0]&&(e=e.substring(1),r=!0),this.$.css.has(e))throw new j({target:"$cssFetch(id)",given:e});t=b(t);let i=n(s).find(`link[href="${t}"]`)[0];if(i){i.dataset.usage=parseInt(i.dataset.usage)+1;let t=n(i),s=le.resolve({name:e,config:{chainAutoComplete:!0},traceSource:_.tracer.captureTraceSource("$cssFetch")},t);return s.$chain.data.dom=t,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',s),s}{let i,a=new le({name:e,config:{chainAutoComplete:!0},traceSource:_.tracer.captureTraceSource("$cssFetch")},(a=>i=n("<link>",{id:r?e:"",rel:"stylesheet",type:"text/css","data-usage":"1"}).appendTo(s).on("load",(()=>a(i))).attr("href",t)));return a.$chain.data.dom=i,this.$.css.$registerAsync(e,'$cssFetch("'+e+'")',a),a}}$cssRemove(e,t){if(C("$cssRemove(id)",e).typeString(),t&&C("$cssRemove(reason)",t).typeString(),!this.$.css.has(e))throw new F({target:"$cssRemove(id)",given:e});this.$.css.get(e)._debug_remove_called,this.$.css.get(e)._debug_remove_called=!0;let s=this.$.css.get(e),r=s.$chain&&s.$chain.data.dom||s.$value;if(r instanceof n){let e=parseInt(r[0].dataset.usage)-1;e?r[0].dataset.usage=e:r.remove()}s instanceof le&&s.$chainAbort(t||"$cssRemove()"),this.$.css.delete(e)}$cssRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.css;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$cssRemove(s)}}class Ie{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$vueRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$vueRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("vue",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$vue(e,t){if(C("id",e=this.$.vue.$id_resolve(e)).typeString(),C("vue",t).type(Object),this.$.vue.has(e))throw new j({target:"$vue(id)",given:e});return this.$.vue.$registerSync(e,t).$value}$vueRemove(e){if(C("$vueRemove(id)",e).typeString(),!this.$.vue.has(e))throw new F({target:"$vueRemove(id)",given:e});this.$.vue.get(e)._debug_remove_called,this.$.vue.get(e)._debug_remove_called=!0;let t=this.$.vue.get(e);n(t.$value.$el).remove(),t.$value.$destroy(),this.$.vue.delete(e)}$vueRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.vue;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$vueRemove(s)}}class Me{trait_constructor(){const e=this.$[ye.SYMBOL_PRIVATE].events.kernel;e.on("disable",(()=>this.$reactRemoveAll(Te.PHASE.DISABLE))),e.on("uninstall",(()=>this.$reactRemoveAll(Te.PHASE.UNINSTALL))),this.$.assign("react",this.$.createSubMap(),ie.descriptors.ENUMERABLE)}$react(e,t,s,...r){if(e=this.$.react.$id_resolve(e),!G.ReactDOM)throw new Error("jFactory.ReactDOM=ReactDOM must be set before using the React Trait");if(C("id",e).typeString(),C("container",t).type(HTMLElement,n),this.$.react.has(e))throw new j({target:"$react(id)",given:e});t=n(t)[0];let i=G.ReactDOM.render(s,t,...r);return this.$.react.$registerSync(e,{container:t,view:i}).$value.view}$reactRemove(e){if(C("$reactRemove(id)",e).typeString(),!this.$.react.has(e))throw new F({target:"$reactRemove(id)",given:e});this.$.react.get(e)._debug_remove_called,this.$.react.get(e)._debug_remove_called=!0;let t=this.$.react.get(e).$value.container;t&&(G.ReactDOM.unmountComponentAtNode(t)||this.$logWarn("unmountComponentAtNode failed to unmount",t),n(t).remove()),this.$.react.delete(e)}$reactRemoveAll(e){C("removePhase",e).equalIn(Te.PHASES);let t=this.$.react;if(t.size)for(const[s,r]of t)r.$phaseRemove===e&&this.$reactRemove(s)}}G.TraitFetch=Le,G.TraitTimeout=xe,G.TraitInterval=Ne,G.TraitMutation=je,G.TraitDOM=Fe,G.TraitCSS=Ce,G.TraitLibVue=Ie,G.TraitLibReact=Me,"undefined"!=typeof jFactoryOverride&&jFactoryOverride||re(),exports.JFACTORY_CFG_JFactoryError=i,exports.JFACTORY_CFG_JFactoryTrace=a,exports.JFACTORY_CFG_LOG=r,exports.JFACTORY_CLI=s,exports.JFACTORY_COMPAT_AbortController=X,exports.JFACTORY_COMPAT_MutationObserver=Z,exports.JFACTORY_COMPAT_Request=K,exports.JFACTORY_COMPAT_fetch=Q,exports.JFACTORY_COMPAT_globalThis=z,exports.JFACTORY_DEBUG=false,exports.JFACTORY_DEV=!0,exports.JFACTORY_ERR_INVALID_CALL=P,exports.JFACTORY_ERR_INVALID_VALUE=w,exports.JFACTORY_ERR_KEY_DUPLICATED=j,exports.JFACTORY_ERR_KEY_MISSING=F,exports.JFACTORY_ERR_PROMISE_EXPIRED=L,exports.JFACTORY_ERR_REQUEST_ERROR=N,exports.JFactoryAbout=ne,exports.JFactoryComponent=W,exports.JFactoryCoreObject=V,exports.JFactoryError=O,exports.JFactoryEventSelector=$e,exports.JFactoryEventSelectorParser=me,exports.JFactoryEvents=pe,exports.JFactoryEventsManager=de,exports.JFactoryExpect=C,exports.JFactoryFetch=fe,exports.JFactoryFunctionComposer=B,exports.JFactoryFunctionConditional=D,exports.JFactoryFunctionExpirable=U,exports.JFactoryFunctionWrappable=Y,exports.JFactoryLogger=ve,exports.JFactoryObject=ie,exports.JFactoryPromise=le,exports.JFactoryPromiseChain=ce,exports.JFactoryPromisePath=he,exports.JFactoryPromiseSync=ue,exports.JFactoryTime=be,exports.JFactoryTimeTrace=Ee,exports.JFactoryTrace_LIB_STACKTRACE=R,exports.JFactoryTrace_NOFILTER=S,exports.JFactoryTraits=k,exports.NOOP=f,exports.TraitAbout=Ae,exports.TraitCSS=Ce,exports.TraitCore=ye,exports.TraitDOM=Fe,exports.TraitEvents=_e,exports.TraitFetch=Le,exports.TraitInterval=Ne,exports.TraitLibReact=Me,exports.TraitLibVue=Ie,exports.TraitLog=Se,exports.TraitMutation=je,exports.TraitService=Te,exports.TraitState=Oe,exports.TraitTask=Re,exports.TraitTimeout=xe,exports.assignPrivate=we,exports.assignPrivateMember=Pe,exports.helper_camelCase=$,exports.helper_defaultsDeep=u,exports.helper_get=d,exports.helper_isNative=o,exports.helper_isNumber=c,exports.helper_isPlainObject=h,exports.helper_isString=l,exports.helper_lowerFirst=p,exports.helper_setFunctionName=g,exports.helper_template=m,exports.helper_url_abs=b,exports.jFactory=G,exports.jFactoryBootstrap=re,exports.jFactoryCompat_require=te,exports.jFactoryCompat_run=se,exports.jFactoryFunctionConditional=H,exports.jFactoryFunctionExpirable=function(e){return new U(e).compose()},exports.jFactoryFunctionWrappable=J,exports.jFactoryLoader_init=y,exports.jFactoryLoader_onInit=A,exports.jFactoryTrace=_,exports.jFactoryTraits=q,exports.jQuery=n;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
